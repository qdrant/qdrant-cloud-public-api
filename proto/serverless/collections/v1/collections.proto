syntax = "proto3";

package serverless.collections.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "serverless/collections/v1/collection_config.proto";

// Collection represents a collection with its associated API keys
message Collection {
  // Unique identifier for the collection
  string id = 1;
  // Name of the collection
  string name = 2;
  // When the collection was created
  google.protobuf.Timestamp created_at = 3;
  // Configuration parameters as string key-value pairs
  map<string, google.protobuf.Value> configuration = 6;
  // URL to access the hosting cluster
  string cluster_url = 8;
}

// CollectionResponse provides details about a created collection
message CreateCollectionResponse {
  // Unique identifier for the collection
  string id = 1;
  // Name of the collection
  string name = 2;
  // URL to access the collection API
  string url = 3;
}

// CreateCollectionRequest defines parameters for creating a new collection
message CreateCollectionRequest {
  // Name for the new collection
  string collection_name = 1;
  // Configuration settings for the collection
  CollectionConfiguration configuration = 2;
}

// ListCollectionsRequest is an empty request to list collections
message ListCollectionsRequest {}

// ListCollectionsResponse contains the list of collections
message ListCollectionsResponse {
  // List of collections with their details
  repeated Collection collections = 1;
}

// DeleteCollectionRequest identifies the collection to delete
message DeleteCollectionRequest {
  // ID of the collection to delete
  string collection_id = 1;
}

// DeleteCollectionResponse is an empty response for deletion confirmation
message DeleteCollectionResponse {
  // Status of the delete operation
  optional string status = 1;
}

// Upgrade limits of the specified collection
message UpgradeCollectionRequest {
  // ID of the collection to upgrade
  string collection_id = 1;
}

// Response for upgrading collection
message UpgradeCollectionResponse {
  // Status of the upgrade operation
  optional string status = 1;
}

// CollectionService provides operations for managing collections
service CollectionService {
  // ListCollections returns all collections for the authenticated user
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse);
  // CreateCollection creates a new collection with the specified configuration
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse);
  // DeleteCollection removes a collection by ID
  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse);
  // Upgrade collection: If current user have paid account, this API will lift the limit of the collection
  rpc UpgradeCollection(UpgradeCollectionRequest) returns (UpgradeCollectionResponse);
}
