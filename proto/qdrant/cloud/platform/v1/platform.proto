syntax = "proto3";

package qdrant.cloud.platform.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "qdrant/cloud/common/v1/common.proto";

// PlatformService is the API used to query for cloud provider & regional information.
service PlatformService {
  // buf:lint:ignore QDRANT_CLOUD_METHOD_OPTIONS
  // Fetch all available cloud providers globally (not account-specific).
  rpc ListGlobalCloudProviders(ListGlobalCloudProvidersRequest) returns (ListGlobalCloudProvidersResponse) {
    // authentication not required
    option (qdrant.cloud.common.v1.requires_authentication) = false;
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/platform/v1/cloud-providers"};
  }
  // Fetch all cloud providers in the account identified by the given ID.
  // Required permissions:
  // - None (authenticated only)
  rpc ListCloudProviders(ListCloudProvidersRequest) returns (ListCloudProvidersResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/platform/v1/accounts/{account_id}/cloud-providers"};
  }
  // buf:lint:ignore QDRANT_CLOUD_METHOD_OPTIONS
  // Fetch all cloud provider regions (not account-specific) identified by cloud provider ID.
  rpc ListGlobalCloudProviderRegions(ListGlobalCloudProviderRegionsRequest) returns (ListGlobalCloudProviderRegionsResponse) {
    // authentication not required
    option (qdrant.cloud.common.v1.requires_authentication) = false;
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/platform/v1/cloud-providers/{cloud_provider_id}/regions"};
  }
  // Fetch all cloud provider regions in the account identified by the given ID and cloud provider.
  // Required permissions:
  // - None (authenticated only)
  rpc ListCloudProviderRegions(ListCloudProviderRegionsRequest) returns (ListCloudProviderRegionsResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/platform/v1/accounts/{account_id}/cloud-providers/{cloud_provider_id}/regions"};
  }
}

// ListCloudProvidersRequest is the request for the ListCloudProviders function.
message ListCloudProvidersRequest {
  // The identifier of the account (in Guid format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// ListCloudProvidersResponse is the response from the ListCloudProviders function.
message ListCloudProvidersResponse {
  // The cloud providers
  repeated CloudProvider items = 1;
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_REQUEST_FIELDS
// ListGlobalCloudProvidersRequest is the request from the ListGlobalCloudProviders function.
message ListGlobalCloudProvidersRequest {}

// ListGlobalCloudProvidersResponse is the response from the ListGlobalCloudProviders function.
message ListGlobalCloudProvidersResponse {
  // The cloud providers
  repeated CloudProvider items = 1;
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_REQUEST_FIELDS
// ListGlobalCloudProviderRegionsRequest is the request for the ListGlobalCloudProviderRegions function.
message ListGlobalCloudProviderRegionsRequest {
  // The identifier for the cloud provider. One of the providers from response of the ListCloudProviders function.
  // This is a required field.
  string cloud_provider_id = 1 [(buf.validate.field).string = {min_len: 3}];
}

// ListGlobalCloudProviderRegionsResponse is the response from the ListGlobalCloudProviderRegions function.
message ListGlobalCloudProviderRegionsResponse {
  // The cloud provider regions.
  repeated CloudProviderRegion items = 1;
}

// ListCloudProviderRegionsRequest is the request for the ListCloudProviderRegions function.
message ListCloudProviderRegionsRequest {
  // The identifier of the account (in Guid format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier for the cloud provider. One of the providers from response of the ListCloudProviders function.
  // This is a required field.
  string cloud_provider_id = 2 [(buf.validate.field).string = {min_len: 3}];
}

// ListCloudProviderRegionsResponse is the response from the ListCloudProviderRegions function.
message ListCloudProviderRegionsResponse {
  // The cloud provider regions.
  repeated CloudProviderRegion items = 1;
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_ENTITY_FIELDS
// CloudProvider represents a cloud provider identifier and name.
message CloudProvider {
  // The identifier for the cloud provider.
  // e.g. "aws", "gcp", "azure", "hybrid".
  string id = 1;
  // The human-readable name of the cloud provider.
  // e.g. "Amazon Web Services", "Google Cloud", "Microsoft Azure", "Hybrid Cloud".
  string name = 2;
  // Whether the cloud provider is part of the free-tier offering.
  bool free_tier = 3;
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_ENTITY_FIELDS
// CloudProvider represents a cloud provider region.
message CloudProviderRegion {
  // The identifier for the cloud provider region.
  // e.g. "us-west-1", "europe-west1", "eastus", "{UUID in case of hybrid cloud}".
  string id = 1;
  // The human-readable name of the cloud provider region.
  // e.g. "Frankfurt", "Tokyo", etc.
  string name = 2;
  // Whether the cloud region is part of the free-tier offering.
  bool free_tier = 3;
  // Indicates whether the cloud region is available or the hybrid cloud region is ready for clusters.
  bool available = 4;
  // The identifier for the cloud provider.
  // e.g. "aws", "gcp", "azure", "openshift", "linode", "unknown".
  string provider = 5;
  // ISO 3166-1 alpha-2 country codes for different countries to display for each region.
  optional string country_iso_code = 6;
  // Geographic location grouping of the region.
  // e.g. "Europe", "Asia", "North America", etc.
  optional string geographical_sub_region = 7;
}
