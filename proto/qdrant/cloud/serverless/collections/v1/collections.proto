syntax = "proto3";

package qdrant.cloud.serverless.collections.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "qdrant/cloud/common/v1/common.proto";
import "qdrant/cloud/serverless/collections/v1/collection_config.proto";

// CollectionService provides operations for managing collections
service CollectionService {
  // ListCollections returns all collections for the authenticated user
  // Required Permissions:
  // - write:serverless
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "write:serverless";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/serverless/v1/accounts/{account_id}/collections"};
  }
  // CreateCollection creates a new collection with the specified configuration
  // Required Permissions:
  // - write:serverless
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "write:serverless";
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/serverless/v1/accounts/{account_id}/collections"
      body: "*"
    };
  }
  // Upgrade collection: If current user have paid account, this API will lift the limit of the collection
  // Required Permissions:
  // - write:serverless
  rpc UpgradeCollection(UpgradeCollectionRequest) returns (UpgradeCollectionResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "write:serverless";
    // gRPC Gateway REST call
    option (google.api.http) = {
      put: "/api/serverless/v1/accounts/{account_id}/collections/{collection_id}"
      body: "*"
    };
  }
  // DeleteCollection removes a collection by ID
  // Required Permissions:
  // - write:serverless
  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "write:serverless";
    // gRPC Gateway REST call
    option (google.api.http) = {delete: "/api/serverless/v1/accounts/{account_id}/collections/{collection_id}"};
  }
}

// ListCollectionsRequest is an empty request to list collections
message ListCollectionsRequest {
  // The identifier of the account (in Guid format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// ListCollectionsResponse contains the list of collections
message ListCollectionsResponse {
  // List of collections with their details
  repeated Collection collections = 1;
}

// CollectionResponse provides details about a created collection
message CreateCollectionResponse {
  // Collection represents a vector search collection in the Qdrant serverless environment
  Collection collection = 1;
}

// CreateCollectionRequest defines parameters for creating a new collection
message CreateCollectionRequest {
  // The identifier of the account (in Guid format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];

  // Name for the new collection
  // This is a read-only field and will be available after a collection is created.
  string collection_name = 2 [(buf.validate.field).string = {
    max_len: 64
    min_len: 4
    pattern: "^[a-zA-Z0-9-_]+$"
  }];

  // Configuration settings for the collection
  CollectionConfiguration configuration = 3;

  // Cloud provider where the cluster is hosted.
  // This is a required field (one of the following: aws, gcp, azure, hybrid).
  // After creation, this field cannot be changed.
  // If not specified - use default provider
  optional string cloud_provider = 4 [(buf.validate.field).string = {
    in: [
      "aws",
      "gcp",
      "azure",
      "hybrid"
    ]
  }];
  // Optional region to host the collection in.
  // If not specified - use default region.
  optional string cloud_region = 5;
}

// Upgrade limits of the specified collection
message UpgradeCollectionRequest {
  // The identifier of the account (in Guid format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];

  // ID of the collection to upgrade
  string collection_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// Response for upgrading collection
message UpgradeCollectionResponse {
  // Empty
}

// DeleteCollectionRequest identifies the collection to delete
message DeleteCollectionRequest {
  // The identifier of the account (in Guid format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // ID of the collection to delete
  string collection_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// DeleteCollectionResponse is an empty response for deletion confirmation
message DeleteCollectionResponse {
  // Empty
}

// Collection represents a vector search collection in the Qdrant serverless environment
message Collection {
  // Unique identifier for the collection
  string id = 1 [(buf.validate.field).string = {uuid: true}];
  option (buf.validate.message).cel = {
    id: "collection.id"
    message: "value must be a valid UUID"
    expression: "this.id.matches('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')"
  };
  // Name of the collection
  string name = 2;
  // When the collection was created
  google.protobuf.Timestamp created_at = 3;
  // Configuration parameters
  CollectionConfiguration configuration = 4;

  // Cloud provider where the cluster is hosted.
  // This is a required field (one of the following: aws, gcp, azure).
  // After creation, this field cannot be changed.
  // If not specified - use default provider
  optional string cloud_provider = 5 [(buf.validate.field).string = {
    in: [
      "aws",
      "gcp",
      "azure"
    ]
  }];
  // In which region the collection is hosted
  // Example: us-west1
  optional string cloud_region = 6;
  // URL to access the hosting cluster
  // Status of the collection
  CollectionState state = 8;
}

// CollectionState represents the operational state of a collection in the Qdrant serverless environment.
// It provides status information, error details (if any), and endpoint access information.
message CollectionState {
  // The current operational status of the collection.
  // - ready: Collection is fully operational and available for use
  // - processing: Collection is being created, updated, or undergoing maintenance
  // - disabled: Collection has been temporarily or permanently disabled
  string phase = 1 [(buf.validate.field).string = {
    in: [
      "ready",
      "processing",
      "disabled"
    ]
  }];

  // Descriptive message explaining any errors or issues with the collection.
  // Empty when the collection is operating normally.
  string reason = 2;

  // The URL endpoint where clients can connect to and interact with the collection.
  // May be empty if the collection is not yet ready or is disabled.
  optional string endpoint = 7;
}
