syntax = "proto3";

package qdrant.cloud.serverless.collections.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "qdrant/cloud/common/v1/common.proto";

// Service for managing API keys for a serverless collection
service CollectionKeysService {
  // ListCollectionKeys returns all API keys for a collection
  // Required Permissions:
  // - read:serverless_api_keys
  rpc ListCollectionKeys(ListCollectionKeysRequest) returns (ListCollectionKeysResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "read:serverless_api_keys";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/serverless/v1/accounts/{account_id}/collections/{collection_id}/keys"};
  }
  // CreateCollectionKey creates a new API key for a collection
  // Required Permissions:
  // - write:serverless_api_keys
  rpc CreateCollectionKey(CreateCollectionKeyRequest) returns (CreateCollectionKeyResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "write:serverless_api_keys";
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/serverless/v1/accounts/{account_id}/collections/{collection_id}/keys"
      body: "*"
    };
  }
  // DeleteCollectionKey removes an API key from a collection
  // Required Permissions:
  // - write:serverless_api_keys
  rpc DeleteCollectionKey(DeleteCollectionKeyRequest) returns (DeleteCollectionKeyResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "write:serverless_api_keys";
    // gRPC Gateway REST call
    option (google.api.http) = {delete: "/api/serverless/v1/accounts/{account_id}/collections/{collection_id}/keys/{key_id}"};
  }
}

// Request all api-keys associated with a collection
message ListCollectionKeysRequest {
  // The identifier of the account (in Guid format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];

  // Collection the keys belong to
  string collection_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// Response containing all api-keys associated with a collection
message ListCollectionKeysResponse {
  // List of API keys for the collection
  repeated ApiKey keys = 1;
}

// CreateCollectionKeyRequest defines parameters for creating a new API key
message CreateCollectionKeyRequest {
  // The identifier of the account (in Guid format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];

  // Collection the key will access
  string collection_id = 2 [(buf.validate.field).string = {uuid: true}];

  // The API key to create
  ApiKey api_key = 3;
}

// CollectionKeyResponse provides the API key after creation
message CreateCollectionKeyResponse {
  // The newly created API key value
  ApiKey api_key = 1;
}

// DeleteCollectionKeyRequest identifies the API key to delete
message DeleteCollectionKeyRequest {
  // The identifier of the account (in Guid format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // Collection the key belongs to
  string collection_id = 2 [(buf.validate.field).string = {uuid: true}];
  // ID of the key to delete
  string key_id = 3 [(buf.validate.field).string = {uuid: true}];
}

// DeleteCollectionKeyResponse is an empty response for deletion confirmation
message DeleteCollectionKeyResponse {
  // Empty
}

// An ApiKey represents a JWT token to access a Qdrant cloud serverless collection.
message ApiKey {
  // Unique identifier for the API key
  string id = 1;
  option (buf.validate.message).cel = {
    id: "api_key.id"
    message: "value must be a valid UUID"
    expression: "this.id.matches('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') || !has(this.created_at)"
  };
  // Human-readable name for the API key
  string name = 3;
  // The api key itself.
  // This is a read-only field and will be available only once in the return of CreateCollectionKey.
  // You should securely store this token, and it should be handled as a secret.
  string key = 4;
  // Postfix for the collection api key, this represents the last bytes of the key.
  // This is a read-only field and will be available after a collection api key is created.
  string postfix = 5;
  // Timestamp when the collection api key was created.
  // This is a read-only field and will be available after a collection api key is created.
  google.protobuf.Timestamp created_at = 6;
  // The email of the user who created the collection api key.
  // This is a read-only field and will be available after a collection api key is created.
  string created_by_email = 7;
  // The access type
  oneof access_type {
    // A general access level claim, either "r" (read) or "w" (write).
    string access = 8 [(buf.validate.field).string = {
      in: [
        "r",
        "w"
      ]
    }];
  }
  // The expiration time of the collection api key in seconds since the Unix epoch.
  optional int64 exp = 9 [(buf.validate.field).int64 = {
    gte: 1000000000
    lte: 10000000000
  }];
  // The identifier of the account (in Guid format).
  // This is a required field.
  string account_id = 10 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the collection (in Guid format).
  // This is a required field.
  string collection_id = 11 [(buf.validate.field).string = {uuid: true}];
}
