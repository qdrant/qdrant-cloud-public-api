syntax = "proto3";

package qdrant.cloud.serverless.collection.auth.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "qdrant/cloud/common/v1/common.proto";

// Service for managing API keys for a serverless collection
service CollectionApiKeyService {
  // ListCollectionApiKeys returns all API keys for a collection
  // Required Permissions:
  // - read:serverless_api_keys
  rpc ListCollectionApiKeys(ListCollectionApiKeysRequest) returns (ListCollectionApiKeysResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "read:serverless_api_keys";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/serverless/auth/v1/accounts/{account_id}/collections/{collection_id}/api-keys"};
  }
  // CreateCollectionApiKey creates a new API key for a collection
  // Required Permissions:
  // - write:serverless_api_keys
  rpc CreateCollectionApiKey(CreateCollectionApiKeyRequest) returns (CreateCollectionApiKeyResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "write:serverless_api_keys";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "collection_api_key.account_id";
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/serverless/auth/v1/accounts/{collection_api_key.account_id}/collections/{collection_api_key.collection_id}/api-keys"
      body: "*"
    };
  }
  // DeleteCollectionApiKey removes an API key from a collection
  // Required Permissions:
  // - delete:serverless_api_keys
  rpc DeleteCollectionApiKey(DeleteCollectionApiKeyRequest) returns (DeleteCollectionApiKeyResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "delete:serverless_api_keys";
    // gRPC Gateway REST call
    option (google.api.http) = {delete: "/api/serverless/auth/v1/accounts/{account_id}/collections/{collection_id}/api-keys/{collection_api_key_id}"};
  }
}

// Request all API keys associated with a collection
message ListCollectionApiKeysRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // Collection the API keys belong to (in GUID format).
  // This is a required field.
  string collection_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// Response containing all API keys associated with a collection
message ListCollectionApiKeysResponse {
  // List of API keys for the collection
  repeated CollectionApiKey items = 1;
}

// CreateCollectionApiKeyRequest defines parameters for creating a new collection API key
message CreateCollectionApiKeyRequest {
  // The API key to create.
  // This is a required field.
  CollectionApiKey collection_api_key = 1 [(buf.validate.field).required = true];
  option (buf.validate.message).cel = {
    id: "create_collection_api_key.no_read_only_fields"
    message: "read-only fields (id, created_at, created_by_email, postfix, key) must not be set on create"
    expression: "this.collection_api_key.id == '' && !has(this.collection_api_key.created_at) && this.collection_api_key.created_by_email == '' && this.collection_api_key.postfix == '' && this.collection_api_key.key == ''"
  };
}

// CollectionApiKeyResponse provides the API key after creation
message CreateCollectionApiKeyResponse {
  // The newly created API key value
  CollectionApiKey collection_api_key = 1 [(buf.validate.field).required = true];
}

// DeleteCollectionApiKeyRequest identifies the API key to delete
message DeleteCollectionApiKeyRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // Collection the key belongs to (in GUID format).
  // This is a required field.
  string collection_id = 2 [(buf.validate.field).string = {uuid: true}];
  // ID of the key to delete (in GUID format).
  // This is a required field.
  string collection_api_key_id = 3 [(buf.validate.field).string = {uuid: true}];
}

// DeleteCollectionApiKeyResponse is an empty response for deletion confirmation
message DeleteCollectionApiKeyResponse {
  // Empty
}

// CollectionApiKeyAccessType defines the access types that can be granted to a collection API key.
// For a detailed list of actions allowed for each access type, see:
// https://qdrant.tech/documentation/guides/security/#table-of-access
enum CollectionApiKeyAccessType {
  // Unspecified access type.
  COLLECTION_API_KEY_ACCESS_TYPE_UNSPECIFIED = 0;
  // Grants access to perform collection-related actions that only read data.
  COLLECTION_API_KEY_ACCESS_TYPE_READ_ONLY = 1;
  // Grants access to perform collection-related actions that read or write data (like `upsert points`).
  COLLECTION_API_KEY_ACCESS_TYPE_READ_WRITE = 2;
}

// A CollectionApiKey represents one collection api key of a Qdrant cloud account.
// This collection key can grant access to a Qdrant cloud serverless collection.
message CollectionApiKey {
  // Unique identifier for the collection api key (in GUID format).
  // This is a read-only field and will be available after a collection api key is created.
  string id = 1;
  option (buf.validate.message).cel = {
    id: "collection_api_key.id"
    message: "value must be a valid UUID"
    expression: "this.id.matches(\'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\') || !has(this.created_at)"
  };
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 2 [(buf.validate.field).string = {uuid: true}];
  // Timestamp when the collection api key was created.
  // This is a read-only field and will be available after a collection api key is created.
  google.protobuf.Timestamp created_at = 3;
  // The identifier of the collection (in GUID format).
  // This is a required field.
  string collection_id = 4 [(buf.validate.field).string = {uuid: true}];
  // Name of the collection api key.
  // This is a required field.
  // Name can only contain letters, numbers, spaces, underscores and dashes.
  string name = 5 [(buf.validate.field).string = {
    min_len: 4
    max_len: 128
    pattern: "^[\\w\\s-]+$"
  }];
  // The expiration time of the collection api key. The key will be invalid after this time.
  // This field is optional, and if not provided, the key does not expire.
  optional google.protobuf.Timestamp expires_at = 6;
  // The type of access granted for the collection.
  // This is a required field.
  CollectionApiKeyAccessType access_type = 7 [(buf.validate.field).enum = {
    defined_only: true
    not_in: [0]
  }];
  // The email of the user who created the collection api key.
  // This is a read-only field and will be available after a collection api key is created.
  string created_by_email = 8;
  option (buf.validate.message).cel = {
    id: "collection_api_key.created_by_email"
    message: "created_by_email must not be empty"
    expression: "this.created_by_email.size() > 0 || !has(this.created_at)"
  };
  option (buf.validate.message).cel = {
    id: "collection_api_key.created_by_email_format"
    message: "created_by_email must be a valid email address"
    expression: "this.created_by_email.matches('^[^@\\\\s]+@[^@\\\\s]+\\\\.[^@\\\\s]+$') || !has(this.created_at)"
  };
  // Postfix for the collection api key, this represents the last bytes of the key.
  // This is a read-only field and will be available after a collection api key is created.
  string postfix = 9;
  option (buf.validate.message).cel = {
    id: "collection_api_key.postfix"
    message: "postfix must not be empty"
    expression: "this.postfix.size() > 0 || !has(this.created_at)"
  };
  // The key for the collection api key.
  // This is a read-only field and will be available only once in the response of CreateCollectionApiKey.
  // You should securely store this key and it should be handled as a secret.
  string key = 10;
}
