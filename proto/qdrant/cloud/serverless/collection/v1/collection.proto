syntax = "proto3";

package qdrant.cloud.serverless.collection.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "qdrant/cloud/common/v1/common.proto";
import "qdrant/cloud/serverless/collection/v1/collection_config.proto";

// CollectionService provides operations for managing collections
service CollectionService {
  // ListCollections returns all collections for the authenticated user
  // Required Permissions:
  // - read:serverless
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "read:serverless";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/serverless/v1/accounts/{account_id}/collections"};
  }
  // CreateCollection creates a new collection with the specified configuration
  // Required Permissions:
  // - write:serverless
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "write:serverless";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "collection.account_id";
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/serverless/v1/accounts/{collection.account_id}/collections"
      body: "*"
    };
  }
  // Upgrade collection: If current user have paid account, this API will lift the limit of the collection
  // Required Permissions:
  // - write:serverless
  rpc UpgradeCollection(UpgradeCollectionRequest) returns (UpgradeCollectionResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "write:serverless";
    // gRPC Gateway REST call
    option (google.api.http) = {
      put: "/api/serverless/v1/accounts/{account_id}/collections/{collection_id}"
      body: "*"
    };
  }
  // DeleteCollection removes a collection by ID
  // Required Permissions:
  // - delete:serverless
  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse) {
    // permissions
    option (qdrant.cloud.common.v1.permissions) = "delete:serverless";
    // gRPC Gateway REST call
    option (google.api.http) = {delete: "/api/serverless/v1/accounts/{account_id}/collections/{collection_id}"};
  }
}

// ListCollectionsRequest is an empty request to list collections
message ListCollectionsRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// ListCollectionsResponse contains the list of collections
message ListCollectionsResponse {
  // List of collections with their details
  repeated Collection collections = 1;
}

// CreateCollectionRequest defines parameters for creating a new collection
message CreateCollectionRequest {
  // Collection represents a vector search collection in the Qdrant serverless environment
  Collection collection = 1 [(buf.validate.field).required = true];
}

// CollectionResponse provides details about a created collection
message CreateCollectionResponse {
  // Collection represents a vector search collection in the Qdrant serverless environment
  Collection collection = 1 [(buf.validate.field).required = true];
}

// Upgrade limits of the specified collection
message UpgradeCollectionRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // ID of the collection to upgrade (in GUID format).
  // This is a required field.
  string collection_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// Response for upgrading collection
message UpgradeCollectionResponse {
  // Empty
}

// DeleteCollectionRequest identifies the collection to delete
message DeleteCollectionRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // ID of the collection to delete (in GUID format).
  // This is a required field.
  string collection_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// DeleteCollectionResponse is an empty response for deletion confirmation
message DeleteCollectionResponse {
  // Empty
}

// Collection represents a vector search collection in the Qdrant serverless environment
message Collection {
  // Unique identifier for the collection (in GUID format).
  // This is a read-only field and will be available after a collection is created.
  string id = 1;
  option (buf.validate.message).cel = {
    id: "collection.id"
    message: "value must be a valid UUID"
    expression: "this.id.matches(\'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\') || !has(this.created_at)"
  };
  // Timestamp when the collection was created.
  // This is a read-only field and will be available after a collection is created.
  google.protobuf.Timestamp created_at = 2;
  // Identifier of the account associated with the collection (in GUID format).
  // This is a required field.
  string account_id = 3 [(buf.validate.field).string = {uuid: true}];
  // Name of the collection.
  // This is a required field.
  // Name can only contain letters, numbers, underscores and dashes
  string name = 4 [(buf.validate.field).string = {
    max_len: 64
    min_len: 4
    pattern: "^[a-zA-Z0-9-_]+$"
  }];
  // Timestamp when the collection was deleted (or is started to be deleting).
  // This is a read-only field and will be set after DeleteCollection is called.
  google.protobuf.Timestamp deleted_at = 5;
  // Cloud provider where the collection is hosted.
  // Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviders` method.
  // In this case, `hybrid` isn't supported.
  // After creation, this field cannot be changed.
  string cloud_provider_id = 10 [(buf.validate.field).string = {min_len: 3}];
  // Cloud provider region where the collection is hosted.
  // Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions` method.
  // After creation, this field cannot be changed.
  string cloud_provider_region_id = 11 [(buf.validate.field).string.min_len = 1];
  // Configuration parameters
  CollectionConfiguration configuration = 20;
  // Status of the collection
  // All fields inside `state` are read-only.
  CollectionState state = 100;
}

// CollectionStatePhase defines the operational phases of a Qdrant collection.
enum CollectionStatePhase {
  // Unspecified phase.
  COLLECTION_STATE_PHASE_UNSPECIFIED = 0;
  // The Collection is fully operational and available for use.
  COLLECTION_STATE_PHASE_READY = 1;
  // The Collection is being created, updated, or undergoing maintenance.
  COLLECTION_STATE_PHASE_PROCESSING = 2;
  // The Collection has been temporarily or permanently disabled.
  COLLECTION_STATE_PHASE_DISABLED = 3;
}

// CollectionState represents the operational state of a collection in the Qdrant serverless environment.
// It provides status information, error details (if any), and endpoint access information.
message CollectionState {
  // The current operational status of the collection.
  CollectionStatePhase phase = 1 [(buf.validate.field).enum.defined_only = true];
  // Descriptive message explaining any errors or issues with the collection.
  // Empty when the collection is operating normally.
  string reason = 2;
  // The URL endpoint where clients can connect to and interact with the collection.
  // Not set if the collection is not yet ready or is disabled.
  optional CollectionEndpoint endpoint = 7;
}

// Endpoint information to access the qdrant collection (aka serverless database).
// All fields in this message are a read-only field.
message CollectionEndpoint {
  // URL to access the qdrant collection (aka serverless database) without port
  string url = 1 [(buf.validate.field).string = {uri: true}];
  // The port to use for HTTP REST calls (6333)
  int32 rest_port = 2 [(buf.validate.field).int32.gt = 0];
  // The port to use for gRPC calls (6334)
  int32 grpc_port = 3 [(buf.validate.field).int32.gt = 0];
}
