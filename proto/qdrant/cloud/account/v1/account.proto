syntax = "proto3";

package qdrant.cloud.account.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "qdrant/cloud/common/v1/common.proto";

// AccountService is the API used to configure Accounts.
service AccountService {
  // Fetch all accounts associated for the provided user, where the user has the provided permission.
  // Required permissions:
  // - read:accounts
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
    // permissions
    option (common.v1.permissions) = ""; // check must be performed in the implementation
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = ""; // not relevant for this method
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/accounts"};
  }
  // Get an account identified by the given ID.
  // Required permissions:
  // - read:account
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
    // permissions
    option (common.v1.permissions) = "read:account"; // not 'read:accounts' for historical reasons
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/accounts/{account_id}"};
  }
  // Creates an account for the authenticated user.
  // Required permissions:
  // - None (authenticated only)
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = ""; // not relevant for this method
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/account/v1/accounts"
      body: "*"
    };
  }
  // Update an account identified by the given ID.
  // Required permissions:
  // - write:account
  rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse) {
    // permissions
    option (common.v1.permissions) = "write:account"; // not 'write:accounts' for historical reasons
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "account.id";
    // gRPC Gateway REST call
    option (google.api.http) = {
      put: "/api/account/v1/accounts/{account.id}"
      body: "*"
    };
  }
  // Deletes an account identified by the given ID.
  // Required permissions:
  // - delete:account
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
    // permissions
    option (common.v1.permissions) = "delete:account"; // not 'delete:accounts' for historical reasons
    // gRPC Gateway REST call
    option (google.api.http) = {delete: "/api/account/v1/accounts/{account_id}"};
  }
  // Fetch all account invites in the account identified by the given account ID.
  // The authenticated user must be a member of the account identifier by the given account ID.
  // Required permissions:
  // - read:invites
  rpc ListAccountInvites(ListAccountInvitesRequest) returns (ListAccountInvitesResponse) {
    // permissions
    option (common.v1.permissions) = "read:invites";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/accounts/{account_id}/invites"};
  }
  // Fetch all account invites for the authenticated user.
  // Required permissions:
  // - None (authenticated only)
  rpc ListMyAccountInvites(ListMyAccountInvitesRequest) returns (ListMyAccountInvitesResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/self/invites"};
  }
  // Fetch an account invite by its id.
  // The authenticated user must be a member of the account that the invite is for.
  // Required permissions:
  // - read:invites
  rpc GetAccountInvite(GetAccountInviteRequest) returns (GetAccountInviteResponse) {
    // permissions
    option (common.v1.permissions) = "read:invites";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/accounts/{account_id}/invites/{invite_id}"};
  }
  // Create a new account invite.
  // The authenticated user must be a member of the account that the invite is for.
  // Required permissions:
  // - write:invites
  rpc CreateAccountInvite(CreateAccountInviteRequest) returns (CreateAccountInviteResponse) {
    // permissions
    option (common.v1.permissions) = "write:invites";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "invite.account_id";
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/account/v1/accounts/{invite.account_id}/invites"
      body: "*"
    };
  }
  // Delete an account invite
  // The authenticated user must be a member of the account that the invite is for.
  // Required permissions:
  // - delete:invites
  rpc DeleteAccountInvite(DeleteAccountInviteRequest) returns (DeleteAccountInviteResponse) {
    // permissions
    option (common.v1.permissions) = "delete:invites";
    // gRPC Gateway REST call
    option (google.api.http) = {delete: "/api/account/v1/accounts/{account_id}/invites/{invite_id}"};
  }
  // Accept an account invite
  // The authenticated user's email address must match the email address specified in
  // the invite.
  // Required permissions:
  // - None (authenticated only)
  rpc AcceptAccountInvite(AcceptAccountInviteRequest) returns (AcceptAccountInviteResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // gRPC Gateway REST call
    option (google.api.http) = {post: "/api/account/v1/accounts/{account_id}/invites/{invite_id}/accept"};
  }
  // Reject an account invite
  // The authenticated user's email address must match the email address specified in
  // the invite.
  // Required permissions:
  // - None (authenticated only)
  rpc RejectOrganizationInvite(RejectOrganizationInviteRequest) returns (RejectOrganizationInviteResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // gRPC Gateway REST call
    option (google.api.http) = {post: "/api/account/v1/accounts/{account_id}/invites/{invite_id}/reject"};
  }
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_REQUEST_FIELDS
// ListAccountsRequest is the request for the ListAccounts function
message ListAccountsRequest {
  // Empty
}

// ListAccountsResponse is the response from the ListAccounts function
message ListAccountsResponse {
  // The actual accounts in this list.
  repeated Account items = 1;
}

// GetAccountRequest is the request for the GetAccount function
message GetAccountRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// GetAccountResponse is the response from the GetAccount function
message GetAccountResponse {
  // The actual account.
  Account account = 1;
}

// CreateAccountRequest is the request for the CreateAccount function.
message CreateAccountRequest {
  // The actual account.
  Account account = 1;
}

// CreateAccountResponse is the response from the CreateAccount function.
message CreateAccountResponse {
  // The actual account.
  Account account = 1;
}

// UpdateAccountRequest is the request for the UpdateAccount function.
message UpdateAccountRequest {
  // The actual account.
  Account account = 1;
}

// UpdateAccountResponse is the response from the UpdateAccount function.
message UpdateAccountResponse {
  // The actual account.
  Account account = 1;
}

// DeleteAccountRequest is the request for the DeleteAccount function.
message DeleteAccountRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// DeleteAccountResponse is the response from the DeleteAccount function.
message DeleteAccountResponse {
  // Empty
}

// ListAccountInvitesRequest is the request for the ListAccountInvites function.
message ListAccountInvitesRequest {
  // The identifier of the account (in GUID format) to list invites for.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// ListAccountInvitesResponse is the response from the ListAccountInvites function.
message ListAccountInvitesResponse {
  // The list of account invites.
  repeated AccountInvite items = 1;
}

// ListMyAccountInvitesRequest is the request for the ListMyAccountInvites function.
// This lists invites for the authenticated user across all accounts.
// buf:lint:ignore QDRANT_CLOUD_REQUIRED_REQUEST_FIELDS
message ListMyAccountInvitesRequest {
  // Optional: Filter invites by status (e.g. pending only).
  optional AccountInviteStatus status_filter = 1;
}

// ListMyAccountInvitesResponse is the response from the ListMyAccountInvites function.
message ListMyAccountInvitesResponse {
  // The list of account invites for the authenticated user.
  repeated AccountInvite items = 1;
}

// GetAccountInviteRequest is the request for the GetAccountInvite function.
message GetAccountInviteRequest {
  // The identifier of the account (in GUID format) the invite belongs to.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the invite (in GUID format).
  // This is a required field.
  string invite_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// GetAccountInviteResponse is the response from the GetAccountInvite function.
message GetAccountInviteResponse {
  // The retrieved account invite.
  AccountInvite invite = 1;
}

// CreateAccountInviteRequest is the request for the CreateAccountInvite function.
message CreateAccountInviteRequest {
  // The details of the invite to create.
  // This is a required field.
  AccountInvite invite = 1;
}

// CreateAccountInviteResponse is the response from the CreateAccountInvite function.
message CreateAccountInviteResponse {
  // The created account invite.
  AccountInvite invite = 1;
}

// DeleteAccountInviteRequest is the request for the DeleteAccountInvite function.
message DeleteAccountInviteRequest {
  // The identifier of the account (in GUID format) the invite belongs to.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the invite (in GUID format) to delete.
  // This is a required field.
  string invite_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// DeleteAccountInviteResponse is the response from the DeleteAccountInvite function.
message DeleteAccountInviteResponse {
  // Empty
}

// AcceptAccountInviteRequest is the request for the AcceptAccountInvite function.
message AcceptAccountInviteRequest {
  // The identifier of the account (in GUID format) the invite is for.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the invite (in GUID format) to accept.
  // This is a required field.
  string invite_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// AcceptAccountInviteResponse is the response from the AcceptAccountInvite function.
message AcceptAccountInviteResponse {
  // The invite that was accepted, with its status updated.
  AccountInvite invite = 1;
}

// RejectOrganizationInviteRequest is the request for the RejectOrganizationInvite function.
// Note: This RPC, despite its name, is used to reject an *Account Invite*.
message RejectOrganizationInviteRequest {
  // The identifier of the account (in GUID format) the invite is for.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the invite (in GUID format) to reject.
  // This is a required field.
  string invite_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// RejectOrganizationInviteResponse is the response from the RejectOrganizationInvite function.
message RejectOrganizationInviteResponse {
  // The invite that was rejected, with its status updated.
  AccountInvite invite = 1;
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_ENTITY_FIELDS
// An Account represents an account in the Qdrant cloud.
message Account {
  // Unique identifier for the account (in GUID format).
  // This is a read-only field and will be available after an account is created.
  string id = 1;
  option (buf.validate.message).cel = {
    id: "account.id"
    message: "value must be a valid UUID"
    expression: "this.id.matches(\'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\') || !has(this.created_at)"
  };
  // The timestamp when the account was created.
  // This is a read-only field and will be available after an account is created.
  google.protobuf.Timestamp created_at = 2;
  // The timestamp when the account was last updated.
  // This is a read-only field and will be available after an account is created.
  google.protobuf.Timestamp last_modified_at = 3;
  // The name of the account.
  // Name can only contain letters, numbers, underscores and dashes
  string name = 5 [(buf.validate.field).string = {
    max_len: 64
    min_len: 4
    pattern: "^[a-zA-Z0-9-_]+$"
  }];
  // The Identifier of the owner of the account (in GUID format).
  // This is a read-only field.
  string owner_id = 6 [(buf.validate.field).string = {uuid: true}];
  // The email address of the owner of the account.
  // This is a read-only field and will be derived from the owner_id field.
  string owner_email = 7 [(buf.validate.field).string = {email: true}];
  // The privileges of the account, if any.
  // This is a read-only field.
  repeated string privileges = 8 [(buf.validate.field).repeated.items.string = {min_len: 1}];
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_ENTITY_FIELDS
// An AccountInvite represents an invitation for a user to join an account.
message AccountInvite {
  // Unique identifier for the invite (in GUID format).
  // This is a read-only field, generated by the server.
  string id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the account this invite is for (in GUID format).
  // This field is required when creating an invite.
  string account_id = 2 [(buf.validate.field).string = {uuid: true}];
  // Human readable name of the account that the human is invited to join.
  // This is a read-only value.
  string account_name = 3;
  // The email address of the user being invited.
  // This field is required when creating an invite.
  string email = 4 [(buf.validate.field).string = {
    email: true
    min_len: 1
  }];
  // The identifiers of the roles to be assigned to the user upon accepting the invite.
  // This field is required when creating an invite, and the list must not be empty.
  // Each string in the list must be a valid UUID, to be resolved in the provided account.
  repeated string role_ids = 5 [(buf.validate.field).repeated = {
    min_items: 1 // Ensure at least one role ID is provided
    items: {
      string: {uuid: true}
    }
  }];
  // The timestamp when the invite was created.
  // This is a read-only field.
  google.protobuf.Timestamp created_at = 6;
  // The identifier of the user who created the invite (in GUID format).
  // This is a read-only field, populated by the server based on the authenticated user.
  string created_by_user_id = 7 [(buf.validate.field).string = {uuid: true}]; // TODO: Optional (for system generated invites)?
  // Name of the user that created this invite.
  // This is a read-only value, populated by the server based on the created_by_user_id field.
  string created_by_name = 8;
  // The timestamp when the invite expires. If not set, the invite may use a default expiration period or not expire.
  // This is a read-only field, potentially set at creation or managed by the server.
  google.protobuf.Timestamp expires_at = 9; // TODO: Do we want to add this?
  // The timestamp when the invite was last updated (e.g., status change).
  // This is a read-only field.
  google.protobuf.Timestamp last_modified_at = 10;
  // Identifier of the user that accepted or rejected this invite.
  // This is a read-only value.
  optional string user_id = 11 [(buf.validate.field).string = {uuid: true}];
  // The status of the invite.
  // This is a read-only field.
  AccountInviteStatus status = 12;
}

// AccountInviteStatus defines the possible statuses of an account invitation.
enum AccountInviteStatus {
  // Default, unspecified status.
  ACCOUNT_INVITE_STATUS_UNSPECIFIED = 0;
  // The invite is pending and waiting for the user to accept or reject.
  ACCOUNT_INVITE_STATUS_PENDING = 1;
  // The invite has been accepted by the user.
  ACCOUNT_INVITE_STATUS_ACCEPTED = 2;
  // The invite has been rejected by the user.
  ACCOUNT_INVITE_STATUS_REJECTED = 3;
  // The invite has expired.
  ACCOUNT_INVITE_STATUS_EXPIRED = 4; // TODO: Do we want to add this?
  // The invite has been canceled (e.g., by an account admin).
  ACCOUNT_INVITE_STATUS_CANCELED = 5;
}
