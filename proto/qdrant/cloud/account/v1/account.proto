syntax = "proto3";

package qdrant.cloud.account.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "qdrant/cloud/common/v1/common.proto";
import "qdrant/cloud/event/v1/events.proto";
import "qdrant/cloud/iam/v1/iam.proto";

// AccountService is the API used to configure Accounts.
service AccountService {
  // Lists all accounts associated with the authenticated actor, where the actor has the specified permission.
  // Required permissions:
  // - read:accounts
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
    // permissions
    option (common.v1.permissions) = ""; // check must be performed in the implementation
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = ""; // not relevant for this method
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/accounts"};
  }
  // Gets an account identified by the given ID.
  // Required permissions:
  // - read:account
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
    // permissions
    option (common.v1.permissions) = "read:account"; // not 'read:accounts' for historical reasons
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/accounts/{account_id}"};
  }
  // Creates an account for the authenticated user.
  // Required permissions:
  // - None (authenticated only)
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = ""; // not relevant for this method
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/account/v1/accounts"
      body: "*"
    };
    // events
    option (qdrant.cloud.event.v1.event_options) = {
      event_type: EVENT_TYPE_CREATED
      resource_type: "account"
      resource_id_field: "resp.account.id"
      resource_url_template: "/accounts/{resp.account.id}"
    };
    // log fields
    option (common.v1.log_fields) = {
      name: "account_name"
      field_expression: "account.name"
    };
  }
  // Updates an account identified by the given ID.
  // Required permissions:
  // - write:account
  rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse) {
    // permissions
    option (common.v1.permissions) = "write:account"; // not 'write:accounts' for historical reasons
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "account.id";
    // gRPC Gateway REST call
    option (google.api.http) = {
      put: "/api/account/v1/accounts/{account.id}"
      body: "*"
    };
    // events
    option (qdrant.cloud.event.v1.event_options) = {
      event_type: EVENT_TYPE_UPDATED
      resource_type: "account"
      resource_id_field: "req.account.id"
      resource_url_template: "/accounts/{req.account.id}"
    };
    // log fields
    option (common.v1.log_fields) = {
      name: "account_name"
      field_expression: "account.name"
    };
  }
  // Deletes an account identified by the given ID.
  // Required permissions:
  // - delete:account
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
    // permissions
    option (common.v1.permissions) = "delete:account"; // not 'delete:accounts' for historical reasons
    // custom supported-actor-types expression. (Only the owner user can delete an account)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {delete: "/api/account/v1/accounts/{account_id}"};
    // events
    option (qdrant.cloud.event.v1.event_options) = {
      event_type: EVENT_TYPE_DELETED
      resource_type: "account"
      resource_id_field: "req.account_id"
      resource_url_template: "/accounts/{req.account_id}"
    };
  }
  // Lists all account invites in the account identified by the given account ID.
  // Required permissions:
  // - read:invites
  rpc ListAccountInvites(ListAccountInvitesRequest) returns (ListAccountInvitesResponse) {
    // permissions
    option (common.v1.permissions) = "read:invites";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/accounts/{account_id}/invites"};
  }
  // Lists all account invites for the authenticated user (across all accounts).
  // These are the invites the user has received, not the ones they have sent.
  // Required permissions:
  // - None (authenticated only)
  rpc ListReceivedAccountInvites(ListReceivedAccountInvitesRequest) returns (ListReceivedAccountInvitesResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "";
    // custom supported-actor-types expression. (Account invites are sent to users)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/self/invites"};
  }
  // Gets an account invite identified by the given account ID and invite ID.
  // Required permissions:
  // - read:invites
  rpc GetAccountInvite(GetAccountInviteRequest) returns (GetAccountInviteResponse) {
    // permissions
    option (common.v1.permissions) = "read:invites";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/accounts/{account_id}/invites/{invite_id}"};
    // log fields
    option (common.v1.log_fields) = {
      name: "invite_id"
      field_expression: "invite_id"
    };
  }
  // Creates a new account invite.
  // Required permissions:
  // - write:invites
  rpc CreateAccountInvite(CreateAccountInviteRequest) returns (CreateAccountInviteResponse) {
    // permissions
    option (common.v1.permissions) = "write:invites";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "account_invite.account_id";
    // custom supported-actor-types expression. (Sending an invite requires being authenticated as a user)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/account/v1/accounts/{account_invite.account_id}/invites"
      body: "*"
    };
    // events
    option (qdrant.cloud.event.v1.event_options) = {
      event_type: EVENT_TYPE_CREATED
      resource_type: "account-invite"
      resource_id_field: "resp.account_invite.id"
      resource_url_template: "/accounts/{req.account_invite.account_id}/invites/{resp.account_invite.id}"
    };
    // log fields
    option (common.v1.log_fields) = {
      name: "user_email"
      field_expression: "account_invite.user_email"
    };
  }
  // Deletes an account invite.
  // Required permissions:
  // - delete:invites
  rpc DeleteAccountInvite(DeleteAccountInviteRequest) returns (DeleteAccountInviteResponse) {
    // permissions
    option (common.v1.permissions) = "delete:invites";
    // gRPC Gateway REST call
    option (google.api.http) = {delete: "/api/account/v1/accounts/{account_id}/invites/{invite_id}"};
    // events
    option (qdrant.cloud.event.v1.event_options) = {
      event_type: EVENT_TYPE_DELETED
      resource_type: "account-invite"
      resource_id_field: "req.invite_id"
      resource_url_template: "/accounts/{req.account_id}/invites/{req.invite_id}"
    };
    // log fields
    option (common.v1.log_fields) = {
      name: "invite_id"
      field_expression: "invite_id"
    };
  }
  // Accepts an account invite.
  // The authenticated user's email address must match the email address specified in
  // the invite.
  // Required permissions:
  // - None (authenticated only)
  rpc AcceptAccountInvite(AcceptAccountInviteRequest) returns (AcceptAccountInviteResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // custom supported-actor-types expression. (Account invites are sent to users)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {post: "/api/account/v1/accounts/{account_id}/invites/{invite_id}/accept"};
    // events
    option (qdrant.cloud.event.v1.event_options) = {
      event_type: EVENT_TYPE_ACTION
      action_type: "accept"
      resource_type: "account-invite"
      resource_id_field: "req.invite_id"
      resource_url_template: "/accounts/{req.account_id}/invites/{req.invite_id}"
    };
    // log fields
    option (common.v1.log_fields) = {
      name: "invite_id"
      field_expression: "invite_id"
    };
  }
  // Rejects an account invite.
  // The authenticated user's email address must match the email address specified in
  // the invite.
  // Required permissions:
  // - None (authenticated only)
  rpc RejectAccountInvite(RejectAccountInviteRequest) returns (RejectAccountInviteResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // custom supported-actor-types expression. (Account invites are sent to users)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {post: "/api/account/v1/accounts/{account_id}/invites/{invite_id}/reject"};
    // events
    option (qdrant.cloud.event.v1.event_options) = {
      event_type: EVENT_TYPE_ACTION
      action_type: "reject"
      resource_type: "account-invite"
      resource_id_field: "req.invite_id"
      resource_url_template: "/accounts/{req.account_id}/invites/{req.invite_id}"
    };
    // log fields
    option (common.v1.log_fields) = {
      name: "invite_id"
      field_expression: "invite_id"
    };
  }
  // Lists all account members in the account identified by the given account ID.
  // The authenticated actor must be a member of the account identified by the given account ID.
  // Required permissions:
  // - read:users
  rpc ListAccountMembers(ListAccountMembersRequest) returns (ListAccountMembersResponse) {
    // permissions
    option (common.v1.permissions) = "read:users"; // Not 'read:accounts' for historical reasons
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/accounts/{account_id}/members"};
  }
  // Gets an account member by ID.
  // The authenticated actor must be a member of the same account as the member being fetch.
  // Required permissions:
  // - read:users
  rpc GetAccountMember(GetAccountMemberRequest) returns (GetAccountMemberResponse) {
    // permissions
    option (common.v1.permissions) = "read:users"; // Not 'read:accounts' for historical reasons
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/account/v1/accounts/{account_id}/members/{user_id}"};
    // log fields
    option (common.v1.log_fields) = {
      name: "user_id"
      field_expression: "user_id"
    };
  }
  // Deletes an account member.
  // The authenticated actor must be a member of the account from which the the member is being removed.
  // Required permissions:
  // - delete:users
  rpc DeleteAccountMember(DeleteAccountMemberRequest) returns (DeleteAccountMemberResponse) {
    // permissions
    option (common.v1.permissions) = "delete:users"; // Not 'delete:accounts' for historical reasons
    // custom supported-actor-types expression. (At this moment only users can delete account members)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {delete: "/api/account/v1/accounts/{account_id}/members/{user_id}"};
    // events
    option (qdrant.cloud.event.v1.event_options) = {
      event_type: EVENT_TYPE_DELETED
      resource_type: "account-member"
      resource_id_field: "req.user_id"
      resource_url_template: "/accounts/{req.account_id}/members/{req.user_id}"
    };
    // log fields
    option (common.v1.log_fields) = {
      name: "user_id"
      field_expression: "user_id"
    };
  }
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_REQUEST_FIELDS
// ListAccountsRequest is the request for the ListAccounts function
message ListAccountsRequest {
  // Empty
}

// ListAccountsResponse is the response from the ListAccounts function
message ListAccountsResponse {
  // The actual accounts in this list.
  repeated Account items = 1;
}

// GetAccountRequest is the request for the GetAccount function
message GetAccountRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// GetAccountResponse is the response from the GetAccount function
message GetAccountResponse {
  // The actual account.
  Account account = 1 [(buf.validate.field).required = true];
}

// CreateAccountRequest is the request for the CreateAccount function.
message CreateAccountRequest {
  // The actual account.
  Account account = 1 [(buf.validate.field).required = true];
  option (buf.validate.message).cel = {
    id: "create_account.no_read_only_fields"
    message: "read-only fields (id, created_at, last_modified_at, owner_email, privileges) must not be set on create"
    expression: "this.account.id == '' && !has(this.account.created_at) && !has(this.account.last_modified_at) && this.account.owner_email == '' && this.account.privileges.size() == 0"
  };
}

// CreateAccountResponse is the response from the CreateAccount function.
message CreateAccountResponse {
  // The actual account.
  Account account = 1 [(buf.validate.field).required = true];
}

// UpdateAccountRequest is the request for the UpdateAccount function.
message UpdateAccountRequest {
  // The actual account.
  Account account = 1 [(buf.validate.field).required = true];
  option (buf.validate.message).cel = {
    id: "update_account.id_present"
    message: "account.id is required for an update"
    expression: "this.account.id != ''"
  };
}

// UpdateAccountResponse is the response from the UpdateAccount function.
message UpdateAccountResponse {
  // The actual account.
  Account account = 1 [(buf.validate.field).required = true];
}

// DeleteAccountRequest is the request for the DeleteAccount function.
message DeleteAccountRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// DeleteAccountResponse is the response from the DeleteAccount function.
message DeleteAccountResponse {
  // Empty
}

// ListAccountInvitesRequest is the request for the ListAccountInvites function.
message ListAccountInvitesRequest {
  // The identifier of the account (in GUID format) to list invites for.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The status of the account invite to filter.
  // This is an optional field. If value is not set, all statuses are returned.
  repeated AccountInviteStatus statuses = 2;
}

// ListAccountInvitesResponse is the response from the ListAccountInvites function.
message ListAccountInvitesResponse {
  // The list of account invites.
  repeated AccountInvite items = 1;
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_REQUEST_FIELDS
// ListReceivedAccountInvitesRequest is the request for the ListReceivedAccountInvites function.
// This lists invites for the authenticated user across all accounts.
message ListReceivedAccountInvitesRequest {
  // Empty
}

// ListReceivedAccountInvitesResponse is the response from the ListReceivedAccountInvites function.
message ListReceivedAccountInvitesResponse {
  // The list of account invites for the authenticated user.
  repeated AccountInvite items = 1;
}

// GetAccountInviteRequest is the request for the GetAccountInvite function.
message GetAccountInviteRequest {
  // The identifier of the account (in GUID format) the invite belongs to.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the invite (in GUID format).
  // This is a required field.
  string invite_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// GetAccountInviteResponse is the response from the GetAccountInvite function.
message GetAccountInviteResponse {
  // The account invite.
  AccountInvite account_invite = 1 [(buf.validate.field).required = true];
}

// CreateAccountInviteRequest is the request for the CreateAccountInvite function.
message CreateAccountInviteRequest {
  // The details of the invite to create.
  // This is a required field.
  AccountInvite account_invite = 1 [(buf.validate.field).required = true];
  option (buf.validate.message).cel = {
    id: "create_account_invite.no_read_only_fields"
    message: "read-only fields (id, account_name, created_at, created_by_user_id, created_by_email, last_modified_at, status) must not be set on create"
    expression: "this.account_invite.id == '' && this.account_invite.account_name == '' && !has(this.account_invite.created_at) && !has(this.account_invite.created_by_user_id) && !has(this.account_invite.created_by_email) && !has(this.account_invite.last_modified_at) && this.account_invite.status == 0"
  };
}

// CreateAccountInviteResponse is the response from the CreateAccountInvite function.
message CreateAccountInviteResponse {
  // The created account invite.
  AccountInvite account_invite = 1 [(buf.validate.field).required = true];
}

// DeleteAccountInviteRequest is the request for the DeleteAccountInvite function.
message DeleteAccountInviteRequest {
  // The identifier of the account (in GUID format) the invite belongs to.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the invite (in GUID format) to delete.
  // This is a required field.
  string invite_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// DeleteAccountInviteResponse is the response from the DeleteAccountInvite function.
message DeleteAccountInviteResponse {
  // Empty
}

// AcceptAccountInviteRequest is the request for the AcceptAccountInvite function.
message AcceptAccountInviteRequest {
  // The identifier of the account (in GUID format) the invite is for.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the invite (in GUID format) to accept.
  // This is a required field.
  string invite_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// AcceptAccountInviteResponse is the response from the AcceptAccountInvite function.
message AcceptAccountInviteResponse {
  // The invite that was accepted, with its status updated.
  AccountInvite invite = 1 [(buf.validate.field).required = true];
}

// RejectAccountInviteRequest is the request for the RejectAccountInvite function.
// Note: This RPC, despite its name, is used to reject an *Account Invite*.
message RejectAccountInviteRequest {
  // The identifier of the account (in GUID format) the invite is for.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the invite (in GUID format) to reject.
  // This is a required field.
  string invite_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// RejectAccountInviteResponse is the response from the RejectAccountInvite function.
message RejectAccountInviteResponse {
  // The invite that was rejected, with its status updated.
  AccountInvite invite = 1 [(buf.validate.field).required = true];
}

// ListAccountMembersRequest is the request for the ListAccountMembers function.
message ListAccountMembersRequest {
  // The identifier of the account (in GUID format) to list members for.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// ListAccountMembersResponse is the response from the ListAccountMembers function.
message ListAccountMembersResponse {
  // The list of account members.
  repeated AccountMember items = 1;
}

// GetAccountMemberRequest is the request for the GetAccountMember function.
message GetAccountMemberRequest {
  // The identifier of the account (in GUID format) the member belongs to.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the user (in GUID format).
  // This is a required field.
  string user_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// GetAccountMemberResponse is the response from the GetAccountMember function.
message GetAccountMemberResponse {
  // The retrieved account member.
  AccountMember account_member = 1 [(buf.validate.field).required = true];
}

// DeleteAccountMemberRequest is the request for the DeleteAccountMember function.
message DeleteAccountMemberRequest {
  // The identifier of the account (in GUID format) the member belongs to.
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the user (in GUID format) to delete.
  // It is allowed to delete the authenticated user (aka leave account), however only if at least one other user remains in the account.
  // If you are the owner of the account a random other user will be automatically assigned as owner.
  // It is recommended to transfer ownership of the account before leaving.
  // This is a required field.
  string user_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// DeleteAccountMemberResponse is the response from the DeleteAccountMember function.
message DeleteAccountMemberResponse {
  // Empty
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_ENTITY_FIELDS
// An Account represents an account in the Qdrant cloud.
message Account {
  // Unique identifier for the account (in GUID format).
  // This is a read-only field and will be available after an account is created.
  string id = 1;
  option (buf.validate.message).cel = {
    id: "account.id"
    message: "value must be a valid UUID"
    expression: "this.id.matches(\'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\') || !has(this.created_at)"
  };
  // The timestamp when the account was created.
  // This is a read-only field and will be available after an account is created.
  google.protobuf.Timestamp created_at = 2;
  // The timestamp when the account was last updated.
  // This is a read-only field and will be available after an account is created.
  google.protobuf.Timestamp last_modified_at = 3;
  option (buf.validate.message).cel = {
    id: "account.last_modified_at"
    message: "last_modified_at must be set if created_at is set and must be after or equal to created_at"
    expression: "!has(this.created_at) || (has(this.last_modified_at) && this.last_modified_at >= this.created_at)"
  };
  // The name of the account.
  // Name can only contain printable characters.
  string name = 5 [(buf.validate.field).string = {
    max_len: 256
    min_len: 4
    pattern: "^([^\\x00-\\x1F\\x7F])*$"
  }];
  // The external identifier of the owner of the account.
  string external_owner_id = 6 [(buf.validate.field).string = {min_len: 1}];
  // The email address of the owner of the account.
  // This is a read-only field and is derived from the owner user.
  string owner_email = 7 [(buf.validate.field).string = {email: true}];
  // The privileges of the account, if any.
  // This is a read-only field.
  repeated string privileges = 8 [(buf.validate.field).repeated.items.string = {min_len: 1}];
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_ENTITY_FIELDS
// An AccountInvite represents an invitation for a user to join an account.
message AccountInvite {
  // Unique identifier for the invite (in GUID format).
  // This is a read-only field and will be available after an invite is created.
  string id = 1;
  option (buf.validate.message).cel = {
    id: "account_invite.id"
    message: "value must be a valid UUID"
    expression: "this.id.matches(\'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\') || !has(this.created_at)"
  };
  // The identifier of the account this invite is for (in GUID format).
  // This field is required when creating an invite.
  string account_id = 2 [(buf.validate.field).string = {uuid: true}];
  // Human readable name of the account that the human is invited to join.
  // This is a read-only value.
  string account_name = 3;
  option (buf.validate.message).cel = {
    id: "account_invite.account_name"
    message: "account_name must not be empty"
    expression: "this.account_name.size() > 0 || !has(this.created_at)"
  };
  // The email address of the user being invited.
  // This field is required when creating an invite.
  string user_email = 4 [(buf.validate.field).string = {
    email: true
    min_len: 1
  }];
  // The identifiers of the roles to be assigned to the user upon accepting the invite.
  // This field is required when creating an invite, and the list must not be empty.
  // Each string in the list must be a valid UUID, to be resolved in the provided account.
  // Please use IAMService.ListRoles to get the possible roles to assign.
  repeated string user_role_ids = 5 [(buf.validate.field).repeated = {
    min_items: 1 // Ensure at least one role ID is provided
    items: {
      string: {uuid: true}
    }
  }];
  // The timestamp when the invite was created.
  // This is a read-only field.
  google.protobuf.Timestamp created_at = 6;
  // The identifier of the user who created the invite (in GUID format).
  // This is a read-only field, populated by the server based on the authenticated user.
  optional string created_by_user_id = 7 [(buf.validate.field).string = {uuid: true}];
  // The email of the user who created this invite.
  // This is a read-only value, populated by the server based on the created_by_user_id field.
  optional string created_by_email = 8 [(buf.validate.field).string.email = true];
  option (buf.validate.message).cel = {
    id: "account_invite.created_by_email"
    message: "created_by_email must not be empty if created_by_user_id is set"
    expression: "!has(this.created_by_user_id) || this.created_by_email.size() > 0"
  };
  // The timestamp when the invite was last updated (e.g., status change).
  // This is a read-only field.
  google.protobuf.Timestamp last_modified_at = 9;
  option (buf.validate.message).cel = {
    id: "account_invite.last_modified_at"
    message: "last_modified_at must be set if created_at is set and must be after or equal to created_at"
    expression: "!has(this.created_at) || (has(this.last_modified_at) && this.last_modified_at >= this.created_at)"
  };
  // The status of the invite.
  // This is a read-only field.
  AccountInviteStatus status = 10 [(buf.validate.field).enum.defined_only = true];
}

// AccountInviteStatus defines the possible statuses of an account invitation.
enum AccountInviteStatus {
  // Default, unspecified status.
  ACCOUNT_INVITE_STATUS_UNSPECIFIED = 0;
  // The invite is pending and waiting for the user to accept or reject.
  ACCOUNT_INVITE_STATUS_PENDING = 1;
  // The invite has been accepted by the user.
  ACCOUNT_INVITE_STATUS_ACCEPTED = 2;
  // The invite has been rejected by the user.
  ACCOUNT_INVITE_STATUS_REJECTED = 3;
  // The invite has been canceled (e.g., by an account admin).
  ACCOUNT_INVITE_STATUS_CANCELED = 5;
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_ENTITY_FIELDS
// An AccountMember represents a user who is a member of an account.
message AccountMember {
  // The user associated with this membership record.
  // This is a read-only field.
  iam.v1.User account_member = 1 [(buf.validate.field).required = true];
  // Wether or not this user is the owner of the account.
  // This is a read-only field.
  bool is_owner = 2;
}
