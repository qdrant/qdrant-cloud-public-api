syntax = "proto3";

package qdrant.cloud.booking.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "qdrant/cloud/common/v1/common.proto";

// BookingService is the API used to configure the booking settings (like packages objects).
service BookingService {
  // Fetch all packages known by the system, optional filtered.
  // Required permissions:
  // - None (authenticated only)
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc ListPackages(ListPackagesRequest) returns (ListPackagesResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/booking/v1/accounts/{account_id}/packages"};
  }
  // Get the package identified by the request identifier
  // Required permissions:
  // - None (authenticated only)
  rpc GetPackage(GetPackageRequest) returns (GetPackageResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/booking/v1/accounts/{account_id}/packages/{id}"};
  }
  // Fetch all public packages
  // Required permissions:
  // - None (public endpoint)
  // buf:lint:ignore QDRANT_CLOUD_METHOD_OPTIONS
  rpc ListGlobalPackages(ListGlobalPackagesRequest) returns (ListGlobalPackagesResponse) {
    // authentication not required
    option (qdrant.cloud.common.v1.requires_authentication) = false;
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/booking/v1/packages"};
  }
}

// ListPackagesRequest is the request for the ListPackages function
message ListPackagesRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // Optional filter specifying the cloud provider where the cluster will be hosted.
  // Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviders` method.
  // If omitted, all packages for the specified account are returned.
  optional string cloud_provider_id = 2 [(buf.validate.field).string = {min_len: 3}];
  // Optional filter specifying the cloud region where the cluster will be hosted.
  // Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions` method.
  // If omitted, all packages for the specified account are returned.
  // This field is ignored when the `cloud_provider_id` is set to 'hybrid'.
  optional string cloud_provider_region_id = 3;
  // The status of the packages to filter.
  // This is an optional field. If value is not set, all packages are returned.
  repeated PackageStatus statuses = 4;
}

// ListPackagesResponse is the response from the ListPackages function
message ListPackagesResponse {
  // The actual packages in this list
  repeated Package items = 1;
}

// ListGlobalPackagesRequest is the request for the ListGlobalPackages function
// buf:lint:ignore QDRANT_CLOUD_REQUIRED_REQUEST_FIELDS
message ListGlobalPackagesRequest {
  // Mandatory filter specifying the cloud provider where the cluster will be hosted.
  // Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviders` method.
  string cloud_provider_id = 1 [(buf.validate.field).string = {min_len: 3}];
  // Filter specifying the cloud region where the cluster will be hosted.
  // Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviderRegions` method.
  // Field can be empty, if cloud_provider_id is `hybrid`
  optional string cloud_provider_region_id = 2;
}

// ListPackagesResponse is the response from the ListPackages function
message ListGlobalPackagesResponse {
  // The actual packages in this list
  repeated Package items = 1;
}

// GetPackageRequest is the request for the GetPackage function
message GetPackageRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The unique identifier of the package.
  // A unique string ID assigned to each package.
  string id = 2 [(buf.validate.field).string = {uuid: true}];
}

// GetPackageResponse is the response from the GetPackage function
message GetPackageResponse {
  // The actual package
  Package package = 1;
}

// PackageStatus defines the valid states a package can be in.
enum PackageStatus {
  // Unspecified package status.
  PACKAGE_STATUS_UNSPECIFIED = 0;
  // The package is active and available for use.
  PACKAGE_STATUS_ACTIVE = 1;
  // The package is deactivated.
  PACKAGE_STATUS_DEACTIVATED = 2;
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_ENTITY_FIELDS
// Package represents a single package.
// A package is a configuration (CPU/Memory/Disk size) for a cluster with a price.
message Package {
  // The unique identifier of the package.
  // A unique string ID assigned to each package.
  string id = 1 [(buf.validate.field).string = {uuid: true}];
  // The name of the package.
  // A human-readable identifier for the package.
  string name = 2;
  // Specifies if this is a free or paid package.
  string type = 3;
  // The resource configuration associated with the package
  ResourceConfiguration resource_configuration = 4;
  // The currency of the prices.
  // Specifies the currency in which the prices are denominated.
  string currency = 5;
  // The unit price per hour in millicents, in integer format.
  // Represents the cost per hour for a single unit of the resource.
  // You will be billed hourly for the resources you use. Partial hours are rounded up and billed as full hours.
  int32 unit_int_price_per_hour = 6;
  // The status of the package.
  // Indicates the current status of the package.
  PackageStatus status = 7;
  // Optional additional resources that can be added to the cluster.
  // if not set, no additional resources are available
  // Currently, only `DISK` is supported.
  optional AvailableAdditionalResources available_additional_resources = 8;
}

// AvailableAdditionalResources represents additional resources that can be added to the cluster.
message AvailableAdditionalResources {
  // The unit price per hour in millicents, in integer format.
  // Represents the cost per hour for a single unit(GiB) of the resource.
  // You will be billed hourly for the resources you use. Partial hours are rounded up and billed as full hours.
  uint32 disk_price_per_hour = 1;
}

// ResourceConfiguration defines the resource configuration for a package.
message ResourceConfiguration {
  // The amount of RAM (e.g., "1GiB")
  string ram = 1;
  // The amount of CPU (e.g., "1000m" (1 vCPU))
  string cpu = 2;
  // The amount of disk (e.g., "100GiB")
  string disk = 3;
}
