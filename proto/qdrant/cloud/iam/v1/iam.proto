syntax = "proto3";

package qdrant.cloud.iam.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "qdrant/cloud/common/v1/common.proto";

// IAMService is the API used to configure IAM (identity and access management) objects.
service IAMService {
  // Gets the authenticated user.
  // Required permissions:
  // - None (authenticated only)
  rpc GetAuthenticatedUser(GetAuthenticatedUserRequest) returns (GetAuthenticatedUserResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "";
    // custom supported-actor-types expression. (Requires to be authenticated as a user)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/iam/v1/users/me"};
  }
  // Updates the user identified by the given ID.
  // Required permissions:
  // - write:user
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    // permissions
    option (common.v1.permissions) = "write:user";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "";
    // gRPC Gateway REST call
    option (google.api.http) = {
      put: "/api/iam/v1/users/{user.id}"
      body: "*"
    };
  }
  // Gets the authenticated user's consent status for a specific legal document.
  // Required permissions:
  // - None (authenticated only)
  rpc GetUserConsent(GetUserConsentRequest) returns (GetUserConsentResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "";
    // custom supported-actor-types expression. (Requires to be authenticated as a user)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/iam/v1/users/me/consent"};
  }
  // Records the authenticated user's consent for a legal document.
  // Required permissions:
  // - write:user
  rpc RecordUserConsent(RecordUserConsentRequest) returns (RecordUserConsentResponse) {
    // permissions
    option (common.v1.permissions) = "write:user";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "";
    // custom supported-actor-types expression. (Requires to be authenticated as a user)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/iam/v1/users/me/consent"
      body: "*"
    };
  }
  // Lists all permissions known in the system for the provided account.
  // Note: If you want to get a list of permissions available for you, please use GetEffectivePermissions instead.
  // Required permissions:
  // - read:roles
  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
    // permissions
    option (common.v1.permissions) = "read:roles";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/iam/v1/accounts/{account_id}/permissions"};
  }
  // Lists all roles in the account identified by the given ID.
  // Required permissions:
  // - read:roles
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    // permissions
    option (common.v1.permissions) = "read:roles";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/iam/v1/accounts/{account_id}/roles"};
  }
  // Gets a role for the account identified by the given ID.
  // Required permissions:
  // - read:roles
  rpc GetRole(GetRoleRequest) returns (GetRoleResponse) {
    // permissions
    option (common.v1.permissions) = "read:roles";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "role.account_id";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/iam/v1/accounts/{account_id}/roles/{role_id}"};
  }
  // Creates a role for the account identified by the given ID.
  // Note: The role_type must be ROLE_TYPE_CUSTOM.
  // Required permissions:
  // - write:roles
  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
    // permissions
    option (common.v1.permissions) = "write:roles";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "role.account_id";
    // custom supported-actor-types expression. (At this moment only users can create roles)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/iam/v1/accounts/{role.account_id}/roles"
      body: "*"
    };
  }
  // Updates a role in the account identified by the given ID.
  // Note: The role_type must be ROLE_TYPE_CUSTOM.
  // Required permissions:
  // - write:roles
  rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {
    // permissions
    option (common.v1.permissions) = "write:roles";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "role.account_id";
    // custom supported-actor-types expression. (At this moment only users can update roles)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {
      put: "/api/iam/v1/accounts/{role.account_id}/roles/{role.id}"
      body: "*"
    };
  }
  // Deletes a role in the account identified by the given ID.
  // Note: The role_type must be ROLE_TYPE_CUSTOM.
  // Required permissions:
  // - delete:roles
  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {
    // permissions
    option (common.v1.permissions) = "delete:roles";
    // custom supported-actor-types expression. (At this moment only users can delete roles)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {delete: "/api/iam/v1/accounts/{account_id}/roles/{role_id}"};
  }
  // Lists the effective permissions for the user in the account identified by the given ID.
  // Required permissions:
  // - read:roles
  rpc ListEffectivePermissions(ListEffectivePermissionsRequest) returns (ListEffectivePermissionsResponse) {
    // permissions
    option (common.v1.permissions) = "read:roles";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/iam/v1/accounts/{account_id}/effective-permissions"};
  }

  // List roles of the user identified by the given ID.
  // Required permissions:
  // - read:roles
  rpc ListUserRoles(ListUserRolesRequest) returns (ListUserRolesResponse) {
    // permissions
    option (common.v1.permissions) = "read:roles";
    // gRPC Gateway REST call
    option (google.api.http) = {get: "/api/iam/v1/accounts/{account_id}/users/{user_id}/roles"};
  }

  // Assigns the provided roles to the user in the account identified by the given ID.
  // Required permissions:
  // - write:roles
  rpc AssignUserRoles(AssignUserRolesRequest) returns (AssignUserRolesResponse) {
    // permissions
    option (common.v1.permissions) = "write:roles";
    // custom supported-actor-types expression. (At this moment only users can assign roles)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {
      post: "/api/iam/v1/accounts/{account_id}/users/{user_id}/roles"
      body: "*"
    };
  }
  // Logs out the authenticated user.
  // Required permissions:
  // - None (authenticated only)
  rpc LogoutUser(LogoutUserRequest) returns (LogoutUserResponse) {
    // permissions
    option (common.v1.permissions) = "";
    // custom account-id expression
    option (qdrant.cloud.common.v1.account_id_expression) = "";
    // custom supported-actor-types expression. (Requires to be authenticated as a user)
    option (qdrant.cloud.common.v1.supported_actor_types) = ACTOR_TYPE_USER;
    // gRPC Gateway REST call
    option (google.api.http) = {post: "/api/iam/v1/users/me/logout"};
  }
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_REQUEST_FIELDS
// GetAuthenticatedUserRequest is the request for the GetAuthenticatedUser function
message GetAuthenticatedUserRequest {
  // Empty
}

// GetAuthenticatedUserResponse is the response from the GetAuthenticatedUser function
message GetAuthenticatedUserResponse {
  // The actual user.
  User user = 1 [(buf.validate.field).required = true];
}

// UpdateUserRequest is the request for the UpdateUser function.
message UpdateUserRequest {
  // The actual user.
  User user = 1 [(buf.validate.field).required = true];
  option (buf.validate.message).cel = {
    id: "update_user.id_present"
    message: "user.id is required for an update"
    expression: "this.user.id != ''"
  };
}

// UpdateUserResponse is the response from the UpdateUser function.
message UpdateUserResponse {
  // The actual user.
  User user = 1 [(buf.validate.field).required = true];
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_REQUEST_FIELDS
// GetUserConsentRequest is the request for the GetUserConsent function.
message GetUserConsentRequest {
  // The type of the legal document.
  // This is a required field and cannot be UNSPECIFIED.
  LegalDocumentType document_type = 1 [(buf.validate.field).enum = {
    defined_only: true
    not_in: [0]
  }];
}

// GetUserConsentResponse is the response from the GetUserConsent function.
message GetUserConsentResponse {
  // The user consent for the requested document type.
  UserConsent user_consent = 1 [(buf.validate.field).required = true];
}

// RecordUserConsentRequest is the request for the RecordUserConsent function.
message RecordUserConsentRequest {
  // The type of the legal document.
  // This is a required field and cannot be UNSPECIFIED.
  LegalDocumentType document_type = 1 [(buf.validate.field).enum = {
    defined_only: true
    not_in: [0]
  }];
  // The status update initiated by the user.
  // This is a required field and cannot be UNSPECIFIED or PENDING.
  UserConsentStatus status_update = 2 [(buf.validate.field).enum = {
    defined_only: true
    not_in: [
      0,
      3
    ]
  }];
}

// RecordUserConsentResponse is the response from the RecordUserConsent function.
message RecordUserConsentResponse {
  // Empty
}

// ListPermissionsRequest is the request for the ListPermissions function
message ListPermissionsRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// ListPermissionsResponse is the response from the ListPermissions function
message ListPermissionsResponse {
  // The permissions know by the system.
  repeated string permissions = 1 [(buf.validate.field).repeated.items.string.min_len = 1];
}

// ListRolesRequest is the request for the ListRoles function
message ListRolesRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// ListRolesResponse is the response from the ListRoles function
message ListRolesResponse {
  // The actual roles in this list.
  repeated Role items = 1;
}

// GetRoleRequest is the request for the GetRole function
message GetRoleRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the role (in GUID format).
  // This is a required field.
  string role_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// GetRoleResponse is the response from the GetRole function
message GetRoleResponse {
  // The actual role.
  Role role = 1 [(buf.validate.field).required = true];
}

// CreateRoleRequest is the request for the CreateRole function.
message CreateRoleRequest {
  // The actual role.
  Role role = 1 [(buf.validate.field).required = true];
  option (buf.validate.message).cel = {
    id: "create_role.role_type"
    message: "role.role_type must be ROLE_TYPE_CUSTOM"
    expression: "this.role.role_type == 2"
  };
}

// CreateRoleResponse is the response from the CreateRole function.
message CreateRoleResponse {
  // The actual role.
  Role role = 1 [(buf.validate.field).required = true];
}

// UpdateRoleRequest is the request for the UpdateRole function.
message UpdateRoleRequest {
  // The actual role.
  Role role = 1 [(buf.validate.field).required = true];
  option (buf.validate.message).cel = {
    id: "update_role.id_present"
    message: "role.id is required for an update"
    expression: "this.role.id != ''"
  };
  option (buf.validate.message).cel = {
    id: "update_role.role_type"
    message: "role.role_type must be ROLE_TYPE_CUSTOM"
    expression: "this.role.role_type == 2"
  };
}

// UpdateRoleResponse is the response from the UpdateRole function.
message UpdateRoleResponse {
  // The actual role.
  Role role = 1 [(buf.validate.field).required = true];
}

// DeleteRoleRequest is the request for the DeleteRole function.
message DeleteRoleRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the role (in GUID format).
  // This is a required field.
  string role_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// DeleteRoleResponse is the response from the DeleteRole function.
message DeleteRoleResponse {
  // Empty
}

// ListEffectivePermissionsRequest is the request for the ListEffectivePermissions function
message ListEffectivePermissionsRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
}

// ListEffectivePermissionsResponse is the response from the ListEffectivePermissions function
message ListEffectivePermissionsResponse {
  // The effective permissions.
  repeated string permissions = 1 [(buf.validate.field).repeated.items.string.min_len = 1];
}

// ListUserRolesRequest is the request for the ListUserRoles function
message ListUserRolesRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the user (in GUID format).
  // This user should be part of the provided account.
  // This is a required field.
  string user_id = 2 [(buf.validate.field).string = {uuid: true}];
}

// ListUserRolesResponse is the response from the ListUserRoles function
message ListUserRolesResponse {
  // The roles assigned to the user.
  // If the user has no roles, this list will be empty.
  repeated Role roles = 1;
}

// AssignUserRolesRequest is the request for the AssignUserRoles function
message AssignUserRolesRequest {
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 1 [(buf.validate.field).string = {uuid: true}];
  // The identifier of the user (in GUID format).
  // This user should be part of the provided account.
  // This is a required field.
  string user_id = 2 [(buf.validate.field).string = {uuid: true}];
  // The roles to add to the provided user.
  // If a role was already part of the user or the same role is provided multiple times, the role will be added exactly one time.
  repeated string role_ids_to_add = 3 [(buf.validate.field).repeated.items.string = {uuid: true}];
  // The roles to be deleted from the provided user.
  // If a role is part of the role_ids_to_add this field takes precedence.
  repeated string role_ids_to_delete = 4 [(buf.validate.field).repeated.items.string = {uuid: true}];
  option (buf.validate.message).cel = {
    id: "assign_user_roles.at_least_one"
    message: "at least one role must be added or deleted"
    expression: "this.role_ids_to_add.size() > 0 || this.role_ids_to_delete.size() > 0"
  };
}

// AssignUserRolesResponse is the response from the AssignUserRoles function
message AssignUserRolesResponse {
  // Empty
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_ENTITY_FIELDS
// A User represents a user in the Qdrant cloud.
message User {
  // Unique identifier for the user (in GUID format).
  // This is a read-only field and will be available after the user is created.
  string id = 1 [(buf.validate.field).string = {uuid: true}];
  // The timestamp when the user was created.
  // This is a read-only field and will be available after the user is created.
  google.protobuf.Timestamp created_at = 2;
  // The timestamp when the user was last updated.
  // This is a read-only field and will be available after the user is created.
  google.protobuf.Timestamp last_modified_at = 3;
  // The email address of the user.
  // This is a read-only field.
  string email = 4 [(buf.validate.field).string = {email: true}];
  // The status of the user.
  // This is a read-only field.
  UserStatus status = 5 [(buf.validate.field).enum.defined_only = true];
  // The default account ID of the user (in GUID format).
  // You should be member of the account when updating.
  string default_account_id = 6 [(buf.validate.field).string = {uuid: true}];
}

// UserStatus defines the possible statuses of a user.
enum UserStatus {
  // Default, unspecified status.
  USER_STATUS_UNSPECIFIED = 0;
  // The user account is active and can be used.
  USER_STATUS_ACTIVE = 1;
  // The user account is blocked and cannot be used.
  USER_STATUS_BLOCKED = 2;
  // The user account has been marked for deletion or is deleted.
  USER_STATUS_DELETED = 3;
}

// A Role represents a role in the Qdrant cloud.
message Role {
  // Unique identifier for the role (in GUID format).
  // This is a read-only field and will be available after a role is created.
  string id = 1;
  option (buf.validate.message).cel = {
    id: "role.id"
    message: "value must be a valid UUID"
    expression: "this.id.matches(\'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\') || !has(this.created_at)"
  };
  // The timestamp when the role was created.
  // This is a read-only field and will be available after a role is created.
  google.protobuf.Timestamp created_at = 2;
  // The timestamp when the role was last updated.
  // This is a read-only field and will be available after a role is created.
  google.protobuf.Timestamp last_modified_at = 3;
  // The identifier of the account (in GUID format).
  // This is a required field.
  string account_id = 4 [(buf.validate.field).string = {uuid: true}];
  // The name of the role.
  // Name can only contain letters, numbers, underscores and dashes
  string name = 5 [(buf.validate.field).string = {
    max_len: 64
    min_len: 4
    pattern: "^[a-zA-Z0-9-_]+$"
  }];
  // The human readable description of this role.
  string description = 6;
  // The role type.
  RoleType role_type = 7 [(buf.validate.field).enum.defined_only = true];
  // The permissions associated with this role.
  // Must contain at least one permission.
  repeated string permissions = 8 [(buf.validate.field).repeated = {
    min_items: 1
    items: {
      string: {min_len: 1}
    }
  }];
}

// RoleType specified the type of the role
enum RoleType {
  // The role type is unspecified.
  ROLE_TYPE_UNSPECIFIED = 0;
  // The role type is system.
  // Note: system roles cannot be changed (create/update/delete).
  ROLE_TYPE_SYSTEM = 1;
  // The role type is custom defined.
  ROLE_TYPE_CUSTOM = 2;
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_REQUEST_FIELDS
// LogoutUserRequest is the request for the Logout function
message LogoutUserRequest {
  // Empty
}

// LogoutUserResponse is the response from the Logout function
message LogoutUserResponse {
  // Empty
}

// buf:lint:ignore QDRANT_CLOUD_REQUIRED_ENTITY_FIELDS
// User Consent represents the consent status of a user for a specific legal document.
message UserConsent {
  // The type of the legal document for which consent status is reported.
  LegalDocumentType document_type = 1 [(buf.validate.field).enum.defined_only = true];
  // The latest consent status recorded from the user for this document type.
  // Will be USER_CONSENT_STATUS_UNSPECIFIED if no status update has been recorded.
  UserConsentStatus status = 2 [(buf.validate.field).enum.defined_only = true];
  // Timestamp of the most recent status update.
  // Unset if no status update has been recorded.
  optional google.protobuf.Timestamp last_modified_at = 3;
  // A convenience field indicating if the current status is an acceptance.
  // True if status is USER_CONSENT_STATUS_ACCEPTED, false otherwise.
  bool is_accepted = 4;
}

// LegalDocumentType specifies the type of a legal document.
enum LegalDocumentType {
  // Unspecified document type.
  LEGAL_DOCUMENT_TYPE_UNSPECIFIED = 0;
  // Terms of Service document.
  LEGAL_DOCUMENT_TYPE_TERMS_OF_SERVICE = 1;
  // Privacy Policy document.
  LEGAL_DOCUMENT_TYPE_PRIVACY_POLICY = 2;
  // Service Level Agreement document.
  LEGAL_DOCUMENT_TYPE_SLA = 3;
}

// UserConsentStatus specifies the status from an user for a consent.
enum UserConsentStatus {
  // Unspecified consent status.
  USER_CONSENT_STATUS_UNSPECIFIED = 0;
  // The user accepted the consent.
  USER_CONSENT_STATUS_ACCEPTED = 1;
  // The user revoked the consent.
  USER_CONSENT_STATUS_REVOKED = 2;
  // The consent is pending action from the user.
  // Pending consent means that the user got notified about the new version of the document. After a certain
  // period of time, we auto accept pending consents depending on the document type.
  USER_CONSENT_STATUS_PENDING = 3;
}
