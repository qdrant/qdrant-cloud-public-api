// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/cluster/backup/v1/backup.proto

package backupv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/cluster/backup/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackupServiceName is the fully-qualified name of the BackupService service.
	BackupServiceName = "qdrant.cloud.cluster.backup.v1.BackupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackupServiceListBackupsProcedure is the fully-qualified name of the BackupService's ListBackups
	// RPC.
	BackupServiceListBackupsProcedure = "/qdrant.cloud.cluster.backup.v1.BackupService/ListBackups"
	// BackupServiceCreateBackupProcedure is the fully-qualified name of the BackupService's
	// CreateBackup RPC.
	BackupServiceCreateBackupProcedure = "/qdrant.cloud.cluster.backup.v1.BackupService/CreateBackup"
	// BackupServiceDeleteBackupProcedure is the fully-qualified name of the BackupService's
	// DeleteBackup RPC.
	BackupServiceDeleteBackupProcedure = "/qdrant.cloud.cluster.backup.v1.BackupService/DeleteBackup"
	// BackupServiceListBackupRestoresProcedure is the fully-qualified name of the BackupService's
	// ListBackupRestores RPC.
	BackupServiceListBackupRestoresProcedure = "/qdrant.cloud.cluster.backup.v1.BackupService/ListBackupRestores"
	// BackupServiceRestoreBackupProcedure is the fully-qualified name of the BackupService's
	// RestoreBackup RPC.
	BackupServiceRestoreBackupProcedure = "/qdrant.cloud.cluster.backup.v1.BackupService/RestoreBackup"
	// BackupServiceListBackupSchedulesProcedure is the fully-qualified name of the BackupService's
	// ListBackupSchedules RPC.
	BackupServiceListBackupSchedulesProcedure = "/qdrant.cloud.cluster.backup.v1.BackupService/ListBackupSchedules"
	// BackupServiceGetBackupScheduleProcedure is the fully-qualified name of the BackupService's
	// GetBackupSchedule RPC.
	BackupServiceGetBackupScheduleProcedure = "/qdrant.cloud.cluster.backup.v1.BackupService/GetBackupSchedule"
	// BackupServiceCreateBackupScheduleProcedure is the fully-qualified name of the BackupService's
	// CreateBackupSchedule RPC.
	BackupServiceCreateBackupScheduleProcedure = "/qdrant.cloud.cluster.backup.v1.BackupService/CreateBackupSchedule"
	// BackupServiceUpdateBackupScheduleProcedure is the fully-qualified name of the BackupService's
	// UpdateBackupSchedule RPC.
	BackupServiceUpdateBackupScheduleProcedure = "/qdrant.cloud.cluster.backup.v1.BackupService/UpdateBackupSchedule"
	// BackupServiceDeleteBackupScheduleProcedure is the fully-qualified name of the BackupService's
	// DeleteBackupSchedule RPC.
	BackupServiceDeleteBackupScheduleProcedure = "/qdrant.cloud.cluster.backup.v1.BackupService/DeleteBackupSchedule"
)

// BackupServiceClient is a client for the qdrant.cloud.cluster.backup.v1.BackupService service.
type BackupServiceClient interface {
	// Lists all backups in the account identified by the given ID.
	// Required permissions:
	// - read:backups
	ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error)
	// Creates a backup for the cluster identified by the given ID.
	// Required permissions:
	// - write:backups
	CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error)
	// Deletes a backup in the account identified by the given ID.
	// Required permissions:
	// - delete:backups
	DeleteBackup(context.Context, *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error)
	// Lists all backup restores in the account identified by the given ID.
	// Required permissions:
	// - read:backups
	ListBackupRestores(context.Context, *connect.Request[v1.ListBackupRestoresRequest]) (*connect.Response[v1.ListBackupRestoresResponse], error)
	// Restores a backup in the account identified by the given ID.
	// Required permissions:
	// - admin:backups
	RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error)
	// Lists all backup schedules in the account identified by the given ID.
	// Required permissions:
	// - read:backup_schedules
	ListBackupSchedules(context.Context, *connect.Request[v1.ListBackupSchedulesRequest]) (*connect.Response[v1.ListBackupSchedulesResponse], error)
	// Gets a backup schedule in the account identified by the given ID.
	// Required permissions:
	// - read:backup_schedules
	GetBackupSchedule(context.Context, *connect.Request[v1.GetBackupScheduleRequest]) (*connect.Response[v1.GetBackupScheduleResponse], error)
	// Creates a backup schedule in the account identified by the given ID.
	// Required permissions:
	// - write:backup_schedules
	CreateBackupSchedule(context.Context, *connect.Request[v1.CreateBackupScheduleRequest]) (*connect.Response[v1.CreateBackupScheduleResponse], error)
	// Updates a backup schedule in the account identified by the given ID.
	// Required permissions:
	// - write:backup_schedules
	UpdateBackupSchedule(context.Context, *connect.Request[v1.UpdateBackupScheduleRequest]) (*connect.Response[v1.UpdateBackupScheduleResponse], error)
	// Deletes a backup schedule in the account identified by the given ID.
	// Required permissions:
	// - delete:backup_schedules
	DeleteBackupSchedule(context.Context, *connect.Request[v1.DeleteBackupScheduleRequest]) (*connect.Response[v1.DeleteBackupScheduleResponse], error)
}

// NewBackupServiceClient constructs a client for the qdrant.cloud.cluster.backup.v1.BackupService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backupServiceMethods := v1.File_qdrant_cloud_cluster_backup_v1_backup_proto.Services().ByName("BackupService").Methods()
	return &backupServiceClient{
		listBackups: connect.NewClient[v1.ListBackupsRequest, v1.ListBackupsResponse](
			httpClient,
			baseURL+BackupServiceListBackupsProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ListBackups")),
			connect.WithClientOptions(opts...),
		),
		createBackup: connect.NewClient[v1.CreateBackupRequest, v1.CreateBackupResponse](
			httpClient,
			baseURL+BackupServiceCreateBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("CreateBackup")),
			connect.WithClientOptions(opts...),
		),
		deleteBackup: connect.NewClient[v1.DeleteBackupRequest, v1.DeleteBackupResponse](
			httpClient,
			baseURL+BackupServiceDeleteBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("DeleteBackup")),
			connect.WithClientOptions(opts...),
		),
		listBackupRestores: connect.NewClient[v1.ListBackupRestoresRequest, v1.ListBackupRestoresResponse](
			httpClient,
			baseURL+BackupServiceListBackupRestoresProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ListBackupRestores")),
			connect.WithClientOptions(opts...),
		),
		restoreBackup: connect.NewClient[v1.RestoreBackupRequest, v1.RestoreBackupResponse](
			httpClient,
			baseURL+BackupServiceRestoreBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("RestoreBackup")),
			connect.WithClientOptions(opts...),
		),
		listBackupSchedules: connect.NewClient[v1.ListBackupSchedulesRequest, v1.ListBackupSchedulesResponse](
			httpClient,
			baseURL+BackupServiceListBackupSchedulesProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ListBackupSchedules")),
			connect.WithClientOptions(opts...),
		),
		getBackupSchedule: connect.NewClient[v1.GetBackupScheduleRequest, v1.GetBackupScheduleResponse](
			httpClient,
			baseURL+BackupServiceGetBackupScheduleProcedure,
			connect.WithSchema(backupServiceMethods.ByName("GetBackupSchedule")),
			connect.WithClientOptions(opts...),
		),
		createBackupSchedule: connect.NewClient[v1.CreateBackupScheduleRequest, v1.CreateBackupScheduleResponse](
			httpClient,
			baseURL+BackupServiceCreateBackupScheduleProcedure,
			connect.WithSchema(backupServiceMethods.ByName("CreateBackupSchedule")),
			connect.WithClientOptions(opts...),
		),
		updateBackupSchedule: connect.NewClient[v1.UpdateBackupScheduleRequest, v1.UpdateBackupScheduleResponse](
			httpClient,
			baseURL+BackupServiceUpdateBackupScheduleProcedure,
			connect.WithSchema(backupServiceMethods.ByName("UpdateBackupSchedule")),
			connect.WithClientOptions(opts...),
		),
		deleteBackupSchedule: connect.NewClient[v1.DeleteBackupScheduleRequest, v1.DeleteBackupScheduleResponse](
			httpClient,
			baseURL+BackupServiceDeleteBackupScheduleProcedure,
			connect.WithSchema(backupServiceMethods.ByName("DeleteBackupSchedule")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backupServiceClient implements BackupServiceClient.
type backupServiceClient struct {
	listBackups          *connect.Client[v1.ListBackupsRequest, v1.ListBackupsResponse]
	createBackup         *connect.Client[v1.CreateBackupRequest, v1.CreateBackupResponse]
	deleteBackup         *connect.Client[v1.DeleteBackupRequest, v1.DeleteBackupResponse]
	listBackupRestores   *connect.Client[v1.ListBackupRestoresRequest, v1.ListBackupRestoresResponse]
	restoreBackup        *connect.Client[v1.RestoreBackupRequest, v1.RestoreBackupResponse]
	listBackupSchedules  *connect.Client[v1.ListBackupSchedulesRequest, v1.ListBackupSchedulesResponse]
	getBackupSchedule    *connect.Client[v1.GetBackupScheduleRequest, v1.GetBackupScheduleResponse]
	createBackupSchedule *connect.Client[v1.CreateBackupScheduleRequest, v1.CreateBackupScheduleResponse]
	updateBackupSchedule *connect.Client[v1.UpdateBackupScheduleRequest, v1.UpdateBackupScheduleResponse]
	deleteBackupSchedule *connect.Client[v1.DeleteBackupScheduleRequest, v1.DeleteBackupScheduleResponse]
}

// ListBackups calls qdrant.cloud.cluster.backup.v1.BackupService.ListBackups.
func (c *backupServiceClient) ListBackups(ctx context.Context, req *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error) {
	return c.listBackups.CallUnary(ctx, req)
}

// CreateBackup calls qdrant.cloud.cluster.backup.v1.BackupService.CreateBackup.
func (c *backupServiceClient) CreateBackup(ctx context.Context, req *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error) {
	return c.createBackup.CallUnary(ctx, req)
}

// DeleteBackup calls qdrant.cloud.cluster.backup.v1.BackupService.DeleteBackup.
func (c *backupServiceClient) DeleteBackup(ctx context.Context, req *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error) {
	return c.deleteBackup.CallUnary(ctx, req)
}

// ListBackupRestores calls qdrant.cloud.cluster.backup.v1.BackupService.ListBackupRestores.
func (c *backupServiceClient) ListBackupRestores(ctx context.Context, req *connect.Request[v1.ListBackupRestoresRequest]) (*connect.Response[v1.ListBackupRestoresResponse], error) {
	return c.listBackupRestores.CallUnary(ctx, req)
}

// RestoreBackup calls qdrant.cloud.cluster.backup.v1.BackupService.RestoreBackup.
func (c *backupServiceClient) RestoreBackup(ctx context.Context, req *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error) {
	return c.restoreBackup.CallUnary(ctx, req)
}

// ListBackupSchedules calls qdrant.cloud.cluster.backup.v1.BackupService.ListBackupSchedules.
func (c *backupServiceClient) ListBackupSchedules(ctx context.Context, req *connect.Request[v1.ListBackupSchedulesRequest]) (*connect.Response[v1.ListBackupSchedulesResponse], error) {
	return c.listBackupSchedules.CallUnary(ctx, req)
}

// GetBackupSchedule calls qdrant.cloud.cluster.backup.v1.BackupService.GetBackupSchedule.
func (c *backupServiceClient) GetBackupSchedule(ctx context.Context, req *connect.Request[v1.GetBackupScheduleRequest]) (*connect.Response[v1.GetBackupScheduleResponse], error) {
	return c.getBackupSchedule.CallUnary(ctx, req)
}

// CreateBackupSchedule calls qdrant.cloud.cluster.backup.v1.BackupService.CreateBackupSchedule.
func (c *backupServiceClient) CreateBackupSchedule(ctx context.Context, req *connect.Request[v1.CreateBackupScheduleRequest]) (*connect.Response[v1.CreateBackupScheduleResponse], error) {
	return c.createBackupSchedule.CallUnary(ctx, req)
}

// UpdateBackupSchedule calls qdrant.cloud.cluster.backup.v1.BackupService.UpdateBackupSchedule.
func (c *backupServiceClient) UpdateBackupSchedule(ctx context.Context, req *connect.Request[v1.UpdateBackupScheduleRequest]) (*connect.Response[v1.UpdateBackupScheduleResponse], error) {
	return c.updateBackupSchedule.CallUnary(ctx, req)
}

// DeleteBackupSchedule calls qdrant.cloud.cluster.backup.v1.BackupService.DeleteBackupSchedule.
func (c *backupServiceClient) DeleteBackupSchedule(ctx context.Context, req *connect.Request[v1.DeleteBackupScheduleRequest]) (*connect.Response[v1.DeleteBackupScheduleResponse], error) {
	return c.deleteBackupSchedule.CallUnary(ctx, req)
}

// BackupServiceHandler is an implementation of the qdrant.cloud.cluster.backup.v1.BackupService
// service.
type BackupServiceHandler interface {
	// Lists all backups in the account identified by the given ID.
	// Required permissions:
	// - read:backups
	ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error)
	// Creates a backup for the cluster identified by the given ID.
	// Required permissions:
	// - write:backups
	CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error)
	// Deletes a backup in the account identified by the given ID.
	// Required permissions:
	// - delete:backups
	DeleteBackup(context.Context, *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error)
	// Lists all backup restores in the account identified by the given ID.
	// Required permissions:
	// - read:backups
	ListBackupRestores(context.Context, *connect.Request[v1.ListBackupRestoresRequest]) (*connect.Response[v1.ListBackupRestoresResponse], error)
	// Restores a backup in the account identified by the given ID.
	// Required permissions:
	// - admin:backups
	RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error)
	// Lists all backup schedules in the account identified by the given ID.
	// Required permissions:
	// - read:backup_schedules
	ListBackupSchedules(context.Context, *connect.Request[v1.ListBackupSchedulesRequest]) (*connect.Response[v1.ListBackupSchedulesResponse], error)
	// Gets a backup schedule in the account identified by the given ID.
	// Required permissions:
	// - read:backup_schedules
	GetBackupSchedule(context.Context, *connect.Request[v1.GetBackupScheduleRequest]) (*connect.Response[v1.GetBackupScheduleResponse], error)
	// Creates a backup schedule in the account identified by the given ID.
	// Required permissions:
	// - write:backup_schedules
	CreateBackupSchedule(context.Context, *connect.Request[v1.CreateBackupScheduleRequest]) (*connect.Response[v1.CreateBackupScheduleResponse], error)
	// Updates a backup schedule in the account identified by the given ID.
	// Required permissions:
	// - write:backup_schedules
	UpdateBackupSchedule(context.Context, *connect.Request[v1.UpdateBackupScheduleRequest]) (*connect.Response[v1.UpdateBackupScheduleResponse], error)
	// Deletes a backup schedule in the account identified by the given ID.
	// Required permissions:
	// - delete:backup_schedules
	DeleteBackupSchedule(context.Context, *connect.Request[v1.DeleteBackupScheduleRequest]) (*connect.Response[v1.DeleteBackupScheduleResponse], error)
}

// NewBackupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackupServiceHandler(svc BackupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backupServiceMethods := v1.File_qdrant_cloud_cluster_backup_v1_backup_proto.Services().ByName("BackupService").Methods()
	backupServiceListBackupsHandler := connect.NewUnaryHandler(
		BackupServiceListBackupsProcedure,
		svc.ListBackups,
		connect.WithSchema(backupServiceMethods.ByName("ListBackups")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceCreateBackupHandler := connect.NewUnaryHandler(
		BackupServiceCreateBackupProcedure,
		svc.CreateBackup,
		connect.WithSchema(backupServiceMethods.ByName("CreateBackup")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceDeleteBackupHandler := connect.NewUnaryHandler(
		BackupServiceDeleteBackupProcedure,
		svc.DeleteBackup,
		connect.WithSchema(backupServiceMethods.ByName("DeleteBackup")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceListBackupRestoresHandler := connect.NewUnaryHandler(
		BackupServiceListBackupRestoresProcedure,
		svc.ListBackupRestores,
		connect.WithSchema(backupServiceMethods.ByName("ListBackupRestores")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceRestoreBackupHandler := connect.NewUnaryHandler(
		BackupServiceRestoreBackupProcedure,
		svc.RestoreBackup,
		connect.WithSchema(backupServiceMethods.ByName("RestoreBackup")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceListBackupSchedulesHandler := connect.NewUnaryHandler(
		BackupServiceListBackupSchedulesProcedure,
		svc.ListBackupSchedules,
		connect.WithSchema(backupServiceMethods.ByName("ListBackupSchedules")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceGetBackupScheduleHandler := connect.NewUnaryHandler(
		BackupServiceGetBackupScheduleProcedure,
		svc.GetBackupSchedule,
		connect.WithSchema(backupServiceMethods.ByName("GetBackupSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceCreateBackupScheduleHandler := connect.NewUnaryHandler(
		BackupServiceCreateBackupScheduleProcedure,
		svc.CreateBackupSchedule,
		connect.WithSchema(backupServiceMethods.ByName("CreateBackupSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceUpdateBackupScheduleHandler := connect.NewUnaryHandler(
		BackupServiceUpdateBackupScheduleProcedure,
		svc.UpdateBackupSchedule,
		connect.WithSchema(backupServiceMethods.ByName("UpdateBackupSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceDeleteBackupScheduleHandler := connect.NewUnaryHandler(
		BackupServiceDeleteBackupScheduleProcedure,
		svc.DeleteBackupSchedule,
		connect.WithSchema(backupServiceMethods.ByName("DeleteBackupSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.cluster.backup.v1.BackupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackupServiceListBackupsProcedure:
			backupServiceListBackupsHandler.ServeHTTP(w, r)
		case BackupServiceCreateBackupProcedure:
			backupServiceCreateBackupHandler.ServeHTTP(w, r)
		case BackupServiceDeleteBackupProcedure:
			backupServiceDeleteBackupHandler.ServeHTTP(w, r)
		case BackupServiceListBackupRestoresProcedure:
			backupServiceListBackupRestoresHandler.ServeHTTP(w, r)
		case BackupServiceRestoreBackupProcedure:
			backupServiceRestoreBackupHandler.ServeHTTP(w, r)
		case BackupServiceListBackupSchedulesProcedure:
			backupServiceListBackupSchedulesHandler.ServeHTTP(w, r)
		case BackupServiceGetBackupScheduleProcedure:
			backupServiceGetBackupScheduleHandler.ServeHTTP(w, r)
		case BackupServiceCreateBackupScheduleProcedure:
			backupServiceCreateBackupScheduleHandler.ServeHTTP(w, r)
		case BackupServiceUpdateBackupScheduleProcedure:
			backupServiceUpdateBackupScheduleHandler.ServeHTTP(w, r)
		case BackupServiceDeleteBackupScheduleProcedure:
			backupServiceDeleteBackupScheduleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackupServiceHandler struct{}

func (UnimplementedBackupServiceHandler) ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.backup.v1.BackupService.ListBackups is not implemented"))
}

func (UnimplementedBackupServiceHandler) CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.backup.v1.BackupService.CreateBackup is not implemented"))
}

func (UnimplementedBackupServiceHandler) DeleteBackup(context.Context, *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.backup.v1.BackupService.DeleteBackup is not implemented"))
}

func (UnimplementedBackupServiceHandler) ListBackupRestores(context.Context, *connect.Request[v1.ListBackupRestoresRequest]) (*connect.Response[v1.ListBackupRestoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.backup.v1.BackupService.ListBackupRestores is not implemented"))
}

func (UnimplementedBackupServiceHandler) RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.backup.v1.BackupService.RestoreBackup is not implemented"))
}

func (UnimplementedBackupServiceHandler) ListBackupSchedules(context.Context, *connect.Request[v1.ListBackupSchedulesRequest]) (*connect.Response[v1.ListBackupSchedulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.backup.v1.BackupService.ListBackupSchedules is not implemented"))
}

func (UnimplementedBackupServiceHandler) GetBackupSchedule(context.Context, *connect.Request[v1.GetBackupScheduleRequest]) (*connect.Response[v1.GetBackupScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.backup.v1.BackupService.GetBackupSchedule is not implemented"))
}

func (UnimplementedBackupServiceHandler) CreateBackupSchedule(context.Context, *connect.Request[v1.CreateBackupScheduleRequest]) (*connect.Response[v1.CreateBackupScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.backup.v1.BackupService.CreateBackupSchedule is not implemented"))
}

func (UnimplementedBackupServiceHandler) UpdateBackupSchedule(context.Context, *connect.Request[v1.UpdateBackupScheduleRequest]) (*connect.Response[v1.UpdateBackupScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.backup.v1.BackupService.UpdateBackupSchedule is not implemented"))
}

func (UnimplementedBackupServiceHandler) DeleteBackupSchedule(context.Context, *connect.Request[v1.DeleteBackupScheduleRequest]) (*connect.Response[v1.DeleteBackupScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.backup.v1.BackupService.DeleteBackupSchedule is not implemented"))
}
