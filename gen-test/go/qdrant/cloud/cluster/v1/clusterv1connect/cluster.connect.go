// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/cluster/v1/cluster.proto

package clusterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/cluster/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "qdrant.cloud.cluster.v1.ClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterServiceListClustersProcedure is the fully-qualified name of the ClusterService's
	// ListClusters RPC.
	ClusterServiceListClustersProcedure = "/qdrant.cloud.cluster.v1.ClusterService/ListClusters"
	// ClusterServiceGetClusterProcedure is the fully-qualified name of the ClusterService's GetCluster
	// RPC.
	ClusterServiceGetClusterProcedure = "/qdrant.cloud.cluster.v1.ClusterService/GetCluster"
	// ClusterServiceCreateClusterProcedure is the fully-qualified name of the ClusterService's
	// CreateCluster RPC.
	ClusterServiceCreateClusterProcedure = "/qdrant.cloud.cluster.v1.ClusterService/CreateCluster"
	// ClusterServiceUpdateClusterProcedure is the fully-qualified name of the ClusterService's
	// UpdateCluster RPC.
	ClusterServiceUpdateClusterProcedure = "/qdrant.cloud.cluster.v1.ClusterService/UpdateCluster"
	// ClusterServiceDeleteClusterProcedure is the fully-qualified name of the ClusterService's
	// DeleteCluster RPC.
	ClusterServiceDeleteClusterProcedure = "/qdrant.cloud.cluster.v1.ClusterService/DeleteCluster"
	// ClusterServiceRestartClusterProcedure is the fully-qualified name of the ClusterService's
	// RestartCluster RPC.
	ClusterServiceRestartClusterProcedure = "/qdrant.cloud.cluster.v1.ClusterService/RestartCluster"
	// ClusterServiceSuspendClusterProcedure is the fully-qualified name of the ClusterService's
	// SuspendCluster RPC.
	ClusterServiceSuspendClusterProcedure = "/qdrant.cloud.cluster.v1.ClusterService/SuspendCluster"
	// ClusterServiceSuggestClusterNameProcedure is the fully-qualified name of the ClusterService's
	// SuggestClusterName RPC.
	ClusterServiceSuggestClusterNameProcedure = "/qdrant.cloud.cluster.v1.ClusterService/SuggestClusterName"
	// ClusterServiceListQdrantReleasesProcedure is the fully-qualified name of the ClusterService's
	// ListQdrantReleases RPC.
	ClusterServiceListQdrantReleasesProcedure = "/qdrant.cloud.cluster.v1.ClusterService/ListQdrantReleases"
)

// ClusterServiceClient is a client for the qdrant.cloud.cluster.v1.ClusterService service.
type ClusterServiceClient interface {
	// Lists all clusters in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	// Gets a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// Creates a cluster in the account identified by the given ID.
	// Required permissions:
	// - write:clusters
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error)
	// Updates a cluster in the account identified by the given ID.
	// Required permissions:
	// - write:clusters
	UpdateCluster(context.Context, *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error)
	// Deletes a cluster in the account identified by the given ID.
	// Required permissions:
	// - delete:clusters
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	// Restarts a cluster in the account identified by the given ID.
	// Required permissions:
	// - write:clusters
	RestartCluster(context.Context, *connect.Request[v1.RestartClusterRequest]) (*connect.Response[v1.RestartClusterResponse], error)
	// Suspends a cluster in the account identified by the given ID.
	// Required permissions:
	// - write:clusters
	SuspendCluster(context.Context, *connect.Request[v1.SuspendClusterRequest]) (*connect.Response[v1.SuspendClusterResponse], error)
	// Suggests a unique and human-friendly name for a new cluster in the specified account.
	// This can be used by clients to pre-fill the name field when creating a new cluster.
	// Required permissions:
	// - None (authenticated only)
	SuggestClusterName(context.Context, *connect.Request[v1.SuggestClusterNameRequest]) (*connect.Response[v1.SuggestClusterNameResponse], error)
	// Lists all qdrant releases in the account identified by the given ID.
	// Optional a cluster ID can be provided, the list will return the options to update to only.
	// Required permissions:
	// - read:clusters
	ListQdrantReleases(context.Context, *connect.Request[v1.ListQdrantReleasesRequest]) (*connect.Response[v1.ListQdrantReleasesResponse], error)
}

// NewClusterServiceClient constructs a client for the qdrant.cloud.cluster.v1.ClusterService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clusterServiceMethods := v1.File_qdrant_cloud_cluster_v1_cluster_proto.Services().ByName("ClusterService").Methods()
	return &clusterServiceClient{
		listClusters: connect.NewClient[v1.ListClustersRequest, v1.ListClustersResponse](
			httpClient,
			baseURL+ClusterServiceListClustersProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("ListClusters")),
			connect.WithClientOptions(opts...),
		),
		getCluster: connect.NewClient[v1.GetClusterRequest, v1.GetClusterResponse](
			httpClient,
			baseURL+ClusterServiceGetClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("GetCluster")),
			connect.WithClientOptions(opts...),
		),
		createCluster: connect.NewClient[v1.CreateClusterRequest, v1.CreateClusterResponse](
			httpClient,
			baseURL+ClusterServiceCreateClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("CreateCluster")),
			connect.WithClientOptions(opts...),
		),
		updateCluster: connect.NewClient[v1.UpdateClusterRequest, v1.UpdateClusterResponse](
			httpClient,
			baseURL+ClusterServiceUpdateClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("UpdateCluster")),
			connect.WithClientOptions(opts...),
		),
		deleteCluster: connect.NewClient[v1.DeleteClusterRequest, v1.DeleteClusterResponse](
			httpClient,
			baseURL+ClusterServiceDeleteClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("DeleteCluster")),
			connect.WithClientOptions(opts...),
		),
		restartCluster: connect.NewClient[v1.RestartClusterRequest, v1.RestartClusterResponse](
			httpClient,
			baseURL+ClusterServiceRestartClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("RestartCluster")),
			connect.WithClientOptions(opts...),
		),
		suspendCluster: connect.NewClient[v1.SuspendClusterRequest, v1.SuspendClusterResponse](
			httpClient,
			baseURL+ClusterServiceSuspendClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("SuspendCluster")),
			connect.WithClientOptions(opts...),
		),
		suggestClusterName: connect.NewClient[v1.SuggestClusterNameRequest, v1.SuggestClusterNameResponse](
			httpClient,
			baseURL+ClusterServiceSuggestClusterNameProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("SuggestClusterName")),
			connect.WithClientOptions(opts...),
		),
		listQdrantReleases: connect.NewClient[v1.ListQdrantReleasesRequest, v1.ListQdrantReleasesResponse](
			httpClient,
			baseURL+ClusterServiceListQdrantReleasesProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("ListQdrantReleases")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	listClusters       *connect.Client[v1.ListClustersRequest, v1.ListClustersResponse]
	getCluster         *connect.Client[v1.GetClusterRequest, v1.GetClusterResponse]
	createCluster      *connect.Client[v1.CreateClusterRequest, v1.CreateClusterResponse]
	updateCluster      *connect.Client[v1.UpdateClusterRequest, v1.UpdateClusterResponse]
	deleteCluster      *connect.Client[v1.DeleteClusterRequest, v1.DeleteClusterResponse]
	restartCluster     *connect.Client[v1.RestartClusterRequest, v1.RestartClusterResponse]
	suspendCluster     *connect.Client[v1.SuspendClusterRequest, v1.SuspendClusterResponse]
	suggestClusterName *connect.Client[v1.SuggestClusterNameRequest, v1.SuggestClusterNameResponse]
	listQdrantReleases *connect.Client[v1.ListQdrantReleasesRequest, v1.ListQdrantReleasesResponse]
}

// ListClusters calls qdrant.cloud.cluster.v1.ClusterService.ListClusters.
func (c *clusterServiceClient) ListClusters(ctx context.Context, req *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return c.listClusters.CallUnary(ctx, req)
}

// GetCluster calls qdrant.cloud.cluster.v1.ClusterService.GetCluster.
func (c *clusterServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// CreateCluster calls qdrant.cloud.cluster.v1.ClusterService.CreateCluster.
func (c *clusterServiceClient) CreateCluster(ctx context.Context, req *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error) {
	return c.createCluster.CallUnary(ctx, req)
}

// UpdateCluster calls qdrant.cloud.cluster.v1.ClusterService.UpdateCluster.
func (c *clusterServiceClient) UpdateCluster(ctx context.Context, req *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error) {
	return c.updateCluster.CallUnary(ctx, req)
}

// DeleteCluster calls qdrant.cloud.cluster.v1.ClusterService.DeleteCluster.
func (c *clusterServiceClient) DeleteCluster(ctx context.Context, req *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return c.deleteCluster.CallUnary(ctx, req)
}

// RestartCluster calls qdrant.cloud.cluster.v1.ClusterService.RestartCluster.
func (c *clusterServiceClient) RestartCluster(ctx context.Context, req *connect.Request[v1.RestartClusterRequest]) (*connect.Response[v1.RestartClusterResponse], error) {
	return c.restartCluster.CallUnary(ctx, req)
}

// SuspendCluster calls qdrant.cloud.cluster.v1.ClusterService.SuspendCluster.
func (c *clusterServiceClient) SuspendCluster(ctx context.Context, req *connect.Request[v1.SuspendClusterRequest]) (*connect.Response[v1.SuspendClusterResponse], error) {
	return c.suspendCluster.CallUnary(ctx, req)
}

// SuggestClusterName calls qdrant.cloud.cluster.v1.ClusterService.SuggestClusterName.
func (c *clusterServiceClient) SuggestClusterName(ctx context.Context, req *connect.Request[v1.SuggestClusterNameRequest]) (*connect.Response[v1.SuggestClusterNameResponse], error) {
	return c.suggestClusterName.CallUnary(ctx, req)
}

// ListQdrantReleases calls qdrant.cloud.cluster.v1.ClusterService.ListQdrantReleases.
func (c *clusterServiceClient) ListQdrantReleases(ctx context.Context, req *connect.Request[v1.ListQdrantReleasesRequest]) (*connect.Response[v1.ListQdrantReleasesResponse], error) {
	return c.listQdrantReleases.CallUnary(ctx, req)
}

// ClusterServiceHandler is an implementation of the qdrant.cloud.cluster.v1.ClusterService service.
type ClusterServiceHandler interface {
	// Lists all clusters in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	// Gets a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// Creates a cluster in the account identified by the given ID.
	// Required permissions:
	// - write:clusters
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error)
	// Updates a cluster in the account identified by the given ID.
	// Required permissions:
	// - write:clusters
	UpdateCluster(context.Context, *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error)
	// Deletes a cluster in the account identified by the given ID.
	// Required permissions:
	// - delete:clusters
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	// Restarts a cluster in the account identified by the given ID.
	// Required permissions:
	// - write:clusters
	RestartCluster(context.Context, *connect.Request[v1.RestartClusterRequest]) (*connect.Response[v1.RestartClusterResponse], error)
	// Suspends a cluster in the account identified by the given ID.
	// Required permissions:
	// - write:clusters
	SuspendCluster(context.Context, *connect.Request[v1.SuspendClusterRequest]) (*connect.Response[v1.SuspendClusterResponse], error)
	// Suggests a unique and human-friendly name for a new cluster in the specified account.
	// This can be used by clients to pre-fill the name field when creating a new cluster.
	// Required permissions:
	// - None (authenticated only)
	SuggestClusterName(context.Context, *connect.Request[v1.SuggestClusterNameRequest]) (*connect.Response[v1.SuggestClusterNameResponse], error)
	// Lists all qdrant releases in the account identified by the given ID.
	// Optional a cluster ID can be provided, the list will return the options to update to only.
	// Required permissions:
	// - read:clusters
	ListQdrantReleases(context.Context, *connect.Request[v1.ListQdrantReleasesRequest]) (*connect.Response[v1.ListQdrantReleasesResponse], error)
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterServiceMethods := v1.File_qdrant_cloud_cluster_v1_cluster_proto.Services().ByName("ClusterService").Methods()
	clusterServiceListClustersHandler := connect.NewUnaryHandler(
		ClusterServiceListClustersProcedure,
		svc.ListClusters,
		connect.WithSchema(clusterServiceMethods.ByName("ListClusters")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceGetClusterHandler := connect.NewUnaryHandler(
		ClusterServiceGetClusterProcedure,
		svc.GetCluster,
		connect.WithSchema(clusterServiceMethods.ByName("GetCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceCreateClusterHandler := connect.NewUnaryHandler(
		ClusterServiceCreateClusterProcedure,
		svc.CreateCluster,
		connect.WithSchema(clusterServiceMethods.ByName("CreateCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceUpdateClusterHandler := connect.NewUnaryHandler(
		ClusterServiceUpdateClusterProcedure,
		svc.UpdateCluster,
		connect.WithSchema(clusterServiceMethods.ByName("UpdateCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceDeleteClusterHandler := connect.NewUnaryHandler(
		ClusterServiceDeleteClusterProcedure,
		svc.DeleteCluster,
		connect.WithSchema(clusterServiceMethods.ByName("DeleteCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceRestartClusterHandler := connect.NewUnaryHandler(
		ClusterServiceRestartClusterProcedure,
		svc.RestartCluster,
		connect.WithSchema(clusterServiceMethods.ByName("RestartCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceSuspendClusterHandler := connect.NewUnaryHandler(
		ClusterServiceSuspendClusterProcedure,
		svc.SuspendCluster,
		connect.WithSchema(clusterServiceMethods.ByName("SuspendCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceSuggestClusterNameHandler := connect.NewUnaryHandler(
		ClusterServiceSuggestClusterNameProcedure,
		svc.SuggestClusterName,
		connect.WithSchema(clusterServiceMethods.ByName("SuggestClusterName")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceListQdrantReleasesHandler := connect.NewUnaryHandler(
		ClusterServiceListQdrantReleasesProcedure,
		svc.ListQdrantReleases,
		connect.WithSchema(clusterServiceMethods.ByName("ListQdrantReleases")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.cluster.v1.ClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterServiceListClustersProcedure:
			clusterServiceListClustersHandler.ServeHTTP(w, r)
		case ClusterServiceGetClusterProcedure:
			clusterServiceGetClusterHandler.ServeHTTP(w, r)
		case ClusterServiceCreateClusterProcedure:
			clusterServiceCreateClusterHandler.ServeHTTP(w, r)
		case ClusterServiceUpdateClusterProcedure:
			clusterServiceUpdateClusterHandler.ServeHTTP(w, r)
		case ClusterServiceDeleteClusterProcedure:
			clusterServiceDeleteClusterHandler.ServeHTTP(w, r)
		case ClusterServiceRestartClusterProcedure:
			clusterServiceRestartClusterHandler.ServeHTTP(w, r)
		case ClusterServiceSuspendClusterProcedure:
			clusterServiceSuspendClusterHandler.ServeHTTP(w, r)
		case ClusterServiceSuggestClusterNameProcedure:
			clusterServiceSuggestClusterNameHandler.ServeHTTP(w, r)
		case ClusterServiceListQdrantReleasesProcedure:
			clusterServiceListQdrantReleasesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.v1.ClusterService.ListClusters is not implemented"))
}

func (UnimplementedClusterServiceHandler) GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.v1.ClusterService.GetCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.v1.ClusterService.CreateCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) UpdateCluster(context.Context, *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.v1.ClusterService.UpdateCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.v1.ClusterService.DeleteCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) RestartCluster(context.Context, *connect.Request[v1.RestartClusterRequest]) (*connect.Response[v1.RestartClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.v1.ClusterService.RestartCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) SuspendCluster(context.Context, *connect.Request[v1.SuspendClusterRequest]) (*connect.Response[v1.SuspendClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.v1.ClusterService.SuspendCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) SuggestClusterName(context.Context, *connect.Request[v1.SuggestClusterNameRequest]) (*connect.Response[v1.SuggestClusterNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.v1.ClusterService.SuggestClusterName is not implemented"))
}

func (UnimplementedClusterServiceHandler) ListQdrantReleases(context.Context, *connect.Request[v1.ListQdrantReleasesRequest]) (*connect.Response[v1.ListQdrantReleasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.v1.ClusterService.ListQdrantReleases is not implemented"))
}
