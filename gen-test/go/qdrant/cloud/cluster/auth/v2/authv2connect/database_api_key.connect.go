// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/cluster/auth/v2/database_api_key.proto

package authv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/cluster/auth/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DatabaseApiKeyServiceName is the fully-qualified name of the DatabaseApiKeyService service.
	DatabaseApiKeyServiceName = "qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DatabaseApiKeyServiceListDatabaseApiKeysProcedure is the fully-qualified name of the
	// DatabaseApiKeyService's ListDatabaseApiKeys RPC.
	DatabaseApiKeyServiceListDatabaseApiKeysProcedure = "/qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService/ListDatabaseApiKeys"
	// DatabaseApiKeyServiceCreateDatabaseApiKeyProcedure is the fully-qualified name of the
	// DatabaseApiKeyService's CreateDatabaseApiKey RPC.
	DatabaseApiKeyServiceCreateDatabaseApiKeyProcedure = "/qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService/CreateDatabaseApiKey"
	// DatabaseApiKeyServiceDeleteDatabaseApiKeyProcedure is the fully-qualified name of the
	// DatabaseApiKeyService's DeleteDatabaseApiKey RPC.
	DatabaseApiKeyServiceDeleteDatabaseApiKeyProcedure = "/qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService/DeleteDatabaseApiKey"
)

// DatabaseApiKeyServiceClient is a client for the
// qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService service.
type DatabaseApiKeyServiceClient interface {
	// Lists all database api keys in the account identified by the given ID.
	// Required permissions:
	// - read:api_keys
	ListDatabaseApiKeys(context.Context, *connect.Request[v2.ListDatabaseApiKeysRequest]) (*connect.Response[v2.ListDatabaseApiKeysResponse], error)
	// Creates a database api key in the account identified by the given ID.
	// Required permissions:
	// - write:api_keys
	CreateDatabaseApiKey(context.Context, *connect.Request[v2.CreateDatabaseApiKeyRequest]) (*connect.Response[v2.CreateDatabaseApiKeyResponse], error)
	// Deletes a database api key in the account identified by the given ID.
	// Required permissions:
	// - delete:api_keys
	DeleteDatabaseApiKey(context.Context, *connect.Request[v2.DeleteDatabaseApiKeyRequest]) (*connect.Response[v2.DeleteDatabaseApiKeyResponse], error)
}

// NewDatabaseApiKeyServiceClient constructs a client for the
// qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDatabaseApiKeyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DatabaseApiKeyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	databaseApiKeyServiceMethods := v2.File_qdrant_cloud_cluster_auth_v2_database_api_key_proto.Services().ByName("DatabaseApiKeyService").Methods()
	return &databaseApiKeyServiceClient{
		listDatabaseApiKeys: connect.NewClient[v2.ListDatabaseApiKeysRequest, v2.ListDatabaseApiKeysResponse](
			httpClient,
			baseURL+DatabaseApiKeyServiceListDatabaseApiKeysProcedure,
			connect.WithSchema(databaseApiKeyServiceMethods.ByName("ListDatabaseApiKeys")),
			connect.WithClientOptions(opts...),
		),
		createDatabaseApiKey: connect.NewClient[v2.CreateDatabaseApiKeyRequest, v2.CreateDatabaseApiKeyResponse](
			httpClient,
			baseURL+DatabaseApiKeyServiceCreateDatabaseApiKeyProcedure,
			connect.WithSchema(databaseApiKeyServiceMethods.ByName("CreateDatabaseApiKey")),
			connect.WithClientOptions(opts...),
		),
		deleteDatabaseApiKey: connect.NewClient[v2.DeleteDatabaseApiKeyRequest, v2.DeleteDatabaseApiKeyResponse](
			httpClient,
			baseURL+DatabaseApiKeyServiceDeleteDatabaseApiKeyProcedure,
			connect.WithSchema(databaseApiKeyServiceMethods.ByName("DeleteDatabaseApiKey")),
			connect.WithClientOptions(opts...),
		),
	}
}

// databaseApiKeyServiceClient implements DatabaseApiKeyServiceClient.
type databaseApiKeyServiceClient struct {
	listDatabaseApiKeys  *connect.Client[v2.ListDatabaseApiKeysRequest, v2.ListDatabaseApiKeysResponse]
	createDatabaseApiKey *connect.Client[v2.CreateDatabaseApiKeyRequest, v2.CreateDatabaseApiKeyResponse]
	deleteDatabaseApiKey *connect.Client[v2.DeleteDatabaseApiKeyRequest, v2.DeleteDatabaseApiKeyResponse]
}

// ListDatabaseApiKeys calls qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService.ListDatabaseApiKeys.
func (c *databaseApiKeyServiceClient) ListDatabaseApiKeys(ctx context.Context, req *connect.Request[v2.ListDatabaseApiKeysRequest]) (*connect.Response[v2.ListDatabaseApiKeysResponse], error) {
	return c.listDatabaseApiKeys.CallUnary(ctx, req)
}

// CreateDatabaseApiKey calls
// qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService.CreateDatabaseApiKey.
func (c *databaseApiKeyServiceClient) CreateDatabaseApiKey(ctx context.Context, req *connect.Request[v2.CreateDatabaseApiKeyRequest]) (*connect.Response[v2.CreateDatabaseApiKeyResponse], error) {
	return c.createDatabaseApiKey.CallUnary(ctx, req)
}

// DeleteDatabaseApiKey calls
// qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService.DeleteDatabaseApiKey.
func (c *databaseApiKeyServiceClient) DeleteDatabaseApiKey(ctx context.Context, req *connect.Request[v2.DeleteDatabaseApiKeyRequest]) (*connect.Response[v2.DeleteDatabaseApiKeyResponse], error) {
	return c.deleteDatabaseApiKey.CallUnary(ctx, req)
}

// DatabaseApiKeyServiceHandler is an implementation of the
// qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService service.
type DatabaseApiKeyServiceHandler interface {
	// Lists all database api keys in the account identified by the given ID.
	// Required permissions:
	// - read:api_keys
	ListDatabaseApiKeys(context.Context, *connect.Request[v2.ListDatabaseApiKeysRequest]) (*connect.Response[v2.ListDatabaseApiKeysResponse], error)
	// Creates a database api key in the account identified by the given ID.
	// Required permissions:
	// - write:api_keys
	CreateDatabaseApiKey(context.Context, *connect.Request[v2.CreateDatabaseApiKeyRequest]) (*connect.Response[v2.CreateDatabaseApiKeyResponse], error)
	// Deletes a database api key in the account identified by the given ID.
	// Required permissions:
	// - delete:api_keys
	DeleteDatabaseApiKey(context.Context, *connect.Request[v2.DeleteDatabaseApiKeyRequest]) (*connect.Response[v2.DeleteDatabaseApiKeyResponse], error)
}

// NewDatabaseApiKeyServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDatabaseApiKeyServiceHandler(svc DatabaseApiKeyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	databaseApiKeyServiceMethods := v2.File_qdrant_cloud_cluster_auth_v2_database_api_key_proto.Services().ByName("DatabaseApiKeyService").Methods()
	databaseApiKeyServiceListDatabaseApiKeysHandler := connect.NewUnaryHandler(
		DatabaseApiKeyServiceListDatabaseApiKeysProcedure,
		svc.ListDatabaseApiKeys,
		connect.WithSchema(databaseApiKeyServiceMethods.ByName("ListDatabaseApiKeys")),
		connect.WithHandlerOptions(opts...),
	)
	databaseApiKeyServiceCreateDatabaseApiKeyHandler := connect.NewUnaryHandler(
		DatabaseApiKeyServiceCreateDatabaseApiKeyProcedure,
		svc.CreateDatabaseApiKey,
		connect.WithSchema(databaseApiKeyServiceMethods.ByName("CreateDatabaseApiKey")),
		connect.WithHandlerOptions(opts...),
	)
	databaseApiKeyServiceDeleteDatabaseApiKeyHandler := connect.NewUnaryHandler(
		DatabaseApiKeyServiceDeleteDatabaseApiKeyProcedure,
		svc.DeleteDatabaseApiKey,
		connect.WithSchema(databaseApiKeyServiceMethods.ByName("DeleteDatabaseApiKey")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DatabaseApiKeyServiceListDatabaseApiKeysProcedure:
			databaseApiKeyServiceListDatabaseApiKeysHandler.ServeHTTP(w, r)
		case DatabaseApiKeyServiceCreateDatabaseApiKeyProcedure:
			databaseApiKeyServiceCreateDatabaseApiKeyHandler.ServeHTTP(w, r)
		case DatabaseApiKeyServiceDeleteDatabaseApiKeyProcedure:
			databaseApiKeyServiceDeleteDatabaseApiKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDatabaseApiKeyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDatabaseApiKeyServiceHandler struct{}

func (UnimplementedDatabaseApiKeyServiceHandler) ListDatabaseApiKeys(context.Context, *connect.Request[v2.ListDatabaseApiKeysRequest]) (*connect.Response[v2.ListDatabaseApiKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService.ListDatabaseApiKeys is not implemented"))
}

func (UnimplementedDatabaseApiKeyServiceHandler) CreateDatabaseApiKey(context.Context, *connect.Request[v2.CreateDatabaseApiKeyRequest]) (*connect.Response[v2.CreateDatabaseApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService.CreateDatabaseApiKey is not implemented"))
}

func (UnimplementedDatabaseApiKeyServiceHandler) DeleteDatabaseApiKey(context.Context, *connect.Request[v2.DeleteDatabaseApiKeyRequest]) (*connect.Response[v2.DeleteDatabaseApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService.DeleteDatabaseApiKey is not implemented"))
}
