// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/metering/v1/metering.proto

package meteringv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/metering/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MeteringServiceName is the fully-qualified name of the MeteringService service.
	MeteringServiceName = "qdrant.cloud.metering.v1.MeteringService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MeteringServiceListMonthlyMeteringsProcedure is the fully-qualified name of the MeteringService's
	// ListMonthlyMeterings RPC.
	MeteringServiceListMonthlyMeteringsProcedure = "/qdrant.cloud.metering.v1.MeteringService/ListMonthlyMeterings"
	// MeteringServiceListMeteringsProcedure is the fully-qualified name of the MeteringService's
	// ListMeterings RPC.
	MeteringServiceListMeteringsProcedure = "/qdrant.cloud.metering.v1.MeteringService/ListMeterings"
)

// MeteringServiceClient is a client for the qdrant.cloud.metering.v1.MeteringService service.
type MeteringServiceClient interface {
	// Lists aggregated monthly meterings for the account identified by the given ID.
	// Each summary represents the total metering amount for one month.
	// Required permissions:
	// - read:payment_information
	ListMonthlyMeterings(context.Context, *connect.Request[v1.ListMonthlyMeteringsRequest]) (*connect.Response[v1.ListMonthlyMeteringsResponse], error)
	// Lists detailed metering entries for a specific month for the account identified by the given ID.
	// Required permissions:
	// - read:payment_information
	ListMeterings(context.Context, *connect.Request[v1.ListMeteringsRequest]) (*connect.Response[v1.ListMeteringsResponse], error)
}

// NewMeteringServiceClient constructs a client for the qdrant.cloud.metering.v1.MeteringService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMeteringServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MeteringServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	meteringServiceMethods := v1.File_qdrant_cloud_metering_v1_metering_proto.Services().ByName("MeteringService").Methods()
	return &meteringServiceClient{
		listMonthlyMeterings: connect.NewClient[v1.ListMonthlyMeteringsRequest, v1.ListMonthlyMeteringsResponse](
			httpClient,
			baseURL+MeteringServiceListMonthlyMeteringsProcedure,
			connect.WithSchema(meteringServiceMethods.ByName("ListMonthlyMeterings")),
			connect.WithClientOptions(opts...),
		),
		listMeterings: connect.NewClient[v1.ListMeteringsRequest, v1.ListMeteringsResponse](
			httpClient,
			baseURL+MeteringServiceListMeteringsProcedure,
			connect.WithSchema(meteringServiceMethods.ByName("ListMeterings")),
			connect.WithClientOptions(opts...),
		),
	}
}

// meteringServiceClient implements MeteringServiceClient.
type meteringServiceClient struct {
	listMonthlyMeterings *connect.Client[v1.ListMonthlyMeteringsRequest, v1.ListMonthlyMeteringsResponse]
	listMeterings        *connect.Client[v1.ListMeteringsRequest, v1.ListMeteringsResponse]
}

// ListMonthlyMeterings calls qdrant.cloud.metering.v1.MeteringService.ListMonthlyMeterings.
func (c *meteringServiceClient) ListMonthlyMeterings(ctx context.Context, req *connect.Request[v1.ListMonthlyMeteringsRequest]) (*connect.Response[v1.ListMonthlyMeteringsResponse], error) {
	return c.listMonthlyMeterings.CallUnary(ctx, req)
}

// ListMeterings calls qdrant.cloud.metering.v1.MeteringService.ListMeterings.
func (c *meteringServiceClient) ListMeterings(ctx context.Context, req *connect.Request[v1.ListMeteringsRequest]) (*connect.Response[v1.ListMeteringsResponse], error) {
	return c.listMeterings.CallUnary(ctx, req)
}

// MeteringServiceHandler is an implementation of the qdrant.cloud.metering.v1.MeteringService
// service.
type MeteringServiceHandler interface {
	// Lists aggregated monthly meterings for the account identified by the given ID.
	// Each summary represents the total metering amount for one month.
	// Required permissions:
	// - read:payment_information
	ListMonthlyMeterings(context.Context, *connect.Request[v1.ListMonthlyMeteringsRequest]) (*connect.Response[v1.ListMonthlyMeteringsResponse], error)
	// Lists detailed metering entries for a specific month for the account identified by the given ID.
	// Required permissions:
	// - read:payment_information
	ListMeterings(context.Context, *connect.Request[v1.ListMeteringsRequest]) (*connect.Response[v1.ListMeteringsResponse], error)
}

// NewMeteringServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMeteringServiceHandler(svc MeteringServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	meteringServiceMethods := v1.File_qdrant_cloud_metering_v1_metering_proto.Services().ByName("MeteringService").Methods()
	meteringServiceListMonthlyMeteringsHandler := connect.NewUnaryHandler(
		MeteringServiceListMonthlyMeteringsProcedure,
		svc.ListMonthlyMeterings,
		connect.WithSchema(meteringServiceMethods.ByName("ListMonthlyMeterings")),
		connect.WithHandlerOptions(opts...),
	)
	meteringServiceListMeteringsHandler := connect.NewUnaryHandler(
		MeteringServiceListMeteringsProcedure,
		svc.ListMeterings,
		connect.WithSchema(meteringServiceMethods.ByName("ListMeterings")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.metering.v1.MeteringService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MeteringServiceListMonthlyMeteringsProcedure:
			meteringServiceListMonthlyMeteringsHandler.ServeHTTP(w, r)
		case MeteringServiceListMeteringsProcedure:
			meteringServiceListMeteringsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMeteringServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMeteringServiceHandler struct{}

func (UnimplementedMeteringServiceHandler) ListMonthlyMeterings(context.Context, *connect.Request[v1.ListMonthlyMeteringsRequest]) (*connect.Response[v1.ListMonthlyMeteringsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.metering.v1.MeteringService.ListMonthlyMeterings is not implemented"))
}

func (UnimplementedMeteringServiceHandler) ListMeterings(context.Context, *connect.Request[v1.ListMeteringsRequest]) (*connect.Response[v1.ListMeteringsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.metering.v1.MeteringService.ListMeterings is not implemented"))
}
