// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/serverless/collection/v1/collection.proto

package collectionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/serverless/collection/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectionServiceName is the fully-qualified name of the CollectionService service.
	CollectionServiceName = "qdrant.cloud.serverless.collection.v1.CollectionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectionServiceListCollectionsProcedure is the fully-qualified name of the CollectionService's
	// ListCollections RPC.
	CollectionServiceListCollectionsProcedure = "/qdrant.cloud.serverless.collection.v1.CollectionService/ListCollections"
	// CollectionServiceCreateCollectionProcedure is the fully-qualified name of the CollectionService's
	// CreateCollection RPC.
	CollectionServiceCreateCollectionProcedure = "/qdrant.cloud.serverless.collection.v1.CollectionService/CreateCollection"
	// CollectionServiceUpgradeCollectionProcedure is the fully-qualified name of the
	// CollectionService's UpgradeCollection RPC.
	CollectionServiceUpgradeCollectionProcedure = "/qdrant.cloud.serverless.collection.v1.CollectionService/UpgradeCollection"
	// CollectionServiceDeleteCollectionProcedure is the fully-qualified name of the CollectionService's
	// DeleteCollection RPC.
	CollectionServiceDeleteCollectionProcedure = "/qdrant.cloud.serverless.collection.v1.CollectionService/DeleteCollection"
)

// CollectionServiceClient is a client for the
// qdrant.cloud.serverless.collection.v1.CollectionService service.
type CollectionServiceClient interface {
	// ListCollections returns all collections for the authenticated user
	// Required Permissions:
	// - write:serverless
	ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error)
	// CreateCollection creates a new collection with the specified configuration
	// Required Permissions:
	// - write:serverless
	CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error)
	// Upgrade collection: If current user have paid account, this API will lift the limit of the collection
	// Required Permissions:
	// - write:serverless
	UpgradeCollection(context.Context, *connect.Request[v1.UpgradeCollectionRequest]) (*connect.Response[v1.UpgradeCollectionResponse], error)
	// DeleteCollection removes a collection by ID
	// Required Permissions:
	// - write:serverless
	DeleteCollection(context.Context, *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error)
}

// NewCollectionServiceClient constructs a client for the
// qdrant.cloud.serverless.collection.v1.CollectionService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	collectionServiceMethods := v1.File_qdrant_cloud_serverless_collection_v1_collection_proto.Services().ByName("CollectionService").Methods()
	return &collectionServiceClient{
		listCollections: connect.NewClient[v1.ListCollectionsRequest, v1.ListCollectionsResponse](
			httpClient,
			baseURL+CollectionServiceListCollectionsProcedure,
			connect.WithSchema(collectionServiceMethods.ByName("ListCollections")),
			connect.WithClientOptions(opts...),
		),
		createCollection: connect.NewClient[v1.CreateCollectionRequest, v1.CreateCollectionResponse](
			httpClient,
			baseURL+CollectionServiceCreateCollectionProcedure,
			connect.WithSchema(collectionServiceMethods.ByName("CreateCollection")),
			connect.WithClientOptions(opts...),
		),
		upgradeCollection: connect.NewClient[v1.UpgradeCollectionRequest, v1.UpgradeCollectionResponse](
			httpClient,
			baseURL+CollectionServiceUpgradeCollectionProcedure,
			connect.WithSchema(collectionServiceMethods.ByName("UpgradeCollection")),
			connect.WithClientOptions(opts...),
		),
		deleteCollection: connect.NewClient[v1.DeleteCollectionRequest, v1.DeleteCollectionResponse](
			httpClient,
			baseURL+CollectionServiceDeleteCollectionProcedure,
			connect.WithSchema(collectionServiceMethods.ByName("DeleteCollection")),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectionServiceClient implements CollectionServiceClient.
type collectionServiceClient struct {
	listCollections   *connect.Client[v1.ListCollectionsRequest, v1.ListCollectionsResponse]
	createCollection  *connect.Client[v1.CreateCollectionRequest, v1.CreateCollectionResponse]
	upgradeCollection *connect.Client[v1.UpgradeCollectionRequest, v1.UpgradeCollectionResponse]
	deleteCollection  *connect.Client[v1.DeleteCollectionRequest, v1.DeleteCollectionResponse]
}

// ListCollections calls qdrant.cloud.serverless.collection.v1.CollectionService.ListCollections.
func (c *collectionServiceClient) ListCollections(ctx context.Context, req *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error) {
	return c.listCollections.CallUnary(ctx, req)
}

// CreateCollection calls qdrant.cloud.serverless.collection.v1.CollectionService.CreateCollection.
func (c *collectionServiceClient) CreateCollection(ctx context.Context, req *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error) {
	return c.createCollection.CallUnary(ctx, req)
}

// UpgradeCollection calls
// qdrant.cloud.serverless.collection.v1.CollectionService.UpgradeCollection.
func (c *collectionServiceClient) UpgradeCollection(ctx context.Context, req *connect.Request[v1.UpgradeCollectionRequest]) (*connect.Response[v1.UpgradeCollectionResponse], error) {
	return c.upgradeCollection.CallUnary(ctx, req)
}

// DeleteCollection calls qdrant.cloud.serverless.collection.v1.CollectionService.DeleteCollection.
func (c *collectionServiceClient) DeleteCollection(ctx context.Context, req *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error) {
	return c.deleteCollection.CallUnary(ctx, req)
}

// CollectionServiceHandler is an implementation of the
// qdrant.cloud.serverless.collection.v1.CollectionService service.
type CollectionServiceHandler interface {
	// ListCollections returns all collections for the authenticated user
	// Required Permissions:
	// - write:serverless
	ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error)
	// CreateCollection creates a new collection with the specified configuration
	// Required Permissions:
	// - write:serverless
	CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error)
	// Upgrade collection: If current user have paid account, this API will lift the limit of the collection
	// Required Permissions:
	// - write:serverless
	UpgradeCollection(context.Context, *connect.Request[v1.UpgradeCollectionRequest]) (*connect.Response[v1.UpgradeCollectionResponse], error)
	// DeleteCollection removes a collection by ID
	// Required Permissions:
	// - write:serverless
	DeleteCollection(context.Context, *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error)
}

// NewCollectionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectionServiceHandler(svc CollectionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectionServiceMethods := v1.File_qdrant_cloud_serverless_collection_v1_collection_proto.Services().ByName("CollectionService").Methods()
	collectionServiceListCollectionsHandler := connect.NewUnaryHandler(
		CollectionServiceListCollectionsProcedure,
		svc.ListCollections,
		connect.WithSchema(collectionServiceMethods.ByName("ListCollections")),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCreateCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceCreateCollectionProcedure,
		svc.CreateCollection,
		connect.WithSchema(collectionServiceMethods.ByName("CreateCollection")),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceUpgradeCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceUpgradeCollectionProcedure,
		svc.UpgradeCollection,
		connect.WithSchema(collectionServiceMethods.ByName("UpgradeCollection")),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceDeleteCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceDeleteCollectionProcedure,
		svc.DeleteCollection,
		connect.WithSchema(collectionServiceMethods.ByName("DeleteCollection")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.serverless.collection.v1.CollectionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectionServiceListCollectionsProcedure:
			collectionServiceListCollectionsHandler.ServeHTTP(w, r)
		case CollectionServiceCreateCollectionProcedure:
			collectionServiceCreateCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceUpgradeCollectionProcedure:
			collectionServiceUpgradeCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceDeleteCollectionProcedure:
			collectionServiceDeleteCollectionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectionServiceHandler struct{}

func (UnimplementedCollectionServiceHandler) ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.serverless.collection.v1.CollectionService.ListCollections is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.serverless.collection.v1.CollectionService.CreateCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) UpgradeCollection(context.Context, *connect.Request[v1.UpgradeCollectionRequest]) (*connect.Response[v1.UpgradeCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.serverless.collection.v1.CollectionService.UpgradeCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) DeleteCollection(context.Context, *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.serverless.collection.v1.CollectionService.DeleteCollection is not implemented"))
}
