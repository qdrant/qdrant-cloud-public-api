// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/serverless/collection/auth/v1/collection_api_key.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/serverless/collection/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectionApiKeyServiceName is the fully-qualified name of the CollectionApiKeyService service.
	CollectionApiKeyServiceName = "qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectionApiKeyServiceListCollectionApiKeysProcedure is the fully-qualified name of the
	// CollectionApiKeyService's ListCollectionApiKeys RPC.
	CollectionApiKeyServiceListCollectionApiKeysProcedure = "/qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService/ListCollectionApiKeys"
	// CollectionApiKeyServiceCreateCollectionApiKeyProcedure is the fully-qualified name of the
	// CollectionApiKeyService's CreateCollectionApiKey RPC.
	CollectionApiKeyServiceCreateCollectionApiKeyProcedure = "/qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService/CreateCollectionApiKey"
	// CollectionApiKeyServiceDeleteCollectionApiKeyProcedure is the fully-qualified name of the
	// CollectionApiKeyService's DeleteCollectionApiKey RPC.
	CollectionApiKeyServiceDeleteCollectionApiKeyProcedure = "/qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService/DeleteCollectionApiKey"
)

// CollectionApiKeyServiceClient is a client for the
// qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService service.
type CollectionApiKeyServiceClient interface {
	// ListCollectionApiKeys returns all API keys for a collection
	// Required Permissions:
	// - read:serverless_api_keys
	ListCollectionApiKeys(context.Context, *connect.Request[v1.ListCollectionApiKeysRequest]) (*connect.Response[v1.ListCollectionApiKeysResponse], error)
	// CreateCollectionApiKey creates a new API key for a collection
	// Required Permissions:
	// - write:serverless_api_keys
	CreateCollectionApiKey(context.Context, *connect.Request[v1.CreateCollectionApiKeyRequest]) (*connect.Response[v1.CreateCollectionApiKeyResponse], error)
	// DeleteCollectionApiKey removes an API key from a collection
	// Required Permissions:
	// - write:serverless_api_keys
	DeleteCollectionApiKey(context.Context, *connect.Request[v1.DeleteCollectionApiKeyRequest]) (*connect.Response[v1.DeleteCollectionApiKeyResponse], error)
}

// NewCollectionApiKeyServiceClient constructs a client for the
// qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectionApiKeyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectionApiKeyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	collectionApiKeyServiceMethods := v1.File_qdrant_cloud_serverless_collection_auth_v1_collection_api_key_proto.Services().ByName("CollectionApiKeyService").Methods()
	return &collectionApiKeyServiceClient{
		listCollectionApiKeys: connect.NewClient[v1.ListCollectionApiKeysRequest, v1.ListCollectionApiKeysResponse](
			httpClient,
			baseURL+CollectionApiKeyServiceListCollectionApiKeysProcedure,
			connect.WithSchema(collectionApiKeyServiceMethods.ByName("ListCollectionApiKeys")),
			connect.WithClientOptions(opts...),
		),
		createCollectionApiKey: connect.NewClient[v1.CreateCollectionApiKeyRequest, v1.CreateCollectionApiKeyResponse](
			httpClient,
			baseURL+CollectionApiKeyServiceCreateCollectionApiKeyProcedure,
			connect.WithSchema(collectionApiKeyServiceMethods.ByName("CreateCollectionApiKey")),
			connect.WithClientOptions(opts...),
		),
		deleteCollectionApiKey: connect.NewClient[v1.DeleteCollectionApiKeyRequest, v1.DeleteCollectionApiKeyResponse](
			httpClient,
			baseURL+CollectionApiKeyServiceDeleteCollectionApiKeyProcedure,
			connect.WithSchema(collectionApiKeyServiceMethods.ByName("DeleteCollectionApiKey")),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectionApiKeyServiceClient implements CollectionApiKeyServiceClient.
type collectionApiKeyServiceClient struct {
	listCollectionApiKeys  *connect.Client[v1.ListCollectionApiKeysRequest, v1.ListCollectionApiKeysResponse]
	createCollectionApiKey *connect.Client[v1.CreateCollectionApiKeyRequest, v1.CreateCollectionApiKeyResponse]
	deleteCollectionApiKey *connect.Client[v1.DeleteCollectionApiKeyRequest, v1.DeleteCollectionApiKeyResponse]
}

// ListCollectionApiKeys calls
// qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService.ListCollectionApiKeys.
func (c *collectionApiKeyServiceClient) ListCollectionApiKeys(ctx context.Context, req *connect.Request[v1.ListCollectionApiKeysRequest]) (*connect.Response[v1.ListCollectionApiKeysResponse], error) {
	return c.listCollectionApiKeys.CallUnary(ctx, req)
}

// CreateCollectionApiKey calls
// qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService.CreateCollectionApiKey.
func (c *collectionApiKeyServiceClient) CreateCollectionApiKey(ctx context.Context, req *connect.Request[v1.CreateCollectionApiKeyRequest]) (*connect.Response[v1.CreateCollectionApiKeyResponse], error) {
	return c.createCollectionApiKey.CallUnary(ctx, req)
}

// DeleteCollectionApiKey calls
// qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService.DeleteCollectionApiKey.
func (c *collectionApiKeyServiceClient) DeleteCollectionApiKey(ctx context.Context, req *connect.Request[v1.DeleteCollectionApiKeyRequest]) (*connect.Response[v1.DeleteCollectionApiKeyResponse], error) {
	return c.deleteCollectionApiKey.CallUnary(ctx, req)
}

// CollectionApiKeyServiceHandler is an implementation of the
// qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService service.
type CollectionApiKeyServiceHandler interface {
	// ListCollectionApiKeys returns all API keys for a collection
	// Required Permissions:
	// - read:serverless_api_keys
	ListCollectionApiKeys(context.Context, *connect.Request[v1.ListCollectionApiKeysRequest]) (*connect.Response[v1.ListCollectionApiKeysResponse], error)
	// CreateCollectionApiKey creates a new API key for a collection
	// Required Permissions:
	// - write:serverless_api_keys
	CreateCollectionApiKey(context.Context, *connect.Request[v1.CreateCollectionApiKeyRequest]) (*connect.Response[v1.CreateCollectionApiKeyResponse], error)
	// DeleteCollectionApiKey removes an API key from a collection
	// Required Permissions:
	// - write:serverless_api_keys
	DeleteCollectionApiKey(context.Context, *connect.Request[v1.DeleteCollectionApiKeyRequest]) (*connect.Response[v1.DeleteCollectionApiKeyResponse], error)
}

// NewCollectionApiKeyServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectionApiKeyServiceHandler(svc CollectionApiKeyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectionApiKeyServiceMethods := v1.File_qdrant_cloud_serverless_collection_auth_v1_collection_api_key_proto.Services().ByName("CollectionApiKeyService").Methods()
	collectionApiKeyServiceListCollectionApiKeysHandler := connect.NewUnaryHandler(
		CollectionApiKeyServiceListCollectionApiKeysProcedure,
		svc.ListCollectionApiKeys,
		connect.WithSchema(collectionApiKeyServiceMethods.ByName("ListCollectionApiKeys")),
		connect.WithHandlerOptions(opts...),
	)
	collectionApiKeyServiceCreateCollectionApiKeyHandler := connect.NewUnaryHandler(
		CollectionApiKeyServiceCreateCollectionApiKeyProcedure,
		svc.CreateCollectionApiKey,
		connect.WithSchema(collectionApiKeyServiceMethods.ByName("CreateCollectionApiKey")),
		connect.WithHandlerOptions(opts...),
	)
	collectionApiKeyServiceDeleteCollectionApiKeyHandler := connect.NewUnaryHandler(
		CollectionApiKeyServiceDeleteCollectionApiKeyProcedure,
		svc.DeleteCollectionApiKey,
		connect.WithSchema(collectionApiKeyServiceMethods.ByName("DeleteCollectionApiKey")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectionApiKeyServiceListCollectionApiKeysProcedure:
			collectionApiKeyServiceListCollectionApiKeysHandler.ServeHTTP(w, r)
		case CollectionApiKeyServiceCreateCollectionApiKeyProcedure:
			collectionApiKeyServiceCreateCollectionApiKeyHandler.ServeHTTP(w, r)
		case CollectionApiKeyServiceDeleteCollectionApiKeyProcedure:
			collectionApiKeyServiceDeleteCollectionApiKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectionApiKeyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectionApiKeyServiceHandler struct{}

func (UnimplementedCollectionApiKeyServiceHandler) ListCollectionApiKeys(context.Context, *connect.Request[v1.ListCollectionApiKeysRequest]) (*connect.Response[v1.ListCollectionApiKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService.ListCollectionApiKeys is not implemented"))
}

func (UnimplementedCollectionApiKeyServiceHandler) CreateCollectionApiKey(context.Context, *connect.Request[v1.CreateCollectionApiKeyRequest]) (*connect.Response[v1.CreateCollectionApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService.CreateCollectionApiKey is not implemented"))
}

func (UnimplementedCollectionApiKeyServiceHandler) DeleteCollectionApiKey(context.Context, *connect.Request[v1.DeleteCollectionApiKeyRequest]) (*connect.Response[v1.DeleteCollectionApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService.DeleteCollectionApiKey is not implemented"))
}
