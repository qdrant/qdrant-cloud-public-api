// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/payment/v1/payment.proto

package paymentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/payment/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PaymentServiceName is the fully-qualified name of the PaymentService service.
	PaymentServiceName = "qdrant.cloud.payment.v1.PaymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentServiceListPaymentMethodsProcedure is the fully-qualified name of the PaymentService's
	// ListPaymentMethods RPC.
	PaymentServiceListPaymentMethodsProcedure = "/qdrant.cloud.payment.v1.PaymentService/ListPaymentMethods"
	// PaymentServiceGetPaymentMethodProcedure is the fully-qualified name of the PaymentService's
	// GetPaymentMethod RPC.
	PaymentServiceGetPaymentMethodProcedure = "/qdrant.cloud.payment.v1.PaymentService/GetPaymentMethod"
	// PaymentServiceCreatePaymentMethodProcedure is the fully-qualified name of the PaymentService's
	// CreatePaymentMethod RPC.
	PaymentServiceCreatePaymentMethodProcedure = "/qdrant.cloud.payment.v1.PaymentService/CreatePaymentMethod"
	// PaymentServiceUpdatePaymentMethodProcedure is the fully-qualified name of the PaymentService's
	// UpdatePaymentMethod RPC.
	PaymentServiceUpdatePaymentMethodProcedure = "/qdrant.cloud.payment.v1.PaymentService/UpdatePaymentMethod"
	// PaymentServiceDeletePaymentMethodProcedure is the fully-qualified name of the PaymentService's
	// DeletePaymentMethod RPC.
	PaymentServiceDeletePaymentMethodProcedure = "/qdrant.cloud.payment.v1.PaymentService/DeletePaymentMethod"
	// PaymentServiceGetStripeCheckoutSessionProcedure is the fully-qualified name of the
	// PaymentService's GetStripeCheckoutSession RPC.
	PaymentServiceGetStripeCheckoutSessionProcedure = "/qdrant.cloud.payment.v1.PaymentService/GetStripeCheckoutSession"
	// PaymentServiceCreateStripeCheckoutSessionProcedure is the fully-qualified name of the
	// PaymentService's CreateStripeCheckoutSession RPC.
	PaymentServiceCreateStripeCheckoutSessionProcedure = "/qdrant.cloud.payment.v1.PaymentService/CreateStripeCheckoutSession"
)

// PaymentServiceClient is a client for the qdrant.cloud.payment.v1.PaymentService service.
type PaymentServiceClient interface {
	// Lists all payment methods known by the system for the provided account.
	// Required permissions:
	// - read:payment_information
	ListPaymentMethods(context.Context, *connect.Request[v1.ListPaymentMethodsRequest]) (*connect.Response[v1.ListPaymentMethodsResponse], error)
	// Gets the payment method identified by the given ID.
	// Required permissions:
	// - read:payment_information
	GetPaymentMethod(context.Context, *connect.Request[v1.GetPaymentMethodRequest]) (*connect.Response[v1.GetPaymentMethodResponse], error)
	// Creates a new payment method for the account.
	// This method is used to create a new payment method, which can then be connected to a payment provider (like Stripe).
	// Required permissions:
	// - write:payment_information
	CreatePaymentMethod(context.Context, *connect.Request[v1.CreatePaymentMethodRequest]) (*connect.Response[v1.CreatePaymentMethodResponse], error)
	// Updates the payment method for the account.
	// This method is used to update the payment method details, such as billing address.
	// Required permissions:
	// - write:payment_information
	UpdatePaymentMethod(context.Context, *connect.Request[v1.UpdatePaymentMethodRequest]) (*connect.Response[v1.UpdatePaymentMethodResponse], error)
	// Delete the payment method identified by the given ID.
	// Required permissions:
	// - delete:payment_information
	DeletePaymentMethod(context.Context, *connect.Request[v1.DeletePaymentMethodRequest]) (*connect.Response[v1.DeletePaymentMethodResponse], error)
	// Get the Stripe Checkout session by its ID.
	// This method is used to retrieve the session details after it has been created.
	// Required permissions:
	// - write:payment_information
	GetStripeCheckoutSession(context.Context, *connect.Request[v1.GetStripeCheckoutSessionRequest]) (*connect.Response[v1.GetStripeCheckoutSessionResponse], error)
	// Initiates the creation of a Stripe Checkout session for the specified account.
	// This session can be used by the client (usually via frontend) to interact directly with Stripe's hosted payment page.
	// Required permissions:
	// - write:payment_information
	CreateStripeCheckoutSession(context.Context, *connect.Request[v1.CreateStripeCheckoutSessionRequest]) (*connect.Response[v1.CreateStripeCheckoutSessionResponse], error)
}

// NewPaymentServiceClient constructs a client for the qdrant.cloud.payment.v1.PaymentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	paymentServiceMethods := v1.File_qdrant_cloud_payment_v1_payment_proto.Services().ByName("PaymentService").Methods()
	return &paymentServiceClient{
		listPaymentMethods: connect.NewClient[v1.ListPaymentMethodsRequest, v1.ListPaymentMethodsResponse](
			httpClient,
			baseURL+PaymentServiceListPaymentMethodsProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("ListPaymentMethods")),
			connect.WithClientOptions(opts...),
		),
		getPaymentMethod: connect.NewClient[v1.GetPaymentMethodRequest, v1.GetPaymentMethodResponse](
			httpClient,
			baseURL+PaymentServiceGetPaymentMethodProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("GetPaymentMethod")),
			connect.WithClientOptions(opts...),
		),
		createPaymentMethod: connect.NewClient[v1.CreatePaymentMethodRequest, v1.CreatePaymentMethodResponse](
			httpClient,
			baseURL+PaymentServiceCreatePaymentMethodProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("CreatePaymentMethod")),
			connect.WithClientOptions(opts...),
		),
		updatePaymentMethod: connect.NewClient[v1.UpdatePaymentMethodRequest, v1.UpdatePaymentMethodResponse](
			httpClient,
			baseURL+PaymentServiceUpdatePaymentMethodProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("UpdatePaymentMethod")),
			connect.WithClientOptions(opts...),
		),
		deletePaymentMethod: connect.NewClient[v1.DeletePaymentMethodRequest, v1.DeletePaymentMethodResponse](
			httpClient,
			baseURL+PaymentServiceDeletePaymentMethodProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("DeletePaymentMethod")),
			connect.WithClientOptions(opts...),
		),
		getStripeCheckoutSession: connect.NewClient[v1.GetStripeCheckoutSessionRequest, v1.GetStripeCheckoutSessionResponse](
			httpClient,
			baseURL+PaymentServiceGetStripeCheckoutSessionProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("GetStripeCheckoutSession")),
			connect.WithClientOptions(opts...),
		),
		createStripeCheckoutSession: connect.NewClient[v1.CreateStripeCheckoutSessionRequest, v1.CreateStripeCheckoutSessionResponse](
			httpClient,
			baseURL+PaymentServiceCreateStripeCheckoutSessionProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("CreateStripeCheckoutSession")),
			connect.WithClientOptions(opts...),
		),
	}
}

// paymentServiceClient implements PaymentServiceClient.
type paymentServiceClient struct {
	listPaymentMethods          *connect.Client[v1.ListPaymentMethodsRequest, v1.ListPaymentMethodsResponse]
	getPaymentMethod            *connect.Client[v1.GetPaymentMethodRequest, v1.GetPaymentMethodResponse]
	createPaymentMethod         *connect.Client[v1.CreatePaymentMethodRequest, v1.CreatePaymentMethodResponse]
	updatePaymentMethod         *connect.Client[v1.UpdatePaymentMethodRequest, v1.UpdatePaymentMethodResponse]
	deletePaymentMethod         *connect.Client[v1.DeletePaymentMethodRequest, v1.DeletePaymentMethodResponse]
	getStripeCheckoutSession    *connect.Client[v1.GetStripeCheckoutSessionRequest, v1.GetStripeCheckoutSessionResponse]
	createStripeCheckoutSession *connect.Client[v1.CreateStripeCheckoutSessionRequest, v1.CreateStripeCheckoutSessionResponse]
}

// ListPaymentMethods calls qdrant.cloud.payment.v1.PaymentService.ListPaymentMethods.
func (c *paymentServiceClient) ListPaymentMethods(ctx context.Context, req *connect.Request[v1.ListPaymentMethodsRequest]) (*connect.Response[v1.ListPaymentMethodsResponse], error) {
	return c.listPaymentMethods.CallUnary(ctx, req)
}

// GetPaymentMethod calls qdrant.cloud.payment.v1.PaymentService.GetPaymentMethod.
func (c *paymentServiceClient) GetPaymentMethod(ctx context.Context, req *connect.Request[v1.GetPaymentMethodRequest]) (*connect.Response[v1.GetPaymentMethodResponse], error) {
	return c.getPaymentMethod.CallUnary(ctx, req)
}

// CreatePaymentMethod calls qdrant.cloud.payment.v1.PaymentService.CreatePaymentMethod.
func (c *paymentServiceClient) CreatePaymentMethod(ctx context.Context, req *connect.Request[v1.CreatePaymentMethodRequest]) (*connect.Response[v1.CreatePaymentMethodResponse], error) {
	return c.createPaymentMethod.CallUnary(ctx, req)
}

// UpdatePaymentMethod calls qdrant.cloud.payment.v1.PaymentService.UpdatePaymentMethod.
func (c *paymentServiceClient) UpdatePaymentMethod(ctx context.Context, req *connect.Request[v1.UpdatePaymentMethodRequest]) (*connect.Response[v1.UpdatePaymentMethodResponse], error) {
	return c.updatePaymentMethod.CallUnary(ctx, req)
}

// DeletePaymentMethod calls qdrant.cloud.payment.v1.PaymentService.DeletePaymentMethod.
func (c *paymentServiceClient) DeletePaymentMethod(ctx context.Context, req *connect.Request[v1.DeletePaymentMethodRequest]) (*connect.Response[v1.DeletePaymentMethodResponse], error) {
	return c.deletePaymentMethod.CallUnary(ctx, req)
}

// GetStripeCheckoutSession calls qdrant.cloud.payment.v1.PaymentService.GetStripeCheckoutSession.
func (c *paymentServiceClient) GetStripeCheckoutSession(ctx context.Context, req *connect.Request[v1.GetStripeCheckoutSessionRequest]) (*connect.Response[v1.GetStripeCheckoutSessionResponse], error) {
	return c.getStripeCheckoutSession.CallUnary(ctx, req)
}

// CreateStripeCheckoutSession calls
// qdrant.cloud.payment.v1.PaymentService.CreateStripeCheckoutSession.
func (c *paymentServiceClient) CreateStripeCheckoutSession(ctx context.Context, req *connect.Request[v1.CreateStripeCheckoutSessionRequest]) (*connect.Response[v1.CreateStripeCheckoutSessionResponse], error) {
	return c.createStripeCheckoutSession.CallUnary(ctx, req)
}

// PaymentServiceHandler is an implementation of the qdrant.cloud.payment.v1.PaymentService service.
type PaymentServiceHandler interface {
	// Lists all payment methods known by the system for the provided account.
	// Required permissions:
	// - read:payment_information
	ListPaymentMethods(context.Context, *connect.Request[v1.ListPaymentMethodsRequest]) (*connect.Response[v1.ListPaymentMethodsResponse], error)
	// Gets the payment method identified by the given ID.
	// Required permissions:
	// - read:payment_information
	GetPaymentMethod(context.Context, *connect.Request[v1.GetPaymentMethodRequest]) (*connect.Response[v1.GetPaymentMethodResponse], error)
	// Creates a new payment method for the account.
	// This method is used to create a new payment method, which can then be connected to a payment provider (like Stripe).
	// Required permissions:
	// - write:payment_information
	CreatePaymentMethod(context.Context, *connect.Request[v1.CreatePaymentMethodRequest]) (*connect.Response[v1.CreatePaymentMethodResponse], error)
	// Updates the payment method for the account.
	// This method is used to update the payment method details, such as billing address.
	// Required permissions:
	// - write:payment_information
	UpdatePaymentMethod(context.Context, *connect.Request[v1.UpdatePaymentMethodRequest]) (*connect.Response[v1.UpdatePaymentMethodResponse], error)
	// Delete the payment method identified by the given ID.
	// Required permissions:
	// - delete:payment_information
	DeletePaymentMethod(context.Context, *connect.Request[v1.DeletePaymentMethodRequest]) (*connect.Response[v1.DeletePaymentMethodResponse], error)
	// Get the Stripe Checkout session by its ID.
	// This method is used to retrieve the session details after it has been created.
	// Required permissions:
	// - write:payment_information
	GetStripeCheckoutSession(context.Context, *connect.Request[v1.GetStripeCheckoutSessionRequest]) (*connect.Response[v1.GetStripeCheckoutSessionResponse], error)
	// Initiates the creation of a Stripe Checkout session for the specified account.
	// This session can be used by the client (usually via frontend) to interact directly with Stripe's hosted payment page.
	// Required permissions:
	// - write:payment_information
	CreateStripeCheckoutSession(context.Context, *connect.Request[v1.CreateStripeCheckoutSessionRequest]) (*connect.Response[v1.CreateStripeCheckoutSessionResponse], error)
}

// NewPaymentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentServiceHandler(svc PaymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentServiceMethods := v1.File_qdrant_cloud_payment_v1_payment_proto.Services().ByName("PaymentService").Methods()
	paymentServiceListPaymentMethodsHandler := connect.NewUnaryHandler(
		PaymentServiceListPaymentMethodsProcedure,
		svc.ListPaymentMethods,
		connect.WithSchema(paymentServiceMethods.ByName("ListPaymentMethods")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceGetPaymentMethodHandler := connect.NewUnaryHandler(
		PaymentServiceGetPaymentMethodProcedure,
		svc.GetPaymentMethod,
		connect.WithSchema(paymentServiceMethods.ByName("GetPaymentMethod")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceCreatePaymentMethodHandler := connect.NewUnaryHandler(
		PaymentServiceCreatePaymentMethodProcedure,
		svc.CreatePaymentMethod,
		connect.WithSchema(paymentServiceMethods.ByName("CreatePaymentMethod")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceUpdatePaymentMethodHandler := connect.NewUnaryHandler(
		PaymentServiceUpdatePaymentMethodProcedure,
		svc.UpdatePaymentMethod,
		connect.WithSchema(paymentServiceMethods.ByName("UpdatePaymentMethod")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceDeletePaymentMethodHandler := connect.NewUnaryHandler(
		PaymentServiceDeletePaymentMethodProcedure,
		svc.DeletePaymentMethod,
		connect.WithSchema(paymentServiceMethods.ByName("DeletePaymentMethod")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceGetStripeCheckoutSessionHandler := connect.NewUnaryHandler(
		PaymentServiceGetStripeCheckoutSessionProcedure,
		svc.GetStripeCheckoutSession,
		connect.WithSchema(paymentServiceMethods.ByName("GetStripeCheckoutSession")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceCreateStripeCheckoutSessionHandler := connect.NewUnaryHandler(
		PaymentServiceCreateStripeCheckoutSessionProcedure,
		svc.CreateStripeCheckoutSession,
		connect.WithSchema(paymentServiceMethods.ByName("CreateStripeCheckoutSession")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.payment.v1.PaymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentServiceListPaymentMethodsProcedure:
			paymentServiceListPaymentMethodsHandler.ServeHTTP(w, r)
		case PaymentServiceGetPaymentMethodProcedure:
			paymentServiceGetPaymentMethodHandler.ServeHTTP(w, r)
		case PaymentServiceCreatePaymentMethodProcedure:
			paymentServiceCreatePaymentMethodHandler.ServeHTTP(w, r)
		case PaymentServiceUpdatePaymentMethodProcedure:
			paymentServiceUpdatePaymentMethodHandler.ServeHTTP(w, r)
		case PaymentServiceDeletePaymentMethodProcedure:
			paymentServiceDeletePaymentMethodHandler.ServeHTTP(w, r)
		case PaymentServiceGetStripeCheckoutSessionProcedure:
			paymentServiceGetStripeCheckoutSessionHandler.ServeHTTP(w, r)
		case PaymentServiceCreateStripeCheckoutSessionProcedure:
			paymentServiceCreateStripeCheckoutSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentServiceHandler struct{}

func (UnimplementedPaymentServiceHandler) ListPaymentMethods(context.Context, *connect.Request[v1.ListPaymentMethodsRequest]) (*connect.Response[v1.ListPaymentMethodsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.payment.v1.PaymentService.ListPaymentMethods is not implemented"))
}

func (UnimplementedPaymentServiceHandler) GetPaymentMethod(context.Context, *connect.Request[v1.GetPaymentMethodRequest]) (*connect.Response[v1.GetPaymentMethodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.payment.v1.PaymentService.GetPaymentMethod is not implemented"))
}

func (UnimplementedPaymentServiceHandler) CreatePaymentMethod(context.Context, *connect.Request[v1.CreatePaymentMethodRequest]) (*connect.Response[v1.CreatePaymentMethodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.payment.v1.PaymentService.CreatePaymentMethod is not implemented"))
}

func (UnimplementedPaymentServiceHandler) UpdatePaymentMethod(context.Context, *connect.Request[v1.UpdatePaymentMethodRequest]) (*connect.Response[v1.UpdatePaymentMethodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.payment.v1.PaymentService.UpdatePaymentMethod is not implemented"))
}

func (UnimplementedPaymentServiceHandler) DeletePaymentMethod(context.Context, *connect.Request[v1.DeletePaymentMethodRequest]) (*connect.Response[v1.DeletePaymentMethodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.payment.v1.PaymentService.DeletePaymentMethod is not implemented"))
}

func (UnimplementedPaymentServiceHandler) GetStripeCheckoutSession(context.Context, *connect.Request[v1.GetStripeCheckoutSessionRequest]) (*connect.Response[v1.GetStripeCheckoutSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.payment.v1.PaymentService.GetStripeCheckoutSession is not implemented"))
}

func (UnimplementedPaymentServiceHandler) CreateStripeCheckoutSession(context.Context, *connect.Request[v1.CreateStripeCheckoutSessionRequest]) (*connect.Response[v1.CreateStripeCheckoutSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.payment.v1.PaymentService.CreateStripeCheckoutSession is not implemented"))
}
