// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/account/v1/account.proto

package accountv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/account/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "qdrant.cloud.account.v1.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceListAccountsProcedure is the fully-qualified name of the AccountService's
	// ListAccounts RPC.
	AccountServiceListAccountsProcedure = "/qdrant.cloud.account.v1.AccountService/ListAccounts"
	// AccountServiceGetAccountProcedure is the fully-qualified name of the AccountService's GetAccount
	// RPC.
	AccountServiceGetAccountProcedure = "/qdrant.cloud.account.v1.AccountService/GetAccount"
	// AccountServiceCreateAccountProcedure is the fully-qualified name of the AccountService's
	// CreateAccount RPC.
	AccountServiceCreateAccountProcedure = "/qdrant.cloud.account.v1.AccountService/CreateAccount"
	// AccountServiceUpdateAccountProcedure is the fully-qualified name of the AccountService's
	// UpdateAccount RPC.
	AccountServiceUpdateAccountProcedure = "/qdrant.cloud.account.v1.AccountService/UpdateAccount"
	// AccountServiceDeleteAccountProcedure is the fully-qualified name of the AccountService's
	// DeleteAccount RPC.
	AccountServiceDeleteAccountProcedure = "/qdrant.cloud.account.v1.AccountService/DeleteAccount"
	// AccountServiceListAccountInvitesProcedure is the fully-qualified name of the AccountService's
	// ListAccountInvites RPC.
	AccountServiceListAccountInvitesProcedure = "/qdrant.cloud.account.v1.AccountService/ListAccountInvites"
	// AccountServiceListReceivedAccountInvitesProcedure is the fully-qualified name of the
	// AccountService's ListReceivedAccountInvites RPC.
	AccountServiceListReceivedAccountInvitesProcedure = "/qdrant.cloud.account.v1.AccountService/ListReceivedAccountInvites"
	// AccountServiceGetAccountInviteProcedure is the fully-qualified name of the AccountService's
	// GetAccountInvite RPC.
	AccountServiceGetAccountInviteProcedure = "/qdrant.cloud.account.v1.AccountService/GetAccountInvite"
	// AccountServiceCreateAccountInviteProcedure is the fully-qualified name of the AccountService's
	// CreateAccountInvite RPC.
	AccountServiceCreateAccountInviteProcedure = "/qdrant.cloud.account.v1.AccountService/CreateAccountInvite"
	// AccountServiceDeleteAccountInviteProcedure is the fully-qualified name of the AccountService's
	// DeleteAccountInvite RPC.
	AccountServiceDeleteAccountInviteProcedure = "/qdrant.cloud.account.v1.AccountService/DeleteAccountInvite"
	// AccountServiceAcceptAccountInviteProcedure is the fully-qualified name of the AccountService's
	// AcceptAccountInvite RPC.
	AccountServiceAcceptAccountInviteProcedure = "/qdrant.cloud.account.v1.AccountService/AcceptAccountInvite"
	// AccountServiceRejectAccountInviteProcedure is the fully-qualified name of the AccountService's
	// RejectAccountInvite RPC.
	AccountServiceRejectAccountInviteProcedure = "/qdrant.cloud.account.v1.AccountService/RejectAccountInvite"
	// AccountServiceListAccountMembersProcedure is the fully-qualified name of the AccountService's
	// ListAccountMembers RPC.
	AccountServiceListAccountMembersProcedure = "/qdrant.cloud.account.v1.AccountService/ListAccountMembers"
	// AccountServiceGetAccountMemberProcedure is the fully-qualified name of the AccountService's
	// GetAccountMember RPC.
	AccountServiceGetAccountMemberProcedure = "/qdrant.cloud.account.v1.AccountService/GetAccountMember"
	// AccountServiceDeleteAccountMemberProcedure is the fully-qualified name of the AccountService's
	// DeleteAccountMember RPC.
	AccountServiceDeleteAccountMemberProcedure = "/qdrant.cloud.account.v1.AccountService/DeleteAccountMember"
)

// AccountServiceClient is a client for the qdrant.cloud.account.v1.AccountService service.
type AccountServiceClient interface {
	// Lists all accounts associated with the authenticated actor, where the actor has the specified permission.
	// Required permissions:
	// - read:accounts
	ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error)
	// Gets an account identified by the given ID.
	// Required permissions:
	// - read:account
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	// Creates an account for the authenticated user.
	// Required permissions:
	// - None (authenticated only)
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error)
	// Updates an account identified by the given ID.
	// Required permissions:
	// - write:account
	UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error)
	// Deletes an account identified by the given ID.
	// Required permissions:
	// - delete:account
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	// Lists all account invites in the account identified by the given account ID.
	// Required permissions:
	// - read:invites
	ListAccountInvites(context.Context, *connect.Request[v1.ListAccountInvitesRequest]) (*connect.Response[v1.ListAccountInvitesResponse], error)
	// Lists all account invites for the authenticated user (across all accounts).
	// These are the invites the user has received, not the ones they have sent.
	// Required permissions:
	// - None (authenticated only)
	ListReceivedAccountInvites(context.Context, *connect.Request[v1.ListReceivedAccountInvitesRequest]) (*connect.Response[v1.ListReceivedAccountInvitesResponse], error)
	// Gets an account invite identified by the given account ID and invite ID.
	// Required permissions:
	// - read:invites
	GetAccountInvite(context.Context, *connect.Request[v1.GetAccountInviteRequest]) (*connect.Response[v1.GetAccountInviteResponse], error)
	// Creates a new account invite.
	// Required permissions:
	// - write:invites
	CreateAccountInvite(context.Context, *connect.Request[v1.CreateAccountInviteRequest]) (*connect.Response[v1.CreateAccountInviteResponse], error)
	// Deletes an account invite.
	// Required permissions:
	// - delete:invites
	DeleteAccountInvite(context.Context, *connect.Request[v1.DeleteAccountInviteRequest]) (*connect.Response[v1.DeleteAccountInviteResponse], error)
	// Accepts an account invite.
	// The authenticated user's email address must match the email address specified in
	// the invite.
	// Required permissions:
	// - None (authenticated only)
	AcceptAccountInvite(context.Context, *connect.Request[v1.AcceptAccountInviteRequest]) (*connect.Response[v1.AcceptAccountInviteResponse], error)
	// Rejects an account invite.
	// The authenticated user's email address must match the email address specified in
	// the invite.
	// Required permissions:
	// - None (authenticated only)
	RejectAccountInvite(context.Context, *connect.Request[v1.RejectAccountInviteRequest]) (*connect.Response[v1.RejectAccountInviteResponse], error)
	// Lists all account members in the account identified by the given account ID.
	// The authenticated actor must be a member of the account identified by the given account ID.
	// Required permissions:
	// - read:users
	ListAccountMembers(context.Context, *connect.Request[v1.ListAccountMembersRequest]) (*connect.Response[v1.ListAccountMembersResponse], error)
	// Gets an account member by ID.
	// The authenticated actor must be a member of the same account as the member being fetch.
	// Required permissions:
	// - read:users
	GetAccountMember(context.Context, *connect.Request[v1.GetAccountMemberRequest]) (*connect.Response[v1.GetAccountMemberResponse], error)
	// Deletes an account member.
	// The authenticated actor must be a member of the account from which the the member is being removed.
	// Required permissions:
	// - delete:users
	DeleteAccountMember(context.Context, *connect.Request[v1.DeleteAccountMemberRequest]) (*connect.Response[v1.DeleteAccountMemberResponse], error)
}

// NewAccountServiceClient constructs a client for the qdrant.cloud.account.v1.AccountService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountServiceMethods := v1.File_qdrant_cloud_account_v1_account_proto.Services().ByName("AccountService").Methods()
	return &accountServiceClient{
		listAccounts: connect.NewClient[v1.ListAccountsRequest, v1.ListAccountsResponse](
			httpClient,
			baseURL+AccountServiceListAccountsProcedure,
			connect.WithSchema(accountServiceMethods.ByName("ListAccounts")),
			connect.WithClientOptions(opts...),
		),
		getAccount: connect.NewClient[v1.GetAccountRequest, v1.GetAccountResponse](
			httpClient,
			baseURL+AccountServiceGetAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAccount")),
			connect.WithClientOptions(opts...),
		),
		createAccount: connect.NewClient[v1.CreateAccountRequest, v1.CreateAccountResponse](
			httpClient,
			baseURL+AccountServiceCreateAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("CreateAccount")),
			connect.WithClientOptions(opts...),
		),
		updateAccount: connect.NewClient[v1.UpdateAccountRequest, v1.UpdateAccountResponse](
			httpClient,
			baseURL+AccountServiceUpdateAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("UpdateAccount")),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[v1.DeleteAccountRequest, v1.DeleteAccountResponse](
			httpClient,
			baseURL+AccountServiceDeleteAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("DeleteAccount")),
			connect.WithClientOptions(opts...),
		),
		listAccountInvites: connect.NewClient[v1.ListAccountInvitesRequest, v1.ListAccountInvitesResponse](
			httpClient,
			baseURL+AccountServiceListAccountInvitesProcedure,
			connect.WithSchema(accountServiceMethods.ByName("ListAccountInvites")),
			connect.WithClientOptions(opts...),
		),
		listReceivedAccountInvites: connect.NewClient[v1.ListReceivedAccountInvitesRequest, v1.ListReceivedAccountInvitesResponse](
			httpClient,
			baseURL+AccountServiceListReceivedAccountInvitesProcedure,
			connect.WithSchema(accountServiceMethods.ByName("ListReceivedAccountInvites")),
			connect.WithClientOptions(opts...),
		),
		getAccountInvite: connect.NewClient[v1.GetAccountInviteRequest, v1.GetAccountInviteResponse](
			httpClient,
			baseURL+AccountServiceGetAccountInviteProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAccountInvite")),
			connect.WithClientOptions(opts...),
		),
		createAccountInvite: connect.NewClient[v1.CreateAccountInviteRequest, v1.CreateAccountInviteResponse](
			httpClient,
			baseURL+AccountServiceCreateAccountInviteProcedure,
			connect.WithSchema(accountServiceMethods.ByName("CreateAccountInvite")),
			connect.WithClientOptions(opts...),
		),
		deleteAccountInvite: connect.NewClient[v1.DeleteAccountInviteRequest, v1.DeleteAccountInviteResponse](
			httpClient,
			baseURL+AccountServiceDeleteAccountInviteProcedure,
			connect.WithSchema(accountServiceMethods.ByName("DeleteAccountInvite")),
			connect.WithClientOptions(opts...),
		),
		acceptAccountInvite: connect.NewClient[v1.AcceptAccountInviteRequest, v1.AcceptAccountInviteResponse](
			httpClient,
			baseURL+AccountServiceAcceptAccountInviteProcedure,
			connect.WithSchema(accountServiceMethods.ByName("AcceptAccountInvite")),
			connect.WithClientOptions(opts...),
		),
		rejectAccountInvite: connect.NewClient[v1.RejectAccountInviteRequest, v1.RejectAccountInviteResponse](
			httpClient,
			baseURL+AccountServiceRejectAccountInviteProcedure,
			connect.WithSchema(accountServiceMethods.ByName("RejectAccountInvite")),
			connect.WithClientOptions(opts...),
		),
		listAccountMembers: connect.NewClient[v1.ListAccountMembersRequest, v1.ListAccountMembersResponse](
			httpClient,
			baseURL+AccountServiceListAccountMembersProcedure,
			connect.WithSchema(accountServiceMethods.ByName("ListAccountMembers")),
			connect.WithClientOptions(opts...),
		),
		getAccountMember: connect.NewClient[v1.GetAccountMemberRequest, v1.GetAccountMemberResponse](
			httpClient,
			baseURL+AccountServiceGetAccountMemberProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAccountMember")),
			connect.WithClientOptions(opts...),
		),
		deleteAccountMember: connect.NewClient[v1.DeleteAccountMemberRequest, v1.DeleteAccountMemberResponse](
			httpClient,
			baseURL+AccountServiceDeleteAccountMemberProcedure,
			connect.WithSchema(accountServiceMethods.ByName("DeleteAccountMember")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	listAccounts               *connect.Client[v1.ListAccountsRequest, v1.ListAccountsResponse]
	getAccount                 *connect.Client[v1.GetAccountRequest, v1.GetAccountResponse]
	createAccount              *connect.Client[v1.CreateAccountRequest, v1.CreateAccountResponse]
	updateAccount              *connect.Client[v1.UpdateAccountRequest, v1.UpdateAccountResponse]
	deleteAccount              *connect.Client[v1.DeleteAccountRequest, v1.DeleteAccountResponse]
	listAccountInvites         *connect.Client[v1.ListAccountInvitesRequest, v1.ListAccountInvitesResponse]
	listReceivedAccountInvites *connect.Client[v1.ListReceivedAccountInvitesRequest, v1.ListReceivedAccountInvitesResponse]
	getAccountInvite           *connect.Client[v1.GetAccountInviteRequest, v1.GetAccountInviteResponse]
	createAccountInvite        *connect.Client[v1.CreateAccountInviteRequest, v1.CreateAccountInviteResponse]
	deleteAccountInvite        *connect.Client[v1.DeleteAccountInviteRequest, v1.DeleteAccountInviteResponse]
	acceptAccountInvite        *connect.Client[v1.AcceptAccountInviteRequest, v1.AcceptAccountInviteResponse]
	rejectAccountInvite        *connect.Client[v1.RejectAccountInviteRequest, v1.RejectAccountInviteResponse]
	listAccountMembers         *connect.Client[v1.ListAccountMembersRequest, v1.ListAccountMembersResponse]
	getAccountMember           *connect.Client[v1.GetAccountMemberRequest, v1.GetAccountMemberResponse]
	deleteAccountMember        *connect.Client[v1.DeleteAccountMemberRequest, v1.DeleteAccountMemberResponse]
}

// ListAccounts calls qdrant.cloud.account.v1.AccountService.ListAccounts.
func (c *accountServiceClient) ListAccounts(ctx context.Context, req *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error) {
	return c.listAccounts.CallUnary(ctx, req)
}

// GetAccount calls qdrant.cloud.account.v1.AccountService.GetAccount.
func (c *accountServiceClient) GetAccount(ctx context.Context, req *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// CreateAccount calls qdrant.cloud.account.v1.AccountService.CreateAccount.
func (c *accountServiceClient) CreateAccount(ctx context.Context, req *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// UpdateAccount calls qdrant.cloud.account.v1.AccountService.UpdateAccount.
func (c *accountServiceClient) UpdateAccount(ctx context.Context, req *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// DeleteAccount calls qdrant.cloud.account.v1.AccountService.DeleteAccount.
func (c *accountServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// ListAccountInvites calls qdrant.cloud.account.v1.AccountService.ListAccountInvites.
func (c *accountServiceClient) ListAccountInvites(ctx context.Context, req *connect.Request[v1.ListAccountInvitesRequest]) (*connect.Response[v1.ListAccountInvitesResponse], error) {
	return c.listAccountInvites.CallUnary(ctx, req)
}

// ListReceivedAccountInvites calls
// qdrant.cloud.account.v1.AccountService.ListReceivedAccountInvites.
func (c *accountServiceClient) ListReceivedAccountInvites(ctx context.Context, req *connect.Request[v1.ListReceivedAccountInvitesRequest]) (*connect.Response[v1.ListReceivedAccountInvitesResponse], error) {
	return c.listReceivedAccountInvites.CallUnary(ctx, req)
}

// GetAccountInvite calls qdrant.cloud.account.v1.AccountService.GetAccountInvite.
func (c *accountServiceClient) GetAccountInvite(ctx context.Context, req *connect.Request[v1.GetAccountInviteRequest]) (*connect.Response[v1.GetAccountInviteResponse], error) {
	return c.getAccountInvite.CallUnary(ctx, req)
}

// CreateAccountInvite calls qdrant.cloud.account.v1.AccountService.CreateAccountInvite.
func (c *accountServiceClient) CreateAccountInvite(ctx context.Context, req *connect.Request[v1.CreateAccountInviteRequest]) (*connect.Response[v1.CreateAccountInviteResponse], error) {
	return c.createAccountInvite.CallUnary(ctx, req)
}

// DeleteAccountInvite calls qdrant.cloud.account.v1.AccountService.DeleteAccountInvite.
func (c *accountServiceClient) DeleteAccountInvite(ctx context.Context, req *connect.Request[v1.DeleteAccountInviteRequest]) (*connect.Response[v1.DeleteAccountInviteResponse], error) {
	return c.deleteAccountInvite.CallUnary(ctx, req)
}

// AcceptAccountInvite calls qdrant.cloud.account.v1.AccountService.AcceptAccountInvite.
func (c *accountServiceClient) AcceptAccountInvite(ctx context.Context, req *connect.Request[v1.AcceptAccountInviteRequest]) (*connect.Response[v1.AcceptAccountInviteResponse], error) {
	return c.acceptAccountInvite.CallUnary(ctx, req)
}

// RejectAccountInvite calls qdrant.cloud.account.v1.AccountService.RejectAccountInvite.
func (c *accountServiceClient) RejectAccountInvite(ctx context.Context, req *connect.Request[v1.RejectAccountInviteRequest]) (*connect.Response[v1.RejectAccountInviteResponse], error) {
	return c.rejectAccountInvite.CallUnary(ctx, req)
}

// ListAccountMembers calls qdrant.cloud.account.v1.AccountService.ListAccountMembers.
func (c *accountServiceClient) ListAccountMembers(ctx context.Context, req *connect.Request[v1.ListAccountMembersRequest]) (*connect.Response[v1.ListAccountMembersResponse], error) {
	return c.listAccountMembers.CallUnary(ctx, req)
}

// GetAccountMember calls qdrant.cloud.account.v1.AccountService.GetAccountMember.
func (c *accountServiceClient) GetAccountMember(ctx context.Context, req *connect.Request[v1.GetAccountMemberRequest]) (*connect.Response[v1.GetAccountMemberResponse], error) {
	return c.getAccountMember.CallUnary(ctx, req)
}

// DeleteAccountMember calls qdrant.cloud.account.v1.AccountService.DeleteAccountMember.
func (c *accountServiceClient) DeleteAccountMember(ctx context.Context, req *connect.Request[v1.DeleteAccountMemberRequest]) (*connect.Response[v1.DeleteAccountMemberResponse], error) {
	return c.deleteAccountMember.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the qdrant.cloud.account.v1.AccountService service.
type AccountServiceHandler interface {
	// Lists all accounts associated with the authenticated actor, where the actor has the specified permission.
	// Required permissions:
	// - read:accounts
	ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error)
	// Gets an account identified by the given ID.
	// Required permissions:
	// - read:account
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	// Creates an account for the authenticated user.
	// Required permissions:
	// - None (authenticated only)
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error)
	// Updates an account identified by the given ID.
	// Required permissions:
	// - write:account
	UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error)
	// Deletes an account identified by the given ID.
	// Required permissions:
	// - delete:account
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	// Lists all account invites in the account identified by the given account ID.
	// Required permissions:
	// - read:invites
	ListAccountInvites(context.Context, *connect.Request[v1.ListAccountInvitesRequest]) (*connect.Response[v1.ListAccountInvitesResponse], error)
	// Lists all account invites for the authenticated user (across all accounts).
	// These are the invites the user has received, not the ones they have sent.
	// Required permissions:
	// - None (authenticated only)
	ListReceivedAccountInvites(context.Context, *connect.Request[v1.ListReceivedAccountInvitesRequest]) (*connect.Response[v1.ListReceivedAccountInvitesResponse], error)
	// Gets an account invite identified by the given account ID and invite ID.
	// Required permissions:
	// - read:invites
	GetAccountInvite(context.Context, *connect.Request[v1.GetAccountInviteRequest]) (*connect.Response[v1.GetAccountInviteResponse], error)
	// Creates a new account invite.
	// Required permissions:
	// - write:invites
	CreateAccountInvite(context.Context, *connect.Request[v1.CreateAccountInviteRequest]) (*connect.Response[v1.CreateAccountInviteResponse], error)
	// Deletes an account invite.
	// Required permissions:
	// - delete:invites
	DeleteAccountInvite(context.Context, *connect.Request[v1.DeleteAccountInviteRequest]) (*connect.Response[v1.DeleteAccountInviteResponse], error)
	// Accepts an account invite.
	// The authenticated user's email address must match the email address specified in
	// the invite.
	// Required permissions:
	// - None (authenticated only)
	AcceptAccountInvite(context.Context, *connect.Request[v1.AcceptAccountInviteRequest]) (*connect.Response[v1.AcceptAccountInviteResponse], error)
	// Rejects an account invite.
	// The authenticated user's email address must match the email address specified in
	// the invite.
	// Required permissions:
	// - None (authenticated only)
	RejectAccountInvite(context.Context, *connect.Request[v1.RejectAccountInviteRequest]) (*connect.Response[v1.RejectAccountInviteResponse], error)
	// Lists all account members in the account identified by the given account ID.
	// The authenticated actor must be a member of the account identified by the given account ID.
	// Required permissions:
	// - read:users
	ListAccountMembers(context.Context, *connect.Request[v1.ListAccountMembersRequest]) (*connect.Response[v1.ListAccountMembersResponse], error)
	// Gets an account member by ID.
	// The authenticated actor must be a member of the same account as the member being fetch.
	// Required permissions:
	// - read:users
	GetAccountMember(context.Context, *connect.Request[v1.GetAccountMemberRequest]) (*connect.Response[v1.GetAccountMemberResponse], error)
	// Deletes an account member.
	// The authenticated actor must be a member of the account from which the the member is being removed.
	// Required permissions:
	// - delete:users
	DeleteAccountMember(context.Context, *connect.Request[v1.DeleteAccountMemberRequest]) (*connect.Response[v1.DeleteAccountMemberResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountServiceMethods := v1.File_qdrant_cloud_account_v1_account_proto.Services().ByName("AccountService").Methods()
	accountServiceListAccountsHandler := connect.NewUnaryHandler(
		AccountServiceListAccountsProcedure,
		svc.ListAccounts,
		connect.WithSchema(accountServiceMethods.ByName("ListAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAccountHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(accountServiceMethods.ByName("GetAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceCreateAccountHandler := connect.NewUnaryHandler(
		AccountServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(accountServiceMethods.ByName("CreateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceUpdateAccountHandler := connect.NewUnaryHandler(
		AccountServiceUpdateAccountProcedure,
		svc.UpdateAccount,
		connect.WithSchema(accountServiceMethods.ByName("UpdateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceDeleteAccountHandler := connect.NewUnaryHandler(
		AccountServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(accountServiceMethods.ByName("DeleteAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceListAccountInvitesHandler := connect.NewUnaryHandler(
		AccountServiceListAccountInvitesProcedure,
		svc.ListAccountInvites,
		connect.WithSchema(accountServiceMethods.ByName("ListAccountInvites")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceListReceivedAccountInvitesHandler := connect.NewUnaryHandler(
		AccountServiceListReceivedAccountInvitesProcedure,
		svc.ListReceivedAccountInvites,
		connect.WithSchema(accountServiceMethods.ByName("ListReceivedAccountInvites")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAccountInviteHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountInviteProcedure,
		svc.GetAccountInvite,
		connect.WithSchema(accountServiceMethods.ByName("GetAccountInvite")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceCreateAccountInviteHandler := connect.NewUnaryHandler(
		AccountServiceCreateAccountInviteProcedure,
		svc.CreateAccountInvite,
		connect.WithSchema(accountServiceMethods.ByName("CreateAccountInvite")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceDeleteAccountInviteHandler := connect.NewUnaryHandler(
		AccountServiceDeleteAccountInviteProcedure,
		svc.DeleteAccountInvite,
		connect.WithSchema(accountServiceMethods.ByName("DeleteAccountInvite")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceAcceptAccountInviteHandler := connect.NewUnaryHandler(
		AccountServiceAcceptAccountInviteProcedure,
		svc.AcceptAccountInvite,
		connect.WithSchema(accountServiceMethods.ByName("AcceptAccountInvite")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceRejectAccountInviteHandler := connect.NewUnaryHandler(
		AccountServiceRejectAccountInviteProcedure,
		svc.RejectAccountInvite,
		connect.WithSchema(accountServiceMethods.ByName("RejectAccountInvite")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceListAccountMembersHandler := connect.NewUnaryHandler(
		AccountServiceListAccountMembersProcedure,
		svc.ListAccountMembers,
		connect.WithSchema(accountServiceMethods.ByName("ListAccountMembers")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAccountMemberHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountMemberProcedure,
		svc.GetAccountMember,
		connect.WithSchema(accountServiceMethods.ByName("GetAccountMember")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceDeleteAccountMemberHandler := connect.NewUnaryHandler(
		AccountServiceDeleteAccountMemberProcedure,
		svc.DeleteAccountMember,
		connect.WithSchema(accountServiceMethods.ByName("DeleteAccountMember")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.account.v1.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceListAccountsProcedure:
			accountServiceListAccountsHandler.ServeHTTP(w, r)
		case AccountServiceGetAccountProcedure:
			accountServiceGetAccountHandler.ServeHTTP(w, r)
		case AccountServiceCreateAccountProcedure:
			accountServiceCreateAccountHandler.ServeHTTP(w, r)
		case AccountServiceUpdateAccountProcedure:
			accountServiceUpdateAccountHandler.ServeHTTP(w, r)
		case AccountServiceDeleteAccountProcedure:
			accountServiceDeleteAccountHandler.ServeHTTP(w, r)
		case AccountServiceListAccountInvitesProcedure:
			accountServiceListAccountInvitesHandler.ServeHTTP(w, r)
		case AccountServiceListReceivedAccountInvitesProcedure:
			accountServiceListReceivedAccountInvitesHandler.ServeHTTP(w, r)
		case AccountServiceGetAccountInviteProcedure:
			accountServiceGetAccountInviteHandler.ServeHTTP(w, r)
		case AccountServiceCreateAccountInviteProcedure:
			accountServiceCreateAccountInviteHandler.ServeHTTP(w, r)
		case AccountServiceDeleteAccountInviteProcedure:
			accountServiceDeleteAccountInviteHandler.ServeHTTP(w, r)
		case AccountServiceAcceptAccountInviteProcedure:
			accountServiceAcceptAccountInviteHandler.ServeHTTP(w, r)
		case AccountServiceRejectAccountInviteProcedure:
			accountServiceRejectAccountInviteHandler.ServeHTTP(w, r)
		case AccountServiceListAccountMembersProcedure:
			accountServiceListAccountMembersHandler.ServeHTTP(w, r)
		case AccountServiceGetAccountMemberProcedure:
			accountServiceGetAccountMemberHandler.ServeHTTP(w, r)
		case AccountServiceDeleteAccountMemberProcedure:
			accountServiceDeleteAccountMemberHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.ListAccounts is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.GetAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.CreateAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.UpdateAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.DeleteAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) ListAccountInvites(context.Context, *connect.Request[v1.ListAccountInvitesRequest]) (*connect.Response[v1.ListAccountInvitesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.ListAccountInvites is not implemented"))
}

func (UnimplementedAccountServiceHandler) ListReceivedAccountInvites(context.Context, *connect.Request[v1.ListReceivedAccountInvitesRequest]) (*connect.Response[v1.ListReceivedAccountInvitesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.ListReceivedAccountInvites is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAccountInvite(context.Context, *connect.Request[v1.GetAccountInviteRequest]) (*connect.Response[v1.GetAccountInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.GetAccountInvite is not implemented"))
}

func (UnimplementedAccountServiceHandler) CreateAccountInvite(context.Context, *connect.Request[v1.CreateAccountInviteRequest]) (*connect.Response[v1.CreateAccountInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.CreateAccountInvite is not implemented"))
}

func (UnimplementedAccountServiceHandler) DeleteAccountInvite(context.Context, *connect.Request[v1.DeleteAccountInviteRequest]) (*connect.Response[v1.DeleteAccountInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.DeleteAccountInvite is not implemented"))
}

func (UnimplementedAccountServiceHandler) AcceptAccountInvite(context.Context, *connect.Request[v1.AcceptAccountInviteRequest]) (*connect.Response[v1.AcceptAccountInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.AcceptAccountInvite is not implemented"))
}

func (UnimplementedAccountServiceHandler) RejectAccountInvite(context.Context, *connect.Request[v1.RejectAccountInviteRequest]) (*connect.Response[v1.RejectAccountInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.RejectAccountInvite is not implemented"))
}

func (UnimplementedAccountServiceHandler) ListAccountMembers(context.Context, *connect.Request[v1.ListAccountMembersRequest]) (*connect.Response[v1.ListAccountMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.ListAccountMembers is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAccountMember(context.Context, *connect.Request[v1.GetAccountMemberRequest]) (*connect.Response[v1.GetAccountMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.GetAccountMember is not implemented"))
}

func (UnimplementedAccountServiceHandler) DeleteAccountMember(context.Context, *connect.Request[v1.DeleteAccountMemberRequest]) (*connect.Response[v1.DeleteAccountMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.account.v1.AccountService.DeleteAccountMember is not implemented"))
}
