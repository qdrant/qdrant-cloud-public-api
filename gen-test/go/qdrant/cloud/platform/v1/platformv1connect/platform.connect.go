// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/platform/v1/platform.proto

package platformv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/platform/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PlatformServiceName is the fully-qualified name of the PlatformService service.
	PlatformServiceName = "qdrant.cloud.platform.v1.PlatformService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlatformServiceListGlobalCloudProvidersProcedure is the fully-qualified name of the
	// PlatformService's ListGlobalCloudProviders RPC.
	PlatformServiceListGlobalCloudProvidersProcedure = "/qdrant.cloud.platform.v1.PlatformService/ListGlobalCloudProviders"
	// PlatformServiceListCloudProvidersProcedure is the fully-qualified name of the PlatformService's
	// ListCloudProviders RPC.
	PlatformServiceListCloudProvidersProcedure = "/qdrant.cloud.platform.v1.PlatformService/ListCloudProviders"
	// PlatformServiceListGlobalCloudProviderRegionsProcedure is the fully-qualified name of the
	// PlatformService's ListGlobalCloudProviderRegions RPC.
	PlatformServiceListGlobalCloudProviderRegionsProcedure = "/qdrant.cloud.platform.v1.PlatformService/ListGlobalCloudProviderRegions"
	// PlatformServiceListCloudProviderRegionsProcedure is the fully-qualified name of the
	// PlatformService's ListCloudProviderRegions RPC.
	PlatformServiceListCloudProviderRegionsProcedure = "/qdrant.cloud.platform.v1.PlatformService/ListCloudProviderRegions"
)

// PlatformServiceClient is a client for the qdrant.cloud.platform.v1.PlatformService service.
type PlatformServiceClient interface {
	// buf:lint:ignore QDRANT_CLOUD_METHOD_OPTIONS
	// Lists all available cloud providers globally (not account-specific).
	// Authentication is not required.
	ListGlobalCloudProviders(context.Context, *connect.Request[v1.ListGlobalCloudProvidersRequest]) (*connect.Response[v1.ListGlobalCloudProvidersResponse], error)
	// Lists all cloud providers in the account identified by the given ID.
	// Required permissions:
	// - None (authenticated only)
	ListCloudProviders(context.Context, *connect.Request[v1.ListCloudProvidersRequest]) (*connect.Response[v1.ListCloudProvidersResponse], error)
	// buf:lint:ignore QDRANT_CLOUD_METHOD_OPTIONS
	// Lists all cloud provider regions (not account-specific) identified by cloud provider ID.
	// Authentication is not required.
	ListGlobalCloudProviderRegions(context.Context, *connect.Request[v1.ListGlobalCloudProviderRegionsRequest]) (*connect.Response[v1.ListGlobalCloudProviderRegionsResponse], error)
	// Lists all cloud provider regions in the account identified by the given ID and cloud provider.
	// Required permissions:
	// - None (authenticated only)
	ListCloudProviderRegions(context.Context, *connect.Request[v1.ListCloudProviderRegionsRequest]) (*connect.Response[v1.ListCloudProviderRegionsResponse], error)
}

// NewPlatformServiceClient constructs a client for the qdrant.cloud.platform.v1.PlatformService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlatformServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PlatformServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	platformServiceMethods := v1.File_qdrant_cloud_platform_v1_platform_proto.Services().ByName("PlatformService").Methods()
	return &platformServiceClient{
		listGlobalCloudProviders: connect.NewClient[v1.ListGlobalCloudProvidersRequest, v1.ListGlobalCloudProvidersResponse](
			httpClient,
			baseURL+PlatformServiceListGlobalCloudProvidersProcedure,
			connect.WithSchema(platformServiceMethods.ByName("ListGlobalCloudProviders")),
			connect.WithClientOptions(opts...),
		),
		listCloudProviders: connect.NewClient[v1.ListCloudProvidersRequest, v1.ListCloudProvidersResponse](
			httpClient,
			baseURL+PlatformServiceListCloudProvidersProcedure,
			connect.WithSchema(platformServiceMethods.ByName("ListCloudProviders")),
			connect.WithClientOptions(opts...),
		),
		listGlobalCloudProviderRegions: connect.NewClient[v1.ListGlobalCloudProviderRegionsRequest, v1.ListGlobalCloudProviderRegionsResponse](
			httpClient,
			baseURL+PlatformServiceListGlobalCloudProviderRegionsProcedure,
			connect.WithSchema(platformServiceMethods.ByName("ListGlobalCloudProviderRegions")),
			connect.WithClientOptions(opts...),
		),
		listCloudProviderRegions: connect.NewClient[v1.ListCloudProviderRegionsRequest, v1.ListCloudProviderRegionsResponse](
			httpClient,
			baseURL+PlatformServiceListCloudProviderRegionsProcedure,
			connect.WithSchema(platformServiceMethods.ByName("ListCloudProviderRegions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// platformServiceClient implements PlatformServiceClient.
type platformServiceClient struct {
	listGlobalCloudProviders       *connect.Client[v1.ListGlobalCloudProvidersRequest, v1.ListGlobalCloudProvidersResponse]
	listCloudProviders             *connect.Client[v1.ListCloudProvidersRequest, v1.ListCloudProvidersResponse]
	listGlobalCloudProviderRegions *connect.Client[v1.ListGlobalCloudProviderRegionsRequest, v1.ListGlobalCloudProviderRegionsResponse]
	listCloudProviderRegions       *connect.Client[v1.ListCloudProviderRegionsRequest, v1.ListCloudProviderRegionsResponse]
}

// ListGlobalCloudProviders calls qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviders.
func (c *platformServiceClient) ListGlobalCloudProviders(ctx context.Context, req *connect.Request[v1.ListGlobalCloudProvidersRequest]) (*connect.Response[v1.ListGlobalCloudProvidersResponse], error) {
	return c.listGlobalCloudProviders.CallUnary(ctx, req)
}

// ListCloudProviders calls qdrant.cloud.platform.v1.PlatformService.ListCloudProviders.
func (c *platformServiceClient) ListCloudProviders(ctx context.Context, req *connect.Request[v1.ListCloudProvidersRequest]) (*connect.Response[v1.ListCloudProvidersResponse], error) {
	return c.listCloudProviders.CallUnary(ctx, req)
}

// ListGlobalCloudProviderRegions calls
// qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviderRegions.
func (c *platformServiceClient) ListGlobalCloudProviderRegions(ctx context.Context, req *connect.Request[v1.ListGlobalCloudProviderRegionsRequest]) (*connect.Response[v1.ListGlobalCloudProviderRegionsResponse], error) {
	return c.listGlobalCloudProviderRegions.CallUnary(ctx, req)
}

// ListCloudProviderRegions calls qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions.
func (c *platformServiceClient) ListCloudProviderRegions(ctx context.Context, req *connect.Request[v1.ListCloudProviderRegionsRequest]) (*connect.Response[v1.ListCloudProviderRegionsResponse], error) {
	return c.listCloudProviderRegions.CallUnary(ctx, req)
}

// PlatformServiceHandler is an implementation of the qdrant.cloud.platform.v1.PlatformService
// service.
type PlatformServiceHandler interface {
	// buf:lint:ignore QDRANT_CLOUD_METHOD_OPTIONS
	// Lists all available cloud providers globally (not account-specific).
	// Authentication is not required.
	ListGlobalCloudProviders(context.Context, *connect.Request[v1.ListGlobalCloudProvidersRequest]) (*connect.Response[v1.ListGlobalCloudProvidersResponse], error)
	// Lists all cloud providers in the account identified by the given ID.
	// Required permissions:
	// - None (authenticated only)
	ListCloudProviders(context.Context, *connect.Request[v1.ListCloudProvidersRequest]) (*connect.Response[v1.ListCloudProvidersResponse], error)
	// buf:lint:ignore QDRANT_CLOUD_METHOD_OPTIONS
	// Lists all cloud provider regions (not account-specific) identified by cloud provider ID.
	// Authentication is not required.
	ListGlobalCloudProviderRegions(context.Context, *connect.Request[v1.ListGlobalCloudProviderRegionsRequest]) (*connect.Response[v1.ListGlobalCloudProviderRegionsResponse], error)
	// Lists all cloud provider regions in the account identified by the given ID and cloud provider.
	// Required permissions:
	// - None (authenticated only)
	ListCloudProviderRegions(context.Context, *connect.Request[v1.ListCloudProviderRegionsRequest]) (*connect.Response[v1.ListCloudProviderRegionsResponse], error)
}

// NewPlatformServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlatformServiceHandler(svc PlatformServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	platformServiceMethods := v1.File_qdrant_cloud_platform_v1_platform_proto.Services().ByName("PlatformService").Methods()
	platformServiceListGlobalCloudProvidersHandler := connect.NewUnaryHandler(
		PlatformServiceListGlobalCloudProvidersProcedure,
		svc.ListGlobalCloudProviders,
		connect.WithSchema(platformServiceMethods.ByName("ListGlobalCloudProviders")),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceListCloudProvidersHandler := connect.NewUnaryHandler(
		PlatformServiceListCloudProvidersProcedure,
		svc.ListCloudProviders,
		connect.WithSchema(platformServiceMethods.ByName("ListCloudProviders")),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceListGlobalCloudProviderRegionsHandler := connect.NewUnaryHandler(
		PlatformServiceListGlobalCloudProviderRegionsProcedure,
		svc.ListGlobalCloudProviderRegions,
		connect.WithSchema(platformServiceMethods.ByName("ListGlobalCloudProviderRegions")),
		connect.WithHandlerOptions(opts...),
	)
	platformServiceListCloudProviderRegionsHandler := connect.NewUnaryHandler(
		PlatformServiceListCloudProviderRegionsProcedure,
		svc.ListCloudProviderRegions,
		connect.WithSchema(platformServiceMethods.ByName("ListCloudProviderRegions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.platform.v1.PlatformService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlatformServiceListGlobalCloudProvidersProcedure:
			platformServiceListGlobalCloudProvidersHandler.ServeHTTP(w, r)
		case PlatformServiceListCloudProvidersProcedure:
			platformServiceListCloudProvidersHandler.ServeHTTP(w, r)
		case PlatformServiceListGlobalCloudProviderRegionsProcedure:
			platformServiceListGlobalCloudProviderRegionsHandler.ServeHTTP(w, r)
		case PlatformServiceListCloudProviderRegionsProcedure:
			platformServiceListCloudProviderRegionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlatformServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPlatformServiceHandler struct{}

func (UnimplementedPlatformServiceHandler) ListGlobalCloudProviders(context.Context, *connect.Request[v1.ListGlobalCloudProvidersRequest]) (*connect.Response[v1.ListGlobalCloudProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviders is not implemented"))
}

func (UnimplementedPlatformServiceHandler) ListCloudProviders(context.Context, *connect.Request[v1.ListCloudProvidersRequest]) (*connect.Response[v1.ListCloudProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.platform.v1.PlatformService.ListCloudProviders is not implemented"))
}

func (UnimplementedPlatformServiceHandler) ListGlobalCloudProviderRegions(context.Context, *connect.Request[v1.ListGlobalCloudProviderRegionsRequest]) (*connect.Response[v1.ListGlobalCloudProviderRegionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviderRegions is not implemented"))
}

func (UnimplementedPlatformServiceHandler) ListCloudProviderRegions(context.Context, *connect.Request[v1.ListCloudProviderRegionsRequest]) (*connect.Response[v1.ListCloudProviderRegionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions is not implemented"))
}
