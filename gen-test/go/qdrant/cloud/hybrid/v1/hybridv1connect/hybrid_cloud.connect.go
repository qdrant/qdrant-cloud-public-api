// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/hybrid/v1/hybrid_cloud.proto

package hybridv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/hybrid/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HybridCloudServiceName is the fully-qualified name of the HybridCloudService service.
	HybridCloudServiceName = "qdrant.cloud.hybrid.v1.HybridCloudService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HybridCloudServiceListHybridCloudEnvironmentsProcedure is the fully-qualified name of the
	// HybridCloudService's ListHybridCloudEnvironments RPC.
	HybridCloudServiceListHybridCloudEnvironmentsProcedure = "/qdrant.cloud.hybrid.v1.HybridCloudService/ListHybridCloudEnvironments"
	// HybridCloudServiceGetHybridCloudEnvironmentProcedure is the fully-qualified name of the
	// HybridCloudService's GetHybridCloudEnvironment RPC.
	HybridCloudServiceGetHybridCloudEnvironmentProcedure = "/qdrant.cloud.hybrid.v1.HybridCloudService/GetHybridCloudEnvironment"
	// HybridCloudServiceCreateHybridCloudEnvironmentProcedure is the fully-qualified name of the
	// HybridCloudService's CreateHybridCloudEnvironment RPC.
	HybridCloudServiceCreateHybridCloudEnvironmentProcedure = "/qdrant.cloud.hybrid.v1.HybridCloudService/CreateHybridCloudEnvironment"
	// HybridCloudServiceUpdateHybridCloudEnvironmentProcedure is the fully-qualified name of the
	// HybridCloudService's UpdateHybridCloudEnvironment RPC.
	HybridCloudServiceUpdateHybridCloudEnvironmentProcedure = "/qdrant.cloud.hybrid.v1.HybridCloudService/UpdateHybridCloudEnvironment"
	// HybridCloudServiceDeleteHybridCloudEnvironmentProcedure is the fully-qualified name of the
	// HybridCloudService's DeleteHybridCloudEnvironment RPC.
	HybridCloudServiceDeleteHybridCloudEnvironmentProcedure = "/qdrant.cloud.hybrid.v1.HybridCloudService/DeleteHybridCloudEnvironment"
	// HybridCloudServiceGetBootstrapCommandsProcedure is the fully-qualified name of the
	// HybridCloudService's GetBootstrapCommands RPC.
	HybridCloudServiceGetBootstrapCommandsProcedure = "/qdrant.cloud.hybrid.v1.HybridCloudService/GetBootstrapCommands"
)

// HybridCloudServiceClient is a client for the qdrant.cloud.hybrid.v1.HybridCloudService service.
type HybridCloudServiceClient interface {
	// Lists all hybrid cloud environments in the account identified by the given ID.
	// Required permissions (any-of):
	// - read:hybrid_cloud_environments
	// - write:clusters
	ListHybridCloudEnvironments(context.Context, *connect.Request[v1.ListHybridCloudEnvironmentsRequest]) (*connect.Response[v1.ListHybridCloudEnvironmentsResponse], error)
	// Gets a hybrid cloud environment in the account identified by the given ID.
	// Required permissions (any-of):
	// - read:hybrid_cloud_environments
	// - write:clusters
	GetHybridCloudEnvironment(context.Context, *connect.Request[v1.GetHybridCloudEnvironmentRequest]) (*connect.Response[v1.GetHybridCloudEnvironmentResponse], error)
	// Creates a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - write:hybrid_cloud_environments
	CreateHybridCloudEnvironment(context.Context, *connect.Request[v1.CreateHybridCloudEnvironmentRequest]) (*connect.Response[v1.CreateHybridCloudEnvironmentResponse], error)
	// Updates a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - write:hybrid_cloud_environments
	UpdateHybridCloudEnvironment(context.Context, *connect.Request[v1.UpdateHybridCloudEnvironmentRequest]) (*connect.Response[v1.UpdateHybridCloudEnvironmentResponse], error)
	// Deletes a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - delete:hybrid_cloud_environments
	DeleteHybridCloudEnvironment(context.Context, *connect.Request[v1.DeleteHybridCloudEnvironmentRequest]) (*connect.Response[v1.DeleteHybridCloudEnvironmentResponse], error)
	// Gets the commands that should be executed against a kubernetes cluster to
	// bootstrap it to the hybrid cloud environment. The operation can be invoked multiple times,
	// but be aware that each invocation is going to create new Qdrant cloud access token and the registry credentials.
	// Thus, it make sense to call it only if a kubernetes cluster is not yet registered to the given hybrid environment.
	// Required permission:
	// - write:hybrid_cloud_environments
	GetBootstrapCommands(context.Context, *connect.Request[v1.GetBootstrapCommandsRequest]) (*connect.Response[v1.GetBootstrapCommandsResponse], error)
}

// NewHybridCloudServiceClient constructs a client for the qdrant.cloud.hybrid.v1.HybridCloudService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHybridCloudServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HybridCloudServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hybridCloudServiceMethods := v1.File_qdrant_cloud_hybrid_v1_hybrid_cloud_proto.Services().ByName("HybridCloudService").Methods()
	return &hybridCloudServiceClient{
		listHybridCloudEnvironments: connect.NewClient[v1.ListHybridCloudEnvironmentsRequest, v1.ListHybridCloudEnvironmentsResponse](
			httpClient,
			baseURL+HybridCloudServiceListHybridCloudEnvironmentsProcedure,
			connect.WithSchema(hybridCloudServiceMethods.ByName("ListHybridCloudEnvironments")),
			connect.WithClientOptions(opts...),
		),
		getHybridCloudEnvironment: connect.NewClient[v1.GetHybridCloudEnvironmentRequest, v1.GetHybridCloudEnvironmentResponse](
			httpClient,
			baseURL+HybridCloudServiceGetHybridCloudEnvironmentProcedure,
			connect.WithSchema(hybridCloudServiceMethods.ByName("GetHybridCloudEnvironment")),
			connect.WithClientOptions(opts...),
		),
		createHybridCloudEnvironment: connect.NewClient[v1.CreateHybridCloudEnvironmentRequest, v1.CreateHybridCloudEnvironmentResponse](
			httpClient,
			baseURL+HybridCloudServiceCreateHybridCloudEnvironmentProcedure,
			connect.WithSchema(hybridCloudServiceMethods.ByName("CreateHybridCloudEnvironment")),
			connect.WithClientOptions(opts...),
		),
		updateHybridCloudEnvironment: connect.NewClient[v1.UpdateHybridCloudEnvironmentRequest, v1.UpdateHybridCloudEnvironmentResponse](
			httpClient,
			baseURL+HybridCloudServiceUpdateHybridCloudEnvironmentProcedure,
			connect.WithSchema(hybridCloudServiceMethods.ByName("UpdateHybridCloudEnvironment")),
			connect.WithClientOptions(opts...),
		),
		deleteHybridCloudEnvironment: connect.NewClient[v1.DeleteHybridCloudEnvironmentRequest, v1.DeleteHybridCloudEnvironmentResponse](
			httpClient,
			baseURL+HybridCloudServiceDeleteHybridCloudEnvironmentProcedure,
			connect.WithSchema(hybridCloudServiceMethods.ByName("DeleteHybridCloudEnvironment")),
			connect.WithClientOptions(opts...),
		),
		getBootstrapCommands: connect.NewClient[v1.GetBootstrapCommandsRequest, v1.GetBootstrapCommandsResponse](
			httpClient,
			baseURL+HybridCloudServiceGetBootstrapCommandsProcedure,
			connect.WithSchema(hybridCloudServiceMethods.ByName("GetBootstrapCommands")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hybridCloudServiceClient implements HybridCloudServiceClient.
type hybridCloudServiceClient struct {
	listHybridCloudEnvironments  *connect.Client[v1.ListHybridCloudEnvironmentsRequest, v1.ListHybridCloudEnvironmentsResponse]
	getHybridCloudEnvironment    *connect.Client[v1.GetHybridCloudEnvironmentRequest, v1.GetHybridCloudEnvironmentResponse]
	createHybridCloudEnvironment *connect.Client[v1.CreateHybridCloudEnvironmentRequest, v1.CreateHybridCloudEnvironmentResponse]
	updateHybridCloudEnvironment *connect.Client[v1.UpdateHybridCloudEnvironmentRequest, v1.UpdateHybridCloudEnvironmentResponse]
	deleteHybridCloudEnvironment *connect.Client[v1.DeleteHybridCloudEnvironmentRequest, v1.DeleteHybridCloudEnvironmentResponse]
	getBootstrapCommands         *connect.Client[v1.GetBootstrapCommandsRequest, v1.GetBootstrapCommandsResponse]
}

// ListHybridCloudEnvironments calls
// qdrant.cloud.hybrid.v1.HybridCloudService.ListHybridCloudEnvironments.
func (c *hybridCloudServiceClient) ListHybridCloudEnvironments(ctx context.Context, req *connect.Request[v1.ListHybridCloudEnvironmentsRequest]) (*connect.Response[v1.ListHybridCloudEnvironmentsResponse], error) {
	return c.listHybridCloudEnvironments.CallUnary(ctx, req)
}

// GetHybridCloudEnvironment calls
// qdrant.cloud.hybrid.v1.HybridCloudService.GetHybridCloudEnvironment.
func (c *hybridCloudServiceClient) GetHybridCloudEnvironment(ctx context.Context, req *connect.Request[v1.GetHybridCloudEnvironmentRequest]) (*connect.Response[v1.GetHybridCloudEnvironmentResponse], error) {
	return c.getHybridCloudEnvironment.CallUnary(ctx, req)
}

// CreateHybridCloudEnvironment calls
// qdrant.cloud.hybrid.v1.HybridCloudService.CreateHybridCloudEnvironment.
func (c *hybridCloudServiceClient) CreateHybridCloudEnvironment(ctx context.Context, req *connect.Request[v1.CreateHybridCloudEnvironmentRequest]) (*connect.Response[v1.CreateHybridCloudEnvironmentResponse], error) {
	return c.createHybridCloudEnvironment.CallUnary(ctx, req)
}

// UpdateHybridCloudEnvironment calls
// qdrant.cloud.hybrid.v1.HybridCloudService.UpdateHybridCloudEnvironment.
func (c *hybridCloudServiceClient) UpdateHybridCloudEnvironment(ctx context.Context, req *connect.Request[v1.UpdateHybridCloudEnvironmentRequest]) (*connect.Response[v1.UpdateHybridCloudEnvironmentResponse], error) {
	return c.updateHybridCloudEnvironment.CallUnary(ctx, req)
}

// DeleteHybridCloudEnvironment calls
// qdrant.cloud.hybrid.v1.HybridCloudService.DeleteHybridCloudEnvironment.
func (c *hybridCloudServiceClient) DeleteHybridCloudEnvironment(ctx context.Context, req *connect.Request[v1.DeleteHybridCloudEnvironmentRequest]) (*connect.Response[v1.DeleteHybridCloudEnvironmentResponse], error) {
	return c.deleteHybridCloudEnvironment.CallUnary(ctx, req)
}

// GetBootstrapCommands calls qdrant.cloud.hybrid.v1.HybridCloudService.GetBootstrapCommands.
func (c *hybridCloudServiceClient) GetBootstrapCommands(ctx context.Context, req *connect.Request[v1.GetBootstrapCommandsRequest]) (*connect.Response[v1.GetBootstrapCommandsResponse], error) {
	return c.getBootstrapCommands.CallUnary(ctx, req)
}

// HybridCloudServiceHandler is an implementation of the qdrant.cloud.hybrid.v1.HybridCloudService
// service.
type HybridCloudServiceHandler interface {
	// Lists all hybrid cloud environments in the account identified by the given ID.
	// Required permissions (any-of):
	// - read:hybrid_cloud_environments
	// - write:clusters
	ListHybridCloudEnvironments(context.Context, *connect.Request[v1.ListHybridCloudEnvironmentsRequest]) (*connect.Response[v1.ListHybridCloudEnvironmentsResponse], error)
	// Gets a hybrid cloud environment in the account identified by the given ID.
	// Required permissions (any-of):
	// - read:hybrid_cloud_environments
	// - write:clusters
	GetHybridCloudEnvironment(context.Context, *connect.Request[v1.GetHybridCloudEnvironmentRequest]) (*connect.Response[v1.GetHybridCloudEnvironmentResponse], error)
	// Creates a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - write:hybrid_cloud_environments
	CreateHybridCloudEnvironment(context.Context, *connect.Request[v1.CreateHybridCloudEnvironmentRequest]) (*connect.Response[v1.CreateHybridCloudEnvironmentResponse], error)
	// Updates a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - write:hybrid_cloud_environments
	UpdateHybridCloudEnvironment(context.Context, *connect.Request[v1.UpdateHybridCloudEnvironmentRequest]) (*connect.Response[v1.UpdateHybridCloudEnvironmentResponse], error)
	// Deletes a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - delete:hybrid_cloud_environments
	DeleteHybridCloudEnvironment(context.Context, *connect.Request[v1.DeleteHybridCloudEnvironmentRequest]) (*connect.Response[v1.DeleteHybridCloudEnvironmentResponse], error)
	// Gets the commands that should be executed against a kubernetes cluster to
	// bootstrap it to the hybrid cloud environment. The operation can be invoked multiple times,
	// but be aware that each invocation is going to create new Qdrant cloud access token and the registry credentials.
	// Thus, it make sense to call it only if a kubernetes cluster is not yet registered to the given hybrid environment.
	// Required permission:
	// - write:hybrid_cloud_environments
	GetBootstrapCommands(context.Context, *connect.Request[v1.GetBootstrapCommandsRequest]) (*connect.Response[v1.GetBootstrapCommandsResponse], error)
}

// NewHybridCloudServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHybridCloudServiceHandler(svc HybridCloudServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hybridCloudServiceMethods := v1.File_qdrant_cloud_hybrid_v1_hybrid_cloud_proto.Services().ByName("HybridCloudService").Methods()
	hybridCloudServiceListHybridCloudEnvironmentsHandler := connect.NewUnaryHandler(
		HybridCloudServiceListHybridCloudEnvironmentsProcedure,
		svc.ListHybridCloudEnvironments,
		connect.WithSchema(hybridCloudServiceMethods.ByName("ListHybridCloudEnvironments")),
		connect.WithHandlerOptions(opts...),
	)
	hybridCloudServiceGetHybridCloudEnvironmentHandler := connect.NewUnaryHandler(
		HybridCloudServiceGetHybridCloudEnvironmentProcedure,
		svc.GetHybridCloudEnvironment,
		connect.WithSchema(hybridCloudServiceMethods.ByName("GetHybridCloudEnvironment")),
		connect.WithHandlerOptions(opts...),
	)
	hybridCloudServiceCreateHybridCloudEnvironmentHandler := connect.NewUnaryHandler(
		HybridCloudServiceCreateHybridCloudEnvironmentProcedure,
		svc.CreateHybridCloudEnvironment,
		connect.WithSchema(hybridCloudServiceMethods.ByName("CreateHybridCloudEnvironment")),
		connect.WithHandlerOptions(opts...),
	)
	hybridCloudServiceUpdateHybridCloudEnvironmentHandler := connect.NewUnaryHandler(
		HybridCloudServiceUpdateHybridCloudEnvironmentProcedure,
		svc.UpdateHybridCloudEnvironment,
		connect.WithSchema(hybridCloudServiceMethods.ByName("UpdateHybridCloudEnvironment")),
		connect.WithHandlerOptions(opts...),
	)
	hybridCloudServiceDeleteHybridCloudEnvironmentHandler := connect.NewUnaryHandler(
		HybridCloudServiceDeleteHybridCloudEnvironmentProcedure,
		svc.DeleteHybridCloudEnvironment,
		connect.WithSchema(hybridCloudServiceMethods.ByName("DeleteHybridCloudEnvironment")),
		connect.WithHandlerOptions(opts...),
	)
	hybridCloudServiceGetBootstrapCommandsHandler := connect.NewUnaryHandler(
		HybridCloudServiceGetBootstrapCommandsProcedure,
		svc.GetBootstrapCommands,
		connect.WithSchema(hybridCloudServiceMethods.ByName("GetBootstrapCommands")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.hybrid.v1.HybridCloudService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HybridCloudServiceListHybridCloudEnvironmentsProcedure:
			hybridCloudServiceListHybridCloudEnvironmentsHandler.ServeHTTP(w, r)
		case HybridCloudServiceGetHybridCloudEnvironmentProcedure:
			hybridCloudServiceGetHybridCloudEnvironmentHandler.ServeHTTP(w, r)
		case HybridCloudServiceCreateHybridCloudEnvironmentProcedure:
			hybridCloudServiceCreateHybridCloudEnvironmentHandler.ServeHTTP(w, r)
		case HybridCloudServiceUpdateHybridCloudEnvironmentProcedure:
			hybridCloudServiceUpdateHybridCloudEnvironmentHandler.ServeHTTP(w, r)
		case HybridCloudServiceDeleteHybridCloudEnvironmentProcedure:
			hybridCloudServiceDeleteHybridCloudEnvironmentHandler.ServeHTTP(w, r)
		case HybridCloudServiceGetBootstrapCommandsProcedure:
			hybridCloudServiceGetBootstrapCommandsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHybridCloudServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHybridCloudServiceHandler struct{}

func (UnimplementedHybridCloudServiceHandler) ListHybridCloudEnvironments(context.Context, *connect.Request[v1.ListHybridCloudEnvironmentsRequest]) (*connect.Response[v1.ListHybridCloudEnvironmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.hybrid.v1.HybridCloudService.ListHybridCloudEnvironments is not implemented"))
}

func (UnimplementedHybridCloudServiceHandler) GetHybridCloudEnvironment(context.Context, *connect.Request[v1.GetHybridCloudEnvironmentRequest]) (*connect.Response[v1.GetHybridCloudEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.hybrid.v1.HybridCloudService.GetHybridCloudEnvironment is not implemented"))
}

func (UnimplementedHybridCloudServiceHandler) CreateHybridCloudEnvironment(context.Context, *connect.Request[v1.CreateHybridCloudEnvironmentRequest]) (*connect.Response[v1.CreateHybridCloudEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.hybrid.v1.HybridCloudService.CreateHybridCloudEnvironment is not implemented"))
}

func (UnimplementedHybridCloudServiceHandler) UpdateHybridCloudEnvironment(context.Context, *connect.Request[v1.UpdateHybridCloudEnvironmentRequest]) (*connect.Response[v1.UpdateHybridCloudEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.hybrid.v1.HybridCloudService.UpdateHybridCloudEnvironment is not implemented"))
}

func (UnimplementedHybridCloudServiceHandler) DeleteHybridCloudEnvironment(context.Context, *connect.Request[v1.DeleteHybridCloudEnvironmentRequest]) (*connect.Response[v1.DeleteHybridCloudEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.hybrid.v1.HybridCloudService.DeleteHybridCloudEnvironment is not implemented"))
}

func (UnimplementedHybridCloudServiceHandler) GetBootstrapCommands(context.Context, *connect.Request[v1.GetBootstrapCommandsRequest]) (*connect.Response[v1.GetBootstrapCommandsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.hybrid.v1.HybridCloudService.GetBootstrapCommands is not implemented"))
}
