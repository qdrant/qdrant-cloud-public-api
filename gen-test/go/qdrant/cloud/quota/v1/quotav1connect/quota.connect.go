// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/quota/v1/quota.proto

package quotav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/quota/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QuotaServiceName is the fully-qualified name of the QuotaService service.
	QuotaServiceName = "qdrant.cloud.quota.v1.QuotaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QuotaServiceGetAuthenticatedUserQuotasProcedure is the fully-qualified name of the QuotaService's
	// GetAuthenticatedUserQuotas RPC.
	QuotaServiceGetAuthenticatedUserQuotasProcedure = "/qdrant.cloud.quota.v1.QuotaService/GetAuthenticatedUserQuotas"
	// QuotaServiceGetAccountQuotasProcedure is the fully-qualified name of the QuotaService's
	// GetAccountQuotas RPC.
	QuotaServiceGetAccountQuotasProcedure = "/qdrant.cloud.quota.v1.QuotaService/GetAccountQuotas"
)

// QuotaServiceClient is a client for the qdrant.cloud.quota.v1.QuotaService service.
type QuotaServiceClient interface {
	// Get quotas for the authenticated user.
	// Required permissions:
	// - None (authenticated only)
	GetAuthenticatedUserQuotas(context.Context, *connect.Request[v1.GetAuthenticatedUserQuotasRequest]) (*connect.Response[v1.GetAuthenticatedUserQuotasResponse], error)
	// Get quotas for the account identified by the given account ID.
	// Required permissions:
	// - read:account
	GetAccountQuotas(context.Context, *connect.Request[v1.GetAccountQuotasRequest]) (*connect.Response[v1.GetAccountQuotasResponse], error)
}

// NewQuotaServiceClient constructs a client for the qdrant.cloud.quota.v1.QuotaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQuotaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QuotaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	quotaServiceMethods := v1.File_qdrant_cloud_quota_v1_quota_proto.Services().ByName("QuotaService").Methods()
	return &quotaServiceClient{
		getAuthenticatedUserQuotas: connect.NewClient[v1.GetAuthenticatedUserQuotasRequest, v1.GetAuthenticatedUserQuotasResponse](
			httpClient,
			baseURL+QuotaServiceGetAuthenticatedUserQuotasProcedure,
			connect.WithSchema(quotaServiceMethods.ByName("GetAuthenticatedUserQuotas")),
			connect.WithClientOptions(opts...),
		),
		getAccountQuotas: connect.NewClient[v1.GetAccountQuotasRequest, v1.GetAccountQuotasResponse](
			httpClient,
			baseURL+QuotaServiceGetAccountQuotasProcedure,
			connect.WithSchema(quotaServiceMethods.ByName("GetAccountQuotas")),
			connect.WithClientOptions(opts...),
		),
	}
}

// quotaServiceClient implements QuotaServiceClient.
type quotaServiceClient struct {
	getAuthenticatedUserQuotas *connect.Client[v1.GetAuthenticatedUserQuotasRequest, v1.GetAuthenticatedUserQuotasResponse]
	getAccountQuotas           *connect.Client[v1.GetAccountQuotasRequest, v1.GetAccountQuotasResponse]
}

// GetAuthenticatedUserQuotas calls qdrant.cloud.quota.v1.QuotaService.GetAuthenticatedUserQuotas.
func (c *quotaServiceClient) GetAuthenticatedUserQuotas(ctx context.Context, req *connect.Request[v1.GetAuthenticatedUserQuotasRequest]) (*connect.Response[v1.GetAuthenticatedUserQuotasResponse], error) {
	return c.getAuthenticatedUserQuotas.CallUnary(ctx, req)
}

// GetAccountQuotas calls qdrant.cloud.quota.v1.QuotaService.GetAccountQuotas.
func (c *quotaServiceClient) GetAccountQuotas(ctx context.Context, req *connect.Request[v1.GetAccountQuotasRequest]) (*connect.Response[v1.GetAccountQuotasResponse], error) {
	return c.getAccountQuotas.CallUnary(ctx, req)
}

// QuotaServiceHandler is an implementation of the qdrant.cloud.quota.v1.QuotaService service.
type QuotaServiceHandler interface {
	// Get quotas for the authenticated user.
	// Required permissions:
	// - None (authenticated only)
	GetAuthenticatedUserQuotas(context.Context, *connect.Request[v1.GetAuthenticatedUserQuotasRequest]) (*connect.Response[v1.GetAuthenticatedUserQuotasResponse], error)
	// Get quotas for the account identified by the given account ID.
	// Required permissions:
	// - read:account
	GetAccountQuotas(context.Context, *connect.Request[v1.GetAccountQuotasRequest]) (*connect.Response[v1.GetAccountQuotasResponse], error)
}

// NewQuotaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQuotaServiceHandler(svc QuotaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	quotaServiceMethods := v1.File_qdrant_cloud_quota_v1_quota_proto.Services().ByName("QuotaService").Methods()
	quotaServiceGetAuthenticatedUserQuotasHandler := connect.NewUnaryHandler(
		QuotaServiceGetAuthenticatedUserQuotasProcedure,
		svc.GetAuthenticatedUserQuotas,
		connect.WithSchema(quotaServiceMethods.ByName("GetAuthenticatedUserQuotas")),
		connect.WithHandlerOptions(opts...),
	)
	quotaServiceGetAccountQuotasHandler := connect.NewUnaryHandler(
		QuotaServiceGetAccountQuotasProcedure,
		svc.GetAccountQuotas,
		connect.WithSchema(quotaServiceMethods.ByName("GetAccountQuotas")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.quota.v1.QuotaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QuotaServiceGetAuthenticatedUserQuotasProcedure:
			quotaServiceGetAuthenticatedUserQuotasHandler.ServeHTTP(w, r)
		case QuotaServiceGetAccountQuotasProcedure:
			quotaServiceGetAccountQuotasHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQuotaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQuotaServiceHandler struct{}

func (UnimplementedQuotaServiceHandler) GetAuthenticatedUserQuotas(context.Context, *connect.Request[v1.GetAuthenticatedUserQuotasRequest]) (*connect.Response[v1.GetAuthenticatedUserQuotasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.quota.v1.QuotaService.GetAuthenticatedUserQuotas is not implemented"))
}

func (UnimplementedQuotaServiceHandler) GetAccountQuotas(context.Context, *connect.Request[v1.GetAccountQuotasRequest]) (*connect.Response[v1.GetAccountQuotasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.quota.v1.QuotaService.GetAccountQuotas is not implemented"))
}
