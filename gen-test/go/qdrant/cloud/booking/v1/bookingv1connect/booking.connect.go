// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/booking/v1/booking.proto

package bookingv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/booking/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BookingServiceName is the fully-qualified name of the BookingService service.
	BookingServiceName = "qdrant.cloud.booking.v1.BookingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BookingServiceListPackagesProcedure is the fully-qualified name of the BookingService's
	// ListPackages RPC.
	BookingServiceListPackagesProcedure = "/qdrant.cloud.booking.v1.BookingService/ListPackages"
	// BookingServiceGetPackageProcedure is the fully-qualified name of the BookingService's GetPackage
	// RPC.
	BookingServiceGetPackageProcedure = "/qdrant.cloud.booking.v1.BookingService/GetPackage"
	// BookingServiceListGlobalPackagesProcedure is the fully-qualified name of the BookingService's
	// ListGlobalPackages RPC.
	BookingServiceListGlobalPackagesProcedure = "/qdrant.cloud.booking.v1.BookingService/ListGlobalPackages"
)

// BookingServiceClient is a client for the qdrant.cloud.booking.v1.BookingService service.
type BookingServiceClient interface {
	// Lists all packages known by the system, optional filtered.
	// Required permissions:
	// - None (authenticated only)
	ListPackages(context.Context, *connect.Request[v1.ListPackagesRequest]) (*connect.Response[v1.ListPackagesResponse], error)
	// Gets the package identified by the given ID.
	// Required permissions:
	// - None (authenticated only)
	GetPackage(context.Context, *connect.Request[v1.GetPackageRequest]) (*connect.Response[v1.GetPackageResponse], error)
	// buf:lint:ignore QDRANT_CLOUD_METHOD_OPTIONS
	// Lists all public packages.
	// Authentication not required
	ListGlobalPackages(context.Context, *connect.Request[v1.ListGlobalPackagesRequest]) (*connect.Response[v1.ListGlobalPackagesResponse], error)
}

// NewBookingServiceClient constructs a client for the qdrant.cloud.booking.v1.BookingService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BookingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bookingServiceMethods := v1.File_qdrant_cloud_booking_v1_booking_proto.Services().ByName("BookingService").Methods()
	return &bookingServiceClient{
		listPackages: connect.NewClient[v1.ListPackagesRequest, v1.ListPackagesResponse](
			httpClient,
			baseURL+BookingServiceListPackagesProcedure,
			connect.WithSchema(bookingServiceMethods.ByName("ListPackages")),
			connect.WithClientOptions(opts...),
		),
		getPackage: connect.NewClient[v1.GetPackageRequest, v1.GetPackageResponse](
			httpClient,
			baseURL+BookingServiceGetPackageProcedure,
			connect.WithSchema(bookingServiceMethods.ByName("GetPackage")),
			connect.WithClientOptions(opts...),
		),
		listGlobalPackages: connect.NewClient[v1.ListGlobalPackagesRequest, v1.ListGlobalPackagesResponse](
			httpClient,
			baseURL+BookingServiceListGlobalPackagesProcedure,
			connect.WithSchema(bookingServiceMethods.ByName("ListGlobalPackages")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bookingServiceClient implements BookingServiceClient.
type bookingServiceClient struct {
	listPackages       *connect.Client[v1.ListPackagesRequest, v1.ListPackagesResponse]
	getPackage         *connect.Client[v1.GetPackageRequest, v1.GetPackageResponse]
	listGlobalPackages *connect.Client[v1.ListGlobalPackagesRequest, v1.ListGlobalPackagesResponse]
}

// ListPackages calls qdrant.cloud.booking.v1.BookingService.ListPackages.
func (c *bookingServiceClient) ListPackages(ctx context.Context, req *connect.Request[v1.ListPackagesRequest]) (*connect.Response[v1.ListPackagesResponse], error) {
	return c.listPackages.CallUnary(ctx, req)
}

// GetPackage calls qdrant.cloud.booking.v1.BookingService.GetPackage.
func (c *bookingServiceClient) GetPackage(ctx context.Context, req *connect.Request[v1.GetPackageRequest]) (*connect.Response[v1.GetPackageResponse], error) {
	return c.getPackage.CallUnary(ctx, req)
}

// ListGlobalPackages calls qdrant.cloud.booking.v1.BookingService.ListGlobalPackages.
func (c *bookingServiceClient) ListGlobalPackages(ctx context.Context, req *connect.Request[v1.ListGlobalPackagesRequest]) (*connect.Response[v1.ListGlobalPackagesResponse], error) {
	return c.listGlobalPackages.CallUnary(ctx, req)
}

// BookingServiceHandler is an implementation of the qdrant.cloud.booking.v1.BookingService service.
type BookingServiceHandler interface {
	// Lists all packages known by the system, optional filtered.
	// Required permissions:
	// - None (authenticated only)
	ListPackages(context.Context, *connect.Request[v1.ListPackagesRequest]) (*connect.Response[v1.ListPackagesResponse], error)
	// Gets the package identified by the given ID.
	// Required permissions:
	// - None (authenticated only)
	GetPackage(context.Context, *connect.Request[v1.GetPackageRequest]) (*connect.Response[v1.GetPackageResponse], error)
	// buf:lint:ignore QDRANT_CLOUD_METHOD_OPTIONS
	// Lists all public packages.
	// Authentication not required
	ListGlobalPackages(context.Context, *connect.Request[v1.ListGlobalPackagesRequest]) (*connect.Response[v1.ListGlobalPackagesResponse], error)
}

// NewBookingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookingServiceHandler(svc BookingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bookingServiceMethods := v1.File_qdrant_cloud_booking_v1_booking_proto.Services().ByName("BookingService").Methods()
	bookingServiceListPackagesHandler := connect.NewUnaryHandler(
		BookingServiceListPackagesProcedure,
		svc.ListPackages,
		connect.WithSchema(bookingServiceMethods.ByName("ListPackages")),
		connect.WithHandlerOptions(opts...),
	)
	bookingServiceGetPackageHandler := connect.NewUnaryHandler(
		BookingServiceGetPackageProcedure,
		svc.GetPackage,
		connect.WithSchema(bookingServiceMethods.ByName("GetPackage")),
		connect.WithHandlerOptions(opts...),
	)
	bookingServiceListGlobalPackagesHandler := connect.NewUnaryHandler(
		BookingServiceListGlobalPackagesProcedure,
		svc.ListGlobalPackages,
		connect.WithSchema(bookingServiceMethods.ByName("ListGlobalPackages")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.booking.v1.BookingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookingServiceListPackagesProcedure:
			bookingServiceListPackagesHandler.ServeHTTP(w, r)
		case BookingServiceGetPackageProcedure:
			bookingServiceGetPackageHandler.ServeHTTP(w, r)
		case BookingServiceListGlobalPackagesProcedure:
			bookingServiceListGlobalPackagesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBookingServiceHandler struct{}

func (UnimplementedBookingServiceHandler) ListPackages(context.Context, *connect.Request[v1.ListPackagesRequest]) (*connect.Response[v1.ListPackagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.booking.v1.BookingService.ListPackages is not implemented"))
}

func (UnimplementedBookingServiceHandler) GetPackage(context.Context, *connect.Request[v1.GetPackageRequest]) (*connect.Response[v1.GetPackageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.booking.v1.BookingService.GetPackage is not implemented"))
}

func (UnimplementedBookingServiceHandler) ListGlobalPackages(context.Context, *connect.Request[v1.ListGlobalPackagesRequest]) (*connect.Response[v1.ListGlobalPackagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.booking.v1.BookingService.ListGlobalPackages is not implemented"))
}
