// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/monitoring/v1/monitoring.proto

package monitoringv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/monitoring/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MonitoringServiceName is the fully-qualified name of the MonitoringService service.
	MonitoringServiceName = "qdrant.cloud.monitoring.v1.MonitoringService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MonitoringServiceGetClusterSummaryMetricsProcedure is the fully-qualified name of the
	// MonitoringService's GetClusterSummaryMetrics RPC.
	MonitoringServiceGetClusterSummaryMetricsProcedure = "/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterSummaryMetrics"
	// MonitoringServiceGetClusterUsageMetricsProcedure is the fully-qualified name of the
	// MonitoringService's GetClusterUsageMetrics RPC.
	MonitoringServiceGetClusterUsageMetricsProcedure = "/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterUsageMetrics"
	// MonitoringServiceGetClusterLogsProcedure is the fully-qualified name of the MonitoringService's
	// GetClusterLogs RPC.
	MonitoringServiceGetClusterLogsProcedure = "/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterLogs"
	// MonitoringServiceGetClusterEventsProcedure is the fully-qualified name of the MonitoringService's
	// GetClusterEvents RPC.
	MonitoringServiceGetClusterEventsProcedure = "/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterEvents"
)

// MonitoringServiceClient is a client for the qdrant.cloud.monitoring.v1.MonitoringService service.
type MonitoringServiceClient interface {
	// Gets the summary metrics of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterSummaryMetrics(context.Context, *connect.Request[v1.GetClusterSummaryMetricsRequest]) (*connect.Response[v1.GetClusterSummaryMetricsResponse], error)
	// Gets the detailed usage metrics (as timeseries) of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterUsageMetrics(context.Context, *connect.Request[v1.GetClusterUsageMetricsRequest]) (*connect.Response[v1.GetClusterUsageMetricsResponse], error)
	// Gets the logs of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterLogs(context.Context, *connect.Request[v1.GetClusterLogsRequest]) (*connect.Response[v1.GetClusterLogsResponse], error)
	// Gets the events of a cluster in the account identified by the given ID.
	// This method is currently available only for clusters running in hybrid cloud environments.
	// Required permissions:
	// - read:clusters
	GetClusterEvents(context.Context, *connect.Request[v1.GetClusterEventsRequest]) (*connect.Response[v1.GetClusterEventsResponse], error)
}

// NewMonitoringServiceClient constructs a client for the
// qdrant.cloud.monitoring.v1.MonitoringService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMonitoringServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MonitoringServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	monitoringServiceMethods := v1.File_qdrant_cloud_monitoring_v1_monitoring_proto.Services().ByName("MonitoringService").Methods()
	return &monitoringServiceClient{
		getClusterSummaryMetrics: connect.NewClient[v1.GetClusterSummaryMetricsRequest, v1.GetClusterSummaryMetricsResponse](
			httpClient,
			baseURL+MonitoringServiceGetClusterSummaryMetricsProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetClusterSummaryMetrics")),
			connect.WithClientOptions(opts...),
		),
		getClusterUsageMetrics: connect.NewClient[v1.GetClusterUsageMetricsRequest, v1.GetClusterUsageMetricsResponse](
			httpClient,
			baseURL+MonitoringServiceGetClusterUsageMetricsProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetClusterUsageMetrics")),
			connect.WithClientOptions(opts...),
		),
		getClusterLogs: connect.NewClient[v1.GetClusterLogsRequest, v1.GetClusterLogsResponse](
			httpClient,
			baseURL+MonitoringServiceGetClusterLogsProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetClusterLogs")),
			connect.WithClientOptions(opts...),
		),
		getClusterEvents: connect.NewClient[v1.GetClusterEventsRequest, v1.GetClusterEventsResponse](
			httpClient,
			baseURL+MonitoringServiceGetClusterEventsProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetClusterEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// monitoringServiceClient implements MonitoringServiceClient.
type monitoringServiceClient struct {
	getClusterSummaryMetrics *connect.Client[v1.GetClusterSummaryMetricsRequest, v1.GetClusterSummaryMetricsResponse]
	getClusterUsageMetrics   *connect.Client[v1.GetClusterUsageMetricsRequest, v1.GetClusterUsageMetricsResponse]
	getClusterLogs           *connect.Client[v1.GetClusterLogsRequest, v1.GetClusterLogsResponse]
	getClusterEvents         *connect.Client[v1.GetClusterEventsRequest, v1.GetClusterEventsResponse]
}

// GetClusterSummaryMetrics calls
// qdrant.cloud.monitoring.v1.MonitoringService.GetClusterSummaryMetrics.
func (c *monitoringServiceClient) GetClusterSummaryMetrics(ctx context.Context, req *connect.Request[v1.GetClusterSummaryMetricsRequest]) (*connect.Response[v1.GetClusterSummaryMetricsResponse], error) {
	return c.getClusterSummaryMetrics.CallUnary(ctx, req)
}

// GetClusterUsageMetrics calls qdrant.cloud.monitoring.v1.MonitoringService.GetClusterUsageMetrics.
func (c *monitoringServiceClient) GetClusterUsageMetrics(ctx context.Context, req *connect.Request[v1.GetClusterUsageMetricsRequest]) (*connect.Response[v1.GetClusterUsageMetricsResponse], error) {
	return c.getClusterUsageMetrics.CallUnary(ctx, req)
}

// GetClusterLogs calls qdrant.cloud.monitoring.v1.MonitoringService.GetClusterLogs.
func (c *monitoringServiceClient) GetClusterLogs(ctx context.Context, req *connect.Request[v1.GetClusterLogsRequest]) (*connect.Response[v1.GetClusterLogsResponse], error) {
	return c.getClusterLogs.CallUnary(ctx, req)
}

// GetClusterEvents calls qdrant.cloud.monitoring.v1.MonitoringService.GetClusterEvents.
func (c *monitoringServiceClient) GetClusterEvents(ctx context.Context, req *connect.Request[v1.GetClusterEventsRequest]) (*connect.Response[v1.GetClusterEventsResponse], error) {
	return c.getClusterEvents.CallUnary(ctx, req)
}

// MonitoringServiceHandler is an implementation of the qdrant.cloud.monitoring.v1.MonitoringService
// service.
type MonitoringServiceHandler interface {
	// Gets the summary metrics of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterSummaryMetrics(context.Context, *connect.Request[v1.GetClusterSummaryMetricsRequest]) (*connect.Response[v1.GetClusterSummaryMetricsResponse], error)
	// Gets the detailed usage metrics (as timeseries) of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterUsageMetrics(context.Context, *connect.Request[v1.GetClusterUsageMetricsRequest]) (*connect.Response[v1.GetClusterUsageMetricsResponse], error)
	// Gets the logs of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterLogs(context.Context, *connect.Request[v1.GetClusterLogsRequest]) (*connect.Response[v1.GetClusterLogsResponse], error)
	// Gets the events of a cluster in the account identified by the given ID.
	// This method is currently available only for clusters running in hybrid cloud environments.
	// Required permissions:
	// - read:clusters
	GetClusterEvents(context.Context, *connect.Request[v1.GetClusterEventsRequest]) (*connect.Response[v1.GetClusterEventsResponse], error)
}

// NewMonitoringServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMonitoringServiceHandler(svc MonitoringServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	monitoringServiceMethods := v1.File_qdrant_cloud_monitoring_v1_monitoring_proto.Services().ByName("MonitoringService").Methods()
	monitoringServiceGetClusterSummaryMetricsHandler := connect.NewUnaryHandler(
		MonitoringServiceGetClusterSummaryMetricsProcedure,
		svc.GetClusterSummaryMetrics,
		connect.WithSchema(monitoringServiceMethods.ByName("GetClusterSummaryMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetClusterUsageMetricsHandler := connect.NewUnaryHandler(
		MonitoringServiceGetClusterUsageMetricsProcedure,
		svc.GetClusterUsageMetrics,
		connect.WithSchema(monitoringServiceMethods.ByName("GetClusterUsageMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetClusterLogsHandler := connect.NewUnaryHandler(
		MonitoringServiceGetClusterLogsProcedure,
		svc.GetClusterLogs,
		connect.WithSchema(monitoringServiceMethods.ByName("GetClusterLogs")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetClusterEventsHandler := connect.NewUnaryHandler(
		MonitoringServiceGetClusterEventsProcedure,
		svc.GetClusterEvents,
		connect.WithSchema(monitoringServiceMethods.ByName("GetClusterEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.monitoring.v1.MonitoringService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MonitoringServiceGetClusterSummaryMetricsProcedure:
			monitoringServiceGetClusterSummaryMetricsHandler.ServeHTTP(w, r)
		case MonitoringServiceGetClusterUsageMetricsProcedure:
			monitoringServiceGetClusterUsageMetricsHandler.ServeHTTP(w, r)
		case MonitoringServiceGetClusterLogsProcedure:
			monitoringServiceGetClusterLogsHandler.ServeHTTP(w, r)
		case MonitoringServiceGetClusterEventsProcedure:
			monitoringServiceGetClusterEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMonitoringServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMonitoringServiceHandler struct{}

func (UnimplementedMonitoringServiceHandler) GetClusterSummaryMetrics(context.Context, *connect.Request[v1.GetClusterSummaryMetricsRequest]) (*connect.Response[v1.GetClusterSummaryMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.monitoring.v1.MonitoringService.GetClusterSummaryMetrics is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetClusterUsageMetrics(context.Context, *connect.Request[v1.GetClusterUsageMetricsRequest]) (*connect.Response[v1.GetClusterUsageMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.monitoring.v1.MonitoringService.GetClusterUsageMetrics is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetClusterLogs(context.Context, *connect.Request[v1.GetClusterLogsRequest]) (*connect.Response[v1.GetClusterLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.monitoring.v1.MonitoringService.GetClusterLogs is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetClusterEvents(context.Context, *connect.Request[v1.GetClusterEventsRequest]) (*connect.Response[v1.GetClusterEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.monitoring.v1.MonitoringService.GetClusterEvents is not implemented"))
}
