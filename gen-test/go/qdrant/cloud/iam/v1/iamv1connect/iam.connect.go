// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/iam/v1/iam.proto

package iamv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/iam/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IAMServiceName is the fully-qualified name of the IAMService service.
	IAMServiceName = "qdrant.cloud.iam.v1.IAMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IAMServiceGetAuthenticatedUserProcedure is the fully-qualified name of the IAMService's
	// GetAuthenticatedUser RPC.
	IAMServiceGetAuthenticatedUserProcedure = "/qdrant.cloud.iam.v1.IAMService/GetAuthenticatedUser"
	// IAMServiceUpdateUserProcedure is the fully-qualified name of the IAMService's UpdateUser RPC.
	IAMServiceUpdateUserProcedure = "/qdrant.cloud.iam.v1.IAMService/UpdateUser"
	// IAMServiceGetUserConsentProcedure is the fully-qualified name of the IAMService's GetUserConsent
	// RPC.
	IAMServiceGetUserConsentProcedure = "/qdrant.cloud.iam.v1.IAMService/GetUserConsent"
	// IAMServiceRecordUserConsentProcedure is the fully-qualified name of the IAMService's
	// RecordUserConsent RPC.
	IAMServiceRecordUserConsentProcedure = "/qdrant.cloud.iam.v1.IAMService/RecordUserConsent"
	// IAMServiceListPermissionsProcedure is the fully-qualified name of the IAMService's
	// ListPermissions RPC.
	IAMServiceListPermissionsProcedure = "/qdrant.cloud.iam.v1.IAMService/ListPermissions"
	// IAMServiceListRolesProcedure is the fully-qualified name of the IAMService's ListRoles RPC.
	IAMServiceListRolesProcedure = "/qdrant.cloud.iam.v1.IAMService/ListRoles"
	// IAMServiceGetRoleProcedure is the fully-qualified name of the IAMService's GetRole RPC.
	IAMServiceGetRoleProcedure = "/qdrant.cloud.iam.v1.IAMService/GetRole"
	// IAMServiceCreateRoleProcedure is the fully-qualified name of the IAMService's CreateRole RPC.
	IAMServiceCreateRoleProcedure = "/qdrant.cloud.iam.v1.IAMService/CreateRole"
	// IAMServiceUpdateRoleProcedure is the fully-qualified name of the IAMService's UpdateRole RPC.
	IAMServiceUpdateRoleProcedure = "/qdrant.cloud.iam.v1.IAMService/UpdateRole"
	// IAMServiceDeleteRoleProcedure is the fully-qualified name of the IAMService's DeleteRole RPC.
	IAMServiceDeleteRoleProcedure = "/qdrant.cloud.iam.v1.IAMService/DeleteRole"
	// IAMServiceListEffectivePermissionsProcedure is the fully-qualified name of the IAMService's
	// ListEffectivePermissions RPC.
	IAMServiceListEffectivePermissionsProcedure = "/qdrant.cloud.iam.v1.IAMService/ListEffectivePermissions"
	// IAMServiceListUserRolesProcedure is the fully-qualified name of the IAMService's ListUserRoles
	// RPC.
	IAMServiceListUserRolesProcedure = "/qdrant.cloud.iam.v1.IAMService/ListUserRoles"
	// IAMServiceAssignUserRolesProcedure is the fully-qualified name of the IAMService's
	// AssignUserRoles RPC.
	IAMServiceAssignUserRolesProcedure = "/qdrant.cloud.iam.v1.IAMService/AssignUserRoles"
)

// IAMServiceClient is a client for the qdrant.cloud.iam.v1.IAMService service.
type IAMServiceClient interface {
	// Gets the authenticated user.
	// Required permissions:
	// - None (authenticated only)
	GetAuthenticatedUser(context.Context, *connect.Request[v1.GetAuthenticatedUserRequest]) (*connect.Response[v1.GetAuthenticatedUserResponse], error)
	// Updates the user identified by the given ID.
	// Required permissions:
	// - write:user
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// Gets the authenticated user's consent status for a specific legal document.
	// Required permissions:
	// - None (authenticated only)
	GetUserConsent(context.Context, *connect.Request[v1.GetUserConsentRequest]) (*connect.Response[v1.GetUserConsentResponse], error)
	// Records the authenticated user's consent for a legal document.
	// Required permissions:
	// - write:user
	RecordUserConsent(context.Context, *connect.Request[v1.RecordUserConsentRequest]) (*connect.Response[v1.RecordUserConsentResponse], error)
	// Lists all permissions known in the system for the provided account.
	// Note: If you want to get a list of permissions available for you, please use GetEffectivePermissions instead.
	// Required permissions:
	// - read:roles
	ListPermissions(context.Context, *connect.Request[v1.ListPermissionsRequest]) (*connect.Response[v1.ListPermissionsResponse], error)
	// Lists all roles in the account identified by the given ID.
	// Required permissions:
	// - read:roles
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	// Gets a role for the account identified by the given ID.
	// Required permissions:
	// - read:roles
	GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error)
	// Creates a role for the account identified by the given ID.
	// Note: The role_type must be ROLE_TYPE_CUSTOM.
	// Required permissions:
	// - write:roles
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error)
	// Updates a role in the account identified by the given ID.
	// Note: The role_type must be ROLE_TYPE_CUSTOM.
	// Required permissions:
	// - write:roles
	UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error)
	// Deletes a role in the account identified by the given ID.
	// Note: The role_type must be ROLE_TYPE_CUSTOM.
	// Required permissions:
	// - delete:roles
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error)
	// Lists the effective permissions for the user in the account identified by the given ID.
	// Required permissions:
	// - read:roles
	ListEffectivePermissions(context.Context, *connect.Request[v1.ListEffectivePermissionsRequest]) (*connect.Response[v1.ListEffectivePermissionsResponse], error)
	// List roles of the user identified by the given ID.
	// Required permissions:
	// - read:roles
	ListUserRoles(context.Context, *connect.Request[v1.ListUserRolesRequest]) (*connect.Response[v1.ListUserRolesResponse], error)
	// Assigns the provided roles to the user in the account identified by the given ID.
	// Required permissions:
	// - write:roles
	AssignUserRoles(context.Context, *connect.Request[v1.AssignUserRolesRequest]) (*connect.Response[v1.AssignUserRolesResponse], error)
}

// NewIAMServiceClient constructs a client for the qdrant.cloud.iam.v1.IAMService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIAMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IAMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	iAMServiceMethods := v1.File_qdrant_cloud_iam_v1_iam_proto.Services().ByName("IAMService").Methods()
	return &iAMServiceClient{
		getAuthenticatedUser: connect.NewClient[v1.GetAuthenticatedUserRequest, v1.GetAuthenticatedUserResponse](
			httpClient,
			baseURL+IAMServiceGetAuthenticatedUserProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("GetAuthenticatedUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+IAMServiceUpdateUserProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		getUserConsent: connect.NewClient[v1.GetUserConsentRequest, v1.GetUserConsentResponse](
			httpClient,
			baseURL+IAMServiceGetUserConsentProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("GetUserConsent")),
			connect.WithClientOptions(opts...),
		),
		recordUserConsent: connect.NewClient[v1.RecordUserConsentRequest, v1.RecordUserConsentResponse](
			httpClient,
			baseURL+IAMServiceRecordUserConsentProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("RecordUserConsent")),
			connect.WithClientOptions(opts...),
		),
		listPermissions: connect.NewClient[v1.ListPermissionsRequest, v1.ListPermissionsResponse](
			httpClient,
			baseURL+IAMServiceListPermissionsProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("ListPermissions")),
			connect.WithClientOptions(opts...),
		),
		listRoles: connect.NewClient[v1.ListRolesRequest, v1.ListRolesResponse](
			httpClient,
			baseURL+IAMServiceListRolesProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("ListRoles")),
			connect.WithClientOptions(opts...),
		),
		getRole: connect.NewClient[v1.GetRoleRequest, v1.GetRoleResponse](
			httpClient,
			baseURL+IAMServiceGetRoleProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("GetRole")),
			connect.WithClientOptions(opts...),
		),
		createRole: connect.NewClient[v1.CreateRoleRequest, v1.CreateRoleResponse](
			httpClient,
			baseURL+IAMServiceCreateRoleProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("CreateRole")),
			connect.WithClientOptions(opts...),
		),
		updateRole: connect.NewClient[v1.UpdateRoleRequest, v1.UpdateRoleResponse](
			httpClient,
			baseURL+IAMServiceUpdateRoleProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("UpdateRole")),
			connect.WithClientOptions(opts...),
		),
		deleteRole: connect.NewClient[v1.DeleteRoleRequest, v1.DeleteRoleResponse](
			httpClient,
			baseURL+IAMServiceDeleteRoleProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("DeleteRole")),
			connect.WithClientOptions(opts...),
		),
		listEffectivePermissions: connect.NewClient[v1.ListEffectivePermissionsRequest, v1.ListEffectivePermissionsResponse](
			httpClient,
			baseURL+IAMServiceListEffectivePermissionsProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("ListEffectivePermissions")),
			connect.WithClientOptions(opts...),
		),
		listUserRoles: connect.NewClient[v1.ListUserRolesRequest, v1.ListUserRolesResponse](
			httpClient,
			baseURL+IAMServiceListUserRolesProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("ListUserRoles")),
			connect.WithClientOptions(opts...),
		),
		assignUserRoles: connect.NewClient[v1.AssignUserRolesRequest, v1.AssignUserRolesResponse](
			httpClient,
			baseURL+IAMServiceAssignUserRolesProcedure,
			connect.WithSchema(iAMServiceMethods.ByName("AssignUserRoles")),
			connect.WithClientOptions(opts...),
		),
	}
}

// iAMServiceClient implements IAMServiceClient.
type iAMServiceClient struct {
	getAuthenticatedUser     *connect.Client[v1.GetAuthenticatedUserRequest, v1.GetAuthenticatedUserResponse]
	updateUser               *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	getUserConsent           *connect.Client[v1.GetUserConsentRequest, v1.GetUserConsentResponse]
	recordUserConsent        *connect.Client[v1.RecordUserConsentRequest, v1.RecordUserConsentResponse]
	listPermissions          *connect.Client[v1.ListPermissionsRequest, v1.ListPermissionsResponse]
	listRoles                *connect.Client[v1.ListRolesRequest, v1.ListRolesResponse]
	getRole                  *connect.Client[v1.GetRoleRequest, v1.GetRoleResponse]
	createRole               *connect.Client[v1.CreateRoleRequest, v1.CreateRoleResponse]
	updateRole               *connect.Client[v1.UpdateRoleRequest, v1.UpdateRoleResponse]
	deleteRole               *connect.Client[v1.DeleteRoleRequest, v1.DeleteRoleResponse]
	listEffectivePermissions *connect.Client[v1.ListEffectivePermissionsRequest, v1.ListEffectivePermissionsResponse]
	listUserRoles            *connect.Client[v1.ListUserRolesRequest, v1.ListUserRolesResponse]
	assignUserRoles          *connect.Client[v1.AssignUserRolesRequest, v1.AssignUserRolesResponse]
}

// GetAuthenticatedUser calls qdrant.cloud.iam.v1.IAMService.GetAuthenticatedUser.
func (c *iAMServiceClient) GetAuthenticatedUser(ctx context.Context, req *connect.Request[v1.GetAuthenticatedUserRequest]) (*connect.Response[v1.GetAuthenticatedUserResponse], error) {
	return c.getAuthenticatedUser.CallUnary(ctx, req)
}

// UpdateUser calls qdrant.cloud.iam.v1.IAMService.UpdateUser.
func (c *iAMServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// GetUserConsent calls qdrant.cloud.iam.v1.IAMService.GetUserConsent.
func (c *iAMServiceClient) GetUserConsent(ctx context.Context, req *connect.Request[v1.GetUserConsentRequest]) (*connect.Response[v1.GetUserConsentResponse], error) {
	return c.getUserConsent.CallUnary(ctx, req)
}

// RecordUserConsent calls qdrant.cloud.iam.v1.IAMService.RecordUserConsent.
func (c *iAMServiceClient) RecordUserConsent(ctx context.Context, req *connect.Request[v1.RecordUserConsentRequest]) (*connect.Response[v1.RecordUserConsentResponse], error) {
	return c.recordUserConsent.CallUnary(ctx, req)
}

// ListPermissions calls qdrant.cloud.iam.v1.IAMService.ListPermissions.
func (c *iAMServiceClient) ListPermissions(ctx context.Context, req *connect.Request[v1.ListPermissionsRequest]) (*connect.Response[v1.ListPermissionsResponse], error) {
	return c.listPermissions.CallUnary(ctx, req)
}

// ListRoles calls qdrant.cloud.iam.v1.IAMService.ListRoles.
func (c *iAMServiceClient) ListRoles(ctx context.Context, req *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return c.listRoles.CallUnary(ctx, req)
}

// GetRole calls qdrant.cloud.iam.v1.IAMService.GetRole.
func (c *iAMServiceClient) GetRole(ctx context.Context, req *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error) {
	return c.getRole.CallUnary(ctx, req)
}

// CreateRole calls qdrant.cloud.iam.v1.IAMService.CreateRole.
func (c *iAMServiceClient) CreateRole(ctx context.Context, req *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// UpdateRole calls qdrant.cloud.iam.v1.IAMService.UpdateRole.
func (c *iAMServiceClient) UpdateRole(ctx context.Context, req *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// DeleteRole calls qdrant.cloud.iam.v1.IAMService.DeleteRole.
func (c *iAMServiceClient) DeleteRole(ctx context.Context, req *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// ListEffectivePermissions calls qdrant.cloud.iam.v1.IAMService.ListEffectivePermissions.
func (c *iAMServiceClient) ListEffectivePermissions(ctx context.Context, req *connect.Request[v1.ListEffectivePermissionsRequest]) (*connect.Response[v1.ListEffectivePermissionsResponse], error) {
	return c.listEffectivePermissions.CallUnary(ctx, req)
}

// ListUserRoles calls qdrant.cloud.iam.v1.IAMService.ListUserRoles.
func (c *iAMServiceClient) ListUserRoles(ctx context.Context, req *connect.Request[v1.ListUserRolesRequest]) (*connect.Response[v1.ListUserRolesResponse], error) {
	return c.listUserRoles.CallUnary(ctx, req)
}

// AssignUserRoles calls qdrant.cloud.iam.v1.IAMService.AssignUserRoles.
func (c *iAMServiceClient) AssignUserRoles(ctx context.Context, req *connect.Request[v1.AssignUserRolesRequest]) (*connect.Response[v1.AssignUserRolesResponse], error) {
	return c.assignUserRoles.CallUnary(ctx, req)
}

// IAMServiceHandler is an implementation of the qdrant.cloud.iam.v1.IAMService service.
type IAMServiceHandler interface {
	// Gets the authenticated user.
	// Required permissions:
	// - None (authenticated only)
	GetAuthenticatedUser(context.Context, *connect.Request[v1.GetAuthenticatedUserRequest]) (*connect.Response[v1.GetAuthenticatedUserResponse], error)
	// Updates the user identified by the given ID.
	// Required permissions:
	// - write:user
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// Gets the authenticated user's consent status for a specific legal document.
	// Required permissions:
	// - None (authenticated only)
	GetUserConsent(context.Context, *connect.Request[v1.GetUserConsentRequest]) (*connect.Response[v1.GetUserConsentResponse], error)
	// Records the authenticated user's consent for a legal document.
	// Required permissions:
	// - write:user
	RecordUserConsent(context.Context, *connect.Request[v1.RecordUserConsentRequest]) (*connect.Response[v1.RecordUserConsentResponse], error)
	// Lists all permissions known in the system for the provided account.
	// Note: If you want to get a list of permissions available for you, please use GetEffectivePermissions instead.
	// Required permissions:
	// - read:roles
	ListPermissions(context.Context, *connect.Request[v1.ListPermissionsRequest]) (*connect.Response[v1.ListPermissionsResponse], error)
	// Lists all roles in the account identified by the given ID.
	// Required permissions:
	// - read:roles
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	// Gets a role for the account identified by the given ID.
	// Required permissions:
	// - read:roles
	GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error)
	// Creates a role for the account identified by the given ID.
	// Note: The role_type must be ROLE_TYPE_CUSTOM.
	// Required permissions:
	// - write:roles
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error)
	// Updates a role in the account identified by the given ID.
	// Note: The role_type must be ROLE_TYPE_CUSTOM.
	// Required permissions:
	// - write:roles
	UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error)
	// Deletes a role in the account identified by the given ID.
	// Note: The role_type must be ROLE_TYPE_CUSTOM.
	// Required permissions:
	// - delete:roles
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error)
	// Lists the effective permissions for the user in the account identified by the given ID.
	// Required permissions:
	// - read:roles
	ListEffectivePermissions(context.Context, *connect.Request[v1.ListEffectivePermissionsRequest]) (*connect.Response[v1.ListEffectivePermissionsResponse], error)
	// List roles of the user identified by the given ID.
	// Required permissions:
	// - read:roles
	ListUserRoles(context.Context, *connect.Request[v1.ListUserRolesRequest]) (*connect.Response[v1.ListUserRolesResponse], error)
	// Assigns the provided roles to the user in the account identified by the given ID.
	// Required permissions:
	// - write:roles
	AssignUserRoles(context.Context, *connect.Request[v1.AssignUserRolesRequest]) (*connect.Response[v1.AssignUserRolesResponse], error)
}

// NewIAMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIAMServiceHandler(svc IAMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	iAMServiceMethods := v1.File_qdrant_cloud_iam_v1_iam_proto.Services().ByName("IAMService").Methods()
	iAMServiceGetAuthenticatedUserHandler := connect.NewUnaryHandler(
		IAMServiceGetAuthenticatedUserProcedure,
		svc.GetAuthenticatedUser,
		connect.WithSchema(iAMServiceMethods.ByName("GetAuthenticatedUser")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceUpdateUserHandler := connect.NewUnaryHandler(
		IAMServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(iAMServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceGetUserConsentHandler := connect.NewUnaryHandler(
		IAMServiceGetUserConsentProcedure,
		svc.GetUserConsent,
		connect.WithSchema(iAMServiceMethods.ByName("GetUserConsent")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceRecordUserConsentHandler := connect.NewUnaryHandler(
		IAMServiceRecordUserConsentProcedure,
		svc.RecordUserConsent,
		connect.WithSchema(iAMServiceMethods.ByName("RecordUserConsent")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceListPermissionsHandler := connect.NewUnaryHandler(
		IAMServiceListPermissionsProcedure,
		svc.ListPermissions,
		connect.WithSchema(iAMServiceMethods.ByName("ListPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceListRolesHandler := connect.NewUnaryHandler(
		IAMServiceListRolesProcedure,
		svc.ListRoles,
		connect.WithSchema(iAMServiceMethods.ByName("ListRoles")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceGetRoleHandler := connect.NewUnaryHandler(
		IAMServiceGetRoleProcedure,
		svc.GetRole,
		connect.WithSchema(iAMServiceMethods.ByName("GetRole")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceCreateRoleHandler := connect.NewUnaryHandler(
		IAMServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(iAMServiceMethods.ByName("CreateRole")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceUpdateRoleHandler := connect.NewUnaryHandler(
		IAMServiceUpdateRoleProcedure,
		svc.UpdateRole,
		connect.WithSchema(iAMServiceMethods.ByName("UpdateRole")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceDeleteRoleHandler := connect.NewUnaryHandler(
		IAMServiceDeleteRoleProcedure,
		svc.DeleteRole,
		connect.WithSchema(iAMServiceMethods.ByName("DeleteRole")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceListEffectivePermissionsHandler := connect.NewUnaryHandler(
		IAMServiceListEffectivePermissionsProcedure,
		svc.ListEffectivePermissions,
		connect.WithSchema(iAMServiceMethods.ByName("ListEffectivePermissions")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceListUserRolesHandler := connect.NewUnaryHandler(
		IAMServiceListUserRolesProcedure,
		svc.ListUserRoles,
		connect.WithSchema(iAMServiceMethods.ByName("ListUserRoles")),
		connect.WithHandlerOptions(opts...),
	)
	iAMServiceAssignUserRolesHandler := connect.NewUnaryHandler(
		IAMServiceAssignUserRolesProcedure,
		svc.AssignUserRoles,
		connect.WithSchema(iAMServiceMethods.ByName("AssignUserRoles")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.iam.v1.IAMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IAMServiceGetAuthenticatedUserProcedure:
			iAMServiceGetAuthenticatedUserHandler.ServeHTTP(w, r)
		case IAMServiceUpdateUserProcedure:
			iAMServiceUpdateUserHandler.ServeHTTP(w, r)
		case IAMServiceGetUserConsentProcedure:
			iAMServiceGetUserConsentHandler.ServeHTTP(w, r)
		case IAMServiceRecordUserConsentProcedure:
			iAMServiceRecordUserConsentHandler.ServeHTTP(w, r)
		case IAMServiceListPermissionsProcedure:
			iAMServiceListPermissionsHandler.ServeHTTP(w, r)
		case IAMServiceListRolesProcedure:
			iAMServiceListRolesHandler.ServeHTTP(w, r)
		case IAMServiceGetRoleProcedure:
			iAMServiceGetRoleHandler.ServeHTTP(w, r)
		case IAMServiceCreateRoleProcedure:
			iAMServiceCreateRoleHandler.ServeHTTP(w, r)
		case IAMServiceUpdateRoleProcedure:
			iAMServiceUpdateRoleHandler.ServeHTTP(w, r)
		case IAMServiceDeleteRoleProcedure:
			iAMServiceDeleteRoleHandler.ServeHTTP(w, r)
		case IAMServiceListEffectivePermissionsProcedure:
			iAMServiceListEffectivePermissionsHandler.ServeHTTP(w, r)
		case IAMServiceListUserRolesProcedure:
			iAMServiceListUserRolesHandler.ServeHTTP(w, r)
		case IAMServiceAssignUserRolesProcedure:
			iAMServiceAssignUserRolesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIAMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIAMServiceHandler struct{}

func (UnimplementedIAMServiceHandler) GetAuthenticatedUser(context.Context, *connect.Request[v1.GetAuthenticatedUserRequest]) (*connect.Response[v1.GetAuthenticatedUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.GetAuthenticatedUser is not implemented"))
}

func (UnimplementedIAMServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.UpdateUser is not implemented"))
}

func (UnimplementedIAMServiceHandler) GetUserConsent(context.Context, *connect.Request[v1.GetUserConsentRequest]) (*connect.Response[v1.GetUserConsentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.GetUserConsent is not implemented"))
}

func (UnimplementedIAMServiceHandler) RecordUserConsent(context.Context, *connect.Request[v1.RecordUserConsentRequest]) (*connect.Response[v1.RecordUserConsentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.RecordUserConsent is not implemented"))
}

func (UnimplementedIAMServiceHandler) ListPermissions(context.Context, *connect.Request[v1.ListPermissionsRequest]) (*connect.Response[v1.ListPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.ListPermissions is not implemented"))
}

func (UnimplementedIAMServiceHandler) ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.ListRoles is not implemented"))
}

func (UnimplementedIAMServiceHandler) GetRole(context.Context, *connect.Request[v1.GetRoleRequest]) (*connect.Response[v1.GetRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.GetRole is not implemented"))
}

func (UnimplementedIAMServiceHandler) CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.CreateRole is not implemented"))
}

func (UnimplementedIAMServiceHandler) UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.UpdateRole is not implemented"))
}

func (UnimplementedIAMServiceHandler) DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.DeleteRole is not implemented"))
}

func (UnimplementedIAMServiceHandler) ListEffectivePermissions(context.Context, *connect.Request[v1.ListEffectivePermissionsRequest]) (*connect.Response[v1.ListEffectivePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.ListEffectivePermissions is not implemented"))
}

func (UnimplementedIAMServiceHandler) ListUserRoles(context.Context, *connect.Request[v1.ListUserRolesRequest]) (*connect.Response[v1.ListUserRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.ListUserRoles is not implemented"))
}

func (UnimplementedIAMServiceHandler) AssignUserRoles(context.Context, *connect.Request[v1.AssignUserRolesRequest]) (*connect.Response[v1.AssignUserRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.iam.v1.IAMService.AssignUserRoles is not implemented"))
}
