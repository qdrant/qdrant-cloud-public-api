// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: qdrant/cloud/auth/v1/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "qdrant.cloud.auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceListManagementKeysProcedure is the fully-qualified name of the AuthService's
	// ListManagementKeys RPC.
	AuthServiceListManagementKeysProcedure = "/qdrant.cloud.auth.v1.AuthService/ListManagementKeys"
	// AuthServiceCreateManagementKeyProcedure is the fully-qualified name of the AuthService's
	// CreateManagementKey RPC.
	AuthServiceCreateManagementKeyProcedure = "/qdrant.cloud.auth.v1.AuthService/CreateManagementKey"
	// AuthServiceDeleteManagementKeyProcedure is the fully-qualified name of the AuthService's
	// DeleteManagementKey RPC.
	AuthServiceDeleteManagementKeyProcedure = "/qdrant.cloud.auth.v1.AuthService/DeleteManagementKey"
)

// AuthServiceClient is a client for the qdrant.cloud.auth.v1.AuthService service.
type AuthServiceClient interface {
	// Lists all management keys in the account identified by the given ID.
	// Required permissions:
	// - read:management_keys
	ListManagementKeys(context.Context, *connect.Request[v1.ListManagementKeysRequest]) (*connect.Response[v1.ListManagementKeysResponse], error)
	// Creates a management key in the account identified by the given ID.
	// Required permissions:
	// - write:management_keys
	CreateManagementKey(context.Context, *connect.Request[v1.CreateManagementKeyRequest]) (*connect.Response[v1.CreateManagementKeyResponse], error)
	// Deletes a management key in the account identified by the given ID.
	// Required permissions:
	// - delete:management_keys
	DeleteManagementKey(context.Context, *connect.Request[v1.DeleteManagementKeyRequest]) (*connect.Response[v1.DeleteManagementKeyResponse], error)
}

// NewAuthServiceClient constructs a client for the qdrant.cloud.auth.v1.AuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_qdrant_cloud_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		listManagementKeys: connect.NewClient[v1.ListManagementKeysRequest, v1.ListManagementKeysResponse](
			httpClient,
			baseURL+AuthServiceListManagementKeysProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListManagementKeys")),
			connect.WithClientOptions(opts...),
		),
		createManagementKey: connect.NewClient[v1.CreateManagementKeyRequest, v1.CreateManagementKeyResponse](
			httpClient,
			baseURL+AuthServiceCreateManagementKeyProcedure,
			connect.WithSchema(authServiceMethods.ByName("CreateManagementKey")),
			connect.WithClientOptions(opts...),
		),
		deleteManagementKey: connect.NewClient[v1.DeleteManagementKeyRequest, v1.DeleteManagementKeyResponse](
			httpClient,
			baseURL+AuthServiceDeleteManagementKeyProcedure,
			connect.WithSchema(authServiceMethods.ByName("DeleteManagementKey")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	listManagementKeys  *connect.Client[v1.ListManagementKeysRequest, v1.ListManagementKeysResponse]
	createManagementKey *connect.Client[v1.CreateManagementKeyRequest, v1.CreateManagementKeyResponse]
	deleteManagementKey *connect.Client[v1.DeleteManagementKeyRequest, v1.DeleteManagementKeyResponse]
}

// ListManagementKeys calls qdrant.cloud.auth.v1.AuthService.ListManagementKeys.
func (c *authServiceClient) ListManagementKeys(ctx context.Context, req *connect.Request[v1.ListManagementKeysRequest]) (*connect.Response[v1.ListManagementKeysResponse], error) {
	return c.listManagementKeys.CallUnary(ctx, req)
}

// CreateManagementKey calls qdrant.cloud.auth.v1.AuthService.CreateManagementKey.
func (c *authServiceClient) CreateManagementKey(ctx context.Context, req *connect.Request[v1.CreateManagementKeyRequest]) (*connect.Response[v1.CreateManagementKeyResponse], error) {
	return c.createManagementKey.CallUnary(ctx, req)
}

// DeleteManagementKey calls qdrant.cloud.auth.v1.AuthService.DeleteManagementKey.
func (c *authServiceClient) DeleteManagementKey(ctx context.Context, req *connect.Request[v1.DeleteManagementKeyRequest]) (*connect.Response[v1.DeleteManagementKeyResponse], error) {
	return c.deleteManagementKey.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the qdrant.cloud.auth.v1.AuthService service.
type AuthServiceHandler interface {
	// Lists all management keys in the account identified by the given ID.
	// Required permissions:
	// - read:management_keys
	ListManagementKeys(context.Context, *connect.Request[v1.ListManagementKeysRequest]) (*connect.Response[v1.ListManagementKeysResponse], error)
	// Creates a management key in the account identified by the given ID.
	// Required permissions:
	// - write:management_keys
	CreateManagementKey(context.Context, *connect.Request[v1.CreateManagementKeyRequest]) (*connect.Response[v1.CreateManagementKeyResponse], error)
	// Deletes a management key in the account identified by the given ID.
	// Required permissions:
	// - delete:management_keys
	DeleteManagementKey(context.Context, *connect.Request[v1.DeleteManagementKeyRequest]) (*connect.Response[v1.DeleteManagementKeyResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_qdrant_cloud_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	authServiceListManagementKeysHandler := connect.NewUnaryHandler(
		AuthServiceListManagementKeysProcedure,
		svc.ListManagementKeys,
		connect.WithSchema(authServiceMethods.ByName("ListManagementKeys")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCreateManagementKeyHandler := connect.NewUnaryHandler(
		AuthServiceCreateManagementKeyProcedure,
		svc.CreateManagementKey,
		connect.WithSchema(authServiceMethods.ByName("CreateManagementKey")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDeleteManagementKeyHandler := connect.NewUnaryHandler(
		AuthServiceDeleteManagementKeyProcedure,
		svc.DeleteManagementKey,
		connect.WithSchema(authServiceMethods.ByName("DeleteManagementKey")),
		connect.WithHandlerOptions(opts...),
	)
	return "/qdrant.cloud.auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceListManagementKeysProcedure:
			authServiceListManagementKeysHandler.ServeHTTP(w, r)
		case AuthServiceCreateManagementKeyProcedure:
			authServiceCreateManagementKeyHandler.ServeHTTP(w, r)
		case AuthServiceDeleteManagementKeyProcedure:
			authServiceDeleteManagementKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) ListManagementKeys(context.Context, *connect.Request[v1.ListManagementKeysRequest]) (*connect.Response[v1.ListManagementKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.auth.v1.AuthService.ListManagementKeys is not implemented"))
}

func (UnimplementedAuthServiceHandler) CreateManagementKey(context.Context, *connect.Request[v1.CreateManagementKeyRequest]) (*connect.Response[v1.CreateManagementKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.auth.v1.AuthService.CreateManagementKey is not implemented"))
}

func (UnimplementedAuthServiceHandler) DeleteManagementKey(context.Context, *connect.Request[v1.DeleteManagementKeyRequest]) (*connect.Response[v1.DeleteManagementKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("qdrant.cloud.auth.v1.AuthService.DeleteManagementKey is not implemented"))
}
