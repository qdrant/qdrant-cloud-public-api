// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qdrant/cloud/monitoring/v1/monitoring.proto

package monitoringv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonitoringService_GetClusterSummaryMetrics_FullMethodName = "/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterSummaryMetrics"
	MonitoringService_GetClusterUsageMetrics_FullMethodName   = "/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterUsageMetrics"
	MonitoringService_GetClusterLogs_FullMethodName           = "/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterLogs"
	MonitoringService_GetClusterEvents_FullMethodName         = "/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterEvents"
)

// MonitoringServiceClient is the client API for MonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MonitoringService provides access to monitoring data such as cluster metrics, logs, and events.
type MonitoringServiceClient interface {
	// Get summary metrics of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterSummaryMetrics(ctx context.Context, in *GetClusterSummaryMetricsRequest, opts ...grpc.CallOption) (*GetClusterSummaryMetricsResponse, error)
	// Get detailed usage metrics (as timeseries) of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterUsageMetrics(ctx context.Context, in *GetClusterUsageMetricsRequest, opts ...grpc.CallOption) (*GetClusterUsageMetricsResponse, error)
	// Get the logs of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterLogs(ctx context.Context, in *GetClusterLogsRequest, opts ...grpc.CallOption) (*GetClusterLogsResponse, error)
	// Get the events of a cluster in the account identified by the given ID.
	// This method is currently available only for clusters running in hybrid cloud environments.
	// Required permissions:
	// - read:clusters
	GetClusterEvents(ctx context.Context, in *GetClusterEventsRequest, opts ...grpc.CallOption) (*GetClusterEventsResponse, error)
}

type monitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringServiceClient(cc grpc.ClientConnInterface) MonitoringServiceClient {
	return &monitoringServiceClient{cc}
}

func (c *monitoringServiceClient) GetClusterSummaryMetrics(ctx context.Context, in *GetClusterSummaryMetricsRequest, opts ...grpc.CallOption) (*GetClusterSummaryMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterSummaryMetricsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetClusterSummaryMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetClusterUsageMetrics(ctx context.Context, in *GetClusterUsageMetricsRequest, opts ...grpc.CallOption) (*GetClusterUsageMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterUsageMetricsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetClusterUsageMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetClusterLogs(ctx context.Context, in *GetClusterLogsRequest, opts ...grpc.CallOption) (*GetClusterLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterLogsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetClusterLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetClusterEvents(ctx context.Context, in *GetClusterEventsRequest, opts ...grpc.CallOption) (*GetClusterEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterEventsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetClusterEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringServiceServer is the server API for MonitoringService service.
// All implementations must embed UnimplementedMonitoringServiceServer
// for forward compatibility.
//
// MonitoringService provides access to monitoring data such as cluster metrics, logs, and events.
type MonitoringServiceServer interface {
	// Get summary metrics of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterSummaryMetrics(context.Context, *GetClusterSummaryMetricsRequest) (*GetClusterSummaryMetricsResponse, error)
	// Get detailed usage metrics (as timeseries) of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterUsageMetrics(context.Context, *GetClusterUsageMetricsRequest) (*GetClusterUsageMetricsResponse, error)
	// Get the logs of a cluster in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	GetClusterLogs(context.Context, *GetClusterLogsRequest) (*GetClusterLogsResponse, error)
	// Get the events of a cluster in the account identified by the given ID.
	// This method is currently available only for clusters running in hybrid cloud environments.
	// Required permissions:
	// - read:clusters
	GetClusterEvents(context.Context, *GetClusterEventsRequest) (*GetClusterEventsResponse, error)
	mustEmbedUnimplementedMonitoringServiceServer()
}

// UnimplementedMonitoringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoringServiceServer struct{}

func (UnimplementedMonitoringServiceServer) GetClusterSummaryMetrics(context.Context, *GetClusterSummaryMetricsRequest) (*GetClusterSummaryMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterSummaryMetrics not implemented")
}
func (UnimplementedMonitoringServiceServer) GetClusterUsageMetrics(context.Context, *GetClusterUsageMetricsRequest) (*GetClusterUsageMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterUsageMetrics not implemented")
}
func (UnimplementedMonitoringServiceServer) GetClusterLogs(context.Context, *GetClusterLogsRequest) (*GetClusterLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterLogs not implemented")
}
func (UnimplementedMonitoringServiceServer) GetClusterEvents(context.Context, *GetClusterEventsRequest) (*GetClusterEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterEvents not implemented")
}
func (UnimplementedMonitoringServiceServer) mustEmbedUnimplementedMonitoringServiceServer() {}
func (UnimplementedMonitoringServiceServer) testEmbeddedByValue()                           {}

// UnsafeMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringServiceServer will
// result in compilation errors.
type UnsafeMonitoringServiceServer interface {
	mustEmbedUnimplementedMonitoringServiceServer()
}

func RegisterMonitoringServiceServer(s grpc.ServiceRegistrar, srv MonitoringServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonitoringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitoringService_ServiceDesc, srv)
}

func _MonitoringService_GetClusterSummaryMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterSummaryMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetClusterSummaryMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetClusterSummaryMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetClusterSummaryMetrics(ctx, req.(*GetClusterSummaryMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetClusterUsageMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterUsageMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetClusterUsageMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetClusterUsageMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetClusterUsageMetrics(ctx, req.(*GetClusterUsageMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetClusterLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetClusterLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetClusterLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetClusterLogs(ctx, req.(*GetClusterLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetClusterEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetClusterEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetClusterEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetClusterEvents(ctx, req.(*GetClusterEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitoringService_ServiceDesc is the grpc.ServiceDesc for MonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.cloud.monitoring.v1.MonitoringService",
	HandlerType: (*MonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterSummaryMetrics",
			Handler:    _MonitoringService_GetClusterSummaryMetrics_Handler,
		},
		{
			MethodName: "GetClusterUsageMetrics",
			Handler:    _MonitoringService_GetClusterUsageMetrics_Handler,
		},
		{
			MethodName: "GetClusterLogs",
			Handler:    _MonitoringService_GetClusterLogs_Handler,
		},
		{
			MethodName: "GetClusterEvents",
			Handler:    _MonitoringService_GetClusterEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/cloud/monitoring/v1/monitoring.proto",
}
