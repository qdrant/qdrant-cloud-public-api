// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: qdrant/cloud/cluster/v1/cluster.proto

package clusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/common/v1"
	_ "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/event/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClusterServiceType defines the type of service to use for the cluster.
// See: https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceSpec
type ClusterServiceType int32

const (
	// Service type is unspecified.
	ClusterServiceType_CLUSTER_SERVICE_TYPE_UNSPECIFIED ClusterServiceType = 0
	// Use a service configured with type ClusterIP.
	ClusterServiceType_CLUSTER_SERVICE_TYPE_CLUSTER_IP ClusterServiceType = 1
	// Use a service configured with type NodePort.
	ClusterServiceType_CLUSTER_SERVICE_TYPE_NODE_PORT ClusterServiceType = 2
	// Use a service configured with type LoadBalancer.
	ClusterServiceType_CLUSTER_SERVICE_TYPE_LOAD_BALANCER ClusterServiceType = 3
)

// Enum value maps for ClusterServiceType.
var (
	ClusterServiceType_name = map[int32]string{
		0: "CLUSTER_SERVICE_TYPE_UNSPECIFIED",
		1: "CLUSTER_SERVICE_TYPE_CLUSTER_IP",
		2: "CLUSTER_SERVICE_TYPE_NODE_PORT",
		3: "CLUSTER_SERVICE_TYPE_LOAD_BALANCER",
	}
	ClusterServiceType_value = map[string]int32{
		"CLUSTER_SERVICE_TYPE_UNSPECIFIED":   0,
		"CLUSTER_SERVICE_TYPE_CLUSTER_IP":    1,
		"CLUSTER_SERVICE_TYPE_NODE_PORT":     2,
		"CLUSTER_SERVICE_TYPE_LOAD_BALANCER": 3,
	}
)

func (x ClusterServiceType) Enum() *ClusterServiceType {
	p := new(ClusterServiceType)
	*p = x
	return p
}

func (x ClusterServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[0].Descriptor()
}

func (ClusterServiceType) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[0]
}

func (x ClusterServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterServiceType.Descriptor instead.
func (ClusterServiceType) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{0}
}

// ClusterConfigurationGpuType defines GPU types available for clusters.
type ClusterConfigurationGpuType int32

const (
	// No GPU is configured.
	ClusterConfigurationGpuType_CLUSTER_CONFIGURATION_GPU_TYPE_UNSPECIFIED ClusterConfigurationGpuType = 0
	// Use an NVIDIA GPU.
	ClusterConfigurationGpuType_CLUSTER_CONFIGURATION_GPU_TYPE_NVIDIA ClusterConfigurationGpuType = 1
	// Use an AMD GPU.
	ClusterConfigurationGpuType_CLUSTER_CONFIGURATION_GPU_TYPE_AMD ClusterConfigurationGpuType = 2
)

// Enum value maps for ClusterConfigurationGpuType.
var (
	ClusterConfigurationGpuType_name = map[int32]string{
		0: "CLUSTER_CONFIGURATION_GPU_TYPE_UNSPECIFIED",
		1: "CLUSTER_CONFIGURATION_GPU_TYPE_NVIDIA",
		2: "CLUSTER_CONFIGURATION_GPU_TYPE_AMD",
	}
	ClusterConfigurationGpuType_value = map[string]int32{
		"CLUSTER_CONFIGURATION_GPU_TYPE_UNSPECIFIED": 0,
		"CLUSTER_CONFIGURATION_GPU_TYPE_NVIDIA":      1,
		"CLUSTER_CONFIGURATION_GPU_TYPE_AMD":         2,
	}
)

func (x ClusterConfigurationGpuType) Enum() *ClusterConfigurationGpuType {
	p := new(ClusterConfigurationGpuType)
	*p = x
	return p
}

func (x ClusterConfigurationGpuType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterConfigurationGpuType) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[1].Descriptor()
}

func (ClusterConfigurationGpuType) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[1]
}

func (x ClusterConfigurationGpuType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterConfigurationGpuType.Descriptor instead.
func (ClusterConfigurationGpuType) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{1}
}

// ClusterConfigurationRestartPolicy defines restart strategies for the cluster's database.
type ClusterConfigurationRestartPolicy int32

const (
	// Restart policy is unspecified.
	ClusterConfigurationRestartPolicy_CLUSTER_CONFIGURATION_RESTART_POLICY_UNSPECIFIED ClusterConfigurationRestartPolicy = 0
	// Rolling restart policy (one by one).
	ClusterConfigurationRestartPolicy_CLUSTER_CONFIGURATION_RESTART_POLICY_ROLLING ClusterConfigurationRestartPolicy = 1
	// Parallel restart policy (restart all at once).
	ClusterConfigurationRestartPolicy_CLUSTER_CONFIGURATION_RESTART_POLICY_PARALLEL ClusterConfigurationRestartPolicy = 2
	// Automatic restart policy.
	ClusterConfigurationRestartPolicy_CLUSTER_CONFIGURATION_RESTART_POLICY_AUTOMATIC ClusterConfigurationRestartPolicy = 3
)

// Enum value maps for ClusterConfigurationRestartPolicy.
var (
	ClusterConfigurationRestartPolicy_name = map[int32]string{
		0: "CLUSTER_CONFIGURATION_RESTART_POLICY_UNSPECIFIED",
		1: "CLUSTER_CONFIGURATION_RESTART_POLICY_ROLLING",
		2: "CLUSTER_CONFIGURATION_RESTART_POLICY_PARALLEL",
		3: "CLUSTER_CONFIGURATION_RESTART_POLICY_AUTOMATIC",
	}
	ClusterConfigurationRestartPolicy_value = map[string]int32{
		"CLUSTER_CONFIGURATION_RESTART_POLICY_UNSPECIFIED": 0,
		"CLUSTER_CONFIGURATION_RESTART_POLICY_ROLLING":     1,
		"CLUSTER_CONFIGURATION_RESTART_POLICY_PARALLEL":    2,
		"CLUSTER_CONFIGURATION_RESTART_POLICY_AUTOMATIC":   3,
	}
)

func (x ClusterConfigurationRestartPolicy) Enum() *ClusterConfigurationRestartPolicy {
	p := new(ClusterConfigurationRestartPolicy)
	*p = x
	return p
}

func (x ClusterConfigurationRestartPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterConfigurationRestartPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[2].Descriptor()
}

func (ClusterConfigurationRestartPolicy) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[2]
}

func (x ClusterConfigurationRestartPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterConfigurationRestartPolicy.Descriptor instead.
func (ClusterConfigurationRestartPolicy) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{2}
}

// ClusterConfigurationRebalanceStrategy defines shard rebalancing strategies.
type ClusterConfigurationRebalanceStrategy int32

const (
	// No rebalancing strategy is configured.
	ClusterConfigurationRebalanceStrategy_CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_UNSPECIFIED ClusterConfigurationRebalanceStrategy = 0
	// Rebalance shards by count.
	ClusterConfigurationRebalanceStrategy_CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_COUNT ClusterConfigurationRebalanceStrategy = 1
	// Rebalance shards by size.
	ClusterConfigurationRebalanceStrategy_CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_SIZE ClusterConfigurationRebalanceStrategy = 2
	// Rebalance shards by both count and size.
	ClusterConfigurationRebalanceStrategy_CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_COUNT_AND_SIZE ClusterConfigurationRebalanceStrategy = 3
)

// Enum value maps for ClusterConfigurationRebalanceStrategy.
var (
	ClusterConfigurationRebalanceStrategy_name = map[int32]string{
		0: "CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_UNSPECIFIED",
		1: "CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_COUNT",
		2: "CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_SIZE",
		3: "CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_COUNT_AND_SIZE",
	}
	ClusterConfigurationRebalanceStrategy_value = map[string]int32{
		"CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_UNSPECIFIED":       0,
		"CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_COUNT":          1,
		"CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_SIZE":           2,
		"CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_COUNT_AND_SIZE": 3,
	}
)

func (x ClusterConfigurationRebalanceStrategy) Enum() *ClusterConfigurationRebalanceStrategy {
	p := new(ClusterConfigurationRebalanceStrategy)
	*p = x
	return p
}

func (x ClusterConfigurationRebalanceStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterConfigurationRebalanceStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[3].Descriptor()
}

func (ClusterConfigurationRebalanceStrategy) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[3]
}

func (x ClusterConfigurationRebalanceStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterConfigurationRebalanceStrategy.Descriptor instead.
func (ClusterConfigurationRebalanceStrategy) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{3}
}

// DatabaseConfigurationLogLevel defines the supported logging levels for the
// Qdrant database. See: https://docs.rs/log/latest/log/enum.LevelFilter.html
type DatabaseConfigurationLogLevel int32

const (
	// Unspecified log level.
	DatabaseConfigurationLogLevel_DATABASE_CONFIGURATION_LOG_LEVEL_UNSPECIFIED DatabaseConfigurationLogLevel = 0
	// Trace log level.
	DatabaseConfigurationLogLevel_DATABASE_CONFIGURATION_LOG_LEVEL_TRACE DatabaseConfigurationLogLevel = 1
	// Debug log level.
	DatabaseConfigurationLogLevel_DATABASE_CONFIGURATION_LOG_LEVEL_DEBUG DatabaseConfigurationLogLevel = 2
	// Info log level.
	DatabaseConfigurationLogLevel_DATABASE_CONFIGURATION_LOG_LEVEL_INFO DatabaseConfigurationLogLevel = 3
	// Warn log level.
	DatabaseConfigurationLogLevel_DATABASE_CONFIGURATION_LOG_LEVEL_WARN DatabaseConfigurationLogLevel = 4
	// Error log level.
	DatabaseConfigurationLogLevel_DATABASE_CONFIGURATION_LOG_LEVEL_ERROR DatabaseConfigurationLogLevel = 5
	// Off log level.
	DatabaseConfigurationLogLevel_DATABASE_CONFIGURATION_LOG_LEVEL_OFF DatabaseConfigurationLogLevel = 6
)

// Enum value maps for DatabaseConfigurationLogLevel.
var (
	DatabaseConfigurationLogLevel_name = map[int32]string{
		0: "DATABASE_CONFIGURATION_LOG_LEVEL_UNSPECIFIED",
		1: "DATABASE_CONFIGURATION_LOG_LEVEL_TRACE",
		2: "DATABASE_CONFIGURATION_LOG_LEVEL_DEBUG",
		3: "DATABASE_CONFIGURATION_LOG_LEVEL_INFO",
		4: "DATABASE_CONFIGURATION_LOG_LEVEL_WARN",
		5: "DATABASE_CONFIGURATION_LOG_LEVEL_ERROR",
		6: "DATABASE_CONFIGURATION_LOG_LEVEL_OFF",
	}
	DatabaseConfigurationLogLevel_value = map[string]int32{
		"DATABASE_CONFIGURATION_LOG_LEVEL_UNSPECIFIED": 0,
		"DATABASE_CONFIGURATION_LOG_LEVEL_TRACE":       1,
		"DATABASE_CONFIGURATION_LOG_LEVEL_DEBUG":       2,
		"DATABASE_CONFIGURATION_LOG_LEVEL_INFO":        3,
		"DATABASE_CONFIGURATION_LOG_LEVEL_WARN":        4,
		"DATABASE_CONFIGURATION_LOG_LEVEL_ERROR":       5,
		"DATABASE_CONFIGURATION_LOG_LEVEL_OFF":         6,
	}
)

func (x DatabaseConfigurationLogLevel) Enum() *DatabaseConfigurationLogLevel {
	p := new(DatabaseConfigurationLogLevel)
	*p = x
	return p
}

func (x DatabaseConfigurationLogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseConfigurationLogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[4].Descriptor()
}

func (DatabaseConfigurationLogLevel) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[4]
}

func (x DatabaseConfigurationLogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseConfigurationLogLevel.Descriptor instead.
func (DatabaseConfigurationLogLevel) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{4}
}

// TolerationOperator defines the valid operators for tolerations.
// See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
type TolerationOperator int32

const (
	// Unspecified operator.
	TolerationOperator_TOLERATION_OPERATOR_UNSPECIFIED TolerationOperator = 0
	// The operator means the key exists.
	TolerationOperator_TOLERATION_OPERATOR_EXISTS TolerationOperator = 1
	// The operator means the key equals the given value.
	TolerationOperator_TOLERATION_OPERATOR_EQUAL TolerationOperator = 2
)

// Enum value maps for TolerationOperator.
var (
	TolerationOperator_name = map[int32]string{
		0: "TOLERATION_OPERATOR_UNSPECIFIED",
		1: "TOLERATION_OPERATOR_EXISTS",
		2: "TOLERATION_OPERATOR_EQUAL",
	}
	TolerationOperator_value = map[string]int32{
		"TOLERATION_OPERATOR_UNSPECIFIED": 0,
		"TOLERATION_OPERATOR_EXISTS":      1,
		"TOLERATION_OPERATOR_EQUAL":       2,
	}
)

func (x TolerationOperator) Enum() *TolerationOperator {
	p := new(TolerationOperator)
	*p = x
	return p
}

func (x TolerationOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TolerationOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[5].Descriptor()
}

func (TolerationOperator) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[5]
}

func (x TolerationOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TolerationOperator.Descriptor instead.
func (TolerationOperator) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{5}
}

// TolerationEffect represents the effects a taint has on pod scheduling and eviction.
// See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
type TolerationEffect int32

const (
	// Unspecified effect.
	TolerationEffect_TOLERATION_EFFECT_UNSPECIFIED TolerationEffect = 0
	// NoSchedule taint effect.
	TolerationEffect_TOLERATION_EFFECT_NO_SCHEDULE TolerationEffect = 1
	// PreferNoSchedule taint effect.
	TolerationEffect_TOLERATION_EFFECT_PREFER_NO_SCHEDULE TolerationEffect = 2
	// NoExecute taint effect.
	TolerationEffect_TOLERATION_EFFECT_NO_EXECUTE TolerationEffect = 3
)

// Enum value maps for TolerationEffect.
var (
	TolerationEffect_name = map[int32]string{
		0: "TOLERATION_EFFECT_UNSPECIFIED",
		1: "TOLERATION_EFFECT_NO_SCHEDULE",
		2: "TOLERATION_EFFECT_PREFER_NO_SCHEDULE",
		3: "TOLERATION_EFFECT_NO_EXECUTE",
	}
	TolerationEffect_value = map[string]int32{
		"TOLERATION_EFFECT_UNSPECIFIED":        0,
		"TOLERATION_EFFECT_NO_SCHEDULE":        1,
		"TOLERATION_EFFECT_PREFER_NO_SCHEDULE": 2,
		"TOLERATION_EFFECT_NO_EXECUTE":         3,
	}
)

func (x TolerationEffect) Enum() *TolerationEffect {
	p := new(TolerationEffect)
	*p = x
	return p
}

func (x TolerationEffect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TolerationEffect) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[6].Descriptor()
}

func (TolerationEffect) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[6]
}

func (x TolerationEffect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TolerationEffect.Descriptor instead.
func (TolerationEffect) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{6}
}

// Defines the operational or transitional state of the Qdrant cluster.
type ClusterPhase int32

const (
	// The phase is unknown or not specified. Should not normally be used.
	ClusterPhase_CLUSTER_PHASE_UNSPECIFIED ClusterPhase = 0
	// The cluster is currently being created.
	ClusterPhase_CLUSTER_PHASE_CREATING ClusterPhase = 1
	// The cluster creation process failed.
	ClusterPhase_CLUSTER_PHASE_FAILED_TO_CREATE ClusterPhase = 2
	// The cluster configuration is being updated.
	ClusterPhase_CLUSTER_PHASE_UPDATING ClusterPhase = 3
	// The cluster update process failed.
	ClusterPhase_CLUSTER_PHASE_FAILED_TO_UPDATE ClusterPhase = 4
	// The cluster is undergoing scaling (up or down).
	ClusterPhase_CLUSTER_PHASE_SCALING ClusterPhase = 5
	// The Qdrant version in the cluster is being upgraded.
	ClusterPhase_CLUSTER_PHASE_UPGRADING ClusterPhase = 6
	// The cluster is in the process of being suspended.
	ClusterPhase_CLUSTER_PHASE_SUSPENDING ClusterPhase = 7
	// The cluster is currently suspended (inactive).
	ClusterPhase_CLUSTER_PHASE_SUSPENDED ClusterPhase = 8
	// The cluster suspension process failed.
	ClusterPhase_CLUSTER_PHASE_FAILED_TO_SUSPEND ClusterPhase = 9
	// The cluster is resuming from a suspended state.
	ClusterPhase_CLUSTER_PHASE_RESUMING ClusterPhase = 10
	// The cluster resumption process failed.
	ClusterPhase_CLUSTER_PHASE_FAILED_TO_RESUME ClusterPhase = 11
	// The cluster is operational and healthy.
	ClusterPhase_CLUSTER_PHASE_HEALTHY ClusterPhase = 12
	// The cluster is operational but not all components are ready or healthy.
	ClusterPhase_CLUSTER_PHASE_NOT_READY ClusterPhase = 13
	// The cluster is in recovery mode, potentially after a failure.
	ClusterPhase_CLUSTER_PHASE_RECOVERY_MODE ClusterPhase = 14
	// The cluster is under manual maintenance.
	ClusterPhase_CLUSTER_PHASE_MANUAL_MAINTENANCE ClusterPhase = 15
	// There was an error syncing the cluster in the cloud provider region.
	ClusterPhase_CLUSTER_PHASE_FAILED_TO_SYNC ClusterPhase = 16
	// The cluster was expected but not found in the cloud provider region.
	ClusterPhase_CLUSTER_PHASE_NOT_FOUND ClusterPhase = 17
	// The cluster is being deleted.
	ClusterPhase_CLUSTER_PHASE_DELETING ClusterPhase = 18
)

// Enum value maps for ClusterPhase.
var (
	ClusterPhase_name = map[int32]string{
		0:  "CLUSTER_PHASE_UNSPECIFIED",
		1:  "CLUSTER_PHASE_CREATING",
		2:  "CLUSTER_PHASE_FAILED_TO_CREATE",
		3:  "CLUSTER_PHASE_UPDATING",
		4:  "CLUSTER_PHASE_FAILED_TO_UPDATE",
		5:  "CLUSTER_PHASE_SCALING",
		6:  "CLUSTER_PHASE_UPGRADING",
		7:  "CLUSTER_PHASE_SUSPENDING",
		8:  "CLUSTER_PHASE_SUSPENDED",
		9:  "CLUSTER_PHASE_FAILED_TO_SUSPEND",
		10: "CLUSTER_PHASE_RESUMING",
		11: "CLUSTER_PHASE_FAILED_TO_RESUME",
		12: "CLUSTER_PHASE_HEALTHY",
		13: "CLUSTER_PHASE_NOT_READY",
		14: "CLUSTER_PHASE_RECOVERY_MODE",
		15: "CLUSTER_PHASE_MANUAL_MAINTENANCE",
		16: "CLUSTER_PHASE_FAILED_TO_SYNC",
		17: "CLUSTER_PHASE_NOT_FOUND",
		18: "CLUSTER_PHASE_DELETING",
	}
	ClusterPhase_value = map[string]int32{
		"CLUSTER_PHASE_UNSPECIFIED":        0,
		"CLUSTER_PHASE_CREATING":           1,
		"CLUSTER_PHASE_FAILED_TO_CREATE":   2,
		"CLUSTER_PHASE_UPDATING":           3,
		"CLUSTER_PHASE_FAILED_TO_UPDATE":   4,
		"CLUSTER_PHASE_SCALING":            5,
		"CLUSTER_PHASE_UPGRADING":          6,
		"CLUSTER_PHASE_SUSPENDING":         7,
		"CLUSTER_PHASE_SUSPENDED":          8,
		"CLUSTER_PHASE_FAILED_TO_SUSPEND":  9,
		"CLUSTER_PHASE_RESUMING":           10,
		"CLUSTER_PHASE_FAILED_TO_RESUME":   11,
		"CLUSTER_PHASE_HEALTHY":            12,
		"CLUSTER_PHASE_NOT_READY":          13,
		"CLUSTER_PHASE_RECOVERY_MODE":      14,
		"CLUSTER_PHASE_MANUAL_MAINTENANCE": 15,
		"CLUSTER_PHASE_FAILED_TO_SYNC":     16,
		"CLUSTER_PHASE_NOT_FOUND":          17,
		"CLUSTER_PHASE_DELETING":           18,
	}
)

func (x ClusterPhase) Enum() *ClusterPhase {
	p := new(ClusterPhase)
	*p = x
	return p
}

func (x ClusterPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[7].Descriptor()
}

func (ClusterPhase) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[7]
}

func (x ClusterPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterPhase.Descriptor instead.
func (ClusterPhase) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{7}
}

// ClusterNodeState represents the state of a cluster node.
type ClusterNodeState int32

const (
	// The state is unspecified.
	ClusterNodeState_CLUSTER_NODE_STATE_UNSPECIFIED ClusterNodeState = 0
	// The node is starting.
	ClusterNodeState_CLUSTER_NODE_STATE_STARTING ClusterNodeState = 1
	// The node is healthy.
	ClusterNodeState_CLUSTER_NODE_STATE_HEALTHY ClusterNodeState = 2
	// The node is unhealthy.
	ClusterNodeState_CLUSTER_NODE_STATE_UNHEALTHY ClusterNodeState = 3
	// The node is suspended.
	ClusterNodeState_CLUSTER_NODE_STATE_SUSPENDED ClusterNodeState = 4
)

// Enum value maps for ClusterNodeState.
var (
	ClusterNodeState_name = map[int32]string{
		0: "CLUSTER_NODE_STATE_UNSPECIFIED",
		1: "CLUSTER_NODE_STATE_STARTING",
		2: "CLUSTER_NODE_STATE_HEALTHY",
		3: "CLUSTER_NODE_STATE_UNHEALTHY",
		4: "CLUSTER_NODE_STATE_SUSPENDED",
	}
	ClusterNodeState_value = map[string]int32{
		"CLUSTER_NODE_STATE_UNSPECIFIED": 0,
		"CLUSTER_NODE_STATE_STARTING":    1,
		"CLUSTER_NODE_STATE_HEALTHY":     2,
		"CLUSTER_NODE_STATE_UNHEALTHY":   3,
		"CLUSTER_NODE_STATE_SUSPENDED":   4,
	}
)

func (x ClusterNodeState) Enum() *ClusterNodeState {
	p := new(ClusterNodeState)
	*p = x
	return p
}

func (x ClusterNodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterNodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[8].Descriptor()
}

func (ClusterNodeState) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[8]
}

func (x ClusterNodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterNodeState.Descriptor instead.
func (ClusterNodeState) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{8}
}

// ClusterScalabilityStatus defines the scalability states of a cluster.
type ClusterScalabilityStatus int32

const (
	// Scalability status is unspecified.
	ClusterScalabilityStatus_CLUSTER_SCALABILITY_STATUS_UNSPECIFIED ClusterScalabilityStatus = 0
	// The cluster is not scalable.
	ClusterScalabilityStatus_CLUSTER_SCALABILITY_STATUS_NOT_SCALABLE ClusterScalabilityStatus = 1
	// The cluster supports scaling operations.
	ClusterScalabilityStatus_CLUSTER_SCALABILITY_STATUS_SCALABLE ClusterScalabilityStatus = 2
)

// Enum value maps for ClusterScalabilityStatus.
var (
	ClusterScalabilityStatus_name = map[int32]string{
		0: "CLUSTER_SCALABILITY_STATUS_UNSPECIFIED",
		1: "CLUSTER_SCALABILITY_STATUS_NOT_SCALABLE",
		2: "CLUSTER_SCALABILITY_STATUS_SCALABLE",
	}
	ClusterScalabilityStatus_value = map[string]int32{
		"CLUSTER_SCALABILITY_STATUS_UNSPECIFIED":  0,
		"CLUSTER_SCALABILITY_STATUS_NOT_SCALABLE": 1,
		"CLUSTER_SCALABILITY_STATUS_SCALABLE":     2,
	}
)

func (x ClusterScalabilityStatus) Enum() *ClusterScalabilityStatus {
	p := new(ClusterScalabilityStatus)
	*p = x
	return p
}

func (x ClusterScalabilityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterScalabilityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[9].Descriptor()
}

func (ClusterScalabilityStatus) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes[9]
}

func (x ClusterScalabilityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterScalabilityStatus.Descriptor instead.
func (ClusterScalabilityStatus) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{9}
}

// ListClustersRequest is the request for the ListClusters function
type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Optional filter specifying the cloud provider where the cluster is hosted.
	// Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviders` method.
	// If omitted, all clusters for the specified account are returned, including those hosted in hybrid cloud environments.
	CloudProviderId *string `protobuf:"bytes,10,opt,name=cloud_provider_id,json=cloudProviderId,proto3,oneof" json:"cloud_provider_id,omitempty"`
	// Optional filter specifying the cloud provider region where the cluster is hosted.
	// Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions` method.
	// If this field is set, the `cloud_provider_id` is required to set as well (and it should match).
	// For hybrid this should be the hybrid cloud environment ID.
	CloudProviderRegionId *string `protobuf:"bytes,11,opt,name=cloud_provider_region_id,json=cloudProviderRegionId,proto3,oneof" json:"cloud_provider_region_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *ListClustersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListClustersRequest) GetCloudProviderId() string {
	if x != nil && x.CloudProviderId != nil {
		return *x.CloudProviderId
	}
	return ""
}

func (x *ListClustersRequest) GetCloudProviderRegionId() string {
	if x != nil && x.CloudProviderRegionId != nil {
		return *x.CloudProviderRegionId
	}
	return ""
}

// ListClustersResponse is the response from the ListClusters function
type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual clusters in this list
	Items         []*Cluster `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ListClustersResponse) GetItems() []*Cluster {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetClusterRequest is the request for the GetCluster function
type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the cluster (in GUID format).
	// This cluster should be part of the provided account.
	// This is a required field.
	ClusterId     string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *GetClusterRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// GetClusterResponse is the response from the GetCluster function
type GetClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual cluster
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterResponse) Reset() {
	*x = GetClusterResponse{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterResponse) ProtoMessage() {}

func (x *GetClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterResponse.ProtoReflect.Descriptor instead.
func (*GetClusterResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *GetClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// CreateClusterRequest is the request for the CreateCluster function
type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual cluster
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *CreateClusterRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// CreateClusterResponse is the response from the CreateCluster function
type CreateClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual cluster
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterResponse) Reset() {
	*x = CreateClusterResponse{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterResponse) ProtoMessage() {}

func (x *CreateClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *CreateClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// UpdateClusterRequest is the request for the UpdateCluster function
type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual cluster
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateClusterRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// UpdateClusterResponse is the response from the UpdateCluster function
type UpdateClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual cluster
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterResponse) Reset() {
	*x = UpdateClusterResponse{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterResponse) ProtoMessage() {}

func (x *UpdateClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// DeleteClusterRequest is the request for the DeleteCluster function
type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the cluster (in GUID format).
	// This cluster should be part of the provided account.
	// This is a required field.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// If set, the backups of this cluster will be deleted as well.
	DeleteBackups *bool `protobuf:"varint,3,opt,name=delete_backups,json=deleteBackups,proto3,oneof" json:"delete_backups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteClusterRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterRequest) GetDeleteBackups() bool {
	if x != nil && x.DeleteBackups != nil {
		return *x.DeleteBackups
	}
	return false
}

// DeleteClusterResponse is the response from the DeleteCluster function
type DeleteClusterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{9}
}

// RestartClusterRequest is the request for the RestartCluster function
type RestartClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the cluster (in GUID format).
	// This cluster should be part of the provided account.
	// This is a required field.
	ClusterId     string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartClusterRequest) Reset() {
	*x = RestartClusterRequest{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartClusterRequest) ProtoMessage() {}

func (x *RestartClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartClusterRequest.ProtoReflect.Descriptor instead.
func (*RestartClusterRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *RestartClusterRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RestartClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// RestartClusterResponse is the response from the RestartCluster function
type RestartClusterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartClusterResponse) Reset() {
	*x = RestartClusterResponse{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartClusterResponse) ProtoMessage() {}

func (x *RestartClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartClusterResponse.ProtoReflect.Descriptor instead.
func (*RestartClusterResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{11}
}

// SuspendClusterRequest is the request for the SuspendCluster function
type SuspendClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the cluster (in GUID format).
	// This cluster should be part of the provided account.
	// This is a required field.
	ClusterId     string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuspendClusterRequest) Reset() {
	*x = SuspendClusterRequest{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspendClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendClusterRequest) ProtoMessage() {}

func (x *SuspendClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendClusterRequest.ProtoReflect.Descriptor instead.
func (*SuspendClusterRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *SuspendClusterRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SuspendClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// SuspendClusterResponse is the response from the SuspendCluster function
type SuspendClusterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuspendClusterResponse) Reset() {
	*x = SuspendClusterResponse{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspendClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendClusterResponse) ProtoMessage() {}

func (x *SuspendClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendClusterResponse.ProtoReflect.Descriptor instead.
func (*SuspendClusterResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{13}
}

// SuggestClusterNameRequest is the request for the SuggestClusterName function
type SuggestClusterNameRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuggestClusterNameRequest) Reset() {
	*x = SuggestClusterNameRequest{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuggestClusterNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestClusterNameRequest) ProtoMessage() {}

func (x *SuggestClusterNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestClusterNameRequest.ProtoReflect.Descriptor instead.
func (*SuggestClusterNameRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *SuggestClusterNameRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// SuggestClusterNameResponse is the response from the SuggestClusterName function
type SuggestClusterNameResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The suggested name for a new cluster.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuggestClusterNameResponse) Reset() {
	*x = SuggestClusterNameResponse{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuggestClusterNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestClusterNameResponse) ProtoMessage() {}

func (x *SuggestClusterNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestClusterNameResponse.ProtoReflect.Descriptor instead.
func (*SuggestClusterNameResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *SuggestClusterNameResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ListQdrantReleasesRequest is the request for the ListQdrantReleases function
type ListQdrantReleasesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the cluster (in GUID format).
	// This cluster should be part of the provided account.
	// This is an optional field.
	ClusterId     *string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQdrantReleasesRequest) Reset() {
	*x = ListQdrantReleasesRequest{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQdrantReleasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQdrantReleasesRequest) ProtoMessage() {}

func (x *ListQdrantReleasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQdrantReleasesRequest.ProtoReflect.Descriptor instead.
func (*ListQdrantReleasesRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *ListQdrantReleasesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListQdrantReleasesRequest) GetClusterId() string {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return ""
}

// ListQdrantReleasesResponse is the response from the ListQdrantReleases function
type ListQdrantReleasesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual Qdrant releases in this list
	Items         []*QdrantRelease `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQdrantReleasesResponse) Reset() {
	*x = ListQdrantReleasesResponse{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQdrantReleasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQdrantReleasesResponse) ProtoMessage() {}

func (x *ListQdrantReleasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQdrantReleasesResponse.ProtoReflect.Descriptor instead.
func (*ListQdrantReleasesResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *ListQdrantReleasesResponse) GetItems() []*QdrantRelease {
	if x != nil {
		return x.Items
	}
	return nil
}

// A Cluster represents one cluster of a Qdrant database.
type Cluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the cluster (in GUID format).
	// This is a read-only field and will be available after a cluster is created.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp when the cluster was created.
	// This is a read-only field and will be available after a cluster is created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Identifier of the account associated with the cluster (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Name of the cluster.
	// This is a required field.
	// Name can only contain letters, numbers, underscores and dashes
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Timestamp when the cluster was deleted (or is started to be deleting).
	// This is a read-only field and will be set after DeleteCluster is called.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Cloud provider where the cluster is hosted.
	// Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviders` method.
	// After creation, this field cannot be changed.
	CloudProviderId string `protobuf:"bytes,10,opt,name=cloud_provider_id,json=cloudProviderId,proto3" json:"cloud_provider_id,omitempty"`
	// Cloud provider region where the cluster is hosted.
	// Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions` method.
	// For hybrid this should be the hybrid cloud environment ID.
	// This is a required field.
	// After creation, this field cannot be changed.
	CloudProviderRegionId string `protobuf:"bytes,11,opt,name=cloud_provider_region_id,json=cloudProviderRegionId,proto3" json:"cloud_provider_region_id,omitempty"`
	// Current configuration details of the cluster.
	Configuration *ClusterConfiguration `protobuf:"bytes,20,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Current state of the cluster (available after the cluster has been created).
	// All fields inside `state` are read-only.
	State         *ClusterState `protobuf:"bytes,100,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cluster) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Cluster) GetCloudProviderId() string {
	if x != nil {
		return x.CloudProviderId
	}
	return ""
}

func (x *Cluster) GetCloudProviderRegionId() string {
	if x != nil {
		return x.CloudProviderRegionId
	}
	return ""
}

func (x *Cluster) GetConfiguration() *ClusterConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Cluster) GetState() *ClusterState {
	if x != nil {
		return x.State
	}
	return nil
}

// A ClusterConfiguration represents the configuration of a cluster.
type ClusterConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp when the cluster configuration was last updated.
	// This is a read-only field and will be available after a cluster is created.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// The number of nodes in a cluster.
	// This should be a number 1...20 [both included].
	// This is a required field.
	NumberOfNodes uint32 `protobuf:"varint,2,opt,name=number_of_nodes,json=numberOfNodes,proto3" json:"number_of_nodes,omitempty"`
	// Version of the cluster software.
	// If omitted the latest version will be used and filled out during create.
	// Use ListReleases() to determine which versions are allowed to be used.
	// See upgrade guidelines for more info.
	Version *string `protobuf:"bytes,3,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// The package identifier used to configure the resources of the cluster. Use `qdrant.cloud.booking.v1.BookingService.ListPackages` to select one.
	// This is a required field.
	PackageId string `protobuf:"bytes,4,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	// The additional resources on top of the selected package.
	// This is an optional field, if not specified all additional resources are 0.
	AdditionalResources *AdditionalResources `protobuf:"bytes,5,opt,name=additional_resources,json=additionalResources,proto3,oneof" json:"additional_resources,omitempty"`
	// Configuration to setup a qdrant database.
	// This is an optional field.
	DatabaseConfiguration *DatabaseConfiguration `protobuf:"bytes,7,opt,name=database_configuration,json=databaseConfiguration,proto3,oneof" json:"database_configuration,omitempty"`
	// The node selector for this cluster in a hybrid cloud environment.
	// It is ignored for managed cloud clusters. This is an optional field
	NodeSelector []*v1.KeyValue `protobuf:"bytes,8,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// List of tolerations for this cluster in a hybrid cloud environment.
	// It is ignored for managed cloud clusters. This is an optional field
	Tolerations []*Toleration `protobuf:"bytes,9,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	// List of annotations for this cluster in a hybrid cloud environment.
	// It is ignored for managed cloud clusters. This is an optional field
	Annotations []*v1.KeyValue `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty"`
	// List of allowed IP source ranges for this cluster.
	// Field is used for both managed cloud and hybrid cloud and clusters. This is an optional field
	// The CIDRs supports IPv4 only.
	AllowedIpSourceRanges []string `protobuf:"bytes,11,rep,name=allowed_ip_source_ranges,json=allowedIpSourceRanges,proto3" json:"allowed_ip_source_ranges,omitempty"`
	// The type of service to use for this cluster in a hybrid cloud environment.
	// It is ignored for managed cloud clusters. This is an optional field, default is Cluster IP.
	ServiceType *ClusterServiceType `protobuf:"varint,12,opt,name=service_type,json=serviceType,proto3,enum=qdrant.cloud.cluster.v1.ClusterServiceType,oneof" json:"service_type,omitempty"`
	// List of annotations applied to the service of this cluster in a hybrid cloud environment.
	// It is ignored for managed cloud clusters. This is an optional field
	ServiceAnnotations []*v1.KeyValue `protobuf:"bytes,13,rep,name=service_annotations,json=serviceAnnotations,proto3" json:"service_annotations,omitempty"`
	// List of labels applied to the pods of this cluster in a hybrid cloud environment.
	// It is ignored for managed cloud clusters. This is an optional field
	PodLabels []*v1.KeyValue `protobuf:"bytes,14,rep,name=pod_labels,json=podLabels,proto3" json:"pod_labels,omitempty"`
	// The percentage of CPU resources reserved for system components
	// This is an optional field, default is 0.
	// Number between 0..80
	ReservedCpuPercentage uint32 `protobuf:"varint,20,opt,name=reserved_cpu_percentage,json=reservedCpuPercentage,proto3" json:"reserved_cpu_percentage,omitempty"`
	// The percentage of RAM resources reserved for system components
	// This is an optional field, default is 0.
	// Number between 0..80
	ReservedMemoryPercentage uint32 `protobuf:"varint,21,opt,name=reserved_memory_percentage,json=reservedMemoryPercentage,proto3" json:"reserved_memory_percentage,omitempty"`
	// The gpu type that should be used for the database
	// This is an optional field, default is No configured GPU
	GpuType *ClusterConfigurationGpuType `protobuf:"varint,22,opt,name=gpu_type,json=gpuType,proto3,enum=qdrant.cloud.cluster.v1.ClusterConfigurationGpuType,oneof" json:"gpu_type,omitempty"`
	// The restart policy for the database
	// This is an optional field, default is Automatic
	RestartPolicy *ClusterConfigurationRestartPolicy `protobuf:"varint,23,opt,name=restart_policy,json=restartPolicy,proto3,enum=qdrant.cloud.cluster.v1.ClusterConfigurationRestartPolicy,oneof" json:"restart_policy,omitempty"`
	// The automatic shard rebalancing strategy for the database
	// This is an optional field, default is none
	RebalanceStrategy *ClusterConfigurationRebalanceStrategy `protobuf:"varint,24,opt,name=rebalance_strategy,json=rebalanceStrategy,proto3,enum=qdrant.cloud.cluster.v1.ClusterConfigurationRebalanceStrategy,oneof" json:"rebalance_strategy,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClusterConfiguration) Reset() {
	*x = ClusterConfiguration{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfiguration) ProtoMessage() {}

func (x *ClusterConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfiguration.ProtoReflect.Descriptor instead.
func (*ClusterConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *ClusterConfiguration) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *ClusterConfiguration) GetNumberOfNodes() uint32 {
	if x != nil {
		return x.NumberOfNodes
	}
	return 0
}

func (x *ClusterConfiguration) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ClusterConfiguration) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *ClusterConfiguration) GetAdditionalResources() *AdditionalResources {
	if x != nil {
		return x.AdditionalResources
	}
	return nil
}

func (x *ClusterConfiguration) GetDatabaseConfiguration() *DatabaseConfiguration {
	if x != nil {
		return x.DatabaseConfiguration
	}
	return nil
}

func (x *ClusterConfiguration) GetNodeSelector() []*v1.KeyValue {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ClusterConfiguration) GetTolerations() []*Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *ClusterConfiguration) GetAnnotations() []*v1.KeyValue {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ClusterConfiguration) GetAllowedIpSourceRanges() []string {
	if x != nil {
		return x.AllowedIpSourceRanges
	}
	return nil
}

func (x *ClusterConfiguration) GetServiceType() ClusterServiceType {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return ClusterServiceType_CLUSTER_SERVICE_TYPE_UNSPECIFIED
}

func (x *ClusterConfiguration) GetServiceAnnotations() []*v1.KeyValue {
	if x != nil {
		return x.ServiceAnnotations
	}
	return nil
}

func (x *ClusterConfiguration) GetPodLabels() []*v1.KeyValue {
	if x != nil {
		return x.PodLabels
	}
	return nil
}

func (x *ClusterConfiguration) GetReservedCpuPercentage() uint32 {
	if x != nil {
		return x.ReservedCpuPercentage
	}
	return 0
}

func (x *ClusterConfiguration) GetReservedMemoryPercentage() uint32 {
	if x != nil {
		return x.ReservedMemoryPercentage
	}
	return 0
}

func (x *ClusterConfiguration) GetGpuType() ClusterConfigurationGpuType {
	if x != nil && x.GpuType != nil {
		return *x.GpuType
	}
	return ClusterConfigurationGpuType_CLUSTER_CONFIGURATION_GPU_TYPE_UNSPECIFIED
}

func (x *ClusterConfiguration) GetRestartPolicy() ClusterConfigurationRestartPolicy {
	if x != nil && x.RestartPolicy != nil {
		return *x.RestartPolicy
	}
	return ClusterConfigurationRestartPolicy_CLUSTER_CONFIGURATION_RESTART_POLICY_UNSPECIFIED
}

func (x *ClusterConfiguration) GetRebalanceStrategy() ClusterConfigurationRebalanceStrategy {
	if x != nil && x.RebalanceStrategy != nil {
		return *x.RebalanceStrategy
	}
	return ClusterConfigurationRebalanceStrategy_CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_UNSPECIFIED
}

// Configuration to setup a Qdrant database.
// The settings apply to managed and/or hybrid cloud, see documentation on each message for more details.
type DatabaseConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The default Qdrant database collection configuration.
	// This setting is for both managed and hybrid cloud clusters, see sub-messages for more details.
	// This is an optional field.
	Collection *DatabaseConfigurationCollection `protobuf:"bytes,1,opt,name=collection,proto3,oneof" json:"collection,omitempty"`
	// The default Qdrant database storage configuration.
	// This setting is for both managed and hybrid cloud clusters.
	// This is an optional field.
	Storage *DatabaseConfigurationStorage `protobuf:"bytes,2,opt,name=storage,proto3,oneof" json:"storage,omitempty"`
	// The Qdrant database service configuration
	// This setting is for both managed and hybrid cloud clusters, see sub-messages for more details.
	// This is an optional field
	Service *DatabaseConfigurationService `protobuf:"bytes,3,opt,name=service,proto3,oneof" json:"service,omitempty"`
	// The log level for the database.
	// Qdrant is written in Rust and is using: https://docs.rs/log/latest/log/enum.LevelFilter.html
	// This setting is for hybrid cloud clusters only, it is ignored for managed cloud clusters.
	// This is an optional field, default is Info.
	LogLevel *DatabaseConfigurationLogLevel `protobuf:"varint,4,opt,name=log_level,json=logLevel,proto3,enum=qdrant.cloud.cluster.v1.DatabaseConfigurationLogLevel,oneof" json:"log_level,omitempty"`
	// The Qdrant database TLS configuration.
	// This setting is for hybrid cloud clusters only, it is ignored for managed cloud clusters.
	// This is an optional field, if not set an unsecure connection is provided.
	Tls *DatabaseConfigurationTls `protobuf:"bytes,5,opt,name=tls,proto3,oneof" json:"tls,omitempty"`
	// The Qdrant database inference configuration.
	// This setting is for managed cloud clusters only, it is ignored for hybrid cloud clusters.
	// This is an optional field, if unset, the database is not configured for cloud inferencing
	Inference     *DatabaseConfigurationInference `protobuf:"bytes,6,opt,name=inference,proto3,oneof" json:"inference,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfiguration) Reset() {
	*x = DatabaseConfiguration{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfiguration) ProtoMessage() {}

func (x *DatabaseConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfiguration.ProtoReflect.Descriptor instead.
func (*DatabaseConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *DatabaseConfiguration) GetCollection() *DatabaseConfigurationCollection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *DatabaseConfiguration) GetStorage() *DatabaseConfigurationStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *DatabaseConfiguration) GetService() *DatabaseConfigurationService {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *DatabaseConfiguration) GetLogLevel() DatabaseConfigurationLogLevel {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return DatabaseConfigurationLogLevel_DATABASE_CONFIGURATION_LOG_LEVEL_UNSPECIFIED
}

func (x *DatabaseConfiguration) GetTls() *DatabaseConfigurationTls {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *DatabaseConfiguration) GetInference() *DatabaseConfigurationInference {
	if x != nil {
		return x.Inference
	}
	return nil
}

// The default Qdrant database collection configuration
type DatabaseConfigurationCollection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of replicas of each shard that network tries to maintain
	// This is an optional, the default is 1
	ReplicationFactor *uint32 `protobuf:"varint,1,opt,name=replication_factor,json=replicationFactor,proto3,oneof" json:"replication_factor,omitempty"`
	// How many replicas should apply the operation for us to consider it successful
	// This is an optional, the default is 1
	WriteConsistencyFactor int32 `protobuf:"varint,2,opt,name=write_consistency_factor,json=writeConsistencyFactor,proto3" json:"write_consistency_factor,omitempty"`
	// The default parameters for vectors.
	Vectors       *DatabaseConfigurationCollectionVectors `protobuf:"bytes,3,opt,name=vectors,proto3" json:"vectors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationCollection) Reset() {
	*x = DatabaseConfigurationCollection{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationCollection) ProtoMessage() {}

func (x *DatabaseConfigurationCollection) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationCollection.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationCollection) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *DatabaseConfigurationCollection) GetReplicationFactor() uint32 {
	if x != nil && x.ReplicationFactor != nil {
		return *x.ReplicationFactor
	}
	return 0
}

func (x *DatabaseConfigurationCollection) GetWriteConsistencyFactor() int32 {
	if x != nil {
		return x.WriteConsistencyFactor
	}
	return 0
}

func (x *DatabaseConfigurationCollection) GetVectors() *DatabaseConfigurationCollectionVectors {
	if x != nil {
		return x.Vectors
	}
	return nil
}

// The default Qdrant database collection vectors configuration
type DatabaseConfigurationCollectionVectors struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, this will create a collection with all vectors immediately stored in memmap storage.
	// This is the recommended way, in case your Qdrant instance operates with fast disks and you are working with large collections.
	// For more info see: https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage
	// This is an optional field, the default value will be true.
	OnDisk        *bool `protobuf:"varint,1,opt,name=on_disk,json=onDisk,proto3,oneof" json:"on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationCollectionVectors) Reset() {
	*x = DatabaseConfigurationCollectionVectors{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationCollectionVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationCollectionVectors) ProtoMessage() {}

func (x *DatabaseConfigurationCollectionVectors) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationCollectionVectors.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationCollectionVectors) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{22}
}

func (x *DatabaseConfigurationCollectionVectors) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return false
}

// The Qdrant storage configuration
type DatabaseConfigurationStorage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The performance related Qdrant database storage configuration
	Performance   *DatabaseConfigurationStoragePerformance `protobuf:"bytes,1,opt,name=performance,proto3" json:"performance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationStorage) Reset() {
	*x = DatabaseConfigurationStorage{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationStorage) ProtoMessage() {}

func (x *DatabaseConfigurationStorage) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationStorage.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationStorage) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{23}
}

func (x *DatabaseConfigurationStorage) GetPerformance() *DatabaseConfigurationStoragePerformance {
	if x != nil {
		return x.Performance
	}
	return nil
}

// The performance related Qdrant database storage configuration
type DatabaseConfigurationStoragePerformance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU budget, how many CPUs (threads) to allocate for an optimization job.
	// If 0 - auto selection, keep 1 or more CPUs unallocated depending on CPU size
	// If negative - subtract this number of CPUs from the available CPUs.
	// If positive - use this exact number of CPUs.
	OptimizerCpuBudget int32 `protobuf:"varint,1,opt,name=optimizer_cpu_budget,json=optimizerCpuBudget,proto3" json:"optimizer_cpu_budget,omitempty"`
	// Enable async scorer which uses io_uring when rescoring.
	// Only supported on Linux, must be enabled in your kernel.
	// See: https://qdrant.tech/articles/io_uring/#and-what-about-qdrant
	AsyncScorer   bool `protobuf:"varint,2,opt,name=async_scorer,json=asyncScorer,proto3" json:"async_scorer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationStoragePerformance) Reset() {
	*x = DatabaseConfigurationStoragePerformance{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationStoragePerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationStoragePerformance) ProtoMessage() {}

func (x *DatabaseConfigurationStoragePerformance) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationStoragePerformance.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationStoragePerformance) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{24}
}

func (x *DatabaseConfigurationStoragePerformance) GetOptimizerCpuBudget() int32 {
	if x != nil {
		return x.OptimizerCpuBudget
	}
	return 0
}

func (x *DatabaseConfigurationStoragePerformance) GetAsyncScorer() bool {
	if x != nil {
		return x.AsyncScorer
	}
	return false
}

// The Qdrant database service configuration
type DatabaseConfigurationService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set an api-key.
	// This setting is for hybrid cloud clusters only, for managed cloud please use qdrant.cloud.cluster.auth.[v1|v2].DatabaseApiKeyService to configure keys.
	// If set, all requests must include a header with the api-key.
	// example header: `api-key: <API-KEY>`
	ApiKey *v1.SecretKeyRef `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	// Set an api-key for read-only operations.
	// This setting is for hybrid cloud clusters only, for managed cloud please use qdrant.cloud.cluster.auth.[v1|v2].DatabaseApiKeyService to configure keys.
	// If set, all requests must include a header with the api-key.
	// example header: `api-key: <API-KEY>`
	ReadOnlyApiKey *v1.SecretKeyRef `protobuf:"bytes,2,opt,name=read_only_api_key,json=readOnlyApiKey,proto3,oneof" json:"read_only_api_key,omitempty"`
	// Enable JWT Role Based Access Control (RBAC).
	// This setting is for both managed and hybrid cloud clusters.
	// If enabled, you can generate JWT tokens with fine-grained rules for access control.
	// Use generated token instead of API key.
	JwtRbac bool `protobuf:"varint,3,opt,name=jwt_rbac,json=jwtRbac,proto3" json:"jwt_rbac,omitempty"`
	// Enable HTTPS for the REST and gRPC API
	// This setting is for hybrid cloud clusters only, for managed cloud clusters the platform controls it (and clients need to use a secure connection).
	EnableTls     bool `protobuf:"varint,4,opt,name=enable_tls,json=enableTls,proto3" json:"enable_tls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationService) Reset() {
	*x = DatabaseConfigurationService{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationService) ProtoMessage() {}

func (x *DatabaseConfigurationService) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationService.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationService) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{25}
}

func (x *DatabaseConfigurationService) GetApiKey() *v1.SecretKeyRef {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *DatabaseConfigurationService) GetReadOnlyApiKey() *v1.SecretKeyRef {
	if x != nil {
		return x.ReadOnlyApiKey
	}
	return nil
}

func (x *DatabaseConfigurationService) GetJwtRbac() bool {
	if x != nil {
		return x.JwtRbac
	}
	return false
}

func (x *DatabaseConfigurationService) GetEnableTls() bool {
	if x != nil {
		return x.EnableTls
	}
	return false
}

// DatabaseConfigurationTls contains the information to setup a TLS connection to the database endpoint
type DatabaseConfigurationTls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Secret to use for the certificate
	Cert *v1.SecretKeyRef `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	// Secret to use for the private key
	Key           *v1.SecretKeyRef `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationTls) Reset() {
	*x = DatabaseConfigurationTls{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationTls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationTls) ProtoMessage() {}

func (x *DatabaseConfigurationTls) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationTls.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationTls) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{26}
}

func (x *DatabaseConfigurationTls) GetCert() *v1.SecretKeyRef {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *DatabaseConfigurationTls) GetKey() *v1.SecretKeyRef {
	if x != nil {
		return x.Key
	}
	return nil
}

// DatabaseConfigurationInference contains cloud inferencing configuration
type DatabaseConfigurationInference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, the database is configured to use cloud inferencing
	Enabled       bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationInference) Reset() {
	*x = DatabaseConfigurationInference{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationInference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationInference) ProtoMessage() {}

func (x *DatabaseConfigurationInference) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationInference.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationInference) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{27}
}

func (x *DatabaseConfigurationInference) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// AdditionalResources contains the information about additional resources
type AdditionalResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Additional Disk (expressed in Gib)
	Disk          uint32 `protobuf:"varint,3,opt,name=disk,proto3" json:"disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdditionalResources) Reset() {
	*x = AdditionalResources{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdditionalResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalResources) ProtoMessage() {}

func (x *AdditionalResources) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalResources.ProtoReflect.Descriptor instead.
func (*AdditionalResources) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{28}
}

func (x *AdditionalResources) GetDisk() uint32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

// The Toleration message represents a toleration object for Kubernetes.
type Toleration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key to match against the key of a node label.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The operator represents a key's relationship to the value.
	// The default is TOLERATION_OPERATOR_EXISTS.
	Operator *TolerationOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=qdrant.cloud.cluster.v1.TolerationOperator,oneof" json:"operator,omitempty"`
	// The value to match against the value of a node label.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The effect indicates the taint effect to match.
	// The default is TOLERATION_EFFECT_NO_SCHEDULE.
	Effect *TolerationEffect `protobuf:"varint,4,opt,name=effect,proto3,enum=qdrant.cloud.cluster.v1.TolerationEffect,oneof" json:"effect,omitempty"`
	// The toleration seconds indicates the duration to tolerate the taint.
	TolerationSeconds *uint64 `protobuf:"varint,5,opt,name=toleration_seconds,json=tolerationSeconds,proto3,oneof" json:"toleration_seconds,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Toleration) Reset() {
	*x = Toleration{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Toleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toleration) ProtoMessage() {}

func (x *Toleration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toleration.ProtoReflect.Descriptor instead.
func (*Toleration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{29}
}

func (x *Toleration) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Toleration) GetOperator() TolerationOperator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return TolerationOperator_TOLERATION_OPERATOR_UNSPECIFIED
}

func (x *Toleration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Toleration) GetEffect() TolerationEffect {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return TolerationEffect_TOLERATION_EFFECT_UNSPECIFIED
}

func (x *Toleration) GetTolerationSeconds() uint64 {
	if x != nil && x.TolerationSeconds != nil {
		return *x.TolerationSeconds
	}
	return 0
}

// ClusterState represents the current state of a cluster
// All fields in this message are read-only.
type ClusterState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the cluster software.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Number of cluster nodes that are up and running.
	NodesUp uint32 `protobuf:"varint,2,opt,name=nodes_up,json=nodesUp,proto3" json:"nodes_up,omitempty"`
	// The date and time when the cluster was restarted.
	RestartedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=restarted_at,json=restartedAt,proto3" json:"restarted_at,omitempty"`
	// Current phase of the cluster.
	Phase ClusterPhase `protobuf:"varint,4,opt,name=phase,proto3,enum=qdrant.cloud.cluster.v1.ClusterPhase" json:"phase,omitempty"`
	// Reason for the current phase of the cluster.
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// Endpoint information to access the qdrant cluster (aka database).
	Endpoint *ClusterEndpoint `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// The resources used by the cluster per node.
	// For the complete cluster you have to multiply by cluster.configuration.number_of_nodes
	Resources *ClusterNodeResourcesSummary `protobuf:"bytes,7,opt,name=resources,proto3" json:"resources,omitempty"`
	// Whether the cluster can be scaled up or down.
	ScalabilityInfo *ClusterScalabilityInfo `protobuf:"bytes,8,opt,name=scalability_info,json=scalabilityInfo,proto3" json:"scalability_info,omitempty"`
	// List of nodes in the cluster.
	Nodes         []*ClusterNodeInfo `protobuf:"bytes,9,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterState) Reset() {
	*x = ClusterState{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterState) ProtoMessage() {}

func (x *ClusterState) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterState.ProtoReflect.Descriptor instead.
func (*ClusterState) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{30}
}

func (x *ClusterState) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClusterState) GetNodesUp() uint32 {
	if x != nil {
		return x.NodesUp
	}
	return 0
}

func (x *ClusterState) GetRestartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RestartedAt
	}
	return nil
}

func (x *ClusterState) GetPhase() ClusterPhase {
	if x != nil {
		return x.Phase
	}
	return ClusterPhase_CLUSTER_PHASE_UNSPECIFIED
}

func (x *ClusterState) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ClusterState) GetEndpoint() *ClusterEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *ClusterState) GetResources() *ClusterNodeResourcesSummary {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ClusterState) GetScalabilityInfo() *ClusterScalabilityInfo {
	if x != nil {
		return x.ScalabilityInfo
	}
	return nil
}

func (x *ClusterState) GetNodes() []*ClusterNodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// ClusterNodeInfo represents a node in a cluster.
// All fields in this message are read-only.
type ClusterNodeInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name specifies the name of the node.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// StartedAt specifies the time when the node started.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Version specifies the version of Qdrant running on the node.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Endpoint specific to this node.
	Endpoint *ClusterEndpoint `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// State of the node.
	State         ClusterNodeState `protobuf:"varint,10,opt,name=state,proto3,enum=qdrant.cloud.cluster.v1.ClusterNodeState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterNodeInfo) Reset() {
	*x = ClusterNodeInfo{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodeInfo) ProtoMessage() {}

func (x *ClusterNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodeInfo.ProtoReflect.Descriptor instead.
func (*ClusterNodeInfo) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{31}
}

func (x *ClusterNodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterNodeInfo) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ClusterNodeInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClusterNodeInfo) GetEndpoint() *ClusterEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *ClusterNodeInfo) GetState() ClusterNodeState {
	if x != nil {
		return x.State
	}
	return ClusterNodeState_CLUSTER_NODE_STATE_UNSPECIFIED
}

// Endpoint information to access the qdrant cluster (aka database) or a specific node in the cluster.
// All fields in this message are a read-only field.
type ClusterEndpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL to access the qdrant cluster (aka database) without port
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The port to use for HTTP REST calls (6333)
	RestPort int32 `protobuf:"varint,2,opt,name=rest_port,json=restPort,proto3" json:"rest_port,omitempty"`
	// The port to use for gRPC calls (6334)
	GrpcPort      int32 `protobuf:"varint,3,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterEndpoint) Reset() {
	*x = ClusterEndpoint{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterEndpoint) ProtoMessage() {}

func (x *ClusterEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterEndpoint.ProtoReflect.Descriptor instead.
func (*ClusterEndpoint) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{32}
}

func (x *ClusterEndpoint) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ClusterEndpoint) GetRestPort() int32 {
	if x != nil {
		return x.RestPort
	}
	return 0
}

func (x *ClusterEndpoint) GetGrpcPort() int32 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

// ClusterNodeResourcesSummary represents the resources used in this cluster per node.
type ClusterNodeResourcesSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disk resources
	Disk *ClusterNodeResources `protobuf:"bytes,1,opt,name=disk,proto3" json:"disk,omitempty"`
	// Memory resources
	Ram *ClusterNodeResources `protobuf:"bytes,2,opt,name=ram,proto3" json:"ram,omitempty"`
	// CPU resources
	Cpu           *ClusterNodeResources `protobuf:"bytes,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterNodeResourcesSummary) Reset() {
	*x = ClusterNodeResourcesSummary{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterNodeResourcesSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodeResourcesSummary) ProtoMessage() {}

func (x *ClusterNodeResourcesSummary) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodeResourcesSummary.ProtoReflect.Descriptor instead.
func (*ClusterNodeResourcesSummary) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{33}
}

func (x *ClusterNodeResourcesSummary) GetDisk() *ClusterNodeResources {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *ClusterNodeResourcesSummary) GetRam() *ClusterNodeResources {
	if x != nil {
		return x.Ram
	}
	return nil
}

func (x *ClusterNodeResourcesSummary) GetCpu() *ClusterNodeResources {
	if x != nil {
		return x.Cpu
	}
	return nil
}

// ClusterNodeResources represents the allocation of various resources for a cluster per node.
type ClusterNodeResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Base resources that are part of the standard allocation for the cluster per node.
	// This includes default CPU, memory, storage, etc.
	Base float64 `protobuf:"fixed64,1,opt,name=base,proto3" json:"base,omitempty"`
	// Complimentary resources provided to the cluster at no additional cost.
	// This might include complimentary network bandwidth, credits, etc.
	Complimentary float64 `protobuf:"fixed64,2,opt,name=complimentary,proto3" json:"complimentary,omitempty"`
	// Additional resources allocated to the cluster.
	// This could include additional storage, compute power, etc.
	Additional float64 `protobuf:"fixed64,3,opt,name=additional,proto3" json:"additional,omitempty"`
	// The reserved is the amount used by the system, which cannot be used by the database itself.
	Reserved float64 `protobuf:"fixed64,4,opt,name=reserved,proto3" json:"reserved,omitempty"`
	// The available is the total (base+complimentary+additional) - reserved
	Available     float64 `protobuf:"fixed64,5,opt,name=available,proto3" json:"available,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterNodeResources) Reset() {
	*x = ClusterNodeResources{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterNodeResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodeResources) ProtoMessage() {}

func (x *ClusterNodeResources) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodeResources.ProtoReflect.Descriptor instead.
func (*ClusterNodeResources) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{34}
}

func (x *ClusterNodeResources) GetBase() float64 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *ClusterNodeResources) GetComplimentary() float64 {
	if x != nil {
		return x.Complimentary
	}
	return 0
}

func (x *ClusterNodeResources) GetAdditional() float64 {
	if x != nil {
		return x.Additional
	}
	return 0
}

func (x *ClusterNodeResources) GetReserved() float64 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *ClusterNodeResources) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

// ClusterScalabilityInfo provides information about the
type ClusterScalabilityInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The current scalability status of the cluster.
	Status ClusterScalabilityStatus `protobuf:"varint,1,opt,name=status,proto3,enum=qdrant.cloud.cluster.v1.ClusterScalabilityStatus" json:"status,omitempty"`
	// Optional human-readable reason providing more context about the scalability status.
	// When a cluster is not scalable, this field explains why.
	Reason        *string `protobuf:"bytes,2,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterScalabilityInfo) Reset() {
	*x = ClusterScalabilityInfo{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterScalabilityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterScalabilityInfo) ProtoMessage() {}

func (x *ClusterScalabilityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterScalabilityInfo.ProtoReflect.Descriptor instead.
func (*ClusterScalabilityInfo) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{35}
}

func (x *ClusterScalabilityInfo) GetStatus() ClusterScalabilityStatus {
	if x != nil {
		return x.Status
	}
	return ClusterScalabilityStatus_CLUSTER_SCALABILITY_STATUS_UNSPECIFIED
}

func (x *ClusterScalabilityInfo) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

// QdrantRelease represent a single Qdrant release
type QdrantRelease struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the Qdrant release
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Flag to indicate if this is the default release
	// There can be at most a single item in the list that have this property set.
	Default bool `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	// URL to the release notes
	ReleaseNotesUrl *string `protobuf:"bytes,3,opt,name=release_notes_url,json=releaseNotesUrl,proto3,oneof" json:"release_notes_url,omitempty"`
	// Additional message regarding this release that might be useful to the client"
	Remarks *string `protobuf:"bytes,4,opt,name=remarks,proto3,oneof" json:"remarks,omitempty"`
	// True, if the release version is end of life and not supported anymore
	EndOfLife bool `protobuf:"varint,5,opt,name=end_of_life,json=endOfLife,proto3" json:"end_of_life,omitempty"`
	// True, if the release is not available for the cluster creation or updates
	Unavailable   bool `protobuf:"varint,6,opt,name=unavailable,proto3" json:"unavailable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QdrantRelease) Reset() {
	*x = QdrantRelease{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QdrantRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QdrantRelease) ProtoMessage() {}

func (x *QdrantRelease) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QdrantRelease.ProtoReflect.Descriptor instead.
func (*QdrantRelease) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{36}
}

func (x *QdrantRelease) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *QdrantRelease) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *QdrantRelease) GetReleaseNotesUrl() string {
	if x != nil && x.ReleaseNotesUrl != nil {
		return *x.ReleaseNotesUrl
	}
	return ""
}

func (x *QdrantRelease) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *QdrantRelease) GetEndOfLife() bool {
	if x != nil {
		return x.EndOfLife
	}
	return false
}

func (x *QdrantRelease) GetUnavailable() bool {
	if x != nil {
		return x.Unavailable
	}
	return false
}

// CreateClusterFromBackupRequest is the request for the CreateCluster function.
type CreateClusterFromBackupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier of the backup (in GUID format).
	// This is a required field.
	BackupId string `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Name of the new cluster
	ClusterName   string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterFromBackupRequest) Reset() {
	*x = CreateClusterFromBackupRequest{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterFromBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterFromBackupRequest) ProtoMessage() {}

func (x *CreateClusterFromBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterFromBackupRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterFromBackupRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{37}
}

func (x *CreateClusterFromBackupRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateClusterFromBackupRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *CreateClusterFromBackupRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

// CreateClusterFromBackupResponse is the response for the CreateCluster function.
type CreateClusterFromBackupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cluster created from the backup
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterFromBackupResponse) Reset() {
	*x = CreateClusterFromBackupResponse{}
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterFromBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterFromBackupResponse) ProtoMessage() {}

func (x *CreateClusterFromBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterFromBackupResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterFromBackupResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP(), []int{38}
}

func (x *CreateClusterFromBackupResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

var File_qdrant_cloud_cluster_v1_cluster_proto protoreflect.FileDescriptor

const file_qdrant_cloud_cluster_v1_cluster_proto_rawDesc = "" +
	"\n" +
	"%qdrant/cloud/cluster/v1/cluster.proto\x12\x17qdrant.cloud.cluster.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a#qdrant/cloud/common/v1/common.proto\x1a\"qdrant/cloud/event/v1/events.proto\"\xba\x05\n" +
	"\x13ListClustersRequest\x12'\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\x128\n" +
	"\x11cloud_provider_id\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x03H\x00R\x0fcloudProviderId\x88\x01\x01\x12E\n" +
	"\x18cloud_provider_region_id\x18\v \x01(\tB\a\xbaH\x04r\x02\x10\x01H\x01R\x15cloudProviderRegionId\x88\x01\x01:\xc5\x03\xbaH\xc1\x03\x1a\xb1\x01\n" +
	"'list_clusters.cloud_provider_id_present\x12Bcloud_provider_id is required when cloud_provider_region_id is set\x1aB!has(this.cloud_provider_region_id) || has(this.cloud_provider_id)\x1a\x8a\x02\n" +
	" cluster.cloud_provider_region_id\x12Hcloud_provider_region_id must be a UUID if cloud_provider_id is 'hybrid'\x1a\x9b\x01this.cloud_provider_region_id.matches('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') || this.cloud_provider_id!= 'hybrid'B\x14\n" +
	"\x12_cloud_provider_idB\x1b\n" +
	"\x19_cloud_provider_region_id\"N\n" +
	"\x14ListClustersResponse\x126\n" +
	"\x05items\x18\x01 \x03(\v2 .qdrant.cloud.cluster.v1.ClusterR\x05items\"e\n" +
	"\x11GetClusterRequest\x12'\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\x12'\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\tclusterId\"X\n" +
	"\x12GetClusterResponse\x12B\n" +
	"\acluster\x18\x01 \x01(\v2 .qdrant.cloud.cluster.v1.ClusterB\x06\xbaH\x03\xc8\x01\x01R\acluster\"\xcd\x02\n" +
	"\x14CreateClusterRequest\x12B\n" +
	"\acluster\x18\x01 \x01(\v2 .qdrant.cloud.cluster.v1.ClusterB\x06\xbaH\x03\xc8\x01\x01R\acluster:\xf0\x01\xbaH\xec\x01\x1a\xe9\x01\n" +
	"\"create_cluster.no_read_only_fields\x12Nread-only fields (id, created_at, deleted_at, state) must not be set on create\x1asthis.cluster.id == '' && !has(this.cluster.created_at) && !has(this.cluster.deleted_at) && !has(this.cluster.state)\"\xc4\x01\n" +
	"\x15CreateClusterResponse\x12B\n" +
	"\acluster\x18\x01 \x01(\v2 .qdrant.cloud.cluster.v1.ClusterB\x06\xbaH\x03\xc8\x01\x01R\acluster:g\xbaHd\x1ab\n" +
	"\x1ccreate_cluster.state_present\x12)state is required for an existing cluster\x1a\x17has(this.cluster.state)\"\xb9\x01\n" +
	"\x14UpdateClusterRequest\x12B\n" +
	"\acluster\x18\x01 \x01(\v2 .qdrant.cloud.cluster.v1.ClusterB\x06\xbaH\x03\xc8\x01\x01R\acluster:]\xbaHZ\x1aX\n" +
	"\x19update_cluster.id_present\x12$cluster.id is required for an update\x1a\x15this.cluster.id != ''\"\xc4\x01\n" +
	"\x15UpdateClusterResponse\x12B\n" +
	"\acluster\x18\x01 \x01(\v2 .qdrant.cloud.cluster.v1.ClusterB\x06\xbaH\x03\xc8\x01\x01R\acluster:g\xbaHd\x1ab\n" +
	"\x1cupdate_cluster.state_present\x12)state is required for an existing cluster\x1a\x17has(this.cluster.state)\"\xa7\x01\n" +
	"\x14DeleteClusterRequest\x12'\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\x12'\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\tclusterId\x12*\n" +
	"\x0edelete_backups\x18\x03 \x01(\bH\x00R\rdeleteBackups\x88\x01\x01B\x11\n" +
	"\x0f_delete_backups\"\x17\n" +
	"\x15DeleteClusterResponse\"i\n" +
	"\x15RestartClusterRequest\x12'\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\x12'\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\tclusterId\"\x18\n" +
	"\x16RestartClusterResponse\"i\n" +
	"\x15SuspendClusterRequest\x12'\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\x12'\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\tclusterId\"\x18\n" +
	"\x16SuspendClusterResponse\"D\n" +
	"\x19SuggestClusterNameRequest\x12'\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\"9\n" +
	"\x1aSuggestClusterNameResponse\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\"\x81\x01\n" +
	"\x19ListQdrantReleasesRequest\x12'\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\x12,\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x00R\tclusterId\x88\x01\x01B\r\n" +
	"\v_cluster_id\"Z\n" +
	"\x1aListQdrantReleasesResponse\x12<\n" +
	"\x05items\x18\x01 \x03(\v2&.qdrant.cloud.cluster.v1.QdrantReleaseR\x05items\"\xb4\a\n" +
	"\aCluster\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x129\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12'\n" +
	"\n" +
	"account_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\x12/\n" +
	"\x04name\x18\x04 \x01(\tB\x1b\xbaH\x18r\x16\x10\x04\x18@2\x10^[a-zA-Z0-9-_]+$R\x04name\x129\n" +
	"\n" +
	"deleted_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tdeletedAt\x123\n" +
	"\x11cloud_provider_id\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x03R\x0fcloudProviderId\x12@\n" +
	"\x18cloud_provider_region_id\x18\v \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x15cloudProviderRegionId\x12[\n" +
	"\rconfiguration\x18\x14 \x01(\v2-.qdrant.cloud.cluster.v1.ClusterConfigurationB\x06\xbaH\x03\xc8\x01\x01R\rconfiguration\x12;\n" +
	"\x05state\x18d \x01(\v2%.qdrant.cloud.cluster.v1.ClusterStateR\x05state:\xb7\x03\xbaH\xb3\x03\x1a\xa3\x01\n" +
	"\n" +
	"cluster.id\x12\x1avalue must be a valid UUID\x1aythis.id.matches('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') || !has(this.created_at)\x1a\x8a\x02\n" +
	" cluster.cloud_provider_region_id\x12Hcloud_provider_region_id must be a UUID if cloud_provider_id is 'hybrid'\x1a\x9b\x01this.cloud_provider_region_id.matches('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') || this.cloud_provider_id!= 'hybrid'\"\xfa\f\n" +
	"\x14ClusterConfiguration\x12D\n" +
	"\x10last_modified_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x0elastModifiedAt\x121\n" +
	"\x0fnumber_of_nodes\x18\x02 \x01(\rB\t\xbaH\x06*\x04\x18\x14(\x01R\rnumberOfNodes\x12E\n" +
	"\aversion\x18\x03 \x01(\tB&\xbaH#r!2\x1f^(v(\\d+)\\.(\\d+)\\.(\\d+)|latest)$H\x00R\aversion\x88\x01\x01\x12'\n" +
	"\n" +
	"package_id\x18\x04 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\tpackageId\x12d\n" +
	"\x14additional_resources\x18\x05 \x01(\v2,.qdrant.cloud.cluster.v1.AdditionalResourcesH\x01R\x13additionalResources\x88\x01\x01\x12j\n" +
	"\x16database_configuration\x18\a \x01(\v2..qdrant.cloud.cluster.v1.DatabaseConfigurationH\x02R\x15databaseConfiguration\x88\x01\x01\x12O\n" +
	"\rnode_selector\x18\b \x03(\v2 .qdrant.cloud.common.v1.KeyValueB\b\xbaH\x05\x92\x01\x02\x10\n" +
	"R\fnodeSelector\x12O\n" +
	"\vtolerations\x18\t \x03(\v2#.qdrant.cloud.cluster.v1.TolerationB\b\xbaH\x05\x92\x01\x02\x10\n" +
	"R\vtolerations\x12L\n" +
	"\vannotations\x18\n" +
	" \x03(\v2 .qdrant.cloud.common.v1.KeyValueB\b\xbaH\x05\x92\x01\x02\x10\n" +
	"R\vannotations\x12H\n" +
	"\x18allowed_ip_source_ranges\x18\v \x03(\tB\x0f\xbaH\f\x92\x01\t\x10\x14\"\x05r\x03\xf0\x01\x01R\x15allowedIpSourceRanges\x12_\n" +
	"\fservice_type\x18\f \x01(\x0e2+.qdrant.cloud.cluster.v1.ClusterServiceTypeB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00H\x03R\vserviceType\x88\x01\x01\x12[\n" +
	"\x13service_annotations\x18\r \x03(\v2 .qdrant.cloud.common.v1.KeyValueB\b\xbaH\x05\x92\x01\x02\x10\n" +
	"R\x12serviceAnnotations\x12I\n" +
	"\n" +
	"pod_labels\x18\x0e \x03(\v2 .qdrant.cloud.common.v1.KeyValueB\b\xbaH\x05\x92\x01\x02\x10\n" +
	"R\tpodLabels\x12?\n" +
	"\x17reserved_cpu_percentage\x18\x14 \x01(\rB\a\xbaH\x04*\x02\x18PR\x15reservedCpuPercentage\x12E\n" +
	"\x1areserved_memory_percentage\x18\x15 \x01(\rB\a\xbaH\x04*\x02\x18PR\x18reservedMemoryPercentage\x12`\n" +
	"\bgpu_type\x18\x16 \x01(\x0e24.qdrant.cloud.cluster.v1.ClusterConfigurationGpuTypeB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00H\x04R\agpuType\x88\x01\x01\x12r\n" +
	"\x0erestart_policy\x18\x17 \x01(\x0e2:.qdrant.cloud.cluster.v1.ClusterConfigurationRestartPolicyB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00H\x05R\rrestartPolicy\x88\x01\x01\x12~\n" +
	"\x12rebalance_strategy\x18\x18 \x01(\x0e2>.qdrant.cloud.cluster.v1.ClusterConfigurationRebalanceStrategyB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00H\x06R\x11rebalanceStrategy\x88\x01\x01B\n" +
	"\n" +
	"\b_versionB\x17\n" +
	"\x15_additional_resourcesB\x19\n" +
	"\x17_database_configurationB\x0f\n" +
	"\r_service_typeB\v\n" +
	"\t_gpu_typeB\x11\n" +
	"\x0f_restart_policyB\x15\n" +
	"\x13_rebalance_strategy\"\xf9\x04\n" +
	"\x15DatabaseConfiguration\x12]\n" +
	"\n" +
	"collection\x18\x01 \x01(\v28.qdrant.cloud.cluster.v1.DatabaseConfigurationCollectionH\x00R\n" +
	"collection\x88\x01\x01\x12T\n" +
	"\astorage\x18\x02 \x01(\v25.qdrant.cloud.cluster.v1.DatabaseConfigurationStorageH\x01R\astorage\x88\x01\x01\x12T\n" +
	"\aservice\x18\x03 \x01(\v25.qdrant.cloud.cluster.v1.DatabaseConfigurationServiceH\x02R\aservice\x88\x01\x01\x12d\n" +
	"\tlog_level\x18\x04 \x01(\x0e26.qdrant.cloud.cluster.v1.DatabaseConfigurationLogLevelB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00H\x03R\blogLevel\x88\x01\x01\x12H\n" +
	"\x03tls\x18\x05 \x01(\v21.qdrant.cloud.cluster.v1.DatabaseConfigurationTlsH\x04R\x03tls\x88\x01\x01\x12Z\n" +
	"\tinference\x18\x06 \x01(\v27.qdrant.cloud.cluster.v1.DatabaseConfigurationInferenceH\x05R\tinference\x88\x01\x01B\r\n" +
	"\v_collectionB\n" +
	"\n" +
	"\b_storageB\n" +
	"\n" +
	"\b_serviceB\f\n" +
	"\n" +
	"_log_levelB\x06\n" +
	"\x04_tlsB\f\n" +
	"\n" +
	"_inference\"\x9b\x02\n" +
	"\x1fDatabaseConfigurationCollection\x12;\n" +
	"\x12replication_factor\x18\x01 \x01(\rB\a\xbaH\x04*\x02(\x01H\x00R\x11replicationFactor\x88\x01\x01\x12A\n" +
	"\x18write_consistency_factor\x18\x02 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\x16writeConsistencyFactor\x12a\n" +
	"\avectors\x18\x03 \x01(\v2?.qdrant.cloud.cluster.v1.DatabaseConfigurationCollectionVectorsB\x06\xbaH\x03\xc8\x01\x01R\avectorsB\x15\n" +
	"\x13_replication_factor\"R\n" +
	"&DatabaseConfigurationCollectionVectors\x12\x1c\n" +
	"\aon_disk\x18\x01 \x01(\bH\x00R\x06onDisk\x88\x01\x01B\n" +
	"\n" +
	"\b_on_disk\"\x82\x01\n" +
	"\x1cDatabaseConfigurationStorage\x12b\n" +
	"\vperformance\x18\x01 \x01(\v2@.qdrant.cloud.cluster.v1.DatabaseConfigurationStoragePerformanceR\vperformance\"~\n" +
	"'DatabaseConfigurationStoragePerformance\x120\n" +
	"\x14optimizer_cpu_budget\x18\x01 \x01(\x05R\x12optimizerCpuBudget\x12!\n" +
	"\fasync_scorer\x18\x02 \x01(\bR\vasyncScorer\"\x94\x02\n" +
	"\x1cDatabaseConfigurationService\x12B\n" +
	"\aapi_key\x18\x01 \x01(\v2$.qdrant.cloud.common.v1.SecretKeyRefH\x00R\x06apiKey\x88\x01\x01\x12T\n" +
	"\x11read_only_api_key\x18\x02 \x01(\v2$.qdrant.cloud.common.v1.SecretKeyRefH\x01R\x0ereadOnlyApiKey\x88\x01\x01\x12\x19\n" +
	"\bjwt_rbac\x18\x03 \x01(\bR\ajwtRbac\x12\x1d\n" +
	"\n" +
	"enable_tls\x18\x04 \x01(\bR\tenableTlsB\n" +
	"\n" +
	"\b_api_keyB\x14\n" +
	"\x12_read_only_api_key\"\x9c\x01\n" +
	"\x18DatabaseConfigurationTls\x12@\n" +
	"\x04cert\x18\x01 \x01(\v2$.qdrant.cloud.common.v1.SecretKeyRefB\x06\xbaH\x03\xc8\x01\x01R\x04cert\x12>\n" +
	"\x03key\x18\x02 \x01(\v2$.qdrant.cloud.common.v1.SecretKeyRefB\x06\xbaH\x03\xc8\x01\x01R\x03key\":\n" +
	"\x1eDatabaseConfigurationInference\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\")\n" +
	"\x13AdditionalResources\x12\x12\n" +
	"\x04disk\x18\x03 \x01(\rR\x04disk\"\x86\x03\n" +
	"\n" +
	"Toleration\x12H\n" +
	"\x03key\x18\x01 \x01(\tB6\xbaH3r1\x18?2-^([a-zA-Z0-9]([-a-zA-Z0-9_.]*[a-zA-Z0-9])?)?$R\x03key\x12X\n" +
	"\boperator\x18\x02 \x01(\x0e2+.qdrant.cloud.cluster.v1.TolerationOperatorB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00H\x00R\boperator\x88\x01\x01\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x12R\n" +
	"\x06effect\x18\x04 \x01(\x0e2).qdrant.cloud.cluster.v1.TolerationEffectB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00H\x01R\x06effect\x88\x01\x01\x12;\n" +
	"\x12toleration_seconds\x18\x05 \x01(\x04B\a\xbaH\x042\x02(\x00H\x02R\x11tolerationSeconds\x88\x01\x01B\v\n" +
	"\t_operatorB\t\n" +
	"\a_effectB\x15\n" +
	"\x13_toleration_seconds\"\xb8\x04\n" +
	"\fClusterState\x12!\n" +
	"\aversion\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\aversion\x12\x19\n" +
	"\bnodes_up\x18\x02 \x01(\rR\anodesUp\x12=\n" +
	"\frestarted_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\vrestartedAt\x12E\n" +
	"\x05phase\x18\x04 \x01(\x0e2%.qdrant.cloud.cluster.v1.ClusterPhaseB\b\xbaH\x05\x82\x01\x02\x10\x01R\x05phase\x12\x16\n" +
	"\x06reason\x18\x05 \x01(\tR\x06reason\x12L\n" +
	"\bendpoint\x18\x06 \x01(\v2(.qdrant.cloud.cluster.v1.ClusterEndpointB\x06\xbaH\x03\xc8\x01\x01R\bendpoint\x12Z\n" +
	"\tresources\x18\a \x01(\v24.qdrant.cloud.cluster.v1.ClusterNodeResourcesSummaryB\x06\xbaH\x03\xc8\x01\x01R\tresources\x12b\n" +
	"\x10scalability_info\x18\b \x01(\v2/.qdrant.cloud.cluster.v1.ClusterScalabilityInfoB\x06\xbaH\x03\xc8\x01\x01R\x0fscalabilityInfo\x12>\n" +
	"\x05nodes\x18\t \x03(\v2(.qdrant.cloud.cluster.v1.ClusterNodeInfoR\x05nodes\"\x94\x02\n" +
	"\x0fClusterNodeInfo\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x129\n" +
	"\n" +
	"started_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12D\n" +
	"\bendpoint\x18\x04 \x01(\v2(.qdrant.cloud.cluster.v1.ClusterEndpointR\bendpoint\x12I\n" +
	"\x05state\x18\n" +
	" \x01(\x0e2).qdrant.cloud.cluster.v1.ClusterNodeStateB\b\xbaH\x05\x82\x01\x02\x10\x01R\x05state\"y\n" +
	"\x0fClusterEndpoint\x12\x1a\n" +
	"\x03url\x18\x01 \x01(\tB\b\xbaH\x05r\x03\x88\x01\x01R\x03url\x12$\n" +
	"\trest_port\x18\x02 \x01(\x05B\a\xbaH\x04\x1a\x02 \x00R\brestPort\x12$\n" +
	"\tgrpc_port\x18\x03 \x01(\x05B\a\xbaH\x04\x1a\x02 \x00R\bgrpcPort\"\xfa\x01\n" +
	"\x1bClusterNodeResourcesSummary\x12I\n" +
	"\x04disk\x18\x01 \x01(\v2-.qdrant.cloud.cluster.v1.ClusterNodeResourcesB\x06\xbaH\x03\xc8\x01\x01R\x04disk\x12G\n" +
	"\x03ram\x18\x02 \x01(\v2-.qdrant.cloud.cluster.v1.ClusterNodeResourcesB\x06\xbaH\x03\xc8\x01\x01R\x03ram\x12G\n" +
	"\x03cpu\x18\x03 \x01(\v2-.qdrant.cloud.cluster.v1.ClusterNodeResourcesB\x06\xbaH\x03\xc8\x01\x01R\x03cpu\"\xfa\x01\n" +
	"\x14ClusterNodeResources\x12\"\n" +
	"\x04base\x18\x01 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\x04base\x124\n" +
	"\rcomplimentary\x18\x02 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\rcomplimentary\x12.\n" +
	"\n" +
	"additional\x18\x03 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\n" +
	"additional\x12*\n" +
	"\breserved\x18\x04 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\breserved\x12,\n" +
	"\tavailable\x18\x05 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\tavailable\"\xa0\x01\n" +
	"\x16ClusterScalabilityInfo\x12U\n" +
	"\x06status\x18\x01 \x01(\x0e21.qdrant.cloud.cluster.v1.ClusterScalabilityStatusB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00R\x06status\x12$\n" +
	"\x06reason\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01H\x00R\x06reason\x88\x01\x01B\t\n" +
	"\a_reason\"\x93\x02\n" +
	"\rQdrantRelease\x12!\n" +
	"\aversion\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\aversion\x12\x18\n" +
	"\adefault\x18\x02 \x01(\bR\adefault\x129\n" +
	"\x11release_notes_url\x18\x03 \x01(\tB\b\xbaH\x05r\x03\x88\x01\x01H\x00R\x0freleaseNotesUrl\x88\x01\x01\x12&\n" +
	"\aremarks\x18\x04 \x01(\tB\a\xbaH\x04r\x02\x10\x01H\x01R\aremarks\x88\x01\x01\x12\x1e\n" +
	"\vend_of_life\x18\x05 \x01(\bR\tendOfLife\x12 \n" +
	"\vunavailable\x18\x06 \x01(\bR\vunavailableB\x14\n" +
	"\x12_release_notes_urlB\n" +
	"\n" +
	"\b_remarks\"\xb0\x01\n" +
	"\x1eCreateClusterFromBackupRequest\x12'\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\x12%\n" +
	"\tbackup_id\x18\x02 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\bbackupId\x12>\n" +
	"\fcluster_name\x18\x03 \x01(\tB\x1b\xbaH\x18r\x16\x10\x04\x18@2\x10^[a-zA-Z0-9-_]+$R\vclusterName\"e\n" +
	"\x1fCreateClusterFromBackupResponse\x12B\n" +
	"\acluster\x18\x01 \x01(\v2 .qdrant.cloud.cluster.v1.ClusterB\x06\xbaH\x03\xc8\x01\x01R\acluster*\xab\x01\n" +
	"\x12ClusterServiceType\x12$\n" +
	" CLUSTER_SERVICE_TYPE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fCLUSTER_SERVICE_TYPE_CLUSTER_IP\x10\x01\x12\"\n" +
	"\x1eCLUSTER_SERVICE_TYPE_NODE_PORT\x10\x02\x12&\n" +
	"\"CLUSTER_SERVICE_TYPE_LOAD_BALANCER\x10\x03*\xa0\x01\n" +
	"\x1bClusterConfigurationGpuType\x12.\n" +
	"*CLUSTER_CONFIGURATION_GPU_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%CLUSTER_CONFIGURATION_GPU_TYPE_NVIDIA\x10\x01\x12&\n" +
	"\"CLUSTER_CONFIGURATION_GPU_TYPE_AMD\x10\x02*\xf2\x01\n" +
	"!ClusterConfigurationRestartPolicy\x124\n" +
	"0CLUSTER_CONFIGURATION_RESTART_POLICY_UNSPECIFIED\x10\x00\x120\n" +
	",CLUSTER_CONFIGURATION_RESTART_POLICY_ROLLING\x10\x01\x121\n" +
	"-CLUSTER_CONFIGURATION_RESTART_POLICY_PARALLEL\x10\x02\x122\n" +
	".CLUSTER_CONFIGURATION_RESTART_POLICY_AUTOMATIC\x10\x03*\x8e\x02\n" +
	"%ClusterConfigurationRebalanceStrategy\x128\n" +
	"4CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_UNSPECIFIED\x10\x00\x125\n" +
	"1CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_COUNT\x10\x01\x124\n" +
	"0CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_SIZE\x10\x02\x12>\n" +
	":CLUSTER_CONFIGURATION_REBALANCE_STRATEGY_BY_COUNT_AND_SIZE\x10\x03*\xd5\x02\n" +
	"\x1dDatabaseConfigurationLogLevel\x120\n" +
	",DATABASE_CONFIGURATION_LOG_LEVEL_UNSPECIFIED\x10\x00\x12*\n" +
	"&DATABASE_CONFIGURATION_LOG_LEVEL_TRACE\x10\x01\x12*\n" +
	"&DATABASE_CONFIGURATION_LOG_LEVEL_DEBUG\x10\x02\x12)\n" +
	"%DATABASE_CONFIGURATION_LOG_LEVEL_INFO\x10\x03\x12)\n" +
	"%DATABASE_CONFIGURATION_LOG_LEVEL_WARN\x10\x04\x12*\n" +
	"&DATABASE_CONFIGURATION_LOG_LEVEL_ERROR\x10\x05\x12(\n" +
	"$DATABASE_CONFIGURATION_LOG_LEVEL_OFF\x10\x06*x\n" +
	"\x12TolerationOperator\x12#\n" +
	"\x1fTOLERATION_OPERATOR_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aTOLERATION_OPERATOR_EXISTS\x10\x01\x12\x1d\n" +
	"\x19TOLERATION_OPERATOR_EQUAL\x10\x02*\xa4\x01\n" +
	"\x10TolerationEffect\x12!\n" +
	"\x1dTOLERATION_EFFECT_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dTOLERATION_EFFECT_NO_SCHEDULE\x10\x01\x12(\n" +
	"$TOLERATION_EFFECT_PREFER_NO_SCHEDULE\x10\x02\x12 \n" +
	"\x1cTOLERATION_EFFECT_NO_EXECUTE\x10\x03*\xdf\x04\n" +
	"\fClusterPhase\x12\x1d\n" +
	"\x19CLUSTER_PHASE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CLUSTER_PHASE_CREATING\x10\x01\x12\"\n" +
	"\x1eCLUSTER_PHASE_FAILED_TO_CREATE\x10\x02\x12\x1a\n" +
	"\x16CLUSTER_PHASE_UPDATING\x10\x03\x12\"\n" +
	"\x1eCLUSTER_PHASE_FAILED_TO_UPDATE\x10\x04\x12\x19\n" +
	"\x15CLUSTER_PHASE_SCALING\x10\x05\x12\x1b\n" +
	"\x17CLUSTER_PHASE_UPGRADING\x10\x06\x12\x1c\n" +
	"\x18CLUSTER_PHASE_SUSPENDING\x10\a\x12\x1b\n" +
	"\x17CLUSTER_PHASE_SUSPENDED\x10\b\x12#\n" +
	"\x1fCLUSTER_PHASE_FAILED_TO_SUSPEND\x10\t\x12\x1a\n" +
	"\x16CLUSTER_PHASE_RESUMING\x10\n" +
	"\x12\"\n" +
	"\x1eCLUSTER_PHASE_FAILED_TO_RESUME\x10\v\x12\x19\n" +
	"\x15CLUSTER_PHASE_HEALTHY\x10\f\x12\x1b\n" +
	"\x17CLUSTER_PHASE_NOT_READY\x10\r\x12\x1f\n" +
	"\x1bCLUSTER_PHASE_RECOVERY_MODE\x10\x0e\x12$\n" +
	" CLUSTER_PHASE_MANUAL_MAINTENANCE\x10\x0f\x12 \n" +
	"\x1cCLUSTER_PHASE_FAILED_TO_SYNC\x10\x10\x12\x1b\n" +
	"\x17CLUSTER_PHASE_NOT_FOUND\x10\x11\x12\x1a\n" +
	"\x16CLUSTER_PHASE_DELETING\x10\x12*\xbb\x01\n" +
	"\x10ClusterNodeState\x12\"\n" +
	"\x1eCLUSTER_NODE_STATE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bCLUSTER_NODE_STATE_STARTING\x10\x01\x12\x1e\n" +
	"\x1aCLUSTER_NODE_STATE_HEALTHY\x10\x02\x12 \n" +
	"\x1cCLUSTER_NODE_STATE_UNHEALTHY\x10\x03\x12 \n" +
	"\x1cCLUSTER_NODE_STATE_SUSPENDED\x10\x04*\x9c\x01\n" +
	"\x18ClusterScalabilityStatus\x12*\n" +
	"&CLUSTER_SCALABILITY_STATUS_UNSPECIFIED\x10\x00\x12+\n" +
	"'CLUSTER_SCALABILITY_STATUS_NOT_SCALABLE\x10\x01\x12'\n" +
	"#CLUSTER_SCALABILITY_STATUS_SCALABLE\x10\x022\x9c\x17\n" +
	"\x0eClusterService\x12\xb4\x01\n" +
	"\fListClusters\x12,.qdrant.cloud.cluster.v1.ListClustersRequest\x1a-.qdrant.cloud.cluster.v1.ListClustersResponse\"G\x8a\xb5\x18\rread:clusters\x82\xd3\xe4\x93\x020\x12./api/cluster/v1/accounts/{account_id}/clusters\x12\xd7\x01\n" +
	"\n" +
	"GetCluster\x12*.qdrant.cloud.cluster.v1.GetClusterRequest\x1a+.qdrant.cloud.cluster.v1.GetClusterResponse\"p\x8a\xb5\x18\rread:clusters\xba\xb5\x18\x18\n" +
	"\n" +
	"cluster_id\x12\n" +
	"cluster_id\x82\xd3\xe4\x93\x02=\x12;/api/cluster/v1/accounts/{account_id}/clusters/{cluster_id}\x12\xd9\x02\n" +
	"\rCreateCluster\x12-.qdrant.cloud.cluster.v1.CreateClusterRequest\x1a..qdrant.cloud.cluster.v1.CreateClusterResponse\"\xe8\x01\x8a\xb5\x18\x0ewrite:clusters\x92\xb5\x18\x12cluster.account_id\xba\xb5\x18\x1c\n" +
	"\fcluster_name\x12\fcluster.name\xca\xf3\x18[\b\x01\x12\acluster\"\x0fresp.cluster.id*=/accounts/{req.cluster.account_id}/clusters/{resp.cluster.id}\x82\xd3\xe4\x93\x02;:\x01*\"6/api/cluster/v1/accounts/{cluster.account_id}/clusters\x12\xb4\x03\n" +
	"\x17CreateClusterFromBackup\x127.qdrant.cloud.cluster.v1.CreateClusterFromBackupRequest\x1a8.qdrant.cloud.cluster.v1.CreateClusterFromBackupResponse\"\xa5\x02\x8a\xb5\x18\x0frestore:backups\x8a\xb5\x18\x0ewrite:clusters\xa8\xb5\x18\x01\xba\xb5\x18\x16\n" +
	"\tbackup_id\x12\tbackup_id\xba\xb5\x18\x1c\n" +
	"\fcluster_name\x12\fcluster_name\xca\xf3\x18t\b\x01\x12\acluster\"\x0fresp.cluster.id*5/accounts/{req.account_id}/clusters/{resp.cluster.id}R\x1f\n" +
	"\x0efrom_backup_id\x12\rreq.backup_id\x82\xd3\xe4\x93\x02D\"B/api/cluster/v1/accounts/{account_id}/backups/{backup_id}/clusters\x12\xe0\x02\n" +
	"\rUpdateCluster\x12-.qdrant.cloud.cluster.v1.UpdateClusterRequest\x1a..qdrant.cloud.cluster.v1.UpdateClusterResponse\"\xef\x01\x8a\xb5\x18\x0ewrite:clusters\x92\xb5\x18\x12cluster.account_id\xba\xb5\x18\x18\n" +
	"\n" +
	"cluster_id\x12\n" +
	"cluster.id\xca\xf3\x18Y\b\x02\x12\acluster\"\x0ereq.cluster.id*</accounts/{req.cluster.account_id}/clusters/{req.cluster.id}\x82\xd3\xe4\x93\x02H:\x01*\x1aC/api/cluster/v1/accounts/{cluster.account_id}/clusters/{cluster.id}\x12\xb8\x02\n" +
	"\rDeleteCluster\x12-.qdrant.cloud.cluster.v1.DeleteClusterRequest\x1a..qdrant.cloud.cluster.v1.DeleteClusterResponse\"\xc7\x01\x8a\xb5\x18\x0fdelete:clusters\xba\xb5\x18\x18\n" +
	"\n" +
	"cluster_id\x12\n" +
	"cluster_id\xca\xf3\x18Q\b\x03\x12\acluster\"\x0ereq.cluster_id*4/accounts/{req.account_id}/clusters/{req.cluster_id}\x82\xd3\xe4\x93\x02=*;/api/cluster/v1/accounts/{account_id}/clusters/{cluster_id}\x12\xcb\x02\n" +
	"\x0eRestartCluster\x12..qdrant.cloud.cluster.v1.RestartClusterRequest\x1a/.qdrant.cloud.cluster.v1.RestartClusterResponse\"\xd7\x01\x8a\xb5\x18\x0ewrite:clusters\xba\xb5\x18\x18\n" +
	"\n" +
	"cluster_id\x12\n" +
	"cluster_id\xca\xf3\x18Z\b\x04\x12\acluster\"\x0ereq.cluster_id*4/accounts/{req.account_id}/clusters/{req.cluster_id}2\arestart\x82\xd3\xe4\x93\x02E\"C/api/cluster/v1/accounts/{account_id}/clusters/{cluster_id}/restart\x12\xcb\x02\n" +
	"\x0eSuspendCluster\x12..qdrant.cloud.cluster.v1.SuspendClusterRequest\x1a/.qdrant.cloud.cluster.v1.SuspendClusterResponse\"\xd7\x01\x8a\xb5\x18\x0ewrite:clusters\xba\xb5\x18\x18\n" +
	"\n" +
	"cluster_id\x12\n" +
	"cluster_id\xca\xf3\x18Z\b\x04\x12\acluster\"\x0ereq.cluster_id*4/accounts/{req.account_id}/clusters/{req.cluster_id}2\asuspend\x82\xd3\xe4\x93\x02E\"C/api/cluster/v1/accounts/{account_id}/clusters/{cluster_id}/suspend\x12\xc6\x01\n" +
	"\x12SuggestClusterName\x122.qdrant.cloud.cluster.v1.SuggestClusterNameRequest\x1a3.qdrant.cloud.cluster.v1.SuggestClusterNameResponse\"G\x8a\xb5\x18\x00\x82\xd3\xe4\x93\x02=\x12;/api/cluster/v1/accounts/{account_id}/clusters/suggest-name\x12\xe2\x01\n" +
	"\x12ListQdrantReleases\x122.qdrant.cloud.cluster.v1.ListQdrantReleasesRequest\x1a3.qdrant.cloud.cluster.v1.ListQdrantReleasesResponse\"c\x8a\xb5\x18\rread:clusters\xba\xb5\x18\x18\n" +
	"\n" +
	"cluster_id\x12\n" +
	"cluster_id\x82\xd3\xe4\x93\x020\x12./api/cluster/v1/accounts/{account_id}/releasesB\xfe\x01\n" +
	"\x1bcom.qdrant.cloud.cluster.v1B\fClusterProtoP\x01ZRgithub.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/cluster/v1;clusterv1\xa2\x02\x03QCC\xaa\x02\x17Qdrant.Cloud.Cluster.V1\xca\x02\x17Qdrant\\Cloud\\Cluster\\V1\xe2\x02#Qdrant\\Cloud\\Cluster\\V1\\GPBMetadata\xea\x02\x1aQdrant::Cloud::Cluster::V1b\x06proto3"

var (
	file_qdrant_cloud_cluster_v1_cluster_proto_rawDescOnce sync.Once
	file_qdrant_cloud_cluster_v1_cluster_proto_rawDescData []byte
)

func file_qdrant_cloud_cluster_v1_cluster_proto_rawDescGZIP() []byte {
	file_qdrant_cloud_cluster_v1_cluster_proto_rawDescOnce.Do(func() {
		file_qdrant_cloud_cluster_v1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qdrant_cloud_cluster_v1_cluster_proto_rawDesc), len(file_qdrant_cloud_cluster_v1_cluster_proto_rawDesc)))
	})
	return file_qdrant_cloud_cluster_v1_cluster_proto_rawDescData
}

var file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_qdrant_cloud_cluster_v1_cluster_proto_goTypes = []any{
	(ClusterServiceType)(0),                         // 0: qdrant.cloud.cluster.v1.ClusterServiceType
	(ClusterConfigurationGpuType)(0),                // 1: qdrant.cloud.cluster.v1.ClusterConfigurationGpuType
	(ClusterConfigurationRestartPolicy)(0),          // 2: qdrant.cloud.cluster.v1.ClusterConfigurationRestartPolicy
	(ClusterConfigurationRebalanceStrategy)(0),      // 3: qdrant.cloud.cluster.v1.ClusterConfigurationRebalanceStrategy
	(DatabaseConfigurationLogLevel)(0),              // 4: qdrant.cloud.cluster.v1.DatabaseConfigurationLogLevel
	(TolerationOperator)(0),                         // 5: qdrant.cloud.cluster.v1.TolerationOperator
	(TolerationEffect)(0),                           // 6: qdrant.cloud.cluster.v1.TolerationEffect
	(ClusterPhase)(0),                               // 7: qdrant.cloud.cluster.v1.ClusterPhase
	(ClusterNodeState)(0),                           // 8: qdrant.cloud.cluster.v1.ClusterNodeState
	(ClusterScalabilityStatus)(0),                   // 9: qdrant.cloud.cluster.v1.ClusterScalabilityStatus
	(*ListClustersRequest)(nil),                     // 10: qdrant.cloud.cluster.v1.ListClustersRequest
	(*ListClustersResponse)(nil),                    // 11: qdrant.cloud.cluster.v1.ListClustersResponse
	(*GetClusterRequest)(nil),                       // 12: qdrant.cloud.cluster.v1.GetClusterRequest
	(*GetClusterResponse)(nil),                      // 13: qdrant.cloud.cluster.v1.GetClusterResponse
	(*CreateClusterRequest)(nil),                    // 14: qdrant.cloud.cluster.v1.CreateClusterRequest
	(*CreateClusterResponse)(nil),                   // 15: qdrant.cloud.cluster.v1.CreateClusterResponse
	(*UpdateClusterRequest)(nil),                    // 16: qdrant.cloud.cluster.v1.UpdateClusterRequest
	(*UpdateClusterResponse)(nil),                   // 17: qdrant.cloud.cluster.v1.UpdateClusterResponse
	(*DeleteClusterRequest)(nil),                    // 18: qdrant.cloud.cluster.v1.DeleteClusterRequest
	(*DeleteClusterResponse)(nil),                   // 19: qdrant.cloud.cluster.v1.DeleteClusterResponse
	(*RestartClusterRequest)(nil),                   // 20: qdrant.cloud.cluster.v1.RestartClusterRequest
	(*RestartClusterResponse)(nil),                  // 21: qdrant.cloud.cluster.v1.RestartClusterResponse
	(*SuspendClusterRequest)(nil),                   // 22: qdrant.cloud.cluster.v1.SuspendClusterRequest
	(*SuspendClusterResponse)(nil),                  // 23: qdrant.cloud.cluster.v1.SuspendClusterResponse
	(*SuggestClusterNameRequest)(nil),               // 24: qdrant.cloud.cluster.v1.SuggestClusterNameRequest
	(*SuggestClusterNameResponse)(nil),              // 25: qdrant.cloud.cluster.v1.SuggestClusterNameResponse
	(*ListQdrantReleasesRequest)(nil),               // 26: qdrant.cloud.cluster.v1.ListQdrantReleasesRequest
	(*ListQdrantReleasesResponse)(nil),              // 27: qdrant.cloud.cluster.v1.ListQdrantReleasesResponse
	(*Cluster)(nil),                                 // 28: qdrant.cloud.cluster.v1.Cluster
	(*ClusterConfiguration)(nil),                    // 29: qdrant.cloud.cluster.v1.ClusterConfiguration
	(*DatabaseConfiguration)(nil),                   // 30: qdrant.cloud.cluster.v1.DatabaseConfiguration
	(*DatabaseConfigurationCollection)(nil),         // 31: qdrant.cloud.cluster.v1.DatabaseConfigurationCollection
	(*DatabaseConfigurationCollectionVectors)(nil),  // 32: qdrant.cloud.cluster.v1.DatabaseConfigurationCollectionVectors
	(*DatabaseConfigurationStorage)(nil),            // 33: qdrant.cloud.cluster.v1.DatabaseConfigurationStorage
	(*DatabaseConfigurationStoragePerformance)(nil), // 34: qdrant.cloud.cluster.v1.DatabaseConfigurationStoragePerformance
	(*DatabaseConfigurationService)(nil),            // 35: qdrant.cloud.cluster.v1.DatabaseConfigurationService
	(*DatabaseConfigurationTls)(nil),                // 36: qdrant.cloud.cluster.v1.DatabaseConfigurationTls
	(*DatabaseConfigurationInference)(nil),          // 37: qdrant.cloud.cluster.v1.DatabaseConfigurationInference
	(*AdditionalResources)(nil),                     // 38: qdrant.cloud.cluster.v1.AdditionalResources
	(*Toleration)(nil),                              // 39: qdrant.cloud.cluster.v1.Toleration
	(*ClusterState)(nil),                            // 40: qdrant.cloud.cluster.v1.ClusterState
	(*ClusterNodeInfo)(nil),                         // 41: qdrant.cloud.cluster.v1.ClusterNodeInfo
	(*ClusterEndpoint)(nil),                         // 42: qdrant.cloud.cluster.v1.ClusterEndpoint
	(*ClusterNodeResourcesSummary)(nil),             // 43: qdrant.cloud.cluster.v1.ClusterNodeResourcesSummary
	(*ClusterNodeResources)(nil),                    // 44: qdrant.cloud.cluster.v1.ClusterNodeResources
	(*ClusterScalabilityInfo)(nil),                  // 45: qdrant.cloud.cluster.v1.ClusterScalabilityInfo
	(*QdrantRelease)(nil),                           // 46: qdrant.cloud.cluster.v1.QdrantRelease
	(*CreateClusterFromBackupRequest)(nil),          // 47: qdrant.cloud.cluster.v1.CreateClusterFromBackupRequest
	(*CreateClusterFromBackupResponse)(nil),         // 48: qdrant.cloud.cluster.v1.CreateClusterFromBackupResponse
	(*timestamppb.Timestamp)(nil),                   // 49: google.protobuf.Timestamp
	(*v1.KeyValue)(nil),                             // 50: qdrant.cloud.common.v1.KeyValue
	(*v1.SecretKeyRef)(nil),                         // 51: qdrant.cloud.common.v1.SecretKeyRef
}
var file_qdrant_cloud_cluster_v1_cluster_proto_depIdxs = []int32{
	28, // 0: qdrant.cloud.cluster.v1.ListClustersResponse.items:type_name -> qdrant.cloud.cluster.v1.Cluster
	28, // 1: qdrant.cloud.cluster.v1.GetClusterResponse.cluster:type_name -> qdrant.cloud.cluster.v1.Cluster
	28, // 2: qdrant.cloud.cluster.v1.CreateClusterRequest.cluster:type_name -> qdrant.cloud.cluster.v1.Cluster
	28, // 3: qdrant.cloud.cluster.v1.CreateClusterResponse.cluster:type_name -> qdrant.cloud.cluster.v1.Cluster
	28, // 4: qdrant.cloud.cluster.v1.UpdateClusterRequest.cluster:type_name -> qdrant.cloud.cluster.v1.Cluster
	28, // 5: qdrant.cloud.cluster.v1.UpdateClusterResponse.cluster:type_name -> qdrant.cloud.cluster.v1.Cluster
	46, // 6: qdrant.cloud.cluster.v1.ListQdrantReleasesResponse.items:type_name -> qdrant.cloud.cluster.v1.QdrantRelease
	49, // 7: qdrant.cloud.cluster.v1.Cluster.created_at:type_name -> google.protobuf.Timestamp
	49, // 8: qdrant.cloud.cluster.v1.Cluster.deleted_at:type_name -> google.protobuf.Timestamp
	29, // 9: qdrant.cloud.cluster.v1.Cluster.configuration:type_name -> qdrant.cloud.cluster.v1.ClusterConfiguration
	40, // 10: qdrant.cloud.cluster.v1.Cluster.state:type_name -> qdrant.cloud.cluster.v1.ClusterState
	49, // 11: qdrant.cloud.cluster.v1.ClusterConfiguration.last_modified_at:type_name -> google.protobuf.Timestamp
	38, // 12: qdrant.cloud.cluster.v1.ClusterConfiguration.additional_resources:type_name -> qdrant.cloud.cluster.v1.AdditionalResources
	30, // 13: qdrant.cloud.cluster.v1.ClusterConfiguration.database_configuration:type_name -> qdrant.cloud.cluster.v1.DatabaseConfiguration
	50, // 14: qdrant.cloud.cluster.v1.ClusterConfiguration.node_selector:type_name -> qdrant.cloud.common.v1.KeyValue
	39, // 15: qdrant.cloud.cluster.v1.ClusterConfiguration.tolerations:type_name -> qdrant.cloud.cluster.v1.Toleration
	50, // 16: qdrant.cloud.cluster.v1.ClusterConfiguration.annotations:type_name -> qdrant.cloud.common.v1.KeyValue
	0,  // 17: qdrant.cloud.cluster.v1.ClusterConfiguration.service_type:type_name -> qdrant.cloud.cluster.v1.ClusterServiceType
	50, // 18: qdrant.cloud.cluster.v1.ClusterConfiguration.service_annotations:type_name -> qdrant.cloud.common.v1.KeyValue
	50, // 19: qdrant.cloud.cluster.v1.ClusterConfiguration.pod_labels:type_name -> qdrant.cloud.common.v1.KeyValue
	1,  // 20: qdrant.cloud.cluster.v1.ClusterConfiguration.gpu_type:type_name -> qdrant.cloud.cluster.v1.ClusterConfigurationGpuType
	2,  // 21: qdrant.cloud.cluster.v1.ClusterConfiguration.restart_policy:type_name -> qdrant.cloud.cluster.v1.ClusterConfigurationRestartPolicy
	3,  // 22: qdrant.cloud.cluster.v1.ClusterConfiguration.rebalance_strategy:type_name -> qdrant.cloud.cluster.v1.ClusterConfigurationRebalanceStrategy
	31, // 23: qdrant.cloud.cluster.v1.DatabaseConfiguration.collection:type_name -> qdrant.cloud.cluster.v1.DatabaseConfigurationCollection
	33, // 24: qdrant.cloud.cluster.v1.DatabaseConfiguration.storage:type_name -> qdrant.cloud.cluster.v1.DatabaseConfigurationStorage
	35, // 25: qdrant.cloud.cluster.v1.DatabaseConfiguration.service:type_name -> qdrant.cloud.cluster.v1.DatabaseConfigurationService
	4,  // 26: qdrant.cloud.cluster.v1.DatabaseConfiguration.log_level:type_name -> qdrant.cloud.cluster.v1.DatabaseConfigurationLogLevel
	36, // 27: qdrant.cloud.cluster.v1.DatabaseConfiguration.tls:type_name -> qdrant.cloud.cluster.v1.DatabaseConfigurationTls
	37, // 28: qdrant.cloud.cluster.v1.DatabaseConfiguration.inference:type_name -> qdrant.cloud.cluster.v1.DatabaseConfigurationInference
	32, // 29: qdrant.cloud.cluster.v1.DatabaseConfigurationCollection.vectors:type_name -> qdrant.cloud.cluster.v1.DatabaseConfigurationCollectionVectors
	34, // 30: qdrant.cloud.cluster.v1.DatabaseConfigurationStorage.performance:type_name -> qdrant.cloud.cluster.v1.DatabaseConfigurationStoragePerformance
	51, // 31: qdrant.cloud.cluster.v1.DatabaseConfigurationService.api_key:type_name -> qdrant.cloud.common.v1.SecretKeyRef
	51, // 32: qdrant.cloud.cluster.v1.DatabaseConfigurationService.read_only_api_key:type_name -> qdrant.cloud.common.v1.SecretKeyRef
	51, // 33: qdrant.cloud.cluster.v1.DatabaseConfigurationTls.cert:type_name -> qdrant.cloud.common.v1.SecretKeyRef
	51, // 34: qdrant.cloud.cluster.v1.DatabaseConfigurationTls.key:type_name -> qdrant.cloud.common.v1.SecretKeyRef
	5,  // 35: qdrant.cloud.cluster.v1.Toleration.operator:type_name -> qdrant.cloud.cluster.v1.TolerationOperator
	6,  // 36: qdrant.cloud.cluster.v1.Toleration.effect:type_name -> qdrant.cloud.cluster.v1.TolerationEffect
	49, // 37: qdrant.cloud.cluster.v1.ClusterState.restarted_at:type_name -> google.protobuf.Timestamp
	7,  // 38: qdrant.cloud.cluster.v1.ClusterState.phase:type_name -> qdrant.cloud.cluster.v1.ClusterPhase
	42, // 39: qdrant.cloud.cluster.v1.ClusterState.endpoint:type_name -> qdrant.cloud.cluster.v1.ClusterEndpoint
	43, // 40: qdrant.cloud.cluster.v1.ClusterState.resources:type_name -> qdrant.cloud.cluster.v1.ClusterNodeResourcesSummary
	45, // 41: qdrant.cloud.cluster.v1.ClusterState.scalability_info:type_name -> qdrant.cloud.cluster.v1.ClusterScalabilityInfo
	41, // 42: qdrant.cloud.cluster.v1.ClusterState.nodes:type_name -> qdrant.cloud.cluster.v1.ClusterNodeInfo
	49, // 43: qdrant.cloud.cluster.v1.ClusterNodeInfo.started_at:type_name -> google.protobuf.Timestamp
	42, // 44: qdrant.cloud.cluster.v1.ClusterNodeInfo.endpoint:type_name -> qdrant.cloud.cluster.v1.ClusterEndpoint
	8,  // 45: qdrant.cloud.cluster.v1.ClusterNodeInfo.state:type_name -> qdrant.cloud.cluster.v1.ClusterNodeState
	44, // 46: qdrant.cloud.cluster.v1.ClusterNodeResourcesSummary.disk:type_name -> qdrant.cloud.cluster.v1.ClusterNodeResources
	44, // 47: qdrant.cloud.cluster.v1.ClusterNodeResourcesSummary.ram:type_name -> qdrant.cloud.cluster.v1.ClusterNodeResources
	44, // 48: qdrant.cloud.cluster.v1.ClusterNodeResourcesSummary.cpu:type_name -> qdrant.cloud.cluster.v1.ClusterNodeResources
	9,  // 49: qdrant.cloud.cluster.v1.ClusterScalabilityInfo.status:type_name -> qdrant.cloud.cluster.v1.ClusterScalabilityStatus
	28, // 50: qdrant.cloud.cluster.v1.CreateClusterFromBackupResponse.cluster:type_name -> qdrant.cloud.cluster.v1.Cluster
	10, // 51: qdrant.cloud.cluster.v1.ClusterService.ListClusters:input_type -> qdrant.cloud.cluster.v1.ListClustersRequest
	12, // 52: qdrant.cloud.cluster.v1.ClusterService.GetCluster:input_type -> qdrant.cloud.cluster.v1.GetClusterRequest
	14, // 53: qdrant.cloud.cluster.v1.ClusterService.CreateCluster:input_type -> qdrant.cloud.cluster.v1.CreateClusterRequest
	47, // 54: qdrant.cloud.cluster.v1.ClusterService.CreateClusterFromBackup:input_type -> qdrant.cloud.cluster.v1.CreateClusterFromBackupRequest
	16, // 55: qdrant.cloud.cluster.v1.ClusterService.UpdateCluster:input_type -> qdrant.cloud.cluster.v1.UpdateClusterRequest
	18, // 56: qdrant.cloud.cluster.v1.ClusterService.DeleteCluster:input_type -> qdrant.cloud.cluster.v1.DeleteClusterRequest
	20, // 57: qdrant.cloud.cluster.v1.ClusterService.RestartCluster:input_type -> qdrant.cloud.cluster.v1.RestartClusterRequest
	22, // 58: qdrant.cloud.cluster.v1.ClusterService.SuspendCluster:input_type -> qdrant.cloud.cluster.v1.SuspendClusterRequest
	24, // 59: qdrant.cloud.cluster.v1.ClusterService.SuggestClusterName:input_type -> qdrant.cloud.cluster.v1.SuggestClusterNameRequest
	26, // 60: qdrant.cloud.cluster.v1.ClusterService.ListQdrantReleases:input_type -> qdrant.cloud.cluster.v1.ListQdrantReleasesRequest
	11, // 61: qdrant.cloud.cluster.v1.ClusterService.ListClusters:output_type -> qdrant.cloud.cluster.v1.ListClustersResponse
	13, // 62: qdrant.cloud.cluster.v1.ClusterService.GetCluster:output_type -> qdrant.cloud.cluster.v1.GetClusterResponse
	15, // 63: qdrant.cloud.cluster.v1.ClusterService.CreateCluster:output_type -> qdrant.cloud.cluster.v1.CreateClusterResponse
	48, // 64: qdrant.cloud.cluster.v1.ClusterService.CreateClusterFromBackup:output_type -> qdrant.cloud.cluster.v1.CreateClusterFromBackupResponse
	17, // 65: qdrant.cloud.cluster.v1.ClusterService.UpdateCluster:output_type -> qdrant.cloud.cluster.v1.UpdateClusterResponse
	19, // 66: qdrant.cloud.cluster.v1.ClusterService.DeleteCluster:output_type -> qdrant.cloud.cluster.v1.DeleteClusterResponse
	21, // 67: qdrant.cloud.cluster.v1.ClusterService.RestartCluster:output_type -> qdrant.cloud.cluster.v1.RestartClusterResponse
	23, // 68: qdrant.cloud.cluster.v1.ClusterService.SuspendCluster:output_type -> qdrant.cloud.cluster.v1.SuspendClusterResponse
	25, // 69: qdrant.cloud.cluster.v1.ClusterService.SuggestClusterName:output_type -> qdrant.cloud.cluster.v1.SuggestClusterNameResponse
	27, // 70: qdrant.cloud.cluster.v1.ClusterService.ListQdrantReleases:output_type -> qdrant.cloud.cluster.v1.ListQdrantReleasesResponse
	61, // [61:71] is the sub-list for method output_type
	51, // [51:61] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_qdrant_cloud_cluster_v1_cluster_proto_init() }
func file_qdrant_cloud_cluster_v1_cluster_proto_init() {
	if File_qdrant_cloud_cluster_v1_cluster_proto != nil {
		return
	}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[0].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[8].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[16].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[19].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[20].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[21].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[22].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[25].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[29].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[35].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes[36].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qdrant_cloud_cluster_v1_cluster_proto_rawDesc), len(file_qdrant_cloud_cluster_v1_cluster_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qdrant_cloud_cluster_v1_cluster_proto_goTypes,
		DependencyIndexes: file_qdrant_cloud_cluster_v1_cluster_proto_depIdxs,
		EnumInfos:         file_qdrant_cloud_cluster_v1_cluster_proto_enumTypes,
		MessageInfos:      file_qdrant_cloud_cluster_v1_cluster_proto_msgTypes,
	}.Build()
	File_qdrant_cloud_cluster_v1_cluster_proto = out.File
	file_qdrant_cloud_cluster_v1_cluster_proto_goTypes = nil
	file_qdrant_cloud_cluster_v1_cluster_proto_depIdxs = nil
}
