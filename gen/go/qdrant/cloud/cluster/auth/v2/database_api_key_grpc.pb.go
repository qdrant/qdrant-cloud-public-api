// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qdrant/cloud/cluster/auth/v2/database_api_key.proto

package authv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseApiKeyService_ListDatabaseApiKeys_FullMethodName  = "/qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService/ListDatabaseApiKeys"
	DatabaseApiKeyService_CreateDatabaseApiKey_FullMethodName = "/qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService/CreateDatabaseApiKey"
	DatabaseApiKeyService_DeleteDatabaseApiKey_FullMethodName = "/qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService/DeleteDatabaseApiKey"
)

// DatabaseApiKeyServiceClient is the client API for DatabaseApiKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DatabaseApiKeyService is the API used to manage keys that give access to a cluster database.
type DatabaseApiKeyServiceClient interface {
	// Lists all database api keys in the account identified by the given ID.
	// Required permissions:
	// - read:api_keys
	ListDatabaseApiKeys(ctx context.Context, in *ListDatabaseApiKeysRequest, opts ...grpc.CallOption) (*ListDatabaseApiKeysResponse, error)
	// Creates a database api key in the account identified by the given ID.
	// Required permissions:
	// - write:api_keys
	CreateDatabaseApiKey(ctx context.Context, in *CreateDatabaseApiKeyRequest, opts ...grpc.CallOption) (*CreateDatabaseApiKeyResponse, error)
	// Deletes a database api key in the account identified by the given ID.
	// Required permissions:
	// - delete:api_keys
	DeleteDatabaseApiKey(ctx context.Context, in *DeleteDatabaseApiKeyRequest, opts ...grpc.CallOption) (*DeleteDatabaseApiKeyResponse, error)
}

type databaseApiKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseApiKeyServiceClient(cc grpc.ClientConnInterface) DatabaseApiKeyServiceClient {
	return &databaseApiKeyServiceClient{cc}
}

func (c *databaseApiKeyServiceClient) ListDatabaseApiKeys(ctx context.Context, in *ListDatabaseApiKeysRequest, opts ...grpc.CallOption) (*ListDatabaseApiKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatabaseApiKeysResponse)
	err := c.cc.Invoke(ctx, DatabaseApiKeyService_ListDatabaseApiKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseApiKeyServiceClient) CreateDatabaseApiKey(ctx context.Context, in *CreateDatabaseApiKeyRequest, opts ...grpc.CallOption) (*CreateDatabaseApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDatabaseApiKeyResponse)
	err := c.cc.Invoke(ctx, DatabaseApiKeyService_CreateDatabaseApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseApiKeyServiceClient) DeleteDatabaseApiKey(ctx context.Context, in *DeleteDatabaseApiKeyRequest, opts ...grpc.CallOption) (*DeleteDatabaseApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDatabaseApiKeyResponse)
	err := c.cc.Invoke(ctx, DatabaseApiKeyService_DeleteDatabaseApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseApiKeyServiceServer is the server API for DatabaseApiKeyService service.
// All implementations must embed UnimplementedDatabaseApiKeyServiceServer
// for forward compatibility.
//
// DatabaseApiKeyService is the API used to manage keys that give access to a cluster database.
type DatabaseApiKeyServiceServer interface {
	// Lists all database api keys in the account identified by the given ID.
	// Required permissions:
	// - read:api_keys
	ListDatabaseApiKeys(context.Context, *ListDatabaseApiKeysRequest) (*ListDatabaseApiKeysResponse, error)
	// Creates a database api key in the account identified by the given ID.
	// Required permissions:
	// - write:api_keys
	CreateDatabaseApiKey(context.Context, *CreateDatabaseApiKeyRequest) (*CreateDatabaseApiKeyResponse, error)
	// Deletes a database api key in the account identified by the given ID.
	// Required permissions:
	// - delete:api_keys
	DeleteDatabaseApiKey(context.Context, *DeleteDatabaseApiKeyRequest) (*DeleteDatabaseApiKeyResponse, error)
	mustEmbedUnimplementedDatabaseApiKeyServiceServer()
}

// UnimplementedDatabaseApiKeyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseApiKeyServiceServer struct{}

func (UnimplementedDatabaseApiKeyServiceServer) ListDatabaseApiKeys(context.Context, *ListDatabaseApiKeysRequest) (*ListDatabaseApiKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabaseApiKeys not implemented")
}
func (UnimplementedDatabaseApiKeyServiceServer) CreateDatabaseApiKey(context.Context, *CreateDatabaseApiKeyRequest) (*CreateDatabaseApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabaseApiKey not implemented")
}
func (UnimplementedDatabaseApiKeyServiceServer) DeleteDatabaseApiKey(context.Context, *DeleteDatabaseApiKeyRequest) (*DeleteDatabaseApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabaseApiKey not implemented")
}
func (UnimplementedDatabaseApiKeyServiceServer) mustEmbedUnimplementedDatabaseApiKeyServiceServer() {}
func (UnimplementedDatabaseApiKeyServiceServer) testEmbeddedByValue()                               {}

// UnsafeDatabaseApiKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseApiKeyServiceServer will
// result in compilation errors.
type UnsafeDatabaseApiKeyServiceServer interface {
	mustEmbedUnimplementedDatabaseApiKeyServiceServer()
}

func RegisterDatabaseApiKeyServiceServer(s grpc.ServiceRegistrar, srv DatabaseApiKeyServiceServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseApiKeyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseApiKeyService_ServiceDesc, srv)
}

func _DatabaseApiKeyService_ListDatabaseApiKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabaseApiKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseApiKeyServiceServer).ListDatabaseApiKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseApiKeyService_ListDatabaseApiKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseApiKeyServiceServer).ListDatabaseApiKeys(ctx, req.(*ListDatabaseApiKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseApiKeyService_CreateDatabaseApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseApiKeyServiceServer).CreateDatabaseApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseApiKeyService_CreateDatabaseApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseApiKeyServiceServer).CreateDatabaseApiKey(ctx, req.(*CreateDatabaseApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseApiKeyService_DeleteDatabaseApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatabaseApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseApiKeyServiceServer).DeleteDatabaseApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseApiKeyService_DeleteDatabaseApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseApiKeyServiceServer).DeleteDatabaseApiKey(ctx, req.(*DeleteDatabaseApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseApiKeyService_ServiceDesc is the grpc.ServiceDesc for DatabaseApiKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseApiKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService",
	HandlerType: (*DatabaseApiKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatabaseApiKeys",
			Handler:    _DatabaseApiKeyService_ListDatabaseApiKeys_Handler,
		},
		{
			MethodName: "CreateDatabaseApiKey",
			Handler:    _DatabaseApiKeyService_CreateDatabaseApiKey_Handler,
		},
		{
			MethodName: "DeleteDatabaseApiKey",
			Handler:    _DatabaseApiKeyService_DeleteDatabaseApiKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/cloud/cluster/auth/v2/database_api_key.proto",
}
