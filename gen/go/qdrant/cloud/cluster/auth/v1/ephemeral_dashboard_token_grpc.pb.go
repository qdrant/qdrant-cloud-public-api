// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qdrant/cloud/cluster/auth/v1/ephemeral_dashboard_token.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EphemeralDashboardTokenService_CreateEphemeralDashboardToken_FullMethodName = "/qdrant.cloud.cluster.auth.v1.EphemeralDashboardTokenService/CreateEphemeralDashboardToken"
)

// EphemeralDashboardTokenServiceClient is the client API for EphemeralDashboardTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EphemeralDashboardTokenService is the API used to create ephemeral tokens to access the Qdrant Dashboard, used by the Qdrant Cloud UI
type EphemeralDashboardTokenServiceClient interface {
	// Creates an ephemeral dashboard token in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	CreateEphemeralDashboardToken(ctx context.Context, in *CreateEphemeralDashboardTokenRequest, opts ...grpc.CallOption) (*CreateEphemeralDashboardTokenResponse, error)
}

type ephemeralDashboardTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEphemeralDashboardTokenServiceClient(cc grpc.ClientConnInterface) EphemeralDashboardTokenServiceClient {
	return &ephemeralDashboardTokenServiceClient{cc}
}

func (c *ephemeralDashboardTokenServiceClient) CreateEphemeralDashboardToken(ctx context.Context, in *CreateEphemeralDashboardTokenRequest, opts ...grpc.CallOption) (*CreateEphemeralDashboardTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEphemeralDashboardTokenResponse)
	err := c.cc.Invoke(ctx, EphemeralDashboardTokenService_CreateEphemeralDashboardToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EphemeralDashboardTokenServiceServer is the server API for EphemeralDashboardTokenService service.
// All implementations must embed UnimplementedEphemeralDashboardTokenServiceServer
// for forward compatibility.
//
// EphemeralDashboardTokenService is the API used to create ephemeral tokens to access the Qdrant Dashboard, used by the Qdrant Cloud UI
type EphemeralDashboardTokenServiceServer interface {
	// Creates an ephemeral dashboard token in the account identified by the given ID.
	// Required permissions:
	// - read:clusters
	CreateEphemeralDashboardToken(context.Context, *CreateEphemeralDashboardTokenRequest) (*CreateEphemeralDashboardTokenResponse, error)
	mustEmbedUnimplementedEphemeralDashboardTokenServiceServer()
}

// UnimplementedEphemeralDashboardTokenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEphemeralDashboardTokenServiceServer struct{}

func (UnimplementedEphemeralDashboardTokenServiceServer) CreateEphemeralDashboardToken(context.Context, *CreateEphemeralDashboardTokenRequest) (*CreateEphemeralDashboardTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEphemeralDashboardToken not implemented")
}
func (UnimplementedEphemeralDashboardTokenServiceServer) mustEmbedUnimplementedEphemeralDashboardTokenServiceServer() {
}
func (UnimplementedEphemeralDashboardTokenServiceServer) testEmbeddedByValue() {}

// UnsafeEphemeralDashboardTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EphemeralDashboardTokenServiceServer will
// result in compilation errors.
type UnsafeEphemeralDashboardTokenServiceServer interface {
	mustEmbedUnimplementedEphemeralDashboardTokenServiceServer()
}

func RegisterEphemeralDashboardTokenServiceServer(s grpc.ServiceRegistrar, srv EphemeralDashboardTokenServiceServer) {
	// If the following call pancis, it indicates UnimplementedEphemeralDashboardTokenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EphemeralDashboardTokenService_ServiceDesc, srv)
}

func _EphemeralDashboardTokenService_CreateEphemeralDashboardToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEphemeralDashboardTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EphemeralDashboardTokenServiceServer).CreateEphemeralDashboardToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EphemeralDashboardTokenService_CreateEphemeralDashboardToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EphemeralDashboardTokenServiceServer).CreateEphemeralDashboardToken(ctx, req.(*CreateEphemeralDashboardTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EphemeralDashboardTokenService_ServiceDesc is the grpc.ServiceDesc for EphemeralDashboardTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EphemeralDashboardTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.cloud.cluster.auth.v1.EphemeralDashboardTokenService",
	HandlerType: (*EphemeralDashboardTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEphemeralDashboardToken",
			Handler:    _EphemeralDashboardTokenService_CreateEphemeralDashboardToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/cloud/cluster/auth/v1/ephemeral_dashboard_token.proto",
}
