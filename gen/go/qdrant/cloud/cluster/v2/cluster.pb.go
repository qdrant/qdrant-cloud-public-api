// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: qdrant/cloud/cluster/v2/cluster.proto

package clusterv2

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetAPIVersionRequest is the request for the GetAPIVersion function
type GetAPIVersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAPIVersionRequest) Reset() {
	*x = GetAPIVersionRequest{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAPIVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAPIVersionRequest) ProtoMessage() {}

func (x *GetAPIVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAPIVersionRequest.ProtoReflect.Descriptor instead.
func (*GetAPIVersionRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{0}
}

// GetAPIVersionResponse is the response from the GetAPIVersion function
type GetAPIVersionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual version
	Version       *v1.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAPIVersionResponse) Reset() {
	*x = GetAPIVersionResponse{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAPIVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAPIVersionResponse) ProtoMessage() {}

func (x *GetAPIVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAPIVersionResponse.ProtoReflect.Descriptor instead.
func (*GetAPIVersionResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *GetAPIVersionResponse) GetVersion() *v1.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

// ListClustersRequest is the request for the ListClusters function
type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in Guid format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The optional identifier for hybrid cloud (in Guid format).
	// If ommited all clusters, including the hybrid cloud ones, which belongs to the provided account are returned.
	HybridCloudId *string `protobuf:"bytes,2,opt,name=hybrid_cloud_id,json=hybridCloudId,proto3,oneof" json:"hybrid_cloud_id,omitempty"` // TODO: ListOptions
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ListClustersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListClustersRequest) GetHybridCloudId() string {
	if x != nil && x.HybridCloudId != nil {
		return *x.HybridCloudId
	}
	return ""
}

// ListClustersResponse is the response from the ListClusters function
type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual clusters in this list
	Items         []*Cluster `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // TODO: Add an operation timestamp the ListClusters is started, to support the `since` in ListOptions
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *ListClustersResponse) GetItems() []*Cluster {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetClusterRequest is the request for the GetCluster function
type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in Guid format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the cluster (in Guid format).
	// This cluster should be part of the provided account.
	// This is a required field.
	ClusterId     string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *GetClusterRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// GetClusterResponse is the response from the GetCluster function
type GetClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual cluster
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterResponse) Reset() {
	*x = GetClusterResponse{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterResponse) ProtoMessage() {}

func (x *GetClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterResponse.ProtoReflect.Descriptor instead.
func (*GetClusterResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *GetClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// CreateClusterRequest is the request for the CreateCluster function
type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual cluster
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *CreateClusterRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// CreateClusterResponse is the response from the CreateCluster function
type CreateClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual cluster
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterResponse) Reset() {
	*x = CreateClusterResponse{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterResponse) ProtoMessage() {}

func (x *CreateClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *CreateClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// UpdateClusterRequest is the request for the UpdateCluster function
type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual cluster
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateClusterRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// UpdateClusterResponse is the response from the UpdateCluster function
type UpdateClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual cluster
	Cluster       *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterResponse) Reset() {
	*x = UpdateClusterResponse{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterResponse) ProtoMessage() {}

func (x *UpdateClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// DeleteClusterRequest is the request for the DeleteCluster function
type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in Guid format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the cluster (in Guid format).
	// This cluster should be part of the provided account.
	// This is a required field.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// If set, the backups of this cluster will be deleted as well.
	DeleteBackups *bool `protobuf:"varint,3,opt,name=delete_backups,json=deleteBackups,proto3,oneof" json:"delete_backups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteClusterRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterRequest) GetDeleteBackups() bool {
	if x != nil && x.DeleteBackups != nil {
		return *x.DeleteBackups
	}
	return false
}

// DeleteClusterResponse is the response from the DeleteCluster function
type DeleteClusterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{11}
}

// ListQdrantReleasesRequest is the request for the ListQdrantReleases function
type ListQdrantReleasesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in Guid format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the cluster (in Guid format).
	// This cluster should be part of the provided account.
	// This is an optional field.
	ClusterId     *string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQdrantReleasesRequest) Reset() {
	*x = ListQdrantReleasesRequest{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQdrantReleasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQdrantReleasesRequest) ProtoMessage() {}

func (x *ListQdrantReleasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQdrantReleasesRequest.ProtoReflect.Descriptor instead.
func (*ListQdrantReleasesRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *ListQdrantReleasesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListQdrantReleasesRequest) GetClusterId() string {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return ""
}

// ListQdrantReleasesResponse is the response from the ListQdrantReleases function
type ListQdrantReleasesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual Qdrant releases in this list
	Items         []*QdrantRelease `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQdrantReleasesResponse) Reset() {
	*x = ListQdrantReleasesResponse{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQdrantReleasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQdrantReleasesResponse) ProtoMessage() {}

func (x *ListQdrantReleasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQdrantReleasesResponse.ProtoReflect.Descriptor instead.
func (*ListQdrantReleasesResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{13}
}

func (x *ListQdrantReleasesResponse) GetItems() []*QdrantRelease {
	if x != nil {
		return x.Items
	}
	return nil
}

// A Cluster represents one cluster of a Qdrant database.
type Cluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the cluster (in Guid format).
	// This is a read-only field and will be available after a cluster is created.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp when the cluster was created.
	// This is a read-only field and will be available after a cluster is created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Identifier of the account associated with the cluster (in Guid format).
	// This is a required field.
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Name of the cluster.
	// This is a required field.
	// Name can only contain letters, numbers, underscores and dashes
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Cloud provider where the cluster is hosted.
	// This is a required field (one of the following: aws, gcp, azure, hybrid).
	// After creation, this field cannot be changed.
	CloudProvider string `protobuf:"bytes,10,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	// Cloud region where the cluster is located.
	// For hybrid this should be the hybrid cloud ID.
	// This is a required field.
	// After creation, this field cannot be changed.
	CloudRegion string `protobuf:"bytes,11,opt,name=cloud_region,json=cloudRegion,proto3" json:"cloud_region,omitempty"`
	// Current configuration details of the cluster.
	Configuration *ClusterConfiguration `protobuf:"bytes,20,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Current state of the cluster.
	// All fields inside `state` are read-only.
	State         *ClusterState `protobuf:"bytes,100,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cluster) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *Cluster) GetCloudRegion() string {
	if x != nil {
		return x.CloudRegion
	}
	return ""
}

func (x *Cluster) GetConfiguration() *ClusterConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Cluster) GetState() *ClusterState {
	if x != nil {
		return x.State
	}
	return nil
}

// A ClusterConfiguration represents the configuration of a cluster.
type ClusterConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp when the cluster configuration was last updated.
	// This is a read-only field and will be available after a cluster is created.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// The number of nodes in a cluster.
	// This should be a number 1...20 [both included].
	NumberOfNodes uint32 `protobuf:"varint,2,opt,name=number_of_nodes,json=numberOfNodes,proto3" json:"number_of_nodes,omitempty"`
	// Version of the cluster software.
	// If ommited the latest version will be used and filled out during create.
	// Use ListReleases() to determine which versions are allowed to be used.
	// See upgrade guidelines for more info.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// The package identifier used to configure the resources of the cluster. Use ListPackages() to select one.
	PackageId string `protobuf:"bytes,4,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	// The additional resources on top of the selected package.
	// This is an optional field, if not specified all additional resources are 0.
	AdditionalResources *AdditionalResources `protobuf:"bytes,5,opt,name=additional_resources,json=additionalResources,proto3,oneof" json:"additional_resources,omitempty"`
	// Configuration to setup a qdrant database in a hybrid cloud.
	// It is ignored for Managed Cloud clusters. This is an optional field
	DatabaseConfiguration *DatabaseConfiguration `protobuf:"bytes,7,opt,name=database_configuration,json=databaseConfiguration,proto3,oneof" json:"database_configuration,omitempty"`
	// The node selector for this cluster in a hybrid cloud.
	// It is ignored for Managed Cloud clusters. This is an optional field
	NodeSelector []*KeyValue `protobuf:"bytes,8,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// List of tolerations for this cluster in a hybrid cloud.
	// It is ignored for Managed Cloud clusters. This is an optional field
	Tolerations []*Toleration `protobuf:"bytes,9,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	// List of annotations for this cluster in a hybrid cloud.
	// It is ignored for Managed Cloud clusters. This is an optional field
	Annotations []*KeyValue `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty"`
	// List of allowed IP source ranges for this cluster. Field is used for both
	// hybrid cloud and Managed Cloud clusters. This is an optional field
	// TODO: Are both IPv4 and IPv6 supported? --> IPv4 only for now?
	// TODO: Do we want to create a reg-ex for validation?
	AllowedIpSourceRanges []string `protobuf:"bytes,11,rep,name=allowed_ip_source_ranges,json=allowedIpSourceRanges,proto3" json:"allowed_ip_source_ranges,omitempty"`
	// TODO: Ask Bastian if 80 is OK (or it should be 99/100)?
	// The percentage of CPU resources reserved for system components
	// This is an optional field, default is 0.
	// Number between 0..80
	ReservedCpuPercentage uint32 `protobuf:"varint,20,opt,name=reserved_cpu_percentage,json=reservedCpuPercentage,proto3" json:"reserved_cpu_percentage,omitempty"`
	// The percentage of RAM resources reserved for system components
	// This is an optional field, default is 0.
	// Number between 0..80
	ReservedMemoryPercentage uint32 `protobuf:"varint,21,opt,name=reserved_memory_percentage,json=reservedMemoryPercentage,proto3" json:"reserved_memory_percentage,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ClusterConfiguration) Reset() {
	*x = ClusterConfiguration{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfiguration) ProtoMessage() {}

func (x *ClusterConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfiguration.ProtoReflect.Descriptor instead.
func (*ClusterConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *ClusterConfiguration) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *ClusterConfiguration) GetNumberOfNodes() uint32 {
	if x != nil {
		return x.NumberOfNodes
	}
	return 0
}

func (x *ClusterConfiguration) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClusterConfiguration) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *ClusterConfiguration) GetAdditionalResources() *AdditionalResources {
	if x != nil {
		return x.AdditionalResources
	}
	return nil
}

func (x *ClusterConfiguration) GetDatabaseConfiguration() *DatabaseConfiguration {
	if x != nil {
		return x.DatabaseConfiguration
	}
	return nil
}

func (x *ClusterConfiguration) GetNodeSelector() []*KeyValue {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ClusterConfiguration) GetTolerations() []*Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *ClusterConfiguration) GetAnnotations() []*KeyValue {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ClusterConfiguration) GetAllowedIpSourceRanges() []string {
	if x != nil {
		return x.AllowedIpSourceRanges
	}
	return nil
}

func (x *ClusterConfiguration) GetReservedCpuPercentage() uint32 {
	if x != nil {
		return x.ReservedCpuPercentage
	}
	return 0
}

func (x *ClusterConfiguration) GetReservedMemoryPercentage() uint32 {
	if x != nil {
		return x.ReservedMemoryPercentage
	}
	return 0
}

// TODO: Messages below needs comments and validation!
// Configuration to setup a Qdrant database in a hybrid cloud.
type DatabaseConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The default Qdrant database collection configuration
	// This is an optional field
	Collection *DatabaseConfigurationCollection `protobuf:"bytes,1,opt,name=collection,proto3,oneof" json:"collection,omitempty"`
	// The default Qdrant database storage configuration
	// This is an optional field
	Storage *DatabaseConfigurationStorage `protobuf:"bytes,2,opt,name=storage,proto3,oneof" json:"storage,omitempty"`
	// The Qdrant database service configuration
	// This is an optional field
	Service *DatabaseConfigurationService `protobuf:"bytes,3,opt,name=service,proto3,oneof" json:"service,omitempty"`
	// The log level for the database
	// This is an optional field
	// TODO: Validation for the allowed values
	LogLevel *string `protobuf:"bytes,4,opt,name=log_level,json=logLevel,proto3,oneof" json:"log_level,omitempty"`
	// The Qdrant database TLS configuration
	// This is an optional field, if not set an unsecure connection is provided
	Tls           *DatabaseConfigurationTls `protobuf:"bytes,5,opt,name=tls,proto3,oneof" json:"tls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfiguration) Reset() {
	*x = DatabaseConfiguration{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfiguration) ProtoMessage() {}

func (x *DatabaseConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfiguration.ProtoReflect.Descriptor instead.
func (*DatabaseConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *DatabaseConfiguration) GetCollection() *DatabaseConfigurationCollection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *DatabaseConfiguration) GetStorage() *DatabaseConfigurationStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *DatabaseConfiguration) GetService() *DatabaseConfigurationService {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *DatabaseConfiguration) GetLogLevel() string {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return ""
}

func (x *DatabaseConfiguration) GetTls() *DatabaseConfigurationTls {
	if x != nil {
		return x.Tls
	}
	return nil
}

// The default Qdrant database collection configuration
type DatabaseConfigurationCollection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of replicas of each shard that network tries to maintain
	// This is an optional, the default is 1
	ReplicationFactor *uint32 `protobuf:"varint,1,opt,name=replication_factor,json=replicationFactor,proto3,oneof" json:"replication_factor,omitempty"`
	// How many replicas should apply the operation for us to consider it successful
	// This is an optional, the default is 1
	WriteConsistencyFactor int32 `protobuf:"varint,2,opt,name=write_consistency_factor,json=writeConsistencyFactor,proto3" json:"write_consistency_factor,omitempty"`
	// The default parameters for vectors.
	Vectors       *DatabaseConfigurationCollectionVectors `protobuf:"bytes,3,opt,name=vectors,proto3" json:"vectors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationCollection) Reset() {
	*x = DatabaseConfigurationCollection{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationCollection) ProtoMessage() {}

func (x *DatabaseConfigurationCollection) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationCollection.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationCollection) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *DatabaseConfigurationCollection) GetReplicationFactor() uint32 {
	if x != nil && x.ReplicationFactor != nil {
		return *x.ReplicationFactor
	}
	return 0
}

func (x *DatabaseConfigurationCollection) GetWriteConsistencyFactor() int32 {
	if x != nil {
		return x.WriteConsistencyFactor
	}
	return 0
}

func (x *DatabaseConfigurationCollection) GetVectors() *DatabaseConfigurationCollectionVectors {
	if x != nil {
		return x.Vectors
	}
	return nil
}

// The default Qdrant database collection vectors configuration
type DatabaseConfigurationCollectionVectors struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, this will create a collection with all vectors immediately stored in memmap storage.
	// This is the recommended way, in case your Qdrant instance operates with fast disks and you are working with large collections.
	// For more info see: https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage
	// This is an optional field, TODO:? default will be true.
	OnDisk        *bool `protobuf:"varint,1,opt,name=on_disk,json=onDisk,proto3,oneof" json:"on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationCollectionVectors) Reset() {
	*x = DatabaseConfigurationCollectionVectors{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationCollectionVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationCollectionVectors) ProtoMessage() {}

func (x *DatabaseConfigurationCollectionVectors) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationCollectionVectors.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationCollectionVectors) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *DatabaseConfigurationCollectionVectors) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return false
}

// The Qdrant storage configuration
type DatabaseConfigurationStorage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The performance related Qdrant database storage configuration
	Performance   *DatabaseConfigurationStoragePerformance `protobuf:"bytes,1,opt,name=performance,proto3" json:"performance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationStorage) Reset() {
	*x = DatabaseConfigurationStorage{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationStorage) ProtoMessage() {}

func (x *DatabaseConfigurationStorage) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationStorage.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationStorage) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *DatabaseConfigurationStorage) GetPerformance() *DatabaseConfigurationStoragePerformance {
	if x != nil {
		return x.Performance
	}
	return nil
}

// The performance related Qdrant database storage configuration
type DatabaseConfigurationStoragePerformance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU budget, how many CPUs (threads) to allocate for an optimization job.
	// If 0 - auto selection, keep 1 or more CPUs unallocated depending on CPU size
	// If negative - subtract this number of CPUs from the available CPUs.
	// If positive - use this exact number of CPUs.
	OptimizerCpuBudget int32 `protobuf:"varint,1,opt,name=optimizer_cpu_budget,json=optimizerCpuBudget,proto3" json:"optimizer_cpu_budget,omitempty"`
	// Enable async scorer which uses io_uring when rescoring.
	// Only supported on Linux, must be enabled in your kernel.
	// See: https://qdrant.tech/articles/io_uring/#and-what-about-qdrant
	AsyncScorer   bool `protobuf:"varint,2,opt,name=async_scorer,json=asyncScorer,proto3" json:"async_scorer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationStoragePerformance) Reset() {
	*x = DatabaseConfigurationStoragePerformance{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationStoragePerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationStoragePerformance) ProtoMessage() {}

func (x *DatabaseConfigurationStoragePerformance) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationStoragePerformance.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationStoragePerformance) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *DatabaseConfigurationStoragePerformance) GetOptimizerCpuBudget() int32 {
	if x != nil {
		return x.OptimizerCpuBudget
	}
	return 0
}

func (x *DatabaseConfigurationStoragePerformance) GetAsyncScorer() bool {
	if x != nil {
		return x.AsyncScorer
	}
	return false
}

// The Qdrant database service configuration
type DatabaseConfigurationService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set an api-key.
	// If set, all requests must include a header with the api-key.
	// example header: `api-key: <API-KEY>`
	ApiKey *SecretKeyRef `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	// Set an api-key for read-only operations.
	// If set, all requests must include a header with the api-key.
	// example header: `api-key: <API-KEY>`
	ReadOnlyApiKey *SecretKeyRef `protobuf:"bytes,2,opt,name=read_only_api_key,json=readOnlyApiKey,proto3,oneof" json:"read_only_api_key,omitempty"`
	// Enable JWT Role Based Access Control (RBAC).
	// If enabled, you can generate JWT tokens with fine-grained rules for access control.
	// Use generated token instead of API key.
	JwtRbac bool `protobuf:"varint,3,opt,name=jwt_rbac,json=jwtRbac,proto3" json:"jwt_rbac,omitempty"`
	// Enable HTTPS for the REST and gRPC API
	EnableTls     bool `protobuf:"varint,4,opt,name=enable_tls,json=enableTls,proto3" json:"enable_tls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationService) Reset() {
	*x = DatabaseConfigurationService{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationService) ProtoMessage() {}

func (x *DatabaseConfigurationService) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationService.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationService) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *DatabaseConfigurationService) GetApiKey() *SecretKeyRef {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *DatabaseConfigurationService) GetReadOnlyApiKey() *SecretKeyRef {
	if x != nil {
		return x.ReadOnlyApiKey
	}
	return nil
}

func (x *DatabaseConfigurationService) GetJwtRbac() bool {
	if x != nil {
		return x.JwtRbac
	}
	return false
}

func (x *DatabaseConfigurationService) GetEnableTls() bool {
	if x != nil {
		return x.EnableTls
	}
	return false
}

// DatabaseConfigurationTls contains the information to setup a TLS connection to the database endpoint
type DatabaseConfigurationTls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Secret to use for the certificate
	Cert *SecretKeyRef `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	// Secret to use for the private key
	Key           *SecretKeyRef `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfigurationTls) Reset() {
	*x = DatabaseConfigurationTls{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfigurationTls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfigurationTls) ProtoMessage() {}

func (x *DatabaseConfigurationTls) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfigurationTls.ProtoReflect.Descriptor instead.
func (*DatabaseConfigurationTls) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{22}
}

func (x *DatabaseConfigurationTls) GetCert() *SecretKeyRef {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *DatabaseConfigurationTls) GetKey() *SecretKeyRef {
	if x != nil {
		return x.Key
	}
	return nil
}

// SecretKeyRef is a reference to a Kubernetes secret name and the key inside the secret
type SecretKeyRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the secret (in the same namespace as the QdrantCluster CRD instance)
	// This is a required field
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The key inside the secret
	// This is a required field
	Key           string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecretKeyRef) Reset() {
	*x = SecretKeyRef{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretKeyRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretKeyRef) ProtoMessage() {}

func (x *SecretKeyRef) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretKeyRef.ProtoReflect.Descriptor instead.
func (*SecretKeyRef) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{23}
}

func (x *SecretKeyRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecretKeyRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// KeyValue is a key-value tuple (used in e.g. node selectors / annotations)
// The message represents an object for Kubernetes.
// TODO: Move to common.v1
type KeyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key part of a key-value pair
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value part of a key-value pair
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{24}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// AdditionalResources contans the information about additional resources
type AdditionalResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Additional Disk (expressed in Gib)
	Disk          uint32 `protobuf:"varint,3,opt,name=disk,proto3" json:"disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdditionalResources) Reset() {
	*x = AdditionalResources{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdditionalResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalResources) ProtoMessage() {}

func (x *AdditionalResources) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalResources.ProtoReflect.Descriptor instead.
func (*AdditionalResources) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{25}
}

func (x *AdditionalResources) GetDisk() uint32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

// The Toleration message represents a toleration object for Kubernetes.
type Toleration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key to match against the key of a node label.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The operator represents a key's relationship to the value.
	// Valid operators are "Exists" and "Equal".
	// The default is Exists
	Operator *string `protobuf:"bytes,2,opt,name=operator,proto3,oneof" json:"operator,omitempty"`
	// The value to match against the value of a node label.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The effect indicates the taint effect to match.
	// Valid effects are "NoSchedule", "PreferNoSchedule", and "NoExecute".
	// The default is NoSchedule
	Effect *string `protobuf:"bytes,4,opt,name=effect,proto3,oneof" json:"effect,omitempty"`
	// The toleration seconds indicates the duration to tolerate the taint.
	TolerationSeconds *uint64 `protobuf:"varint,5,opt,name=toleration_seconds,json=tolerationSeconds,proto3,oneof" json:"toleration_seconds,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Toleration) Reset() {
	*x = Toleration{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Toleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toleration) ProtoMessage() {}

func (x *Toleration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toleration.ProtoReflect.Descriptor instead.
func (*Toleration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{26}
}

func (x *Toleration) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Toleration) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *Toleration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Toleration) GetEffect() string {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return ""
}

func (x *Toleration) GetTolerationSeconds() uint64 {
	if x != nil && x.TolerationSeconds != nil {
		return *x.TolerationSeconds
	}
	return 0
}

// ClusterState represents the current state of a cluster
// All fields in this message are read-only.
type ClusterState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the cluster software
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Number of cluster nodes that are up and running
	NodesUp uint32 `protobuf:"varint,2,opt,name=nodes_up,json=nodesUp,proto3" json:"nodes_up,omitempty"`
	// The date and time when the cluster was restarted
	RestartedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=restarted_at,json=restartedAt,proto3" json:"restarted_at,omitempty"`
	// Current phase of the cluster
	// One of the following: Creating, ...
	Phase string `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	// Reason for the current phase of the cluster.
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// Endpoint information to access the qdrant cluster (aka database).
	Endpoint *ClusterEndpoint `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Summary of the resources used by the cluster per node.
	Resources     *ClusterNodeResourcesSummary `protobuf:"bytes,7,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterState) Reset() {
	*x = ClusterState{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterState) ProtoMessage() {}

func (x *ClusterState) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterState.ProtoReflect.Descriptor instead.
func (*ClusterState) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{27}
}

func (x *ClusterState) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClusterState) GetNodesUp() uint32 {
	if x != nil {
		return x.NodesUp
	}
	return 0
}

func (x *ClusterState) GetRestartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RestartedAt
	}
	return nil
}

func (x *ClusterState) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ClusterState) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ClusterState) GetEndpoint() *ClusterEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *ClusterState) GetResources() *ClusterNodeResourcesSummary {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Endpoint information to access the qdrant cluster (aka database).
// All fields in this message are a read-only field.
type ClusterEndpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL to access the qdrant cluster (aka database) without port
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The port to use for HTTP REST calls (6333)
	RestPort int32 `protobuf:"varint,2,opt,name=rest_port,json=restPort,proto3" json:"rest_port,omitempty"`
	// The port to use for gRPC calls (6334)
	GrpcPort      int32 `protobuf:"varint,3,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterEndpoint) Reset() {
	*x = ClusterEndpoint{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterEndpoint) ProtoMessage() {}

func (x *ClusterEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterEndpoint.ProtoReflect.Descriptor instead.
func (*ClusterEndpoint) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{28}
}

func (x *ClusterEndpoint) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ClusterEndpoint) GetRestPort() int32 {
	if x != nil {
		return x.RestPort
	}
	return 0
}

func (x *ClusterEndpoint) GetGrpcPort() int32 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

// ClusterResourcesSummary represents the summary of the resources used in this cluster per node.
type ClusterNodeResourcesSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disk resources
	Disk *ClusterNodeResources `protobuf:"bytes,1,opt,name=disk,proto3" json:"disk,omitempty"`
	// Memory resources
	Ram *ClusterNodeResources `protobuf:"bytes,2,opt,name=ram,proto3" json:"ram,omitempty"`
	// CPU resouces
	Cpu           *ClusterNodeResources `protobuf:"bytes,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterNodeResourcesSummary) Reset() {
	*x = ClusterNodeResourcesSummary{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterNodeResourcesSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodeResourcesSummary) ProtoMessage() {}

func (x *ClusterNodeResourcesSummary) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodeResourcesSummary.ProtoReflect.Descriptor instead.
func (*ClusterNodeResourcesSummary) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{29}
}

func (x *ClusterNodeResourcesSummary) GetDisk() *ClusterNodeResources {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *ClusterNodeResourcesSummary) GetRam() *ClusterNodeResources {
	if x != nil {
		return x.Ram
	}
	return nil
}

func (x *ClusterNodeResourcesSummary) GetCpu() *ClusterNodeResources {
	if x != nil {
		return x.Cpu
	}
	return nil
}

// ClusterNodeResources represents the allocation of various resources for a cluster per node.
type ClusterNodeResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Base resources that are part of the standard allocation for the cluster per node.
	// This includes default CPU, memory, storage, etc.
	Base float64 `protobuf:"fixed64,1,opt,name=base,proto3" json:"base,omitempty"`
	// Complimentary resources provided to the cluster at no additional cost.
	// This might include complimentary network bandwidth, credits, etc.
	Complimentary float64 `protobuf:"fixed64,2,opt,name=complimentary,proto3" json:"complimentary,omitempty"`
	// Additional resources allocated to the cluster.
	// This could include additional storage, compute power, etc.
	Additional float64 `protobuf:"fixed64,3,opt,name=additional,proto3" json:"additional,omitempty"`
	// The reserved is the amount used by the system, which cannot be used by the database itself.
	Reserved float64 `protobuf:"fixed64,4,opt,name=reserved,proto3" json:"reserved,omitempty"`
	// The available is the total (base+complimentary+additional) - reserved
	Available     float64 `protobuf:"fixed64,5,opt,name=available,proto3" json:"available,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterNodeResources) Reset() {
	*x = ClusterNodeResources{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterNodeResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodeResources) ProtoMessage() {}

func (x *ClusterNodeResources) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodeResources.ProtoReflect.Descriptor instead.
func (*ClusterNodeResources) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{30}
}

func (x *ClusterNodeResources) GetBase() float64 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *ClusterNodeResources) GetComplimentary() float64 {
	if x != nil {
		return x.Complimentary
	}
	return 0
}

func (x *ClusterNodeResources) GetAdditional() float64 {
	if x != nil {
		return x.Additional
	}
	return 0
}

func (x *ClusterNodeResources) GetReserved() float64 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *ClusterNodeResources) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

// QdrantRelease represent a single Qdrant release
type QdrantRelease struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the Qdrant release
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Flag to indicate if this is the default release
	// There can be at most a single item in the list that have this property set.
	Default bool `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	// URL to the release notes
	ReleaseNotesUrl *string `protobuf:"bytes,3,opt,name=release_notes_url,json=releaseNotesUrl,proto3,oneof" json:"release_notes_url,omitempty"`
	// Additional message regarding this release that might be useful to the client"
	Remarks       *string `protobuf:"bytes,4,opt,name=remarks,proto3,oneof" json:"remarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QdrantRelease) Reset() {
	*x = QdrantRelease{}
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QdrantRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QdrantRelease) ProtoMessage() {}

func (x *QdrantRelease) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QdrantRelease.ProtoReflect.Descriptor instead.
func (*QdrantRelease) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP(), []int{31}
}

func (x *QdrantRelease) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *QdrantRelease) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *QdrantRelease) GetReleaseNotesUrl() string {
	if x != nil && x.ReleaseNotesUrl != nil {
		return *x.ReleaseNotesUrl
	}
	return ""
}

func (x *QdrantRelease) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

var File_qdrant_cloud_cluster_v2_cluster_proto protoreflect.FileDescriptor

var file_qdrant_cloud_cluster_v2_cluster_proto_rawDesc = string([]byte{
	0x0a, 0x25, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x0f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x65, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22,
	0x53, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x96, 0x05, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x04, 0x18, 0x40, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0x72,
	0x19, 0x52, 0x03, 0x61, 0x77, 0x73, 0x52, 0x03, 0x67, 0x63, 0x70, 0x52, 0x05, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x52, 0x06, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0xdf,
	0x01, 0xba, 0x48, 0xdb, 0x01, 0x1a, 0xd8, 0x01, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x66, 0x20, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x69, 0x73,
	0x20, 0x27, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x27, 0x1a, 0x84, 0x01, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x27, 0x29, 0x20, 0x7c,
	0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x21, 0x3d, 0x20, 0x27, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x27,
	0x22, 0xc7, 0x07, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x31, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0x48, 0x06, 0x2a, 0x04, 0x18,
	0x14, 0x28, 0x01, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x26, 0xba, 0x48, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e, 0x28, 0x76, 0x28,
	0x5c, 0x64, 0x2b, 0x29, 0x5c, 0x2e, 0x28, 0x5c, 0x64, 0x2b, 0x29, 0x5c, 0x2e, 0x28, 0x5c, 0x64,
	0x2b, 0x29, 0x7c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x29, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x64, 0x0a,
	0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x13, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x50, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01,
	0x02, 0x10, 0x0a, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x4f, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x92, 0x01, 0x02, 0x10, 0x0a, 0x52, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92,
	0x01, 0x02, 0x10, 0x0a, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x47, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x92, 0x01, 0x08, 0x10, 0x14, 0x22, 0x04, 0x72,
	0x02, 0x18, 0x2b, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x17, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0x48, 0x06,
	0x2a, 0x04, 0x18, 0x50, 0x28, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x43, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a,
	0x1a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x09, 0xba, 0x48, 0x06, 0x2a, 0x04, 0x18, 0x50, 0x28, 0x00, 0x52, 0x18, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x03, 0x0a, 0x15, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x02, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6c,
	0x73, 0x48, 0x04, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6c, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x1f, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x18, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x07, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x52, 0x0a, 0x26,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x22, 0x82, 0x01, 0x0a, 0x1c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x62, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x7e, 0x0a, 0x27, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x63, 0x70,
	0x75, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x70, 0x75, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x72, 0x22, 0x96, 0x02, 0x0a, 0x1c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x48, 0x00,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x48, 0x01, 0x52,
	0x0e, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x77, 0x74, 0x5f, 0x72, 0x62, 0x61, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6a, 0x77, 0x74, 0x52, 0x62, 0x61, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x8e,
	0x01, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66,
	0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x34, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x74, 0xba, 0x48, 0x71, 0x72, 0x6f, 0x18, 0x3f, 0x32, 0x6b, 0x5e, 0x28, 0x28, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5c,
	0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x5c,
	0x2e, 0x29, 0x2a, 0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7c,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5c, 0x2d, 0x5d, 0x2a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0x18, 0x80, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x22, 0xdc, 0x02, 0x0a, 0x0a, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0xba, 0x48, 0x33, 0x72, 0x31, 0x18, 0x3f, 0x32, 0x2d, 0x5e, 0x28, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x3f, 0x24, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x35, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xba, 0x48, 0x11, 0x72, 0x0f, 0x52, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48,
	0x2b, 0x72, 0x29, 0x52, 0x0a, 0x4e, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x10, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x09, 0x4e, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x01, 0x52, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x12, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x28, 0x00, 0x48, 0x02,
	0x52, 0x11, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x52,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x22, 0x67, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x1b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x64,
	0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x3f,
	0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x12,
	0x3f, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x22, 0xaa, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb5, 0x01,
	0x0a, 0x0d, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x32, 0xca, 0x0a, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x8a, 0xb5, 0x18, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0xb4, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x47, 0x8a, 0xb5, 0x18, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x54, 0x8a, 0xb5, 0x18, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc3, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x8a, 0xb5, 0x18, 0x0e, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x3a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xd0, 0x01,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x2d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60,
	0x8a, 0xb5, 0x18, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x3a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x3a, 0x01, 0x2a, 0x32, 0x43, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x7d,
	0x12, 0xc6, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x2d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x56, 0x8a, 0xb5, 0x18, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x2a, 0x3b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc6, 0x01, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x32, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x8a, 0xb5, 0x18, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x3a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x42, 0xfe, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x42, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x3b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x51, 0x43, 0x43, 0xaa, 0x02, 0x17, 0x51,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x17, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x32,
	0xe2, 0x02, 0x23, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x3a,
	0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a,
	0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_qdrant_cloud_cluster_v2_cluster_proto_rawDescOnce sync.Once
	file_qdrant_cloud_cluster_v2_cluster_proto_rawDescData []byte
)

func file_qdrant_cloud_cluster_v2_cluster_proto_rawDescGZIP() []byte {
	file_qdrant_cloud_cluster_v2_cluster_proto_rawDescOnce.Do(func() {
		file_qdrant_cloud_cluster_v2_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qdrant_cloud_cluster_v2_cluster_proto_rawDesc), len(file_qdrant_cloud_cluster_v2_cluster_proto_rawDesc)))
	})
	return file_qdrant_cloud_cluster_v2_cluster_proto_rawDescData
}

var file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_qdrant_cloud_cluster_v2_cluster_proto_goTypes = []any{
	(*GetAPIVersionRequest)(nil),                    // 0: qdrant.cloud.cluster.v2.GetAPIVersionRequest
	(*GetAPIVersionResponse)(nil),                   // 1: qdrant.cloud.cluster.v2.GetAPIVersionResponse
	(*ListClustersRequest)(nil),                     // 2: qdrant.cloud.cluster.v2.ListClustersRequest
	(*ListClustersResponse)(nil),                    // 3: qdrant.cloud.cluster.v2.ListClustersResponse
	(*GetClusterRequest)(nil),                       // 4: qdrant.cloud.cluster.v2.GetClusterRequest
	(*GetClusterResponse)(nil),                      // 5: qdrant.cloud.cluster.v2.GetClusterResponse
	(*CreateClusterRequest)(nil),                    // 6: qdrant.cloud.cluster.v2.CreateClusterRequest
	(*CreateClusterResponse)(nil),                   // 7: qdrant.cloud.cluster.v2.CreateClusterResponse
	(*UpdateClusterRequest)(nil),                    // 8: qdrant.cloud.cluster.v2.UpdateClusterRequest
	(*UpdateClusterResponse)(nil),                   // 9: qdrant.cloud.cluster.v2.UpdateClusterResponse
	(*DeleteClusterRequest)(nil),                    // 10: qdrant.cloud.cluster.v2.DeleteClusterRequest
	(*DeleteClusterResponse)(nil),                   // 11: qdrant.cloud.cluster.v2.DeleteClusterResponse
	(*ListQdrantReleasesRequest)(nil),               // 12: qdrant.cloud.cluster.v2.ListQdrantReleasesRequest
	(*ListQdrantReleasesResponse)(nil),              // 13: qdrant.cloud.cluster.v2.ListQdrantReleasesResponse
	(*Cluster)(nil),                                 // 14: qdrant.cloud.cluster.v2.Cluster
	(*ClusterConfiguration)(nil),                    // 15: qdrant.cloud.cluster.v2.ClusterConfiguration
	(*DatabaseConfiguration)(nil),                   // 16: qdrant.cloud.cluster.v2.DatabaseConfiguration
	(*DatabaseConfigurationCollection)(nil),         // 17: qdrant.cloud.cluster.v2.DatabaseConfigurationCollection
	(*DatabaseConfigurationCollectionVectors)(nil),  // 18: qdrant.cloud.cluster.v2.DatabaseConfigurationCollectionVectors
	(*DatabaseConfigurationStorage)(nil),            // 19: qdrant.cloud.cluster.v2.DatabaseConfigurationStorage
	(*DatabaseConfigurationStoragePerformance)(nil), // 20: qdrant.cloud.cluster.v2.DatabaseConfigurationStoragePerformance
	(*DatabaseConfigurationService)(nil),            // 21: qdrant.cloud.cluster.v2.DatabaseConfigurationService
	(*DatabaseConfigurationTls)(nil),                // 22: qdrant.cloud.cluster.v2.DatabaseConfigurationTls
	(*SecretKeyRef)(nil),                            // 23: qdrant.cloud.cluster.v2.SecretKeyRef
	(*KeyValue)(nil),                                // 24: qdrant.cloud.cluster.v2.KeyValue
	(*AdditionalResources)(nil),                     // 25: qdrant.cloud.cluster.v2.AdditionalResources
	(*Toleration)(nil),                              // 26: qdrant.cloud.cluster.v2.Toleration
	(*ClusterState)(nil),                            // 27: qdrant.cloud.cluster.v2.ClusterState
	(*ClusterEndpoint)(nil),                         // 28: qdrant.cloud.cluster.v2.ClusterEndpoint
	(*ClusterNodeResourcesSummary)(nil),             // 29: qdrant.cloud.cluster.v2.ClusterNodeResourcesSummary
	(*ClusterNodeResources)(nil),                    // 30: qdrant.cloud.cluster.v2.ClusterNodeResources
	(*QdrantRelease)(nil),                           // 31: qdrant.cloud.cluster.v2.QdrantRelease
	(*v1.Version)(nil),                              // 32: qdrant.cloud.common.v1.Version
	(*timestamppb.Timestamp)(nil),                   // 33: google.protobuf.Timestamp
}
var file_qdrant_cloud_cluster_v2_cluster_proto_depIdxs = []int32{
	32, // 0: qdrant.cloud.cluster.v2.GetAPIVersionResponse.version:type_name -> qdrant.cloud.common.v1.Version
	14, // 1: qdrant.cloud.cluster.v2.ListClustersResponse.items:type_name -> qdrant.cloud.cluster.v2.Cluster
	14, // 2: qdrant.cloud.cluster.v2.GetClusterResponse.cluster:type_name -> qdrant.cloud.cluster.v2.Cluster
	14, // 3: qdrant.cloud.cluster.v2.CreateClusterRequest.cluster:type_name -> qdrant.cloud.cluster.v2.Cluster
	14, // 4: qdrant.cloud.cluster.v2.CreateClusterResponse.cluster:type_name -> qdrant.cloud.cluster.v2.Cluster
	14, // 5: qdrant.cloud.cluster.v2.UpdateClusterRequest.cluster:type_name -> qdrant.cloud.cluster.v2.Cluster
	14, // 6: qdrant.cloud.cluster.v2.UpdateClusterResponse.cluster:type_name -> qdrant.cloud.cluster.v2.Cluster
	31, // 7: qdrant.cloud.cluster.v2.ListQdrantReleasesResponse.items:type_name -> qdrant.cloud.cluster.v2.QdrantRelease
	33, // 8: qdrant.cloud.cluster.v2.Cluster.created_at:type_name -> google.protobuf.Timestamp
	15, // 9: qdrant.cloud.cluster.v2.Cluster.configuration:type_name -> qdrant.cloud.cluster.v2.ClusterConfiguration
	27, // 10: qdrant.cloud.cluster.v2.Cluster.state:type_name -> qdrant.cloud.cluster.v2.ClusterState
	33, // 11: qdrant.cloud.cluster.v2.ClusterConfiguration.last_modified_at:type_name -> google.protobuf.Timestamp
	25, // 12: qdrant.cloud.cluster.v2.ClusterConfiguration.additional_resources:type_name -> qdrant.cloud.cluster.v2.AdditionalResources
	16, // 13: qdrant.cloud.cluster.v2.ClusterConfiguration.database_configuration:type_name -> qdrant.cloud.cluster.v2.DatabaseConfiguration
	24, // 14: qdrant.cloud.cluster.v2.ClusterConfiguration.node_selector:type_name -> qdrant.cloud.cluster.v2.KeyValue
	26, // 15: qdrant.cloud.cluster.v2.ClusterConfiguration.tolerations:type_name -> qdrant.cloud.cluster.v2.Toleration
	24, // 16: qdrant.cloud.cluster.v2.ClusterConfiguration.annotations:type_name -> qdrant.cloud.cluster.v2.KeyValue
	17, // 17: qdrant.cloud.cluster.v2.DatabaseConfiguration.collection:type_name -> qdrant.cloud.cluster.v2.DatabaseConfigurationCollection
	19, // 18: qdrant.cloud.cluster.v2.DatabaseConfiguration.storage:type_name -> qdrant.cloud.cluster.v2.DatabaseConfigurationStorage
	21, // 19: qdrant.cloud.cluster.v2.DatabaseConfiguration.service:type_name -> qdrant.cloud.cluster.v2.DatabaseConfigurationService
	22, // 20: qdrant.cloud.cluster.v2.DatabaseConfiguration.tls:type_name -> qdrant.cloud.cluster.v2.DatabaseConfigurationTls
	18, // 21: qdrant.cloud.cluster.v2.DatabaseConfigurationCollection.vectors:type_name -> qdrant.cloud.cluster.v2.DatabaseConfigurationCollectionVectors
	20, // 22: qdrant.cloud.cluster.v2.DatabaseConfigurationStorage.performance:type_name -> qdrant.cloud.cluster.v2.DatabaseConfigurationStoragePerformance
	23, // 23: qdrant.cloud.cluster.v2.DatabaseConfigurationService.api_key:type_name -> qdrant.cloud.cluster.v2.SecretKeyRef
	23, // 24: qdrant.cloud.cluster.v2.DatabaseConfigurationService.read_only_api_key:type_name -> qdrant.cloud.cluster.v2.SecretKeyRef
	23, // 25: qdrant.cloud.cluster.v2.DatabaseConfigurationTls.cert:type_name -> qdrant.cloud.cluster.v2.SecretKeyRef
	23, // 26: qdrant.cloud.cluster.v2.DatabaseConfigurationTls.key:type_name -> qdrant.cloud.cluster.v2.SecretKeyRef
	33, // 27: qdrant.cloud.cluster.v2.ClusterState.restarted_at:type_name -> google.protobuf.Timestamp
	28, // 28: qdrant.cloud.cluster.v2.ClusterState.endpoint:type_name -> qdrant.cloud.cluster.v2.ClusterEndpoint
	29, // 29: qdrant.cloud.cluster.v2.ClusterState.resources:type_name -> qdrant.cloud.cluster.v2.ClusterNodeResourcesSummary
	30, // 30: qdrant.cloud.cluster.v2.ClusterNodeResourcesSummary.disk:type_name -> qdrant.cloud.cluster.v2.ClusterNodeResources
	30, // 31: qdrant.cloud.cluster.v2.ClusterNodeResourcesSummary.ram:type_name -> qdrant.cloud.cluster.v2.ClusterNodeResources
	30, // 32: qdrant.cloud.cluster.v2.ClusterNodeResourcesSummary.cpu:type_name -> qdrant.cloud.cluster.v2.ClusterNodeResources
	0,  // 33: qdrant.cloud.cluster.v2.ClusterService.GetAPIVersion:input_type -> qdrant.cloud.cluster.v2.GetAPIVersionRequest
	2,  // 34: qdrant.cloud.cluster.v2.ClusterService.ListClusters:input_type -> qdrant.cloud.cluster.v2.ListClustersRequest
	4,  // 35: qdrant.cloud.cluster.v2.ClusterService.GetCluster:input_type -> qdrant.cloud.cluster.v2.GetClusterRequest
	6,  // 36: qdrant.cloud.cluster.v2.ClusterService.CreateCluster:input_type -> qdrant.cloud.cluster.v2.CreateClusterRequest
	8,  // 37: qdrant.cloud.cluster.v2.ClusterService.UpdateCluster:input_type -> qdrant.cloud.cluster.v2.UpdateClusterRequest
	10, // 38: qdrant.cloud.cluster.v2.ClusterService.DeleteCluster:input_type -> qdrant.cloud.cluster.v2.DeleteClusterRequest
	12, // 39: qdrant.cloud.cluster.v2.ClusterService.ListQdrantReleases:input_type -> qdrant.cloud.cluster.v2.ListQdrantReleasesRequest
	1,  // 40: qdrant.cloud.cluster.v2.ClusterService.GetAPIVersion:output_type -> qdrant.cloud.cluster.v2.GetAPIVersionResponse
	3,  // 41: qdrant.cloud.cluster.v2.ClusterService.ListClusters:output_type -> qdrant.cloud.cluster.v2.ListClustersResponse
	5,  // 42: qdrant.cloud.cluster.v2.ClusterService.GetCluster:output_type -> qdrant.cloud.cluster.v2.GetClusterResponse
	7,  // 43: qdrant.cloud.cluster.v2.ClusterService.CreateCluster:output_type -> qdrant.cloud.cluster.v2.CreateClusterResponse
	9,  // 44: qdrant.cloud.cluster.v2.ClusterService.UpdateCluster:output_type -> qdrant.cloud.cluster.v2.UpdateClusterResponse
	11, // 45: qdrant.cloud.cluster.v2.ClusterService.DeleteCluster:output_type -> qdrant.cloud.cluster.v2.DeleteClusterResponse
	13, // 46: qdrant.cloud.cluster.v2.ClusterService.ListQdrantReleases:output_type -> qdrant.cloud.cluster.v2.ListQdrantReleasesResponse
	40, // [40:47] is the sub-list for method output_type
	33, // [33:40] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_qdrant_cloud_cluster_v2_cluster_proto_init() }
func file_qdrant_cloud_cluster_v2_cluster_proto_init() {
	if File_qdrant_cloud_cluster_v2_cluster_proto != nil {
		return
	}
	file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[2].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[10].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[12].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[15].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[16].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[17].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[18].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[21].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[26].OneofWrappers = []any{}
	file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes[31].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qdrant_cloud_cluster_v2_cluster_proto_rawDesc), len(file_qdrant_cloud_cluster_v2_cluster_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qdrant_cloud_cluster_v2_cluster_proto_goTypes,
		DependencyIndexes: file_qdrant_cloud_cluster_v2_cluster_proto_depIdxs,
		MessageInfos:      file_qdrant_cloud_cluster_v2_cluster_proto_msgTypes,
	}.Build()
	File_qdrant_cloud_cluster_v2_cluster_proto = out.File
	file_qdrant_cloud_cluster_v2_cluster_proto_goTypes = nil
	file_qdrant_cloud_cluster_v2_cluster_proto_depIdxs = nil
}
