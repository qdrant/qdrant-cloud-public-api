// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qdrant/cloud/ui/v1/ui.proto

package uiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AggregationService_ListUsersWithRoles_FullMethodName = "/qdrant.cloud.ui.v1.AggregationService/ListUsersWithRoles"
)

// AggregationServiceClient is the client API for AggregationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AggregationService provides optimized methods for UI components that need aggregated data.
// This service combines multiple entities to reduce API round trips for common UI patterns.
type AggregationServiceClient interface {
	// Lists users in an account with their assigned roles.
	// This endpoint provides a consolidated view that would otherwise require separate calls
	// to ListUsers and ListUserRoles for each user.
	// Required permissions:
	// - read:users
	// - read:roles
	ListUsersWithRoles(ctx context.Context, in *ListUsersWithRolesRequest, opts ...grpc.CallOption) (*ListUsersWithRolesResponse, error)
}

type aggregationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregationServiceClient(cc grpc.ClientConnInterface) AggregationServiceClient {
	return &aggregationServiceClient{cc}
}

func (c *aggregationServiceClient) ListUsersWithRoles(ctx context.Context, in *ListUsersWithRolesRequest, opts ...grpc.CallOption) (*ListUsersWithRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersWithRolesResponse)
	err := c.cc.Invoke(ctx, AggregationService_ListUsersWithRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregationServiceServer is the server API for AggregationService service.
// All implementations must embed UnimplementedAggregationServiceServer
// for forward compatibility.
//
// AggregationService provides optimized methods for UI components that need aggregated data.
// This service combines multiple entities to reduce API round trips for common UI patterns.
type AggregationServiceServer interface {
	// Lists users in an account with their assigned roles.
	// This endpoint provides a consolidated view that would otherwise require separate calls
	// to ListUsers and ListUserRoles for each user.
	// Required permissions:
	// - read:users
	// - read:roles
	ListUsersWithRoles(context.Context, *ListUsersWithRolesRequest) (*ListUsersWithRolesResponse, error)
	mustEmbedUnimplementedAggregationServiceServer()
}

// UnimplementedAggregationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregationServiceServer struct{}

func (UnimplementedAggregationServiceServer) ListUsersWithRoles(context.Context, *ListUsersWithRolesRequest) (*ListUsersWithRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersWithRoles not implemented")
}
func (UnimplementedAggregationServiceServer) mustEmbedUnimplementedAggregationServiceServer() {}
func (UnimplementedAggregationServiceServer) testEmbeddedByValue()                            {}

// UnsafeAggregationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregationServiceServer will
// result in compilation errors.
type UnsafeAggregationServiceServer interface {
	mustEmbedUnimplementedAggregationServiceServer()
}

func RegisterAggregationServiceServer(s grpc.ServiceRegistrar, srv AggregationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAggregationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggregationService_ServiceDesc, srv)
}

func _AggregationService_ListUsersWithRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersWithRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregationServiceServer).ListUsersWithRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregationService_ListUsersWithRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregationServiceServer).ListUsersWithRoles(ctx, req.(*ListUsersWithRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregationService_ServiceDesc is the grpc.ServiceDesc for AggregationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.cloud.ui.v1.AggregationService",
	HandlerType: (*AggregationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsersWithRoles",
			Handler:    _AggregationService_ListUsersWithRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/cloud/ui/v1/ui.proto",
}
