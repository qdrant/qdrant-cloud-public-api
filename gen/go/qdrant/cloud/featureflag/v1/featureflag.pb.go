// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: qdrant/cloud/featureflag/v1/featureflag.proto

package featureflagv1

import (
	_ "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FeatureFlagStatus defines the activation state of a flag.
type FeatureFlagStatus int32

const (
	// Unspecified feature flag status.
	FeatureFlagStatus_FEATURE_FLAG_STATUS_UNSPECIFIED FeatureFlagStatus = 0
	// The feature flag is enabled.
	FeatureFlagStatus_FEATURE_FLAG_STATUS_ENABLED FeatureFlagStatus = 1
	// The feature flag is disabled.
	FeatureFlagStatus_FEATURE_FLAG_STATUS_DISABLED FeatureFlagStatus = 2
)

// Enum value maps for FeatureFlagStatus.
var (
	FeatureFlagStatus_name = map[int32]string{
		0: "FEATURE_FLAG_STATUS_UNSPECIFIED",
		1: "FEATURE_FLAG_STATUS_ENABLED",
		2: "FEATURE_FLAG_STATUS_DISABLED",
	}
	FeatureFlagStatus_value = map[string]int32{
		"FEATURE_FLAG_STATUS_UNSPECIFIED": 0,
		"FEATURE_FLAG_STATUS_ENABLED":     1,
		"FEATURE_FLAG_STATUS_DISABLED":    2,
	}
)

func (x FeatureFlagStatus) Enum() *FeatureFlagStatus {
	p := new(FeatureFlagStatus)
	*p = x
	return p
}

func (x FeatureFlagStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureFlagStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_featureflag_v1_featureflag_proto_enumTypes[0].Descriptor()
}

func (FeatureFlagStatus) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_featureflag_v1_featureflag_proto_enumTypes[0]
}

func (x FeatureFlagStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureFlagStatus.Descriptor instead.
func (FeatureFlagStatus) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDescGZIP(), []int{0}
}

// Request to list all feature flags.
type ListFeatureFlagsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFeatureFlagsRequest) Reset() {
	*x = ListFeatureFlagsRequest{}
	mi := &file_qdrant_cloud_featureflag_v1_featureflag_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFeatureFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeatureFlagsRequest) ProtoMessage() {}

func (x *ListFeatureFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_featureflag_v1_featureflag_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeatureFlagsRequest.ProtoReflect.Descriptor instead.
func (*ListFeatureFlagsRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDescGZIP(), []int{0}
}

// Response containing a list of feature flags.
type ListFeatureFlagsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual feature flags in this list.
	Items         []*FeatureFlag `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFeatureFlagsResponse) Reset() {
	*x = ListFeatureFlagsResponse{}
	mi := &file_qdrant_cloud_featureflag_v1_featureflag_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFeatureFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeatureFlagsResponse) ProtoMessage() {}

func (x *ListFeatureFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_featureflag_v1_featureflag_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeatureFlagsResponse.ProtoReflect.Descriptor instead.
func (*ListFeatureFlagsResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDescGZIP(), []int{1}
}

func (x *ListFeatureFlagsResponse) GetItems() []*FeatureFlag {
	if x != nil {
		return x.Items
	}
	return nil
}

// A single feature flag definition.
type FeatureFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the feature flag.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Is it enabled or not
	Status        FeatureFlagStatus `protobuf:"varint,4,opt,name=status,proto3,enum=qdrant.cloud.featureflag.v1.FeatureFlagStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeatureFlag) Reset() {
	*x = FeatureFlag{}
	mi := &file_qdrant_cloud_featureflag_v1_featureflag_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlag) ProtoMessage() {}

func (x *FeatureFlag) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_featureflag_v1_featureflag_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlag.ProtoReflect.Descriptor instead.
func (*FeatureFlag) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureFlag) GetStatus() FeatureFlagStatus {
	if x != nil {
		return x.Status
	}
	return FeatureFlagStatus_FEATURE_FLAG_STATUS_UNSPECIFIED
}

var File_qdrant_cloud_featureflag_v1_featureflag_proto protoreflect.FileDescriptor

var file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDesc = string([]byte{
	0x0a, 0x2d, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x69, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x66, 0x6c, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2a, 0x7b, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x32, 0xbd,
	0x01, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x8a, 0xb5, 0x18, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x66, 0x6c, 0x61, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x9e,
	0x02, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e,
	0x76, 0x31, 0x42, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61,
	0x67, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x51, 0x43, 0x46, 0xaa, 0x02, 0x1b, 0x51, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66,
	0x6c, 0x61, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1b, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61,
	0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x27, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1e, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDescOnce sync.Once
	file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDescData []byte
)

func file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDescGZIP() []byte {
	file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDescOnce.Do(func() {
		file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDesc), len(file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDesc)))
	})
	return file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDescData
}

var file_qdrant_cloud_featureflag_v1_featureflag_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_qdrant_cloud_featureflag_v1_featureflag_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_qdrant_cloud_featureflag_v1_featureflag_proto_goTypes = []any{
	(FeatureFlagStatus)(0),           // 0: qdrant.cloud.featureflag.v1.FeatureFlagStatus
	(*ListFeatureFlagsRequest)(nil),  // 1: qdrant.cloud.featureflag.v1.ListFeatureFlagsRequest
	(*ListFeatureFlagsResponse)(nil), // 2: qdrant.cloud.featureflag.v1.ListFeatureFlagsResponse
	(*FeatureFlag)(nil),              // 3: qdrant.cloud.featureflag.v1.FeatureFlag
}
var file_qdrant_cloud_featureflag_v1_featureflag_proto_depIdxs = []int32{
	3, // 0: qdrant.cloud.featureflag.v1.ListFeatureFlagsResponse.items:type_name -> qdrant.cloud.featureflag.v1.FeatureFlag
	0, // 1: qdrant.cloud.featureflag.v1.FeatureFlag.status:type_name -> qdrant.cloud.featureflag.v1.FeatureFlagStatus
	1, // 2: qdrant.cloud.featureflag.v1.FeatureFlagService.ListFeatureFlags:input_type -> qdrant.cloud.featureflag.v1.ListFeatureFlagsRequest
	2, // 3: qdrant.cloud.featureflag.v1.FeatureFlagService.ListFeatureFlags:output_type -> qdrant.cloud.featureflag.v1.ListFeatureFlagsResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_qdrant_cloud_featureflag_v1_featureflag_proto_init() }
func file_qdrant_cloud_featureflag_v1_featureflag_proto_init() {
	if File_qdrant_cloud_featureflag_v1_featureflag_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDesc), len(file_qdrant_cloud_featureflag_v1_featureflag_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qdrant_cloud_featureflag_v1_featureflag_proto_goTypes,
		DependencyIndexes: file_qdrant_cloud_featureflag_v1_featureflag_proto_depIdxs,
		EnumInfos:         file_qdrant_cloud_featureflag_v1_featureflag_proto_enumTypes,
		MessageInfos:      file_qdrant_cloud_featureflag_v1_featureflag_proto_msgTypes,
	}.Build()
	File_qdrant_cloud_featureflag_v1_featureflag_proto = out.File
	file_qdrant_cloud_featureflag_v1_featureflag_proto_goTypes = nil
	file_qdrant_cloud_featureflag_v1_featureflag_proto_depIdxs = nil
}
