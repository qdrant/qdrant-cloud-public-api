// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: qdrant/cloud/hybrid/v1/operator.proto

package hybridv1

import (
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/k8s.io/api/core/v1"
	v13 "github.com/qdrant/qdrant-cloud-public-api/gen/go/k8s.io/api/networking/v1"
	v11 "github.com/qdrant/qdrant-cloud-public-api/gen/go/k8s.io/api/policy/v1"
	v12 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/cluster/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OperatorConfiguration represents the operator configuration
type OperatorConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Log level
	LogLevel *string `protobuf:"bytes,1,opt,name=log_level,json=logLevel,proto3,oneof" json:"log_level,omitempty"`
	// Operator features
	Features      *OperatorFeatures `protobuf:"bytes,2,opt,name=features,proto3,oneof" json:"features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorConfiguration) Reset() {
	*x = OperatorConfiguration{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorConfiguration) ProtoMessage() {}

func (x *OperatorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorConfiguration.ProtoReflect.Descriptor instead.
func (*OperatorConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{0}
}

func (x *OperatorConfiguration) GetLogLevel() string {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return ""
}

func (x *OperatorConfiguration) GetFeatures() *OperatorFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

// Operator features
type OperatorFeatures struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cluster management feature
	ClusterManagement *OperatorClusterManagement `protobuf:"bytes,1,opt,name=cluster_management,json=clusterManagement,proto3,oneof" json:"cluster_management,omitempty"`
	// Backup management feature
	BackupManagement *OperatorBackupManagement `protobuf:"bytes,2,opt,name=backup_management,json=backupManagement,proto3,oneof" json:"backup_management,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OperatorFeatures) Reset() {
	*x = OperatorFeatures{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorFeatures) ProtoMessage() {}

func (x *OperatorFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorFeatures.ProtoReflect.Descriptor instead.
func (*OperatorFeatures) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{1}
}

func (x *OperatorFeatures) GetClusterManagement() *OperatorClusterManagement {
	if x != nil {
		return x.ClusterManagement
	}
	return nil
}

func (x *OperatorFeatures) GetBackupManagement() *OperatorBackupManagement {
	if x != nil {
		return x.BackupManagement
	}
	return nil
}

// Backup management operator feature
type OperatorBackupManagement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether or not the backup features are enabled.
	// Default is true.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// Snapshots configuration
	Snapshots *OperatorSnapshots `protobuf:"bytes,2,opt,name=snapshots,proto3,oneof" json:"snapshots,omitempty"`
	// Scheduled snapshot configuration
	ScheduledSnapshots *OperatorScheduledSnapshots `protobuf:"bytes,3,opt,name=scheduled_snapshots,json=scheduledSnapshots,proto3,oneof" json:"scheduled_snapshots,omitempty"`
	// Restores configuration
	Restores      *OperatorRestores `protobuf:"bytes,4,opt,name=restores,proto3,oneof" json:"restores,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorBackupManagement) Reset() {
	*x = OperatorBackupManagement{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorBackupManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorBackupManagement) ProtoMessage() {}

func (x *OperatorBackupManagement) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorBackupManagement.ProtoReflect.Descriptor instead.
func (*OperatorBackupManagement) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{2}
}

func (x *OperatorBackupManagement) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *OperatorBackupManagement) GetSnapshots() *OperatorSnapshots {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *OperatorBackupManagement) GetScheduledSnapshots() *OperatorScheduledSnapshots {
	if x != nil {
		return x.ScheduledSnapshots
	}
	return nil
}

func (x *OperatorBackupManagement) GetRestores() *OperatorRestores {
	if x != nil {
		return x.Restores
	}
	return nil
}

// Operator snapshots configuration
type OperatorSnapshots struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set to true when enabled
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// The VolumeSnapshotClass used to make VolumeSnapshots.
	// Default is "csi-snapclass".
	VolumeSnapshotClass *string `protobuf:"bytes,2,opt,name=volume_snapshot_class,json=volumeSnapshotClass,proto3,oneof" json:"volume_snapshot_class,omitempty"`
	// The duration a snapshot is retained when the phase becomes Failed or Skipped
	// Default is 72h (3d).
	RetainUnsuccessful *string `protobuf:"bytes,3,opt,name=retain_unsuccessful,json=retainUnsuccessful,proto3,oneof" json:"retain_unsuccessful,omitempty"`
	// the maximum number of concurrent Reconciles which can be run. Defaults to 1.
	MaxConcurrentReconciles *uint32 `protobuf:"varint,4,opt,name=max_concurrent_reconciles,json=maxConcurrentReconciles,proto3,oneof" json:"max_concurrent_reconciles,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *OperatorSnapshots) Reset() {
	*x = OperatorSnapshots{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorSnapshots) ProtoMessage() {}

func (x *OperatorSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorSnapshots.ProtoReflect.Descriptor instead.
func (*OperatorSnapshots) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{3}
}

func (x *OperatorSnapshots) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *OperatorSnapshots) GetVolumeSnapshotClass() string {
	if x != nil && x.VolumeSnapshotClass != nil {
		return *x.VolumeSnapshotClass
	}
	return ""
}

func (x *OperatorSnapshots) GetRetainUnsuccessful() string {
	if x != nil && x.RetainUnsuccessful != nil {
		return *x.RetainUnsuccessful
	}
	return ""
}

func (x *OperatorSnapshots) GetMaxConcurrentReconciles() uint32 {
	if x != nil && x.MaxConcurrentReconciles != nil {
		return *x.MaxConcurrentReconciles
	}
	return 0
}

// Operator scheduled snapshots configuration
type OperatorScheduledSnapshots struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether or not the ScheduledSnapshot feature is enabled.
	// Default is true.
	Enable *bool `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// the maximum number of concurrent Reconciles which can be run. Defaults to 1.
	MaxConcurrentReconciles *int32 `protobuf:"varint,3,opt,name=max_concurrent_reconciles,json=maxConcurrentReconciles,proto3,oneof" json:"max_concurrent_reconciles,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *OperatorScheduledSnapshots) Reset() {
	*x = OperatorScheduledSnapshots{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorScheduledSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorScheduledSnapshots) ProtoMessage() {}

func (x *OperatorScheduledSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorScheduledSnapshots.ProtoReflect.Descriptor instead.
func (*OperatorScheduledSnapshots) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{4}
}

func (x *OperatorScheduledSnapshots) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorScheduledSnapshots) GetMaxConcurrentReconciles() int32 {
	if x != nil && x.MaxConcurrentReconciles != nil {
		return *x.MaxConcurrentReconciles
	}
	return 0
}

// Operator restores configuration
type OperatorRestores struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether or not the Restore feature is enabled.
	// Default is true.
	Enable *bool `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// the maximum number of concurrent Reconciles which can be run. Defaults to 1.
	MaxConcurrentReconciles *int32 `protobuf:"varint,2,opt,name=max_concurrent_reconciles,json=maxConcurrentReconciles,proto3,oneof" json:"max_concurrent_reconciles,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *OperatorRestores) Reset() {
	*x = OperatorRestores{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorRestores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorRestores) ProtoMessage() {}

func (x *OperatorRestores) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorRestores.ProtoReflect.Descriptor instead.
func (*OperatorRestores) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{5}
}

func (x *OperatorRestores) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorRestores) GetMaxConcurrentReconciles() int32 {
	if x != nil && x.MaxConcurrentReconciles != nil {
		return *x.MaxConcurrentReconciles
	}
	return 0
}

// Operator cluster management feature
type OperatorClusterManagement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether or not the ClusterManagement feature is enabled.
	// Default is true.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// The StorageClass used to make database and snapshot PVCs.
	// If unset, the default storage class of Kubernetes is used.
	StorageClass *OperatorStorageClass `protobuf:"bytes,2,opt,name=storage_class,json=storageClass,proto3,oneof" json:"storage_class,omitempty"`
	// Qdrant config contains settings specific for the database
	Qdrant *OperatorQdrant `protobuf:"bytes,3,opt,name=qdrant,proto3,oneof" json:"qdrant,omitempty"`
	// Scheduling config contains the settings specific for scheduling
	Scheduling *OperatorScheduling `protobuf:"bytes,4,opt,name=scheduling,proto3,oneof" json:"scheduling,omitempty"`
	// ClusterManager config contains the settings specific for cluster manager
	ClusterManager *OperatorClusterManager `protobuf:"bytes,5,opt,name=cluster_manager,json=clusterManager,proto3,oneof" json:"cluster_manager,omitempty"`
	// Ingress config contains the settings specific for ingress
	Ingress *OperatorIngress `protobuf:"bytes,6,opt,name=ingress,proto3,oneof" json:"ingress,omitempty"`
	// The duration of a single call to the cluster telemetry endpoint is allowed to take.
	// Default is 3 seconds
	TelemetryTimeout *string `protobuf:"bytes,7,opt,name=telemetry_timeout,json=telemetryTimeout,proto3,oneof" json:"telemetry_timeout,omitempty"`
	// the maximum number of concurrent Reconciles which can be run. Defaults to 20.
	MaxConcurrentReconciles *uint32 `protobuf:"varint,8,opt,name=max_concurrent_reconciles,json=maxConcurrentReconciles,proto3,oneof" json:"max_concurrent_reconciles,omitempty"`
	// VolumeExpansionMode specifies the expansion mode, which can be online or offline (e.g. in case of Azure).
	VolumeExpansionMode *string `protobuf:"bytes,9,opt,name=volume_expansion_mode,json=volumeExpansionMode,proto3,oneof" json:"volume_expansion_mode,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorClusterManagement) Reset() {
	*x = OperatorClusterManagement{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorClusterManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorClusterManagement) ProtoMessage() {}

func (x *OperatorClusterManagement) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorClusterManagement.ProtoReflect.Descriptor instead.
func (*OperatorClusterManagement) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{6}
}

func (x *OperatorClusterManagement) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *OperatorClusterManagement) GetStorageClass() *OperatorStorageClass {
	if x != nil {
		return x.StorageClass
	}
	return nil
}

func (x *OperatorClusterManagement) GetQdrant() *OperatorQdrant {
	if x != nil {
		return x.Qdrant
	}
	return nil
}

func (x *OperatorClusterManagement) GetScheduling() *OperatorScheduling {
	if x != nil {
		return x.Scheduling
	}
	return nil
}

func (x *OperatorClusterManagement) GetClusterManager() *OperatorClusterManager {
	if x != nil {
		return x.ClusterManager
	}
	return nil
}

func (x *OperatorClusterManagement) GetIngress() *OperatorIngress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *OperatorClusterManagement) GetTelemetryTimeout() string {
	if x != nil && x.TelemetryTimeout != nil {
		return *x.TelemetryTimeout
	}
	return ""
}

func (x *OperatorClusterManagement) GetMaxConcurrentReconciles() uint32 {
	if x != nil && x.MaxConcurrentReconciles != nil {
		return *x.MaxConcurrentReconciles
	}
	return 0
}

func (x *OperatorClusterManagement) GetVolumeExpansionMode() string {
	if x != nil && x.VolumeExpansionMode != nil {
		return *x.VolumeExpansionMode
	}
	return ""
}

// TODO is it worth of exposing this through API?
type OperatorScheduling struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Topology constraints for Qdrant pod scheduling
	TopologySpreadConstraints []*v1.TopologySpreadConstraint `protobuf:"bytes,1,rep,name=topology_spread_constraints,json=topologySpreadConstraints,proto3" json:"topology_spread_constraints,omitempty"`
	// Default Qdrant pod disruption budget
	PodDisruptionBudget []*v11.PodDisruptionBudget `protobuf:"bytes,2,rep,name=pod_disruption_budget,json=podDisruptionBudget,proto3" json:"pod_disruption_budget,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorScheduling) Reset() {
	*x = OperatorScheduling{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorScheduling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorScheduling) ProtoMessage() {}

func (x *OperatorScheduling) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorScheduling.ProtoReflect.Descriptor instead.
func (*OperatorScheduling) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{7}
}

func (x *OperatorScheduling) GetTopologySpreadConstraints() []*v1.TopologySpreadConstraint {
	if x != nil {
		return x.TopologySpreadConstraints
	}
	return nil
}

func (x *OperatorScheduling) GetPodDisruptionBudget() []*v11.PodDisruptionBudget {
	if x != nil {
		return x.PodDisruptionBudget
	}
	return nil
}

// TODO is it worth of exposing this, given that cluster manager is always installed?
type OperatorClusterManager struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO
	Enable *bool `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// TODO
	EndpointAddress *string `protobuf:"bytes,2,opt,name=endpoint_address,json=endpointAddress,proto3,oneof" json:"endpoint_address,omitempty"`
	// TODO
	InvocationInterval *string `protobuf:"bytes,3,opt,name=invocation_interval,json=invocationInterval,proto3,oneof" json:"invocation_interval,omitempty"`
	// TODO
	Timeout *string `protobuf:"bytes,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// TODO
	ManageRulesOverrides *OperatorClusterManagerOverrides `protobuf:"bytes,5,opt,name=manage_rules_overrides,json=manageRulesOverrides,proto3,oneof" json:"manage_rules_overrides,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *OperatorClusterManager) Reset() {
	*x = OperatorClusterManager{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorClusterManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorClusterManager) ProtoMessage() {}

func (x *OperatorClusterManager) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorClusterManager.ProtoReflect.Descriptor instead.
func (*OperatorClusterManager) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{8}
}

func (x *OperatorClusterManager) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorClusterManager) GetEndpointAddress() string {
	if x != nil && x.EndpointAddress != nil {
		return *x.EndpointAddress
	}
	return ""
}

func (x *OperatorClusterManager) GetInvocationInterval() string {
	if x != nil && x.InvocationInterval != nil {
		return *x.InvocationInterval
	}
	return ""
}

func (x *OperatorClusterManager) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return ""
}

func (x *OperatorClusterManager) GetManageRulesOverrides() *OperatorClusterManagerOverrides {
	if x != nil {
		return x.ManageRulesOverrides
	}
	return nil
}

// TODO - should not be exposed through API because in hybrid cloud we expose clusters only via clusterIP
type OperatorIngress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO
	Enable *bool `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// TODO
	Provider *string `protobuf:"bytes,2,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	// TODO
	KubernetesIngress *OperatorKubernetesIngress `protobuf:"bytes,3,opt,name=kubernetes_ingress,json=kubernetesIngress,proto3,oneof" json:"kubernetes_ingress,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OperatorIngress) Reset() {
	*x = OperatorIngress{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorIngress) ProtoMessage() {}

func (x *OperatorIngress) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorIngress.ProtoReflect.Descriptor instead.
func (*OperatorIngress) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{9}
}

func (x *OperatorIngress) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorIngress) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *OperatorIngress) GetKubernetesIngress() *OperatorKubernetesIngress {
	if x != nil {
		return x.KubernetesIngress
	}
	return nil
}

// TODO
type OperatorKubernetesIngress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO
	IngressClassName *string `protobuf:"bytes,1,opt,name=ingress_class_name,json=ingressClassName,proto3,oneof" json:"ingress_class_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OperatorKubernetesIngress) Reset() {
	*x = OperatorKubernetesIngress{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorKubernetesIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorKubernetesIngress) ProtoMessage() {}

func (x *OperatorKubernetesIngress) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorKubernetesIngress.ProtoReflect.Descriptor instead.
func (*OperatorKubernetesIngress) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{10}
}

func (x *OperatorKubernetesIngress) GetIngressClassName() string {
	if x != nil && x.IngressClassName != nil {
		return *x.IngressClassName
	}
	return ""
}

// TODO
type OperatorClusterManagerOverrides struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO
	DryRun *bool `protobuf:"varint,1,opt,name=dry_run,json=dryRun,proto3,oneof" json:"dry_run,omitempty"`
	// TODO
	MaxTransfers *int32 `protobuf:"varint,2,opt,name=max_transfers,json=maxTransfers,proto3,oneof" json:"max_transfers,omitempty"`
	// TODO
	MaxTransfersPerCollection *int32 `protobuf:"varint,3,opt,name=max_transfers_per_collection,json=maxTransfersPerCollection,proto3,oneof" json:"max_transfers_per_collection,omitempty"`
	// TODO
	Rebalance *string `protobuf:"bytes,4,opt,name=rebalance,proto3,oneof" json:"rebalance,omitempty"`
	// TODO
	Replicate     *string `protobuf:"bytes,5,opt,name=replicate,proto3,oneof" json:"replicate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorClusterManagerOverrides) Reset() {
	*x = OperatorClusterManagerOverrides{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorClusterManagerOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorClusterManagerOverrides) ProtoMessage() {}

func (x *OperatorClusterManagerOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorClusterManagerOverrides.ProtoReflect.Descriptor instead.
func (*OperatorClusterManagerOverrides) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{11}
}

func (x *OperatorClusterManagerOverrides) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *OperatorClusterManagerOverrides) GetMaxTransfers() int32 {
	if x != nil && x.MaxTransfers != nil {
		return *x.MaxTransfers
	}
	return 0
}

func (x *OperatorClusterManagerOverrides) GetMaxTransfersPerCollection() int32 {
	if x != nil && x.MaxTransfersPerCollection != nil {
		return *x.MaxTransfersPerCollection
	}
	return 0
}

func (x *OperatorClusterManagerOverrides) GetRebalance() string {
	if x != nil && x.Rebalance != nil {
		return *x.Rebalance
	}
	return ""
}

func (x *OperatorClusterManagerOverrides) GetReplicate() string {
	if x != nil && x.Replicate != nil {
		return *x.Replicate
	}
	return ""
}

// Operator storage class
type OperatorStorageClass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The StorageClass used to make database PVCs.
	// If unset, the default storage class of Kubernetes is used.
	Database *string `protobuf:"bytes,2,opt,name=database,proto3,oneof" json:"database,omitempty"`
	// The StorageClass used to make snapshot PVCs.
	// If unset, the default storage class of Kubernetes is used.
	Snapshot      *string `protobuf:"bytes,3,opt,name=snapshot,proto3,oneof" json:"snapshot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorStorageClass) Reset() {
	*x = OperatorStorageClass{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorStorageClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorStorageClass) ProtoMessage() {}

func (x *OperatorStorageClass) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorStorageClass.ProtoReflect.Descriptor instead.
func (*OperatorStorageClass) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{12}
}

func (x *OperatorStorageClass) GetDatabase() string {
	if x != nil && x.Database != nil {
		return *x.Database
	}
	return ""
}

func (x *OperatorStorageClass) GetSnapshot() string {
	if x != nil && x.Snapshot != nil {
		return *x.Snapshot
	}
	return ""
}

// Operator Qdrant database config
type OperatorQdrant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The config where to find images for Qdrant cluster
	Image *OperatorQdrantImage `protobuf:"bytes,1,opt,name=image,proto3,oneof" json:"image,omitempty"`
	// storage contains the settings for the storage of the Qdrant cluster
	Storage *OperatorQdrantStorage `protobuf:"bytes,2,opt,name=storage,proto3,oneof" json:"storage,omitempty"`
	// Qdrant DB log level
	// Default is INFO.
	LogLevel *v12.DatabaseConfigurationLogLevel `protobuf:"varint,3,opt,name=log_level,json=logLevel,proto3,enum=qdrant.cloud.cluster.v1.DatabaseConfigurationLogLevel,oneof" json:"log_level,omitempty"`
	// Default Qdrant security context configuration
	SecurityContext *OperatorSecurityContext `protobuf:"bytes,4,opt,name=security_context,json=securityContext,proto3,oneof" json:"security_context,omitempty"`
	// Network policies configuration for the Qdrant databases
	// TODO, not sure if needs to be exposed.
	NetworkPolicies *OperatorNetworkPolicy `protobuf:"bytes,5,opt,name=network_policies,json=networkPolicies,proto3,oneof" json:"network_policies,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OperatorQdrant) Reset() {
	*x = OperatorQdrant{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorQdrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorQdrant) ProtoMessage() {}

func (x *OperatorQdrant) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorQdrant.ProtoReflect.Descriptor instead.
func (*OperatorQdrant) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{13}
}

func (x *OperatorQdrant) GetImage() *OperatorQdrantImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *OperatorQdrant) GetStorage() *OperatorQdrantStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *OperatorQdrant) GetLogLevel() v12.DatabaseConfigurationLogLevel {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return v12.DatabaseConfigurationLogLevel(0)
}

func (x *OperatorQdrant) GetSecurityContext() *OperatorSecurityContext {
	if x != nil {
		return x.SecurityContext
	}
	return nil
}

func (x *OperatorQdrant) GetNetworkPolicies() *OperatorNetworkPolicy {
	if x != nil {
		return x.NetworkPolicies
	}
	return nil
}

// Network policies configuration for the Qdrant databases
type OperatorNetworkPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether or not NetworkPolicy management is enabled.
	// If set to false, no NetworkPolicies will be created.
	// Default is true.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// Ingress rules
	Ingress []*v13.NetworkPolicyIngressRule `protobuf:"bytes,2,rep,name=ingress,proto3" json:"ingress,omitempty"`
	// Egress rules
	Egress        []*v13.NetworkPolicyEgressRule `protobuf:"bytes,3,rep,name=egress,proto3" json:"egress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorNetworkPolicy) Reset() {
	*x = OperatorNetworkPolicy{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorNetworkPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorNetworkPolicy) ProtoMessage() {}

func (x *OperatorNetworkPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorNetworkPolicy.ProtoReflect.Descriptor instead.
func (*OperatorNetworkPolicy) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{14}
}

func (x *OperatorNetworkPolicy) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *OperatorNetworkPolicy) GetIngress() []*v13.NetworkPolicyIngressRule {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *OperatorNetworkPolicy) GetEgress() []*v13.NetworkPolicyEgressRule {
	if x != nil {
		return x.Egress
	}
	return nil
}

// Default Qdrant security context configuration
type OperatorSecurityContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable default security context.
	// Default is false.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// Default user for qdrant container
	User *string `protobuf:"bytes,2,opt,name=user,proto3,oneof" json:"user,omitempty"`
	// Default fsGroup for qdrant container
	FsGroup *string `protobuf:"bytes,3,opt,name=fs_group,json=fsGroup,proto3,oneof" json:"fs_group,omitempty"`
	// Default group for qdrant container
	Group         *string `protobuf:"bytes,4,opt,name=group,proto3,oneof" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorSecurityContext) Reset() {
	*x = OperatorSecurityContext{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorSecurityContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorSecurityContext) ProtoMessage() {}

func (x *OperatorSecurityContext) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorSecurityContext.ProtoReflect.Descriptor instead.
func (*OperatorSecurityContext) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{15}
}

func (x *OperatorSecurityContext) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *OperatorSecurityContext) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *OperatorSecurityContext) GetFsGroup() string {
	if x != nil && x.FsGroup != nil {
		return *x.FsGroup
	}
	return ""
}

func (x *OperatorSecurityContext) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

// Storage contains the settings for the storage of the Qdrant cluster
type OperatorQdrantStorage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Performance storage settings
	Performance   *OperatorQdrantPerformance `protobuf:"bytes,1,opt,name=performance,proto3,oneof" json:"performance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorQdrantStorage) Reset() {
	*x = OperatorQdrantStorage{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorQdrantStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorQdrantStorage) ProtoMessage() {}

func (x *OperatorQdrantStorage) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorQdrantStorage.ProtoReflect.Descriptor instead.
func (*OperatorQdrantStorage) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{16}
}

func (x *OperatorQdrantStorage) GetPerformance() *OperatorQdrantPerformance {
	if x != nil {
		return x.Performance
	}
	return nil
}

// Storage performance config
type OperatorQdrantPerformance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU budget, how many CPUs (threads) to allocate for an optimization job.
	// If 0 - auto selection, keep 1 or more CPUs unallocated depending on CPU size
	// If negative - subtract this number of CPUs from the available CPUs.
	// If positive - use this exact number of CPUs.
	OptimizerCpuBudget *int32 `protobuf:"varint,1,opt,name=optimizer_cpu_budget,json=optimizerCpuBudget,proto3,oneof" json:"optimizer_cpu_budget,omitempty"`
	// Enable async scorer which uses io_uring when rescoring.
	// Only supported on Linux, must be enabled in your kernel.
	// See: <https://qdrant.tech/articles/io_uring/#and-what-about-qdrant>
	AsyncScorer   *bool `protobuf:"varint,2,opt,name=async_scorer,json=asyncScorer,proto3,oneof" json:"async_scorer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorQdrantPerformance) Reset() {
	*x = OperatorQdrantPerformance{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorQdrantPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorQdrantPerformance) ProtoMessage() {}

func (x *OperatorQdrantPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorQdrantPerformance.ProtoReflect.Descriptor instead.
func (*OperatorQdrantPerformance) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{17}
}

func (x *OperatorQdrantPerformance) GetOptimizerCpuBudget() int32 {
	if x != nil && x.OptimizerCpuBudget != nil {
		return *x.OptimizerCpuBudget
	}
	return 0
}

func (x *OperatorQdrantPerformance) GetAsyncScorer() bool {
	if x != nil && x.AsyncScorer != nil {
		return *x.AsyncScorer
	}
	return false
}

// config where to find the image for Qqdrant
type OperatorQdrantImage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The repository where to find the image for qdrant
	// Default is "qdrant/qdrant"
	Repository *string `protobuf:"bytes,1,opt,name=repository,proto3,oneof" json:"repository,omitempty"`
	// Image pull policy
	PullPolicy *string `protobuf:"bytes,2,opt,name=pull_policy,json=pullPolicy,proto3,oneof" json:"pull_policy,omitempty"`
	// Image pull secret name
	PullSecretName *string `protobuf:"bytes,3,opt,name=pull_secret_name,json=pullSecretName,proto3,oneof" json:"pull_secret_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *OperatorQdrantImage) Reset() {
	*x = OperatorQdrantImage{}
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorQdrantImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorQdrantImage) ProtoMessage() {}

func (x *OperatorQdrantImage) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorQdrantImage.ProtoReflect.Descriptor instead.
func (*OperatorQdrantImage) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP(), []int{18}
}

func (x *OperatorQdrantImage) GetRepository() string {
	if x != nil && x.Repository != nil {
		return *x.Repository
	}
	return ""
}

func (x *OperatorQdrantImage) GetPullPolicy() string {
	if x != nil && x.PullPolicy != nil {
		return *x.PullPolicy
	}
	return ""
}

func (x *OperatorQdrantImage) GetPullSecretName() string {
	if x != nil && x.PullSecretName != nil {
		return *x.PullSecretName
	}
	return ""
}

var File_qdrant_cloud_hybrid_v1_operator_proto protoreflect.FileDescriptor

var file_qdrant_cloud_hybrid_v1_operator_proto_rawDesc = string([]byte{
	0x0a, 0x25, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x1a,
	0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x48, 0x01, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x8a, 0x02, 0x0a,
	0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x65, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfb, 0x02, 0x0a, 0x18, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x48, 0x01, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x48, 0x02, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x13, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x5f,
	0x75, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x55, 0x6e, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03,
	0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x6e,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x99,
	0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xa0, 0x06, 0x0a, 0x19, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x01, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x06, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x48, 0x02, 0x52, 0x06, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x05, 0x52,
	0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x19, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x07, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x65, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xe1, 0x01,
	0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x6c, 0x0a, 0x1b, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x19, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x5d, 0x0a, 0x15, 0x70, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x44, 0x69, 0x73, 0x72,
	0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x13, 0x70, 0x6f,
	0x64, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x22, 0x8d, 0x03, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x69, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x72,
	0x0a, 0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x48, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x02, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x65, 0x0a, 0x19, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xd0, 0x02, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x72, 0x79,
	0x5f, 0x72, 0x75, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x22, 0x72, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x8e, 0x04, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x48, 0x01, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x58, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x02, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x10, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x10, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x48, 0x04, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x15, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x4c, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x49, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x66, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07,
	0x66, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x70,
	0x75, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x22, 0xc3, 0x01, 0x0a,
	0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x70, 0x75, 0x6c,
	0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0xf8, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x42, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x51, 0x43, 0x48, 0xaa, 0x02, 0x16, 0x51, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x22, 0x51,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x19, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x3a, 0x3a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_qdrant_cloud_hybrid_v1_operator_proto_rawDescOnce sync.Once
	file_qdrant_cloud_hybrid_v1_operator_proto_rawDescData []byte
)

func file_qdrant_cloud_hybrid_v1_operator_proto_rawDescGZIP() []byte {
	file_qdrant_cloud_hybrid_v1_operator_proto_rawDescOnce.Do(func() {
		file_qdrant_cloud_hybrid_v1_operator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qdrant_cloud_hybrid_v1_operator_proto_rawDesc), len(file_qdrant_cloud_hybrid_v1_operator_proto_rawDesc)))
	})
	return file_qdrant_cloud_hybrid_v1_operator_proto_rawDescData
}

var file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_qdrant_cloud_hybrid_v1_operator_proto_goTypes = []any{
	(*OperatorConfiguration)(nil),           // 0: qdrant.cloud.hybrid.v1.OperatorConfiguration
	(*OperatorFeatures)(nil),                // 1: qdrant.cloud.hybrid.v1.OperatorFeatures
	(*OperatorBackupManagement)(nil),        // 2: qdrant.cloud.hybrid.v1.OperatorBackupManagement
	(*OperatorSnapshots)(nil),               // 3: qdrant.cloud.hybrid.v1.OperatorSnapshots
	(*OperatorScheduledSnapshots)(nil),      // 4: qdrant.cloud.hybrid.v1.OperatorScheduledSnapshots
	(*OperatorRestores)(nil),                // 5: qdrant.cloud.hybrid.v1.OperatorRestores
	(*OperatorClusterManagement)(nil),       // 6: qdrant.cloud.hybrid.v1.OperatorClusterManagement
	(*OperatorScheduling)(nil),              // 7: qdrant.cloud.hybrid.v1.OperatorScheduling
	(*OperatorClusterManager)(nil),          // 8: qdrant.cloud.hybrid.v1.OperatorClusterManager
	(*OperatorIngress)(nil),                 // 9: qdrant.cloud.hybrid.v1.OperatorIngress
	(*OperatorKubernetesIngress)(nil),       // 10: qdrant.cloud.hybrid.v1.OperatorKubernetesIngress
	(*OperatorClusterManagerOverrides)(nil), // 11: qdrant.cloud.hybrid.v1.OperatorClusterManagerOverrides
	(*OperatorStorageClass)(nil),            // 12: qdrant.cloud.hybrid.v1.OperatorStorageClass
	(*OperatorQdrant)(nil),                  // 13: qdrant.cloud.hybrid.v1.OperatorQdrant
	(*OperatorNetworkPolicy)(nil),           // 14: qdrant.cloud.hybrid.v1.OperatorNetworkPolicy
	(*OperatorSecurityContext)(nil),         // 15: qdrant.cloud.hybrid.v1.OperatorSecurityContext
	(*OperatorQdrantStorage)(nil),           // 16: qdrant.cloud.hybrid.v1.OperatorQdrantStorage
	(*OperatorQdrantPerformance)(nil),       // 17: qdrant.cloud.hybrid.v1.OperatorQdrantPerformance
	(*OperatorQdrantImage)(nil),             // 18: qdrant.cloud.hybrid.v1.OperatorQdrantImage
	(*v1.TopologySpreadConstraint)(nil),     // 19: k8s.io.api.core.v1.TopologySpreadConstraint
	(*v11.PodDisruptionBudget)(nil),         // 20: k8s.io.api.policy.v1.PodDisruptionBudget
	(v12.DatabaseConfigurationLogLevel)(0),  // 21: qdrant.cloud.cluster.v1.DatabaseConfigurationLogLevel
	(*v13.NetworkPolicyIngressRule)(nil),    // 22: k8s.io.api.networking.v1.NetworkPolicyIngressRule
	(*v13.NetworkPolicyEgressRule)(nil),     // 23: k8s.io.api.networking.v1.NetworkPolicyEgressRule
}
var file_qdrant_cloud_hybrid_v1_operator_proto_depIdxs = []int32{
	1,  // 0: qdrant.cloud.hybrid.v1.OperatorConfiguration.features:type_name -> qdrant.cloud.hybrid.v1.OperatorFeatures
	6,  // 1: qdrant.cloud.hybrid.v1.OperatorFeatures.cluster_management:type_name -> qdrant.cloud.hybrid.v1.OperatorClusterManagement
	2,  // 2: qdrant.cloud.hybrid.v1.OperatorFeatures.backup_management:type_name -> qdrant.cloud.hybrid.v1.OperatorBackupManagement
	3,  // 3: qdrant.cloud.hybrid.v1.OperatorBackupManagement.snapshots:type_name -> qdrant.cloud.hybrid.v1.OperatorSnapshots
	4,  // 4: qdrant.cloud.hybrid.v1.OperatorBackupManagement.scheduled_snapshots:type_name -> qdrant.cloud.hybrid.v1.OperatorScheduledSnapshots
	5,  // 5: qdrant.cloud.hybrid.v1.OperatorBackupManagement.restores:type_name -> qdrant.cloud.hybrid.v1.OperatorRestores
	12, // 6: qdrant.cloud.hybrid.v1.OperatorClusterManagement.storage_class:type_name -> qdrant.cloud.hybrid.v1.OperatorStorageClass
	13, // 7: qdrant.cloud.hybrid.v1.OperatorClusterManagement.qdrant:type_name -> qdrant.cloud.hybrid.v1.OperatorQdrant
	7,  // 8: qdrant.cloud.hybrid.v1.OperatorClusterManagement.scheduling:type_name -> qdrant.cloud.hybrid.v1.OperatorScheduling
	8,  // 9: qdrant.cloud.hybrid.v1.OperatorClusterManagement.cluster_manager:type_name -> qdrant.cloud.hybrid.v1.OperatorClusterManager
	9,  // 10: qdrant.cloud.hybrid.v1.OperatorClusterManagement.ingress:type_name -> qdrant.cloud.hybrid.v1.OperatorIngress
	19, // 11: qdrant.cloud.hybrid.v1.OperatorScheduling.topology_spread_constraints:type_name -> k8s.io.api.core.v1.TopologySpreadConstraint
	20, // 12: qdrant.cloud.hybrid.v1.OperatorScheduling.pod_disruption_budget:type_name -> k8s.io.api.policy.v1.PodDisruptionBudget
	11, // 13: qdrant.cloud.hybrid.v1.OperatorClusterManager.manage_rules_overrides:type_name -> qdrant.cloud.hybrid.v1.OperatorClusterManagerOverrides
	10, // 14: qdrant.cloud.hybrid.v1.OperatorIngress.kubernetes_ingress:type_name -> qdrant.cloud.hybrid.v1.OperatorKubernetesIngress
	18, // 15: qdrant.cloud.hybrid.v1.OperatorQdrant.image:type_name -> qdrant.cloud.hybrid.v1.OperatorQdrantImage
	16, // 16: qdrant.cloud.hybrid.v1.OperatorQdrant.storage:type_name -> qdrant.cloud.hybrid.v1.OperatorQdrantStorage
	21, // 17: qdrant.cloud.hybrid.v1.OperatorQdrant.log_level:type_name -> qdrant.cloud.cluster.v1.DatabaseConfigurationLogLevel
	15, // 18: qdrant.cloud.hybrid.v1.OperatorQdrant.security_context:type_name -> qdrant.cloud.hybrid.v1.OperatorSecurityContext
	14, // 19: qdrant.cloud.hybrid.v1.OperatorQdrant.network_policies:type_name -> qdrant.cloud.hybrid.v1.OperatorNetworkPolicy
	22, // 20: qdrant.cloud.hybrid.v1.OperatorNetworkPolicy.ingress:type_name -> k8s.io.api.networking.v1.NetworkPolicyIngressRule
	23, // 21: qdrant.cloud.hybrid.v1.OperatorNetworkPolicy.egress:type_name -> k8s.io.api.networking.v1.NetworkPolicyEgressRule
	17, // 22: qdrant.cloud.hybrid.v1.OperatorQdrantStorage.performance:type_name -> qdrant.cloud.hybrid.v1.OperatorQdrantPerformance
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_qdrant_cloud_hybrid_v1_operator_proto_init() }
func file_qdrant_cloud_hybrid_v1_operator_proto_init() {
	if File_qdrant_cloud_hybrid_v1_operator_proto != nil {
		return
	}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[0].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[1].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[2].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[3].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[4].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[5].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[6].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[8].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[9].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[10].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[11].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[12].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[13].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[14].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[15].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[16].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[17].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes[18].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qdrant_cloud_hybrid_v1_operator_proto_rawDesc), len(file_qdrant_cloud_hybrid_v1_operator_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qdrant_cloud_hybrid_v1_operator_proto_goTypes,
		DependencyIndexes: file_qdrant_cloud_hybrid_v1_operator_proto_depIdxs,
		MessageInfos:      file_qdrant_cloud_hybrid_v1_operator_proto_msgTypes,
	}.Build()
	File_qdrant_cloud_hybrid_v1_operator_proto = out.File
	file_qdrant_cloud_hybrid_v1_operator_proto_goTypes = nil
	file_qdrant_cloud_hybrid_v1_operator_proto_depIdxs = nil
}
