// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: qdrant/cloud/hybrid/v1/hybrid_cloud.proto

package hybridv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v11 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/cluster/v1"
	v12 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	v1 "k8s.io/api/networking/v1"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HybridCloudEnvironmentConfigurationLogLevel represents the log level applied to the hybrid cloud environment components
type HybridCloudEnvironmentConfigurationLogLevel int32

const (
	// UNSPECIFIED
	HybridCloudEnvironmentConfigurationLogLevel_HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_UNSPECIFIED HybridCloudEnvironmentConfigurationLogLevel = 0
	// DEBUG
	HybridCloudEnvironmentConfigurationLogLevel_HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_DEBUG HybridCloudEnvironmentConfigurationLogLevel = 1
	// INFO
	HybridCloudEnvironmentConfigurationLogLevel_HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_INFO HybridCloudEnvironmentConfigurationLogLevel = 2
	// WARNING
	HybridCloudEnvironmentConfigurationLogLevel_HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_WARN HybridCloudEnvironmentConfigurationLogLevel = 3
	// ERROR
	HybridCloudEnvironmentConfigurationLogLevel_HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_ERROR HybridCloudEnvironmentConfigurationLogLevel = 4
)

// Enum value maps for HybridCloudEnvironmentConfigurationLogLevel.
var (
	HybridCloudEnvironmentConfigurationLogLevel_name = map[int32]string{
		0: "HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_UNSPECIFIED",
		1: "HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_DEBUG",
		2: "HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_INFO",
		3: "HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_WARN",
		4: "HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_ERROR",
	}
	HybridCloudEnvironmentConfigurationLogLevel_value = map[string]int32{
		"HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_UNSPECIFIED": 0,
		"HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_DEBUG":       1,
		"HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_INFO":        2,
		"HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_WARN":        3,
		"HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_ERROR":       4,
	}
)

func (x HybridCloudEnvironmentConfigurationLogLevel) Enum() *HybridCloudEnvironmentConfigurationLogLevel {
	p := new(HybridCloudEnvironmentConfigurationLogLevel)
	*p = x
	return p
}

func (x HybridCloudEnvironmentConfigurationLogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HybridCloudEnvironmentConfigurationLogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[0].Descriptor()
}

func (HybridCloudEnvironmentConfigurationLogLevel) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[0]
}

func (x HybridCloudEnvironmentConfigurationLogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HybridCloudEnvironmentConfigurationLogLevel.Descriptor instead.
func (HybridCloudEnvironmentConfigurationLogLevel) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{0}
}

// QdrantClusterCreationStatus indicates if Qdrant clusters can be created in the environment
type QdrantClusterCreationStatus int32

const (
	// Unspecified
	QdrantClusterCreationStatus_QDRANT_CLUSTER_CREATION_STATUS_UNSPECIFIED QdrantClusterCreationStatus = 0
	// Clusters can be created
	QdrantClusterCreationStatus_QDRANT_CLUSTER_CREATION_STATUS_READY QdrantClusterCreationStatus = 1
	// Clusters cannot be created
	QdrantClusterCreationStatus_QDRANT_CLUSTER_CREATION_STATUS_NOT_READY QdrantClusterCreationStatus = 2
)

// Enum value maps for QdrantClusterCreationStatus.
var (
	QdrantClusterCreationStatus_name = map[int32]string{
		0: "QDRANT_CLUSTER_CREATION_STATUS_UNSPECIFIED",
		1: "QDRANT_CLUSTER_CREATION_STATUS_READY",
		2: "QDRANT_CLUSTER_CREATION_STATUS_NOT_READY",
	}
	QdrantClusterCreationStatus_value = map[string]int32{
		"QDRANT_CLUSTER_CREATION_STATUS_UNSPECIFIED": 0,
		"QDRANT_CLUSTER_CREATION_STATUS_READY":       1,
		"QDRANT_CLUSTER_CREATION_STATUS_NOT_READY":   2,
	}
)

func (x QdrantClusterCreationStatus) Enum() *QdrantClusterCreationStatus {
	p := new(QdrantClusterCreationStatus)
	*p = x
	return p
}

func (x QdrantClusterCreationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QdrantClusterCreationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[1].Descriptor()
}

func (QdrantClusterCreationStatus) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[1]
}

func (x QdrantClusterCreationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QdrantClusterCreationStatus.Descriptor instead.
func (QdrantClusterCreationStatus) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{1}
}

// Status phase of hybrid cloud environment
type HybridCloudEnvironmentStatusPhase int32

const (
	// Unspecified
	HybridCloudEnvironmentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_UNSPECIFIED HybridCloudEnvironmentStatusPhase = 0
	// Ready
	HybridCloudEnvironmentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_READY HybridCloudEnvironmentStatusPhase = 1
	// Not ready
	HybridCloudEnvironmentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_NOT_READY HybridCloudEnvironmentStatusPhase = 2
	// Failed to sync
	HybridCloudEnvironmentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_FAILED_TO_SYNC HybridCloudEnvironmentStatusPhase = 3
)

// Enum value maps for HybridCloudEnvironmentStatusPhase.
var (
	HybridCloudEnvironmentStatusPhase_name = map[int32]string{
		0: "HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_UNSPECIFIED",
		1: "HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_READY",
		2: "HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_NOT_READY",
		3: "HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_FAILED_TO_SYNC",
	}
	HybridCloudEnvironmentStatusPhase_value = map[string]int32{
		"HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_UNSPECIFIED":    0,
		"HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_READY":          1,
		"HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_NOT_READY":      2,
		"HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_FAILED_TO_SYNC": 3,
	}
)

func (x HybridCloudEnvironmentStatusPhase) Enum() *HybridCloudEnvironmentStatusPhase {
	p := new(HybridCloudEnvironmentStatusPhase)
	*p = x
	return p
}

func (x HybridCloudEnvironmentStatusPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HybridCloudEnvironmentStatusPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[2].Descriptor()
}

func (HybridCloudEnvironmentStatusPhase) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[2]
}

func (x HybridCloudEnvironmentStatusPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HybridCloudEnvironmentStatusPhase.Descriptor instead.
func (HybridCloudEnvironmentStatusPhase) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{2}
}

// Component status phase
type HybridCloudEnvironmentComponentStatusPhase int32

const (
	// Unspecified
	HybridCloudEnvironmentComponentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_UNSPECIFIED HybridCloudEnvironmentComponentStatusPhase = 0
	// Ready
	HybridCloudEnvironmentComponentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_READY HybridCloudEnvironmentComponentStatusPhase = 1
	// Not ready
	HybridCloudEnvironmentComponentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_READY HybridCloudEnvironmentComponentStatusPhase = 2
	// Not found
	HybridCloudEnvironmentComponentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_FOUND HybridCloudEnvironmentComponentStatusPhase = 3
)

// Enum value maps for HybridCloudEnvironmentComponentStatusPhase.
var (
	HybridCloudEnvironmentComponentStatusPhase_name = map[int32]string{
		0: "HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_UNSPECIFIED",
		1: "HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_READY",
		2: "HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_READY",
		3: "HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_FOUND",
	}
	HybridCloudEnvironmentComponentStatusPhase_value = map[string]int32{
		"HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_UNSPECIFIED": 0,
		"HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_READY":       1,
		"HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_READY":   2,
		"HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_FOUND":   3,
	}
)

func (x HybridCloudEnvironmentComponentStatusPhase) Enum() *HybridCloudEnvironmentComponentStatusPhase {
	p := new(HybridCloudEnvironmentComponentStatusPhase)
	*p = x
	return p
}

func (x HybridCloudEnvironmentComponentStatusPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HybridCloudEnvironmentComponentStatusPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[3].Descriptor()
}

func (HybridCloudEnvironmentComponentStatusPhase) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[3]
}

func (x HybridCloudEnvironmentComponentStatusPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HybridCloudEnvironmentComponentStatusPhase.Descriptor instead.
func (HybridCloudEnvironmentComponentStatusPhase) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{3}
}

// Kubernetes distributions
type KubernetesDistribution int32

const (
	// Unspecified
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_UNSPECIFIED KubernetesDistribution = 0
	// AWS
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_AWS KubernetesDistribution = 1
	// GCP
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_GCP KubernetesDistribution = 2
	// Azure
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_AZURE KubernetesDistribution = 3
	// DigitalOcean
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_DO KubernetesDistribution = 4
	// Scaleway
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_SCALEWAY KubernetesDistribution = 5
	// Openshift
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_OPENSHIFT KubernetesDistribution = 6
	// Linode
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_LINODE KubernetesDistribution = 7
	// Civo
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_CIVO KubernetesDistribution = 8
	// OracleCloud
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_OCI KubernetesDistribution = 9
	// OVHcloud
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_OVHCLOUD KubernetesDistribution = 10
	// Stackit
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_STACKIT KubernetesDistribution = 11
	// Vultr
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_VULTR KubernetesDistribution = 12
	// K3S
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_K3S KubernetesDistribution = 13
)

// Enum value maps for KubernetesDistribution.
var (
	KubernetesDistribution_name = map[int32]string{
		0:  "KUBERNETES_DISTRIBUTION_UNSPECIFIED",
		1:  "KUBERNETES_DISTRIBUTION_AWS",
		2:  "KUBERNETES_DISTRIBUTION_GCP",
		3:  "KUBERNETES_DISTRIBUTION_AZURE",
		4:  "KUBERNETES_DISTRIBUTION_DO",
		5:  "KUBERNETES_DISTRIBUTION_SCALEWAY",
		6:  "KUBERNETES_DISTRIBUTION_OPENSHIFT",
		7:  "KUBERNETES_DISTRIBUTION_LINODE",
		8:  "KUBERNETES_DISTRIBUTION_CIVO",
		9:  "KUBERNETES_DISTRIBUTION_OCI",
		10: "KUBERNETES_DISTRIBUTION_OVHCLOUD",
		11: "KUBERNETES_DISTRIBUTION_STACKIT",
		12: "KUBERNETES_DISTRIBUTION_VULTR",
		13: "KUBERNETES_DISTRIBUTION_K3S",
	}
	KubernetesDistribution_value = map[string]int32{
		"KUBERNETES_DISTRIBUTION_UNSPECIFIED": 0,
		"KUBERNETES_DISTRIBUTION_AWS":         1,
		"KUBERNETES_DISTRIBUTION_GCP":         2,
		"KUBERNETES_DISTRIBUTION_AZURE":       3,
		"KUBERNETES_DISTRIBUTION_DO":          4,
		"KUBERNETES_DISTRIBUTION_SCALEWAY":    5,
		"KUBERNETES_DISTRIBUTION_OPENSHIFT":   6,
		"KUBERNETES_DISTRIBUTION_LINODE":      7,
		"KUBERNETES_DISTRIBUTION_CIVO":        8,
		"KUBERNETES_DISTRIBUTION_OCI":         9,
		"KUBERNETES_DISTRIBUTION_OVHCLOUD":    10,
		"KUBERNETES_DISTRIBUTION_STACKIT":     11,
		"KUBERNETES_DISTRIBUTION_VULTR":       12,
		"KUBERNETES_DISTRIBUTION_K3S":         13,
	}
)

func (x KubernetesDistribution) Enum() *KubernetesDistribution {
	p := new(KubernetesDistribution)
	*p = x
	return p
}

func (x KubernetesDistribution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubernetesDistribution) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[4].Descriptor()
}

func (KubernetesDistribution) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[4]
}

func (x KubernetesDistribution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubernetesDistribution.Descriptor instead.
func (KubernetesDistribution) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{4}
}

// GetBootstrapCommandsRequest is the request for GetBootstrapCommands function
type GetBootstrapCommandsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the hybrid cloud environment (in GUID format).
	// It should be part of the provided account.
	// This is a required field.
	HybridCloudEnvironmentId string `protobuf:"bytes,2,opt,name=hybrid_cloud_environment_id,json=hybridCloudEnvironmentId,proto3" json:"hybrid_cloud_environment_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetBootstrapCommandsRequest) Reset() {
	*x = GetBootstrapCommandsRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBootstrapCommandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBootstrapCommandsRequest) ProtoMessage() {}

func (x *GetBootstrapCommandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBootstrapCommandsRequest.ProtoReflect.Descriptor instead.
func (*GetBootstrapCommandsRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{0}
}

func (x *GetBootstrapCommandsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetBootstrapCommandsRequest) GetHybridCloudEnvironmentId() string {
	if x != nil {
		return x.HybridCloudEnvironmentId
	}
	return ""
}

// GetBootstrapCommandsResponse is the response for GetBootstrapCommands function
type GetBootstrapCommandsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Commands to execute for bootstrapping a kubernetes cluster into hybrid cloud environment
	// `kubectl` and `helm` CLIs are required for execution.
	Commands      []string `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBootstrapCommandsResponse) Reset() {
	*x = GetBootstrapCommandsResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBootstrapCommandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBootstrapCommandsResponse) ProtoMessage() {}

func (x *GetBootstrapCommandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBootstrapCommandsResponse.ProtoReflect.Descriptor instead.
func (*GetBootstrapCommandsResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{1}
}

func (x *GetBootstrapCommandsResponse) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

// DeleteHybridCloudEnvironmentRequest is the request for DeleteHybridCloudEnvironment function
type DeleteHybridCloudEnvironmentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the hybrid cloud environment (in GUID format).
	// It should be part of the provided account.
	// This is a required field.
	HybridCloudEnvironmentId string `protobuf:"bytes,2,opt,name=hybrid_cloud_environment_id,json=hybridCloudEnvironmentId,proto3" json:"hybrid_cloud_environment_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DeleteHybridCloudEnvironmentRequest) Reset() {
	*x = DeleteHybridCloudEnvironmentRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHybridCloudEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHybridCloudEnvironmentRequest) ProtoMessage() {}

func (x *DeleteHybridCloudEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHybridCloudEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteHybridCloudEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteHybridCloudEnvironmentRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DeleteHybridCloudEnvironmentRequest) GetHybridCloudEnvironmentId() string {
	if x != nil {
		return x.HybridCloudEnvironmentId
	}
	return ""
}

// DeleteHybridCloudEnvironmentResponse is the response for DeleteHybridCloudEnvironment function
type DeleteHybridCloudEnvironmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteHybridCloudEnvironmentResponse) Reset() {
	*x = DeleteHybridCloudEnvironmentResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHybridCloudEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHybridCloudEnvironmentResponse) ProtoMessage() {}

func (x *DeleteHybridCloudEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHybridCloudEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*DeleteHybridCloudEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{3}
}

// UpdateHybridCloudEnvironmentRequest is the request for UpdateHybridCloudEnvironment function
type UpdateHybridCloudEnvironmentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual hybrid cloud environment
	HybridCloudEnvironment *HybridCloudEnvironment `protobuf:"bytes,1,opt,name=hybrid_cloud_environment,json=hybridCloudEnvironment,proto3" json:"hybrid_cloud_environment,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateHybridCloudEnvironmentRequest) Reset() {
	*x = UpdateHybridCloudEnvironmentRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHybridCloudEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHybridCloudEnvironmentRequest) ProtoMessage() {}

func (x *UpdateHybridCloudEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHybridCloudEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateHybridCloudEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateHybridCloudEnvironmentRequest) GetHybridCloudEnvironment() *HybridCloudEnvironment {
	if x != nil {
		return x.HybridCloudEnvironment
	}
	return nil
}

// UpdateHybridCloudEnvironmentResponse is the response for UpdateHybridCloudEnvironment function
type UpdateHybridCloudEnvironmentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual hybrid cloud environment
	HybridCloudEnvironment *HybridCloudEnvironment `protobuf:"bytes,1,opt,name=hybrid_cloud_environment,json=hybridCloudEnvironment,proto3" json:"hybrid_cloud_environment,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateHybridCloudEnvironmentResponse) Reset() {
	*x = UpdateHybridCloudEnvironmentResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHybridCloudEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHybridCloudEnvironmentResponse) ProtoMessage() {}

func (x *UpdateHybridCloudEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHybridCloudEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*UpdateHybridCloudEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateHybridCloudEnvironmentResponse) GetHybridCloudEnvironment() *HybridCloudEnvironment {
	if x != nil {
		return x.HybridCloudEnvironment
	}
	return nil
}

// CreateHybridCloudEnvironmentRequest is the request for CreateHybridCloudEnvironment function
type CreateHybridCloudEnvironmentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual hybrid cloud environment
	HybridCloudEnvironment *HybridCloudEnvironment `protobuf:"bytes,1,opt,name=hybrid_cloud_environment,json=hybridCloudEnvironment,proto3" json:"hybrid_cloud_environment,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateHybridCloudEnvironmentRequest) Reset() {
	*x = CreateHybridCloudEnvironmentRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHybridCloudEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHybridCloudEnvironmentRequest) ProtoMessage() {}

func (x *CreateHybridCloudEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHybridCloudEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*CreateHybridCloudEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{6}
}

func (x *CreateHybridCloudEnvironmentRequest) GetHybridCloudEnvironment() *HybridCloudEnvironment {
	if x != nil {
		return x.HybridCloudEnvironment
	}
	return nil
}

// CreateHybridCloudEnvironmentResponse is the response for CreateHybridCloudEnvironment function
type CreateHybridCloudEnvironmentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual hybrid cloud environment
	HybridCloudEnvironment *HybridCloudEnvironment `protobuf:"bytes,1,opt,name=hybrid_cloud_environment,json=hybridCloudEnvironment,proto3" json:"hybrid_cloud_environment,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateHybridCloudEnvironmentResponse) Reset() {
	*x = CreateHybridCloudEnvironmentResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHybridCloudEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHybridCloudEnvironmentResponse) ProtoMessage() {}

func (x *CreateHybridCloudEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHybridCloudEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*CreateHybridCloudEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{7}
}

func (x *CreateHybridCloudEnvironmentResponse) GetHybridCloudEnvironment() *HybridCloudEnvironment {
	if x != nil {
		return x.HybridCloudEnvironment
	}
	return nil
}

// GetHybridCloudEnvironmentRequest is the request for GetHybridCloudEnvironment function
type GetHybridCloudEnvironmentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier for the hybrid cloud environment (in GUID format).
	// It should be part of the provided account.
	// This is a required field.
	HybridCloudEnvironmentId string `protobuf:"bytes,2,opt,name=hybrid_cloud_environment_id,json=hybridCloudEnvironmentId,proto3" json:"hybrid_cloud_environment_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetHybridCloudEnvironmentRequest) Reset() {
	*x = GetHybridCloudEnvironmentRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHybridCloudEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHybridCloudEnvironmentRequest) ProtoMessage() {}

func (x *GetHybridCloudEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHybridCloudEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetHybridCloudEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{8}
}

func (x *GetHybridCloudEnvironmentRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetHybridCloudEnvironmentRequest) GetHybridCloudEnvironmentId() string {
	if x != nil {
		return x.HybridCloudEnvironmentId
	}
	return ""
}

// GetHybridCloudEnvironmentResponse is the response for GetHybridCloudEnvironment function
type GetHybridCloudEnvironmentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual hybrid cloud environment
	HybridCloudEnvironment *HybridCloudEnvironment `protobuf:"bytes,1,opt,name=hybrid_cloud_environment,json=hybridCloudEnvironment,proto3" json:"hybrid_cloud_environment,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetHybridCloudEnvironmentResponse) Reset() {
	*x = GetHybridCloudEnvironmentResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHybridCloudEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHybridCloudEnvironmentResponse) ProtoMessage() {}

func (x *GetHybridCloudEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHybridCloudEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*GetHybridCloudEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{9}
}

func (x *GetHybridCloudEnvironmentResponse) GetHybridCloudEnvironment() *HybridCloudEnvironment {
	if x != nil {
		return x.HybridCloudEnvironment
	}
	return nil
}

// ListHybridCloudEnvironmentsRequest is the request for ListHybridCloudEnvironments function
type ListHybridCloudEnvironmentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHybridCloudEnvironmentsRequest) Reset() {
	*x = ListHybridCloudEnvironmentsRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHybridCloudEnvironmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHybridCloudEnvironmentsRequest) ProtoMessage() {}

func (x *ListHybridCloudEnvironmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHybridCloudEnvironmentsRequest.ProtoReflect.Descriptor instead.
func (*ListHybridCloudEnvironmentsRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{10}
}

func (x *ListHybridCloudEnvironmentsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// ListHybridCloudEnvironmentsResponse is the response for ListHybridCloudEnvironments function
type ListHybridCloudEnvironmentsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual hybrid cloud environments in this list
	Items         []*HybridCloudEnvironment `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHybridCloudEnvironmentsResponse) Reset() {
	*x = ListHybridCloudEnvironmentsResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHybridCloudEnvironmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHybridCloudEnvironmentsResponse) ProtoMessage() {}

func (x *ListHybridCloudEnvironmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHybridCloudEnvironmentsResponse.ProtoReflect.Descriptor instead.
func (*ListHybridCloudEnvironmentsResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{11}
}

func (x *ListHybridCloudEnvironmentsResponse) GetItems() []*HybridCloudEnvironment {
	if x != nil {
		return x.Items
	}
	return nil
}

// HybridCloudEnvironment represents a hybrid cloud environment
type HybridCloudEnvironment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the account associated with the cluster (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Unique identifier for the hybrid cloud environment (in GUID format).
	// This is a read-only field and will be available after it is created.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp when the hybrid cloud environment was created.
	// This is a read-only field and will be available after it is created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp when the hybrid cloud environment was modified the last time.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Name of the hybrid cloud environment
	// This is a required field.
	// Name can only contain letters, numbers, underscores and dashes
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Configuration of the environment
	Configuration *HybridCloudEnvironmentConfiguration `protobuf:"bytes,20,opt,name=configuration,proto3,oneof" json:"configuration,omitempty"`
	// Status of the environment, readonly
	Status        *HybridCloudEnvironmentStatus `protobuf:"bytes,21,opt,name=status,proto3,oneof" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridCloudEnvironment) Reset() {
	*x = HybridCloudEnvironment{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironment) ProtoMessage() {}

func (x *HybridCloudEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironment.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironment) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{12}
}

func (x *HybridCloudEnvironment) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *HybridCloudEnvironment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HybridCloudEnvironment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HybridCloudEnvironment) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *HybridCloudEnvironment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HybridCloudEnvironment) GetConfiguration() *HybridCloudEnvironmentConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *HybridCloudEnvironment) GetStatus() *HybridCloudEnvironmentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// A HybridCloudEnvironmentConfiguration represents a configuration of hybrid cloud environment
type HybridCloudEnvironmentConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp when the configuration was last updated.
	// This is a read-only field and will be available after it is created.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Namespace where qdrant components are deployed, readonly after bootstrapping
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// optional HTTP proxy URL
	HttpProxyUrl *string `protobuf:"bytes,5,opt,name=http_proxy_url,json=httpProxyUrl,proto3,oneof" json:"http_proxy_url,omitempty"`
	// optional HTTPS proxy URL
	HttpsProxyUrl *string `protobuf:"bytes,6,opt,name=https_proxy_url,json=httpsProxyUrl,proto3,oneof" json:"https_proxy_url,omitempty"`
	// no proxy config
	NoProxyConfigs []string `protobuf:"bytes,7,rep,name=no_proxy_configs,json=noProxyConfigs,proto3" json:"no_proxy_configs,omitempty"`
	// Container registry URL
	ContainerRegistryUrl *string `protobuf:"bytes,8,opt,name=container_registry_url,json=containerRegistryUrl,proto3,oneof" json:"container_registry_url,omitempty"`
	// Chart registry URL
	ChartRepositoryUrl *string `protobuf:"bytes,9,opt,name=chart_repository_url,json=chartRepositoryUrl,proto3,oneof" json:"chart_repository_url,omitempty"`
	// k8s secret name containing registry credentials for accessing container and helm repositories
	RegistrySecretName *string `protobuf:"bytes,10,opt,name=registry_secret_name,json=registrySecretName,proto3,oneof" json:"registry_secret_name,omitempty"`
	// CA certificates
	CaCertificates *string `protobuf:"bytes,11,opt,name=ca_certificates,json=caCertificates,proto3,oneof" json:"ca_certificates,omitempty"`
	// Default database storage class, if omitted
	// kubernetes cluster default is used
	DatabaseStorageClass *string `protobuf:"bytes,12,opt,name=database_storage_class,json=databaseStorageClass,proto3,oneof" json:"database_storage_class,omitempty"`
	// Default snapshot storage class, if omitted
	// kubernetes cluster default is used
	SnapshotStorageClass *string `protobuf:"bytes,13,opt,name=snapshot_storage_class,json=snapshotStorageClass,proto3,oneof" json:"snapshot_storage_class,omitempty"`
	// Default volume snapshot storage class, if omitted
	// csi-snapclass is used
	VolumeSnapshotStorageClass *string `protobuf:"bytes,14,opt,name=volume_snapshot_storage_class,json=volumeSnapshotStorageClass,proto3,oneof" json:"volume_snapshot_storage_class,omitempty"`
	// Optional Ingress rules for Qdrant databases
	Ingress []*v1.NetworkPolicyIngressRule `protobuf:"bytes,15,rep,name=ingress,proto3" json:"ingress,omitempty"`
	// Optional Egress rules for Qdrant databases
	Egress []*v1.NetworkPolicyEgressRule `protobuf:"bytes,16,rep,name=egress,proto3" json:"egress,omitempty"`
	// Log level for deployed components
	LogLevel *HybridCloudEnvironmentConfigurationLogLevel `protobuf:"varint,21,opt,name=log_level,json=logLevel,proto3,enum=qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfigurationLogLevel,oneof" json:"log_level,omitempty"`
	// List of tolerations for clusters in this hybrid cloud environment
	Tolerations []*v11.Toleration `protobuf:"bytes,22,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	// Node selector for Qdrant nodes in this hybrid cloud environment
	NodeSelector  []*v12.KeyValue `protobuf:"bytes,23,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentConfiguration) Reset() {
	*x = HybridCloudEnvironmentConfiguration{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentConfiguration) ProtoMessage() {}

func (x *HybridCloudEnvironmentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentConfiguration.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{13}
}

func (x *HybridCloudEnvironmentConfiguration) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *HybridCloudEnvironmentConfiguration) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetHttpProxyUrl() string {
	if x != nil && x.HttpProxyUrl != nil {
		return *x.HttpProxyUrl
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetHttpsProxyUrl() string {
	if x != nil && x.HttpsProxyUrl != nil {
		return *x.HttpsProxyUrl
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetNoProxyConfigs() []string {
	if x != nil {
		return x.NoProxyConfigs
	}
	return nil
}

func (x *HybridCloudEnvironmentConfiguration) GetContainerRegistryUrl() string {
	if x != nil && x.ContainerRegistryUrl != nil {
		return *x.ContainerRegistryUrl
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetChartRepositoryUrl() string {
	if x != nil && x.ChartRepositoryUrl != nil {
		return *x.ChartRepositoryUrl
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetRegistrySecretName() string {
	if x != nil && x.RegistrySecretName != nil {
		return *x.RegistrySecretName
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetCaCertificates() string {
	if x != nil && x.CaCertificates != nil {
		return *x.CaCertificates
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetDatabaseStorageClass() string {
	if x != nil && x.DatabaseStorageClass != nil {
		return *x.DatabaseStorageClass
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetSnapshotStorageClass() string {
	if x != nil && x.SnapshotStorageClass != nil {
		return *x.SnapshotStorageClass
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetVolumeSnapshotStorageClass() string {
	if x != nil && x.VolumeSnapshotStorageClass != nil {
		return *x.VolumeSnapshotStorageClass
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetIngress() []*v1.NetworkPolicyIngressRule {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *HybridCloudEnvironmentConfiguration) GetEgress() []*v1.NetworkPolicyEgressRule {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *HybridCloudEnvironmentConfiguration) GetLogLevel() HybridCloudEnvironmentConfigurationLogLevel {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return HybridCloudEnvironmentConfigurationLogLevel_HYBRID_CLOUD_ENVIRONMENT_CONFIGURATION_LOG_LEVEL_UNSPECIFIED
}

func (x *HybridCloudEnvironmentConfiguration) GetTolerations() []*v11.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *HybridCloudEnvironmentConfiguration) GetNodeSelector() []*v12.KeyValue {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// Status of a hybrid cloud environment, read only
type HybridCloudEnvironmentStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp when the hybrid cloud environment status was modified the last time.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_modified_at,json=lastModifiedAt,proto3,oneof" json:"last_modified_at,omitempty"`
	// Phase
	Phase HybridCloudEnvironmentStatusPhase `protobuf:"varint,3,opt,name=phase,proto3,enum=qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatusPhase" json:"phase,omitempty"`
	// Kubernetes version
	KubernetesVersion string `protobuf:"bytes,4,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	// Kubernetes distribution
	KubernetesDistribution *KubernetesDistribution `protobuf:"varint,10,opt,name=kubernetes_distribution,json=kubernetesDistribution,proto3,enum=qdrant.cloud.hybrid.v1.KubernetesDistribution,oneof" json:"kubernetes_distribution,omitempty"`
	// Number of kubernetes nodes
	NumberOfNodes uint32 `protobuf:"varint,5,opt,name=number_of_nodes,json=numberOfNodes,proto3" json:"number_of_nodes,omitempty"`
	// Capabilities of hybrid cloud environment
	Capabilities *HybridCloudEnvironmentCapabilities `protobuf:"bytes,6,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Status of deployed component
	ComponentStatuses []*HybridCloudEnvironmentComponentStatus `protobuf:"bytes,7,rep,name=component_statuses,json=componentStatuses,proto3" json:"component_statuses,omitempty"`
	// Report if the hybrid cloud environment is ready for Qdrant cluster creation
	ClusterCreationReadiness QdrantClusterCreationStatus `protobuf:"varint,9,opt,name=cluster_creation_readiness,json=clusterCreationReadiness,proto3,enum=qdrant.cloud.hybrid.v1.QdrantClusterCreationStatus" json:"cluster_creation_readiness,omitempty"`
	// Status message
	Message *string `protobuf:"bytes,11,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// Storage classes available in the hybrid cloud environment
	StorageClasses []*HybridCloudEnvironmentStorageClass `protobuf:"bytes,12,rep,name=storage_classes,json=storageClasses,proto3" json:"storage_classes,omitempty"`
	// Volume snapshot classes available in the hybrid cloud environment
	VolumeSnapshotClasses []*HybridCloudEnvironmentVolumeSnapshotClass `protobuf:"bytes,13,rep,name=volume_snapshot_classes,json=volumeSnapshotClasses,proto3" json:"volume_snapshot_classes,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentStatus) Reset() {
	*x = HybridCloudEnvironmentStatus{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentStatus) ProtoMessage() {}

func (x *HybridCloudEnvironmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentStatus.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentStatus) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{14}
}

func (x *HybridCloudEnvironmentStatus) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *HybridCloudEnvironmentStatus) GetPhase() HybridCloudEnvironmentStatusPhase {
	if x != nil {
		return x.Phase
	}
	return HybridCloudEnvironmentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_STATUS_PHASE_UNSPECIFIED
}

func (x *HybridCloudEnvironmentStatus) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentStatus) GetKubernetesDistribution() KubernetesDistribution {
	if x != nil && x.KubernetesDistribution != nil {
		return *x.KubernetesDistribution
	}
	return KubernetesDistribution_KUBERNETES_DISTRIBUTION_UNSPECIFIED
}

func (x *HybridCloudEnvironmentStatus) GetNumberOfNodes() uint32 {
	if x != nil {
		return x.NumberOfNodes
	}
	return 0
}

func (x *HybridCloudEnvironmentStatus) GetCapabilities() *HybridCloudEnvironmentCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *HybridCloudEnvironmentStatus) GetComponentStatuses() []*HybridCloudEnvironmentComponentStatus {
	if x != nil {
		return x.ComponentStatuses
	}
	return nil
}

func (x *HybridCloudEnvironmentStatus) GetClusterCreationReadiness() QdrantClusterCreationStatus {
	if x != nil {
		return x.ClusterCreationReadiness
	}
	return QdrantClusterCreationStatus_QDRANT_CLUSTER_CREATION_STATUS_UNSPECIFIED
}

func (x *HybridCloudEnvironmentStatus) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *HybridCloudEnvironmentStatus) GetStorageClasses() []*HybridCloudEnvironmentStorageClass {
	if x != nil {
		return x.StorageClasses
	}
	return nil
}

func (x *HybridCloudEnvironmentStatus) GetVolumeSnapshotClasses() []*HybridCloudEnvironmentVolumeSnapshotClass {
	if x != nil {
		return x.VolumeSnapshotClasses
	}
	return nil
}

// Capabilities of hybrid cloud environment
type HybridCloudEnvironmentCapabilities struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// True if volume snapshotting is available
	VolumeSnapshot bool `protobuf:"varint,1,opt,name=volume_snapshot,json=volumeSnapshot,proto3" json:"volume_snapshot,omitempty"`
	// True if volume expansion is available
	VolumeExpansion bool `protobuf:"varint,2,opt,name=volume_expansion,json=volumeExpansion,proto3" json:"volume_expansion,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentCapabilities) Reset() {
	*x = HybridCloudEnvironmentCapabilities{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentCapabilities) ProtoMessage() {}

func (x *HybridCloudEnvironmentCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentCapabilities.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentCapabilities) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{15}
}

func (x *HybridCloudEnvironmentCapabilities) GetVolumeSnapshot() bool {
	if x != nil {
		return x.VolumeSnapshot
	}
	return false
}

func (x *HybridCloudEnvironmentCapabilities) GetVolumeExpansion() bool {
	if x != nil {
		return x.VolumeExpansion
	}
	return false
}

// Status of a component deployed in the hybrid cloud environment
type HybridCloudEnvironmentComponentStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Component name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Component namespace
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Component version
	Version *string `protobuf:"bytes,3,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Phase
	Phase HybridCloudEnvironmentComponentStatusPhase `protobuf:"varint,4,opt,name=phase,proto3,enum=qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatusPhase" json:"phase,omitempty"`
	// Status message
	Message       *string `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentComponentStatus) Reset() {
	*x = HybridCloudEnvironmentComponentStatus{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentComponentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentComponentStatus) ProtoMessage() {}

func (x *HybridCloudEnvironmentComponentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentComponentStatus.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentComponentStatus) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{16}
}

func (x *HybridCloudEnvironmentComponentStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HybridCloudEnvironmentComponentStatus) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HybridCloudEnvironmentComponentStatus) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *HybridCloudEnvironmentComponentStatus) GetPhase() HybridCloudEnvironmentComponentStatusPhase {
	if x != nil {
		return x.Phase
	}
	return HybridCloudEnvironmentComponentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_UNSPECIFIED
}

func (x *HybridCloudEnvironmentComponentStatus) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// A storage class available in hybrid cloud environment
type HybridCloudEnvironmentStorageClass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name specifies the name of the storage class
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Default specifies whether the storage class is the default storage class
	Default bool `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	// Provisioner specifies the provisioner of the storage class
	Provisioner string `protobuf:"bytes,3,opt,name=provisioner,proto3" json:"provisioner,omitempty"`
	// It specifies whether the storage class allows volume expansion
	AllowVolumeExpansion bool `protobuf:"varint,4,opt,name=allow_volume_expansion,json=allowVolumeExpansion,proto3" json:"allow_volume_expansion,omitempty"`
	// Specifies the reclaim policy of the storage class
	ReclaimPolicy string `protobuf:"bytes,5,opt,name=reclaim_policy,json=reclaimPolicy,proto3" json:"reclaim_policy,omitempty"`
	// parameters of the storage class
	Parameters    []*v12.KeyValue `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentStorageClass) Reset() {
	*x = HybridCloudEnvironmentStorageClass{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentStorageClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentStorageClass) ProtoMessage() {}

func (x *HybridCloudEnvironmentStorageClass) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentStorageClass.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentStorageClass) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{17}
}

func (x *HybridCloudEnvironmentStorageClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HybridCloudEnvironmentStorageClass) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *HybridCloudEnvironmentStorageClass) GetProvisioner() string {
	if x != nil {
		return x.Provisioner
	}
	return ""
}

func (x *HybridCloudEnvironmentStorageClass) GetAllowVolumeExpansion() bool {
	if x != nil {
		return x.AllowVolumeExpansion
	}
	return false
}

func (x *HybridCloudEnvironmentStorageClass) GetReclaimPolicy() string {
	if x != nil {
		return x.ReclaimPolicy
	}
	return ""
}

func (x *HybridCloudEnvironmentStorageClass) GetParameters() []*v12.KeyValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Volume snapshot class available in the hybrid cloud environment
type HybridCloudEnvironmentVolumeSnapshotClass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the volume snapshot class
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Driver of the volume snapshot class
	Driver        string `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentVolumeSnapshotClass) Reset() {
	*x = HybridCloudEnvironmentVolumeSnapshotClass{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentVolumeSnapshotClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentVolumeSnapshotClass) ProtoMessage() {}

func (x *HybridCloudEnvironmentVolumeSnapshotClass) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentVolumeSnapshotClass.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentVolumeSnapshotClass) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{18}
}

func (x *HybridCloudEnvironmentVolumeSnapshotClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HybridCloudEnvironmentVolumeSnapshotClass) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

// Info about a node of a hybrid cloud environment
type HybridCloudEnvironmentNodeInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the node
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Region of the node
	Region *string `protobuf:"bytes,2,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// Zone of the node
	Zone *string `protobuf:"bytes,3,opt,name=zone,proto3,oneof" json:"zone,omitempty"`
	// Instance type of the node
	InstanceType *string `protobuf:"bytes,4,opt,name=instance_type,json=instanceType,proto3,oneof" json:"instance_type,omitempty"`
	// CPU architecture of the node
	Arch *string `protobuf:"bytes,5,opt,name=arch,proto3,oneof" json:"arch,omitempty"`
	// Capacity of the node
	Capacity *HybridCloudEnvironmentNodeResourceInfo `protobuf:"bytes,6,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// The allocatable resources of the node
	Allocatable   *HybridCloudEnvironmentNodeResourceInfo `protobuf:"bytes,7,opt,name=allocatable,proto3" json:"allocatable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentNodeInfo) Reset() {
	*x = HybridCloudEnvironmentNodeInfo{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentNodeInfo) ProtoMessage() {}

func (x *HybridCloudEnvironmentNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentNodeInfo.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentNodeInfo) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{19}
}

func (x *HybridCloudEnvironmentNodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeInfo) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeInfo) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeInfo) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeInfo) GetArch() string {
	if x != nil && x.Arch != nil {
		return *x.Arch
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeInfo) GetCapacity() *HybridCloudEnvironmentNodeResourceInfo {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *HybridCloudEnvironmentNodeInfo) GetAllocatable() *HybridCloudEnvironmentNodeResourceInfo {
	if x != nil {
		return x.Allocatable
	}
	return nil
}

// Node resource infos
type HybridCloudEnvironmentNodeResourceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU resources of the node
	Cpu string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Memory resources of the node
	Memory string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// Pods resources of the node
	Pods string `protobuf:"bytes,3,opt,name=pods,proto3" json:"pods,omitempty"`
	// Ephemeral storage resources of the node
	EphemeralStorage string `protobuf:"bytes,4,opt,name=ephemeral_storage,json=ephemeralStorage,proto3" json:"ephemeral_storage,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentNodeResourceInfo) Reset() {
	*x = HybridCloudEnvironmentNodeResourceInfo{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentNodeResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentNodeResourceInfo) ProtoMessage() {}

func (x *HybridCloudEnvironmentNodeResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentNodeResourceInfo.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentNodeResourceInfo) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{20}
}

func (x *HybridCloudEnvironmentNodeResourceInfo) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeResourceInfo) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeResourceInfo) GetPods() string {
	if x != nil {
		return x.Pods
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeResourceInfo) GetEphemeralStorage() string {
	if x != nil {
		return x.EphemeralStorage
	}
	return ""
}

var File_qdrant_cloud_hybrid_v1_hybrid_cloud_proto protoreflect.FileDescriptor

var file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDesc = string([]byte{
	0x0a, 0x29, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x1b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x18, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x1b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x26, 0x0a,
	0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a,
	0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x16, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x16, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x23, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x68, 0x0a, 0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a,
	0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x94, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x1b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x18, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x18,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x99, 0x05, 0x0a, 0x16, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x04, 0x18, 0x40,
	0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d,
	0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x3a, 0xbb, 0x01, 0xba, 0x48, 0xb7, 0x01, 0x1a, 0xb4, 0x01, 0x0a, 0x1b, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x12, 0x1a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x79, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x64, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41,
	0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d,
	0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x27, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x21, 0x68, 0x61, 0x73,
	0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x29, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc3,
	0x0a, 0x0a, 0x23, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0xba, 0x48, 0x18, 0x72, 0x16, 0x10, 0x01, 0x18, 0xfd, 0x01, 0x32, 0x0f, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x63,
	0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x14, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x1a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4c,
	0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x06,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x10, 0x0a, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63,
	0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0xfc, 0x07, 0x0a, 0x1c, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x4f, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x6c, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x16, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x1a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x17, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x22, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x02,
	0x0a, 0x25, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x22, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x40, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x57, 0x0a, 0x29, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x9a, 0x03, 0x0a, 0x1e, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x04, 0x61, 0x72, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x61, 0x72, 0x63, 0x68, 0x22, 0x93, 0x01, 0x0a, 0x26, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2a, 0xdd, 0x02, 0x0a, 0x2b,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x3c, 0x48,
	0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49,
	0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3a, 0x0a,
	0x36, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e,
	0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x39, 0x0a, 0x35, 0x48, 0x59, 0x42,
	0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f,
	0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x02, 0x12, 0x39, 0x0a, 0x35, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12,
	0x3a, 0x0a, 0x36, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0xa5, 0x01, 0x0a, 0x1b,
	0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x2a, 0x51,
	0x44, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x51,
	0x44, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x51, 0x44, 0x52, 0x41, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x02, 0x2a, 0xfa, 0x01, 0x0a, 0x21, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x31, 0x48, 0x59, 0x42,
	0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f,
	0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x2f, 0x0a, 0x2b, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10,
	0x01, 0x12, 0x33, 0x0a, 0x2f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44,
	0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x03,
	0x2a, 0xa6, 0x02, 0x0a, 0x2a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x3b, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x39, 0x0a, 0x35, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x3d, 0x0a, 0x39, 0x48,
	0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49,
	0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x3d, 0x0a, 0x39, 0x48, 0x59,
	0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52,
	0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x2a, 0x89, 0x04, 0x0a, 0x16, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53,
	0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53,
	0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x57, 0x41, 0x59, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x55, 0x42, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x06, 0x12,
	0x22, 0x0a, 0x1e, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4f, 0x44,
	0x45, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x49, 0x56, 0x4f, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x43, 0x49, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x56, 0x48, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f,
	0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x49, 0x54, 0x10,
	0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x55, 0x4c,
	0x54, 0x52, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4b, 0x33, 0x53, 0x10, 0x0d, 0x32, 0xcd, 0x0e, 0x0a, 0x12, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x02, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x8a, 0xb5, 0x18, 0x1e, 0x72, 0x65, 0x61, 0x64, 0x3a,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12,
	0x3e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x99, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x86, 0x01, 0x8a, 0xb5, 0x18, 0x1e, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x12, 0x5c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc8, 0x02, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x8a, 0xb5, 0x18, 0x1f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x3a, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x92, 0xb5, 0x18,
	0x23, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x3a, 0x01, 0x2a, 0x22, 0x57, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xe6, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xca, 0x01, 0x8a, 0xb5, 0x18, 0x1f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x3a, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x92, 0xb5, 0x18, 0x23, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x7a, 0x3a, 0x01, 0x2a, 0x1a, 0x75, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x12,
	0xa4, 0x02, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x8a, 0xb5,
	0x18, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x2a, 0x5c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbc, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x33, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x01, 0x8a, 0xb5, 0x18,
	0x1f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x3a, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8e, 0x01, 0x12, 0x8b, 0x01, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0xfb, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76,
	0x31, 0x3b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x51, 0x43, 0x48,
	0xaa, 0x02, 0x16, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x51, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x22, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5c, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescOnce sync.Once
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescData []byte
)

func file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP() []byte {
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescOnce.Do(func() {
		file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDesc), len(file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDesc)))
	})
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescData
}

var file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_goTypes = []any{
	(HybridCloudEnvironmentConfigurationLogLevel)(0),  // 0: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfigurationLogLevel
	(QdrantClusterCreationStatus)(0),                  // 1: qdrant.cloud.hybrid.v1.QdrantClusterCreationStatus
	(HybridCloudEnvironmentStatusPhase)(0),            // 2: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatusPhase
	(HybridCloudEnvironmentComponentStatusPhase)(0),   // 3: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatusPhase
	(KubernetesDistribution)(0),                       // 4: qdrant.cloud.hybrid.v1.KubernetesDistribution
	(*GetBootstrapCommandsRequest)(nil),               // 5: qdrant.cloud.hybrid.v1.GetBootstrapCommandsRequest
	(*GetBootstrapCommandsResponse)(nil),              // 6: qdrant.cloud.hybrid.v1.GetBootstrapCommandsResponse
	(*DeleteHybridCloudEnvironmentRequest)(nil),       // 7: qdrant.cloud.hybrid.v1.DeleteHybridCloudEnvironmentRequest
	(*DeleteHybridCloudEnvironmentResponse)(nil),      // 8: qdrant.cloud.hybrid.v1.DeleteHybridCloudEnvironmentResponse
	(*UpdateHybridCloudEnvironmentRequest)(nil),       // 9: qdrant.cloud.hybrid.v1.UpdateHybridCloudEnvironmentRequest
	(*UpdateHybridCloudEnvironmentResponse)(nil),      // 10: qdrant.cloud.hybrid.v1.UpdateHybridCloudEnvironmentResponse
	(*CreateHybridCloudEnvironmentRequest)(nil),       // 11: qdrant.cloud.hybrid.v1.CreateHybridCloudEnvironmentRequest
	(*CreateHybridCloudEnvironmentResponse)(nil),      // 12: qdrant.cloud.hybrid.v1.CreateHybridCloudEnvironmentResponse
	(*GetHybridCloudEnvironmentRequest)(nil),          // 13: qdrant.cloud.hybrid.v1.GetHybridCloudEnvironmentRequest
	(*GetHybridCloudEnvironmentResponse)(nil),         // 14: qdrant.cloud.hybrid.v1.GetHybridCloudEnvironmentResponse
	(*ListHybridCloudEnvironmentsRequest)(nil),        // 15: qdrant.cloud.hybrid.v1.ListHybridCloudEnvironmentsRequest
	(*ListHybridCloudEnvironmentsResponse)(nil),       // 16: qdrant.cloud.hybrid.v1.ListHybridCloudEnvironmentsResponse
	(*HybridCloudEnvironment)(nil),                    // 17: qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	(*HybridCloudEnvironmentConfiguration)(nil),       // 18: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration
	(*HybridCloudEnvironmentStatus)(nil),              // 19: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus
	(*HybridCloudEnvironmentCapabilities)(nil),        // 20: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentCapabilities
	(*HybridCloudEnvironmentComponentStatus)(nil),     // 21: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatus
	(*HybridCloudEnvironmentStorageClass)(nil),        // 22: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStorageClass
	(*HybridCloudEnvironmentVolumeSnapshotClass)(nil), // 23: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentVolumeSnapshotClass
	(*HybridCloudEnvironmentNodeInfo)(nil),            // 24: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeInfo
	(*HybridCloudEnvironmentNodeResourceInfo)(nil),    // 25: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeResourceInfo
	(*timestamppb.Timestamp)(nil),                     // 26: google.protobuf.Timestamp
	(*v1.NetworkPolicyIngressRule)(nil),               // 27: k8s.io.api.networking.v1.NetworkPolicyIngressRule
	(*v1.NetworkPolicyEgressRule)(nil),                // 28: k8s.io.api.networking.v1.NetworkPolicyEgressRule
	(*v11.Toleration)(nil),                            // 29: qdrant.cloud.cluster.v1.Toleration
	(*v12.KeyValue)(nil),                              // 30: qdrant.cloud.common.v1.KeyValue
}
var file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_depIdxs = []int32{
	17, // 0: qdrant.cloud.hybrid.v1.UpdateHybridCloudEnvironmentRequest.hybrid_cloud_environment:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	17, // 1: qdrant.cloud.hybrid.v1.UpdateHybridCloudEnvironmentResponse.hybrid_cloud_environment:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	17, // 2: qdrant.cloud.hybrid.v1.CreateHybridCloudEnvironmentRequest.hybrid_cloud_environment:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	17, // 3: qdrant.cloud.hybrid.v1.CreateHybridCloudEnvironmentResponse.hybrid_cloud_environment:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	17, // 4: qdrant.cloud.hybrid.v1.GetHybridCloudEnvironmentResponse.hybrid_cloud_environment:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	17, // 5: qdrant.cloud.hybrid.v1.ListHybridCloudEnvironmentsResponse.items:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	26, // 6: qdrant.cloud.hybrid.v1.HybridCloudEnvironment.created_at:type_name -> google.protobuf.Timestamp
	26, // 7: qdrant.cloud.hybrid.v1.HybridCloudEnvironment.last_modified_at:type_name -> google.protobuf.Timestamp
	18, // 8: qdrant.cloud.hybrid.v1.HybridCloudEnvironment.configuration:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration
	19, // 9: qdrant.cloud.hybrid.v1.HybridCloudEnvironment.status:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus
	26, // 10: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.last_modified_at:type_name -> google.protobuf.Timestamp
	27, // 11: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.ingress:type_name -> k8s.io.api.networking.v1.NetworkPolicyIngressRule
	28, // 12: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.egress:type_name -> k8s.io.api.networking.v1.NetworkPolicyEgressRule
	0,  // 13: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.log_level:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfigurationLogLevel
	29, // 14: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.tolerations:type_name -> qdrant.cloud.cluster.v1.Toleration
	30, // 15: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.node_selector:type_name -> qdrant.cloud.common.v1.KeyValue
	26, // 16: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.last_modified_at:type_name -> google.protobuf.Timestamp
	2,  // 17: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.phase:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatusPhase
	4,  // 18: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.kubernetes_distribution:type_name -> qdrant.cloud.hybrid.v1.KubernetesDistribution
	20, // 19: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.capabilities:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentCapabilities
	21, // 20: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.component_statuses:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatus
	1,  // 21: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.cluster_creation_readiness:type_name -> qdrant.cloud.hybrid.v1.QdrantClusterCreationStatus
	22, // 22: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.storage_classes:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStorageClass
	23, // 23: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.volume_snapshot_classes:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentVolumeSnapshotClass
	3,  // 24: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatus.phase:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatusPhase
	30, // 25: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStorageClass.parameters:type_name -> qdrant.cloud.common.v1.KeyValue
	25, // 26: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeInfo.capacity:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeResourceInfo
	25, // 27: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeInfo.allocatable:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeResourceInfo
	15, // 28: qdrant.cloud.hybrid.v1.HybridCloudService.ListHybridCloudEnvironments:input_type -> qdrant.cloud.hybrid.v1.ListHybridCloudEnvironmentsRequest
	13, // 29: qdrant.cloud.hybrid.v1.HybridCloudService.GetHybridCloudEnvironment:input_type -> qdrant.cloud.hybrid.v1.GetHybridCloudEnvironmentRequest
	11, // 30: qdrant.cloud.hybrid.v1.HybridCloudService.CreateHybridCloudEnvironment:input_type -> qdrant.cloud.hybrid.v1.CreateHybridCloudEnvironmentRequest
	9,  // 31: qdrant.cloud.hybrid.v1.HybridCloudService.UpdateHybridCloudEnvironment:input_type -> qdrant.cloud.hybrid.v1.UpdateHybridCloudEnvironmentRequest
	7,  // 32: qdrant.cloud.hybrid.v1.HybridCloudService.DeleteHybridCloudEnvironment:input_type -> qdrant.cloud.hybrid.v1.DeleteHybridCloudEnvironmentRequest
	5,  // 33: qdrant.cloud.hybrid.v1.HybridCloudService.GetBootstrapCommands:input_type -> qdrant.cloud.hybrid.v1.GetBootstrapCommandsRequest
	16, // 34: qdrant.cloud.hybrid.v1.HybridCloudService.ListHybridCloudEnvironments:output_type -> qdrant.cloud.hybrid.v1.ListHybridCloudEnvironmentsResponse
	14, // 35: qdrant.cloud.hybrid.v1.HybridCloudService.GetHybridCloudEnvironment:output_type -> qdrant.cloud.hybrid.v1.GetHybridCloudEnvironmentResponse
	12, // 36: qdrant.cloud.hybrid.v1.HybridCloudService.CreateHybridCloudEnvironment:output_type -> qdrant.cloud.hybrid.v1.CreateHybridCloudEnvironmentResponse
	10, // 37: qdrant.cloud.hybrid.v1.HybridCloudService.UpdateHybridCloudEnvironment:output_type -> qdrant.cloud.hybrid.v1.UpdateHybridCloudEnvironmentResponse
	8,  // 38: qdrant.cloud.hybrid.v1.HybridCloudService.DeleteHybridCloudEnvironment:output_type -> qdrant.cloud.hybrid.v1.DeleteHybridCloudEnvironmentResponse
	6,  // 39: qdrant.cloud.hybrid.v1.HybridCloudService.GetBootstrapCommands:output_type -> qdrant.cloud.hybrid.v1.GetBootstrapCommandsResponse
	34, // [34:40] is the sub-list for method output_type
	28, // [28:34] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_init() }
func file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_init() {
	if File_qdrant_cloud_hybrid_v1_hybrid_cloud_proto != nil {
		return
	}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[12].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[13].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[14].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[16].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDesc), len(file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_goTypes,
		DependencyIndexes: file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_depIdxs,
		EnumInfos:         file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes,
		MessageInfos:      file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes,
	}.Build()
	File_qdrant_cloud_hybrid_v1_hybrid_cloud_proto = out.File
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_goTypes = nil
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_depIdxs = nil
}
