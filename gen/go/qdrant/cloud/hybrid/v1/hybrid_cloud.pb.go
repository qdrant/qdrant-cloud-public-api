// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: qdrant/cloud/hybrid/v1/hybrid_cloud.proto

package hybridv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/cluster/v1"
	v11 "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HybridCloudEnvironmentStatusPhase int32

const (
	HybridCloudEnvironmentStatusPhase_PRIVATE_REGION_STATUS_PHASE_READY          HybridCloudEnvironmentStatusPhase = 0
	HybridCloudEnvironmentStatusPhase_PRIVATE_REGION_STATUS_PHASE_NOT_READY      HybridCloudEnvironmentStatusPhase = 1
	HybridCloudEnvironmentStatusPhase_PRIVATE_REGION_STATUS_PHASE_FAILED_TO_SYNC HybridCloudEnvironmentStatusPhase = 2
	HybridCloudEnvironmentStatusPhase_PRIVATE_REGION_STATUS_PHASE_UNKNOWN        HybridCloudEnvironmentStatusPhase = 3
)

// Enum value maps for HybridCloudEnvironmentStatusPhase.
var (
	HybridCloudEnvironmentStatusPhase_name = map[int32]string{
		0: "PRIVATE_REGION_STATUS_PHASE_READY",
		1: "PRIVATE_REGION_STATUS_PHASE_NOT_READY",
		2: "PRIVATE_REGION_STATUS_PHASE_FAILED_TO_SYNC",
		3: "PRIVATE_REGION_STATUS_PHASE_UNKNOWN",
	}
	HybridCloudEnvironmentStatusPhase_value = map[string]int32{
		"PRIVATE_REGION_STATUS_PHASE_READY":          0,
		"PRIVATE_REGION_STATUS_PHASE_NOT_READY":      1,
		"PRIVATE_REGION_STATUS_PHASE_FAILED_TO_SYNC": 2,
		"PRIVATE_REGION_STATUS_PHASE_UNKNOWN":        3,
	}
)

func (x HybridCloudEnvironmentStatusPhase) Enum() *HybridCloudEnvironmentStatusPhase {
	p := new(HybridCloudEnvironmentStatusPhase)
	*p = x
	return p
}

func (x HybridCloudEnvironmentStatusPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HybridCloudEnvironmentStatusPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[0].Descriptor()
}

func (HybridCloudEnvironmentStatusPhase) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[0]
}

func (x HybridCloudEnvironmentStatusPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HybridCloudEnvironmentStatusPhase.Descriptor instead.
func (HybridCloudEnvironmentStatusPhase) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{0}
}

type HybridCloudEnvironmentComponentStatusPhase int32

const (
	HybridCloudEnvironmentComponentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_READY     HybridCloudEnvironmentComponentStatusPhase = 0
	HybridCloudEnvironmentComponentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_READY HybridCloudEnvironmentComponentStatusPhase = 1
	HybridCloudEnvironmentComponentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_FOUND HybridCloudEnvironmentComponentStatusPhase = 2
	HybridCloudEnvironmentComponentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_UNKNOWN   HybridCloudEnvironmentComponentStatusPhase = 3
)

// Enum value maps for HybridCloudEnvironmentComponentStatusPhase.
var (
	HybridCloudEnvironmentComponentStatusPhase_name = map[int32]string{
		0: "HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_READY",
		1: "HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_READY",
		2: "HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_FOUND",
		3: "HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_UNKNOWN",
	}
	HybridCloudEnvironmentComponentStatusPhase_value = map[string]int32{
		"HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_READY":     0,
		"HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_READY": 1,
		"HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_NOT_FOUND": 2,
		"HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_UNKNOWN":   3,
	}
)

func (x HybridCloudEnvironmentComponentStatusPhase) Enum() *HybridCloudEnvironmentComponentStatusPhase {
	p := new(HybridCloudEnvironmentComponentStatusPhase)
	*p = x
	return p
}

func (x HybridCloudEnvironmentComponentStatusPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HybridCloudEnvironmentComponentStatusPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[1].Descriptor()
}

func (HybridCloudEnvironmentComponentStatusPhase) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[1]
}

func (x HybridCloudEnvironmentComponentStatusPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HybridCloudEnvironmentComponentStatusPhase.Descriptor instead.
func (HybridCloudEnvironmentComponentStatusPhase) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{1}
}

type KubernetesDistribution int32

const (
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_UNKNOWN   KubernetesDistribution = 0
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_AWS       KubernetesDistribution = 1
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_GCP       KubernetesDistribution = 2
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_AZURE     KubernetesDistribution = 3
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_DO        KubernetesDistribution = 4
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_SCALEWAY  KubernetesDistribution = 5
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_OPENSHIFT KubernetesDistribution = 6
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_LINODE    KubernetesDistribution = 7
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_CIVO      KubernetesDistribution = 8
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_OCI       KubernetesDistribution = 9
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_OVHCLOUD  KubernetesDistribution = 10
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_STACKIT   KubernetesDistribution = 11
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_VULTR     KubernetesDistribution = 12
	KubernetesDistribution_KUBERNETES_DISTRIBUTION_K3S       KubernetesDistribution = 13
)

// Enum value maps for KubernetesDistribution.
var (
	KubernetesDistribution_name = map[int32]string{
		0:  "KUBERNETES_DISTRIBUTION_UNKNOWN",
		1:  "KUBERNETES_DISTRIBUTION_AWS",
		2:  "KUBERNETES_DISTRIBUTION_GCP",
		3:  "KUBERNETES_DISTRIBUTION_AZURE",
		4:  "KUBERNETES_DISTRIBUTION_DO",
		5:  "KUBERNETES_DISTRIBUTION_SCALEWAY",
		6:  "KUBERNETES_DISTRIBUTION_OPENSHIFT",
		7:  "KUBERNETES_DISTRIBUTION_LINODE",
		8:  "KUBERNETES_DISTRIBUTION_CIVO",
		9:  "KUBERNETES_DISTRIBUTION_OCI",
		10: "KUBERNETES_DISTRIBUTION_OVHCLOUD",
		11: "KUBERNETES_DISTRIBUTION_STACKIT",
		12: "KUBERNETES_DISTRIBUTION_VULTR",
		13: "KUBERNETES_DISTRIBUTION_K3S",
	}
	KubernetesDistribution_value = map[string]int32{
		"KUBERNETES_DISTRIBUTION_UNKNOWN":   0,
		"KUBERNETES_DISTRIBUTION_AWS":       1,
		"KUBERNETES_DISTRIBUTION_GCP":       2,
		"KUBERNETES_DISTRIBUTION_AZURE":     3,
		"KUBERNETES_DISTRIBUTION_DO":        4,
		"KUBERNETES_DISTRIBUTION_SCALEWAY":  5,
		"KUBERNETES_DISTRIBUTION_OPENSHIFT": 6,
		"KUBERNETES_DISTRIBUTION_LINODE":    7,
		"KUBERNETES_DISTRIBUTION_CIVO":      8,
		"KUBERNETES_DISTRIBUTION_OCI":       9,
		"KUBERNETES_DISTRIBUTION_OVHCLOUD":  10,
		"KUBERNETES_DISTRIBUTION_STACKIT":   11,
		"KUBERNETES_DISTRIBUTION_VULTR":     12,
		"KUBERNETES_DISTRIBUTION_K3S":       13,
	}
)

func (x KubernetesDistribution) Enum() *KubernetesDistribution {
	p := new(KubernetesDistribution)
	*p = x
	return p
}

func (x KubernetesDistribution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubernetesDistribution) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[2].Descriptor()
}

func (KubernetesDistribution) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes[2]
}

func (x KubernetesDistribution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubernetesDistribution.Descriptor instead.
func (KubernetesDistribution) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{2}
}

type GetInitialInstallationCommandRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	HybridCloudEnvironmentId string                 `protobuf:"bytes,1,opt,name=hybrid_cloud_environment_id,json=hybridCloudEnvironmentId,proto3" json:"hybrid_cloud_environment_id,omitempty"`
	AccountId                string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetInitialInstallationCommandRequest) Reset() {
	*x = GetInitialInstallationCommandRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInitialInstallationCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInitialInstallationCommandRequest) ProtoMessage() {}

func (x *GetInitialInstallationCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInitialInstallationCommandRequest.ProtoReflect.Descriptor instead.
func (*GetInitialInstallationCommandRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{0}
}

func (x *GetInitialInstallationCommandRequest) GetHybridCloudEnvironmentId() string {
	if x != nil {
		return x.HybridCloudEnvironmentId
	}
	return ""
}

func (x *GetInitialInstallationCommandRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetInitialInstallationCommandResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Command          string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	AccessKey        string                 `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	RegistryUsername string                 `protobuf:"bytes,3,opt,name=registry_username,json=registryUsername,proto3" json:"registry_username,omitempty"`
	RegistryPassword string                 `protobuf:"bytes,4,opt,name=registry_password,json=registryPassword,proto3" json:"registry_password,omitempty"`
	AccountId        string                 `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	RegionId         string                 `protobuf:"bytes,6,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetInitialInstallationCommandResponse) Reset() {
	*x = GetInitialInstallationCommandResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInitialInstallationCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInitialInstallationCommandResponse) ProtoMessage() {}

func (x *GetInitialInstallationCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInitialInstallationCommandResponse.ProtoReflect.Descriptor instead.
func (*GetInitialInstallationCommandResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{1}
}

func (x *GetInitialInstallationCommandResponse) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GetInitialInstallationCommandResponse) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *GetInitialInstallationCommandResponse) GetRegistryUsername() string {
	if x != nil {
		return x.RegistryUsername
	}
	return ""
}

func (x *GetInitialInstallationCommandResponse) GetRegistryPassword() string {
	if x != nil {
		return x.RegistryPassword
	}
	return ""
}

func (x *GetInitialInstallationCommandResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetInitialInstallationCommandResponse) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type DeleteCloudEnvironmentRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	HybridCloudEnvironmentId string                 `protobuf:"bytes,1,opt,name=hybrid_cloud_environment_id,json=hybridCloudEnvironmentId,proto3" json:"hybrid_cloud_environment_id,omitempty"`
	AccountId                string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DeleteCloudEnvironmentRequest) Reset() {
	*x = DeleteCloudEnvironmentRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCloudEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudEnvironmentRequest) ProtoMessage() {}

func (x *DeleteCloudEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteCloudEnvironmentRequest) GetHybridCloudEnvironmentId() string {
	if x != nil {
		return x.HybridCloudEnvironmentId
	}
	return ""
}

func (x *DeleteCloudEnvironmentRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type DeleteCloudEnvironmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCloudEnvironmentResponse) Reset() {
	*x = DeleteCloudEnvironmentResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCloudEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudEnvironmentResponse) ProtoMessage() {}

func (x *DeleteCloudEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{3}
}

type UpdateCloudEnvironmentRequest struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	HybridCloudEnvironment *HybridCloudEnvironment `protobuf:"bytes,1,opt,name=hybrid_cloud_environment,json=hybridCloudEnvironment,proto3" json:"hybrid_cloud_environment,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateCloudEnvironmentRequest) Reset() {
	*x = UpdateCloudEnvironmentRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCloudEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudEnvironmentRequest) ProtoMessage() {}

func (x *UpdateCloudEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCloudEnvironmentRequest) GetHybridCloudEnvironment() *HybridCloudEnvironment {
	if x != nil {
		return x.HybridCloudEnvironment
	}
	return nil
}

type UpdateCloudEnvironmentResponse struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	HybridCloudEnvironment *HybridCloudEnvironment `protobuf:"bytes,1,opt,name=hybrid_cloud_environment,json=hybridCloudEnvironment,proto3" json:"hybrid_cloud_environment,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateCloudEnvironmentResponse) Reset() {
	*x = UpdateCloudEnvironmentResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCloudEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudEnvironmentResponse) ProtoMessage() {}

func (x *UpdateCloudEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*UpdateCloudEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCloudEnvironmentResponse) GetHybridCloudEnvironment() *HybridCloudEnvironment {
	if x != nil {
		return x.HybridCloudEnvironment
	}
	return nil
}

type CreateCloudEnvironmentRequest struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	HybridCloudEnvironment *HybridCloudEnvironment `protobuf:"bytes,1,opt,name=hybrid_cloud_environment,json=hybridCloudEnvironment,proto3" json:"hybrid_cloud_environment,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateCloudEnvironmentRequest) Reset() {
	*x = CreateCloudEnvironmentRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCloudEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudEnvironmentRequest) ProtoMessage() {}

func (x *CreateCloudEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCloudEnvironmentRequest) GetHybridCloudEnvironment() *HybridCloudEnvironment {
	if x != nil {
		return x.HybridCloudEnvironment
	}
	return nil
}

type CreateCloudEnvironmentResponse struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	HybridCloudEnvironment *HybridCloudEnvironment `protobuf:"bytes,1,opt,name=hybrid_cloud_environment,json=hybridCloudEnvironment,proto3" json:"hybrid_cloud_environment,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateCloudEnvironmentResponse) Reset() {
	*x = CreateCloudEnvironmentResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCloudEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudEnvironmentResponse) ProtoMessage() {}

func (x *CreateCloudEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCloudEnvironmentResponse) GetHybridCloudEnvironment() *HybridCloudEnvironment {
	if x != nil {
		return x.HybridCloudEnvironment
	}
	return nil
}

type GetCloudEnvironmentRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	HybridCloudEnvironmentId string                 `protobuf:"bytes,1,opt,name=hybrid_cloud_environment_id,json=hybridCloudEnvironmentId,proto3" json:"hybrid_cloud_environment_id,omitempty"`
	AccountId                string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetCloudEnvironmentRequest) Reset() {
	*x = GetCloudEnvironmentRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudEnvironmentRequest) ProtoMessage() {}

func (x *GetCloudEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetCloudEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{8}
}

func (x *GetCloudEnvironmentRequest) GetHybridCloudEnvironmentId() string {
	if x != nil {
		return x.HybridCloudEnvironmentId
	}
	return ""
}

func (x *GetCloudEnvironmentRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetCloudEnvironmentResponse struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	HybridCloudEnvironment *HybridCloudEnvironment `protobuf:"bytes,1,opt,name=hybrid_cloud_environment,json=hybridCloudEnvironment,proto3" json:"hybrid_cloud_environment,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetCloudEnvironmentResponse) Reset() {
	*x = GetCloudEnvironmentResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudEnvironmentResponse) ProtoMessage() {}

func (x *GetCloudEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*GetCloudEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{9}
}

func (x *GetCloudEnvironmentResponse) GetHybridCloudEnvironment() *HybridCloudEnvironment {
	if x != nil {
		return x.HybridCloudEnvironment
	}
	return nil
}

type ListCloudEnvironmentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCloudEnvironmentsRequest) Reset() {
	*x = ListCloudEnvironmentsRequest{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCloudEnvironmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudEnvironmentsRequest) ProtoMessage() {}

func (x *ListCloudEnvironmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudEnvironmentsRequest.ProtoReflect.Descriptor instead.
func (*ListCloudEnvironmentsRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{10}
}

func (x *ListCloudEnvironmentsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type ListCloudEnvironmentsResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Items         []*HybridCloudEnvironment `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCloudEnvironmentsResponse) Reset() {
	*x = ListCloudEnvironmentsResponse{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCloudEnvironmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudEnvironmentsResponse) ProtoMessage() {}

func (x *ListCloudEnvironmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudEnvironmentsResponse.ProtoReflect.Descriptor instead.
func (*ListCloudEnvironmentsResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{11}
}

func (x *ListCloudEnvironmentsResponse) GetItems() []*HybridCloudEnvironment {
	if x != nil {
		return x.Items
	}
	return nil
}

type HybridCloudEnvironment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the cluster (in GUID format).
	// This is a read-only field and will be available after a cluster is created.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp when the cluster was created.
	// This is a read-only field and will be available after a cluster is created.
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Identifier of the account associated with the cluster (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Name of the cluster.
	// This is a required field.
	// Name can only contain letters, numbers, underscores and dashes
	Name                    string                               `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ProgrammaticAccessKeyId *string                              `protobuf:"bytes,6,opt,name=programmatic_access_key_id,json=programmaticAccessKeyId,proto3,oneof" json:"programmatic_access_key_id,omitempty"`
	CreatedBy               string                               `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Configuration           *HybridCloudEnvironmentConfiguration `protobuf:"bytes,20,opt,name=configuration,proto3,oneof" json:"configuration,omitempty"`
	Status                  *HybridCloudEnvironmentStatus        `protobuf:"bytes,21,opt,name=status,proto3,oneof" json:"status,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *HybridCloudEnvironment) Reset() {
	*x = HybridCloudEnvironment{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironment) ProtoMessage() {}

func (x *HybridCloudEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironment.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironment) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{12}
}

func (x *HybridCloudEnvironment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HybridCloudEnvironment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HybridCloudEnvironment) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *HybridCloudEnvironment) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *HybridCloudEnvironment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HybridCloudEnvironment) GetProgrammaticAccessKeyId() string {
	if x != nil && x.ProgrammaticAccessKeyId != nil {
		return *x.ProgrammaticAccessKeyId
	}
	return ""
}

func (x *HybridCloudEnvironment) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *HybridCloudEnvironment) GetConfiguration() *HybridCloudEnvironmentConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *HybridCloudEnvironment) GetStatus() *HybridCloudEnvironmentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type HybridCloudEnvironmentConfiguration struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Version                        int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	OperatorConfig                 *OperatorConfiguration `protobuf:"bytes,3,opt,name=operator_config,json=operatorConfig,proto3,oneof" json:"operator_config,omitempty"`
	Namespace                      string                 `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	HttpProxyUrl                   *string                `protobuf:"bytes,5,opt,name=http_proxy_url,json=httpProxyUrl,proto3,oneof" json:"http_proxy_url,omitempty"`
	HttpsProxyUrl                  *string                `protobuf:"bytes,6,opt,name=https_proxy_url,json=httpsProxyUrl,proto3,oneof" json:"https_proxy_url,omitempty"`
	NoProxyConfig                  []string               `protobuf:"bytes,7,rep,name=no_proxy_config,json=noProxyConfig,proto3" json:"no_proxy_config,omitempty"`
	ContainerRegistryUrl           *string                `protobuf:"bytes,8,opt,name=container_registry_url,json=containerRegistryUrl,proto3,oneof" json:"container_registry_url,omitempty"`
	ChartRepositoryUrl             *string                `protobuf:"bytes,9,opt,name=chart_repository_url,json=chartRepositoryUrl,proto3,oneof" json:"chart_repository_url,omitempty"`
	RegistrySecretName             *string                `protobuf:"bytes,10,opt,name=registry_secret_name,json=registrySecretName,proto3,oneof" json:"registry_secret_name,omitempty"`
	CaCertificates                 *string                `protobuf:"bytes,11,opt,name=ca_certificates,json=caCertificates,proto3,oneof" json:"ca_certificates,omitempty"`
	QdrantKubernetesApiVersion     *string                `protobuf:"bytes,12,opt,name=qdrant_kubernetes_api_version,json=qdrantKubernetesApiVersion,proto3,oneof" json:"qdrant_kubernetes_api_version,omitempty"`
	AgentVersion                   string                 `protobuf:"bytes,13,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	OperatorVersion                *string                `protobuf:"bytes,14,opt,name=operator_version,json=operatorVersion,proto3,oneof" json:"operator_version,omitempty"`
	PrometheusVersion              *string                `protobuf:"bytes,15,opt,name=prometheus_version,json=prometheusVersion,proto3,oneof" json:"prometheus_version,omitempty"`
	KubernetesEventExporterVersion *string                `protobuf:"bytes,16,opt,name=kubernetes_event_exporter_version,json=kubernetesEventExporterVersion,proto3,oneof" json:"kubernetes_event_exporter_version,omitempty"`
	QdrantNodeExporterVersion      *string                `protobuf:"bytes,17,opt,name=qdrant_node_exporter_version,json=qdrantNodeExporterVersion,proto3,oneof" json:"qdrant_node_exporter_version,omitempty"`
	QdrantClusterExporterVersion   *string                `protobuf:"bytes,18,opt,name=qdrant_cluster_exporter_version,json=qdrantClusterExporterVersion,proto3,oneof" json:"qdrant_cluster_exporter_version,omitempty"`
	QdrantClusterManagerVersion    *string                `protobuf:"bytes,19,opt,name=qdrant_cluster_manager_version,json=qdrantClusterManagerVersion,proto3,oneof" json:"qdrant_cluster_manager_version,omitempty"`
	CreatedBy                      string                 `protobuf:"bytes,20,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LogLevel                       *string                `protobuf:"bytes,21,opt,name=log_level,json=logLevel,proto3,oneof" json:"log_level,omitempty"`
	Tolerations                    []*v1.Toleration       `protobuf:"bytes,22,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	NodeSelector                   []*v11.KeyValue        `protobuf:"bytes,23,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentConfiguration) Reset() {
	*x = HybridCloudEnvironmentConfiguration{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentConfiguration) ProtoMessage() {}

func (x *HybridCloudEnvironmentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentConfiguration.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{13}
}

func (x *HybridCloudEnvironmentConfiguration) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HybridCloudEnvironmentConfiguration) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *HybridCloudEnvironmentConfiguration) GetOperatorConfig() *OperatorConfiguration {
	if x != nil {
		return x.OperatorConfig
	}
	return nil
}

func (x *HybridCloudEnvironmentConfiguration) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetHttpProxyUrl() string {
	if x != nil && x.HttpProxyUrl != nil {
		return *x.HttpProxyUrl
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetHttpsProxyUrl() string {
	if x != nil && x.HttpsProxyUrl != nil {
		return *x.HttpsProxyUrl
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetNoProxyConfig() []string {
	if x != nil {
		return x.NoProxyConfig
	}
	return nil
}

func (x *HybridCloudEnvironmentConfiguration) GetContainerRegistryUrl() string {
	if x != nil && x.ContainerRegistryUrl != nil {
		return *x.ContainerRegistryUrl
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetChartRepositoryUrl() string {
	if x != nil && x.ChartRepositoryUrl != nil {
		return *x.ChartRepositoryUrl
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetRegistrySecretName() string {
	if x != nil && x.RegistrySecretName != nil {
		return *x.RegistrySecretName
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetCaCertificates() string {
	if x != nil && x.CaCertificates != nil {
		return *x.CaCertificates
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetQdrantKubernetesApiVersion() string {
	if x != nil && x.QdrantKubernetesApiVersion != nil {
		return *x.QdrantKubernetesApiVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetOperatorVersion() string {
	if x != nil && x.OperatorVersion != nil {
		return *x.OperatorVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetPrometheusVersion() string {
	if x != nil && x.PrometheusVersion != nil {
		return *x.PrometheusVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetKubernetesEventExporterVersion() string {
	if x != nil && x.KubernetesEventExporterVersion != nil {
		return *x.KubernetesEventExporterVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetQdrantNodeExporterVersion() string {
	if x != nil && x.QdrantNodeExporterVersion != nil {
		return *x.QdrantNodeExporterVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetQdrantClusterExporterVersion() string {
	if x != nil && x.QdrantClusterExporterVersion != nil {
		return *x.QdrantClusterExporterVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetQdrantClusterManagerVersion() string {
	if x != nil && x.QdrantClusterManagerVersion != nil {
		return *x.QdrantClusterManagerVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetLogLevel() string {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return ""
}

func (x *HybridCloudEnvironmentConfiguration) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *HybridCloudEnvironmentConfiguration) GetNodeSelector() []*v11.KeyValue {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

type OperatorConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogLevel      *string                `protobuf:"bytes,1,opt,name=log_level,json=logLevel,proto3,oneof" json:"log_level,omitempty"`
	Features      *OperatorFeatures      `protobuf:"bytes,2,opt,name=features,proto3,oneof" json:"features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorConfiguration) Reset() {
	*x = OperatorConfiguration{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorConfiguration) ProtoMessage() {}

func (x *OperatorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorConfiguration.ProtoReflect.Descriptor instead.
func (*OperatorConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{14}
}

func (x *OperatorConfiguration) GetLogLevel() string {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return ""
}

func (x *OperatorConfiguration) GetFeatures() *OperatorFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

type OperatorFeatures struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	ClusterManagement *OperatorClusterManagement `protobuf:"bytes,1,opt,name=cluster_management,json=clusterManagement,proto3,oneof" json:"cluster_management,omitempty"`
	BackupManagement  *OperatorBackupManagement  `protobuf:"bytes,2,opt,name=backup_management,json=backupManagement,proto3,oneof" json:"backup_management,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OperatorFeatures) Reset() {
	*x = OperatorFeatures{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorFeatures) ProtoMessage() {}

func (x *OperatorFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorFeatures.ProtoReflect.Descriptor instead.
func (*OperatorFeatures) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{15}
}

func (x *OperatorFeatures) GetClusterManagement() *OperatorClusterManagement {
	if x != nil {
		return x.ClusterManagement
	}
	return nil
}

func (x *OperatorFeatures) GetBackupManagement() *OperatorBackupManagement {
	if x != nil {
		return x.BackupManagement
	}
	return nil
}

type OperatorBackupManagement struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	Enable             *bool                       `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	Snapshots          *OperatorSnapshots          `protobuf:"bytes,2,opt,name=snapshots,proto3,oneof" json:"snapshots,omitempty"`
	ScheduledSnapshots *OperatorScheduledSnapshots `protobuf:"bytes,3,opt,name=scheduledSnapshots,proto3,oneof" json:"scheduledSnapshots,omitempty"`
	Restores           *OperatorRestores           `protobuf:"bytes,4,opt,name=restores,proto3,oneof" json:"restores,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *OperatorBackupManagement) Reset() {
	*x = OperatorBackupManagement{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorBackupManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorBackupManagement) ProtoMessage() {}

func (x *OperatorBackupManagement) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorBackupManagement.ProtoReflect.Descriptor instead.
func (*OperatorBackupManagement) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{16}
}

func (x *OperatorBackupManagement) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorBackupManagement) GetSnapshots() *OperatorSnapshots {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *OperatorBackupManagement) GetScheduledSnapshots() *OperatorScheduledSnapshots {
	if x != nil {
		return x.ScheduledSnapshots
	}
	return nil
}

func (x *OperatorBackupManagement) GetRestores() *OperatorRestores {
	if x != nil {
		return x.Restores
	}
	return nil
}

type OperatorSnapshots struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Enable                  *bool                  `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	VolumeSnapshotClass     *string                `protobuf:"bytes,2,opt,name=volumeSnapshotClass,proto3,oneof" json:"volumeSnapshotClass,omitempty"`
	RetainUnsuccessful      *string                `protobuf:"bytes,3,opt,name=retainUnsuccessful,proto3,oneof" json:"retainUnsuccessful,omitempty"`
	MaxConcurrentReconciles *int32                 `protobuf:"varint,4,opt,name=max_concurrent_reconciles,json=maxConcurrentReconciles,proto3,oneof" json:"max_concurrent_reconciles,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *OperatorSnapshots) Reset() {
	*x = OperatorSnapshots{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorSnapshots) ProtoMessage() {}

func (x *OperatorSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorSnapshots.ProtoReflect.Descriptor instead.
func (*OperatorSnapshots) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{17}
}

func (x *OperatorSnapshots) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorSnapshots) GetVolumeSnapshotClass() string {
	if x != nil && x.VolumeSnapshotClass != nil {
		return *x.VolumeSnapshotClass
	}
	return ""
}

func (x *OperatorSnapshots) GetRetainUnsuccessful() string {
	if x != nil && x.RetainUnsuccessful != nil {
		return *x.RetainUnsuccessful
	}
	return ""
}

func (x *OperatorSnapshots) GetMaxConcurrentReconciles() int32 {
	if x != nil && x.MaxConcurrentReconciles != nil {
		return *x.MaxConcurrentReconciles
	}
	return 0
}

type OperatorScheduledSnapshots struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Enable                  *bool                  `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	RemoveCronJobs          *bool                  `protobuf:"varint,2,opt,name=remove_cron_jobs,json=removeCronJobs,proto3,oneof" json:"remove_cron_jobs,omitempty"`
	MaxConcurrentReconciles *int32                 `protobuf:"varint,3,opt,name=max_concurrent_reconciles,json=maxConcurrentReconciles,proto3,oneof" json:"max_concurrent_reconciles,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *OperatorScheduledSnapshots) Reset() {
	*x = OperatorScheduledSnapshots{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorScheduledSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorScheduledSnapshots) ProtoMessage() {}

func (x *OperatorScheduledSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorScheduledSnapshots.ProtoReflect.Descriptor instead.
func (*OperatorScheduledSnapshots) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{18}
}

func (x *OperatorScheduledSnapshots) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorScheduledSnapshots) GetRemoveCronJobs() bool {
	if x != nil && x.RemoveCronJobs != nil {
		return *x.RemoveCronJobs
	}
	return false
}

func (x *OperatorScheduledSnapshots) GetMaxConcurrentReconciles() int32 {
	if x != nil && x.MaxConcurrentReconciles != nil {
		return *x.MaxConcurrentReconciles
	}
	return 0
}

type OperatorRestores struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Enable                  *bool                  `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	MaxConcurrentReconciles *int32                 `protobuf:"varint,2,opt,name=max_concurrent_reconciles,json=maxConcurrentReconciles,proto3,oneof" json:"max_concurrent_reconciles,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *OperatorRestores) Reset() {
	*x = OperatorRestores{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorRestores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorRestores) ProtoMessage() {}

func (x *OperatorRestores) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorRestores.ProtoReflect.Descriptor instead.
func (*OperatorRestores) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{19}
}

func (x *OperatorRestores) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorRestores) GetMaxConcurrentReconciles() int32 {
	if x != nil && x.MaxConcurrentReconciles != nil {
		return *x.MaxConcurrentReconciles
	}
	return 0
}

type OperatorClusterManagement struct {
	state                   protoimpl.MessageState  `protogen:"open.v1"`
	Enable                  *bool                   `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	Storage_Class           *OperatorStorageClass   `protobuf:"bytes,2,opt,name=storage_Class,json=storageClass,proto3,oneof" json:"storage_Class,omitempty"`
	Qdrant                  *OperatorQdrant         `protobuf:"bytes,3,opt,name=qdrant,proto3,oneof" json:"qdrant,omitempty"`
	Scheduling              *OperatorScheduling     `protobuf:"bytes,4,opt,name=scheduling,proto3,oneof" json:"scheduling,omitempty"`
	ClusterManager          *OperatorClusterManager `protobuf:"bytes,5,opt,name=cluster_manager,json=clusterManager,proto3,oneof" json:"cluster_manager,omitempty"`
	Ingress                 *OperatorIngress        `protobuf:"bytes,6,opt,name=ingress,proto3,oneof" json:"ingress,omitempty"`
	TelemetryTimeout        *string                 `protobuf:"bytes,7,opt,name=telemetry_timeout,json=telemetryTimeout,proto3,oneof" json:"telemetry_timeout,omitempty"`
	MaxConcurrentReconciles *int32                  `protobuf:"varint,8,opt,name=max_concurrent_reconciles,json=maxConcurrentReconciles,proto3,oneof" json:"max_concurrent_reconciles,omitempty"`
	VolumeExpansionMode     *string                 `protobuf:"bytes,9,opt,name=volume_expansion_mode,json=volumeExpansionMode,proto3,oneof" json:"volume_expansion_mode,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *OperatorClusterManagement) Reset() {
	*x = OperatorClusterManagement{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorClusterManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorClusterManagement) ProtoMessage() {}

func (x *OperatorClusterManagement) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorClusterManagement.ProtoReflect.Descriptor instead.
func (*OperatorClusterManagement) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{20}
}

func (x *OperatorClusterManagement) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorClusterManagement) GetStorage_Class() *OperatorStorageClass {
	if x != nil {
		return x.Storage_Class
	}
	return nil
}

func (x *OperatorClusterManagement) GetQdrant() *OperatorQdrant {
	if x != nil {
		return x.Qdrant
	}
	return nil
}

func (x *OperatorClusterManagement) GetScheduling() *OperatorScheduling {
	if x != nil {
		return x.Scheduling
	}
	return nil
}

func (x *OperatorClusterManagement) GetClusterManager() *OperatorClusterManager {
	if x != nil {
		return x.ClusterManager
	}
	return nil
}

func (x *OperatorClusterManagement) GetIngress() *OperatorIngress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *OperatorClusterManagement) GetTelemetryTimeout() string {
	if x != nil && x.TelemetryTimeout != nil {
		return *x.TelemetryTimeout
	}
	return ""
}

func (x *OperatorClusterManagement) GetMaxConcurrentReconciles() int32 {
	if x != nil && x.MaxConcurrentReconciles != nil {
		return *x.MaxConcurrentReconciles
	}
	return 0
}

func (x *OperatorClusterManagement) GetVolumeExpansionMode() string {
	if x != nil && x.VolumeExpansionMode != nil {
		return *x.VolumeExpansionMode
	}
	return ""
}

type OperatorScheduling struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	TopologySpreadConstraints []*v11.KeyValue        `protobuf:"bytes,1,rep,name=topology_spread_constraints,json=topologySpreadConstraints,proto3" json:"topology_spread_constraints,omitempty"` // TODO question
	PodDisruptionBudget       []*v11.KeyValue        `protobuf:"bytes,2,rep,name=pod_disruption_budget,json=podDisruptionBudget,proto3" json:"pod_disruption_budget,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *OperatorScheduling) Reset() {
	*x = OperatorScheduling{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorScheduling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorScheduling) ProtoMessage() {}

func (x *OperatorScheduling) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorScheduling.ProtoReflect.Descriptor instead.
func (*OperatorScheduling) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{21}
}

func (x *OperatorScheduling) GetTopologySpreadConstraints() []*v11.KeyValue {
	if x != nil {
		return x.TopologySpreadConstraints
	}
	return nil
}

func (x *OperatorScheduling) GetPodDisruptionBudget() []*v11.KeyValue {
	if x != nil {
		return x.PodDisruptionBudget
	}
	return nil
}

type OperatorClusterManager struct {
	state                protoimpl.MessageState           `protogen:"open.v1"`
	Enable               *bool                            `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	EndpointAddress      *string                          `protobuf:"bytes,2,opt,name=endpoint_address,json=endpointAddress,proto3,oneof" json:"endpoint_address,omitempty"`
	InvocationInterval   *string                          `protobuf:"bytes,3,opt,name=invocation_interval,json=invocationInterval,proto3,oneof" json:"invocation_interval,omitempty"`
	Timeout              *string                          `protobuf:"bytes,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	ManageRulesOverrides *OperatorClusterManagerOverrides `protobuf:"bytes,5,opt,name=manage_rules_overrides,json=manageRulesOverrides,proto3,oneof" json:"manage_rules_overrides,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *OperatorClusterManager) Reset() {
	*x = OperatorClusterManager{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorClusterManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorClusterManager) ProtoMessage() {}

func (x *OperatorClusterManager) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorClusterManager.ProtoReflect.Descriptor instead.
func (*OperatorClusterManager) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{22}
}

func (x *OperatorClusterManager) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorClusterManager) GetEndpointAddress() string {
	if x != nil && x.EndpointAddress != nil {
		return *x.EndpointAddress
	}
	return ""
}

func (x *OperatorClusterManager) GetInvocationInterval() string {
	if x != nil && x.InvocationInterval != nil {
		return *x.InvocationInterval
	}
	return ""
}

func (x *OperatorClusterManager) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return ""
}

func (x *OperatorClusterManager) GetManageRulesOverrides() *OperatorClusterManagerOverrides {
	if x != nil {
		return x.ManageRulesOverrides
	}
	return nil
}

type OperatorIngress struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	Enable            *bool                      `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	Provider          *string                    `protobuf:"bytes,2,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	KubernetesIngress *OperatorKubernetesIngress `protobuf:"bytes,3,opt,name=kubernetesIngress,proto3,oneof" json:"kubernetesIngress,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OperatorIngress) Reset() {
	*x = OperatorIngress{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorIngress) ProtoMessage() {}

func (x *OperatorIngress) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorIngress.ProtoReflect.Descriptor instead.
func (*OperatorIngress) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{23}
}

func (x *OperatorIngress) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorIngress) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *OperatorIngress) GetKubernetesIngress() *OperatorKubernetesIngress {
	if x != nil {
		return x.KubernetesIngress
	}
	return nil
}

type OperatorKubernetesIngress struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IngressClassName *string                `protobuf:"bytes,1,opt,name=ingress_class_name,json=ingressClassName,proto3,oneof" json:"ingress_class_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OperatorKubernetesIngress) Reset() {
	*x = OperatorKubernetesIngress{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorKubernetesIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorKubernetesIngress) ProtoMessage() {}

func (x *OperatorKubernetesIngress) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorKubernetesIngress.ProtoReflect.Descriptor instead.
func (*OperatorKubernetesIngress) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{24}
}

func (x *OperatorKubernetesIngress) GetIngressClassName() string {
	if x != nil && x.IngressClassName != nil {
		return *x.IngressClassName
	}
	return ""
}

type OperatorClusterManagerOverrides struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	DryRun                    *bool                  `protobuf:"varint,1,opt,name=dry_run,json=dryRun,proto3,oneof" json:"dry_run,omitempty"`
	MaxTransfers              *int32                 `protobuf:"varint,2,opt,name=max_transfers,json=maxTransfers,proto3,oneof" json:"max_transfers,omitempty"`
	MaxTransfersPerCollection *int32                 `protobuf:"varint,3,opt,name=max_transfers_per_collection,json=maxTransfersPerCollection,proto3,oneof" json:"max_transfers_per_collection,omitempty"`
	Rebalance                 *string                `protobuf:"bytes,4,opt,name=rebalance,proto3,oneof" json:"rebalance,omitempty"`
	Replicate                 *string                `protobuf:"bytes,5,opt,name=replicate,proto3,oneof" json:"replicate,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *OperatorClusterManagerOverrides) Reset() {
	*x = OperatorClusterManagerOverrides{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorClusterManagerOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorClusterManagerOverrides) ProtoMessage() {}

func (x *OperatorClusterManagerOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorClusterManagerOverrides.ProtoReflect.Descriptor instead.
func (*OperatorClusterManagerOverrides) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{25}
}

func (x *OperatorClusterManagerOverrides) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *OperatorClusterManagerOverrides) GetMaxTransfers() int32 {
	if x != nil && x.MaxTransfers != nil {
		return *x.MaxTransfers
	}
	return 0
}

func (x *OperatorClusterManagerOverrides) GetMaxTransfersPerCollection() int32 {
	if x != nil && x.MaxTransfersPerCollection != nil {
		return *x.MaxTransfersPerCollection
	}
	return 0
}

func (x *OperatorClusterManagerOverrides) GetRebalance() string {
	if x != nil && x.Rebalance != nil {
		return *x.Rebalance
	}
	return ""
}

func (x *OperatorClusterManagerOverrides) GetReplicate() string {
	if x != nil && x.Replicate != nil {
		return *x.Replicate
	}
	return ""
}

type OperatorStorageClass struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enable        *bool                  `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	Database      *string                `protobuf:"bytes,2,opt,name=database,proto3,oneof" json:"database,omitempty"`
	Snapshot      *string                `protobuf:"bytes,3,opt,name=snapshot,proto3,oneof" json:"snapshot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorStorageClass) Reset() {
	*x = OperatorStorageClass{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorStorageClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorStorageClass) ProtoMessage() {}

func (x *OperatorStorageClass) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorStorageClass.ProtoReflect.Descriptor instead.
func (*OperatorStorageClass) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{26}
}

func (x *OperatorStorageClass) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *OperatorStorageClass) GetDatabase() string {
	if x != nil && x.Database != nil {
		return *x.Database
	}
	return ""
}

func (x *OperatorStorageClass) GetSnapshot() string {
	if x != nil && x.Snapshot != nil {
		return *x.Snapshot
	}
	return ""
}

type OperatorQdrant struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	Image           *OperatorQdrantImage     `protobuf:"bytes,1,opt,name=image,proto3,oneof" json:"image,omitempty"`
	Storage         *OperatorQdrantStorage   `protobuf:"bytes,2,opt,name=storage,proto3,oneof" json:"storage,omitempty"`
	LogLevel        *string                  `protobuf:"bytes,3,opt,name=log_level,json=logLevel,proto3,oneof" json:"log_level,omitempty"`
	SecurityContext *OperatorSecurityContext `protobuf:"bytes,4,opt,name=security_context,json=securityContext,proto3,oneof" json:"security_context,omitempty"`
	NetworkPolicies *OperatorV2NetworkPolicy `protobuf:"bytes,5,opt,name=network_policies,json=networkPolicies,proto3,oneof" json:"network_policies,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OperatorQdrant) Reset() {
	*x = OperatorQdrant{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorQdrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorQdrant) ProtoMessage() {}

func (x *OperatorQdrant) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorQdrant.ProtoReflect.Descriptor instead.
func (*OperatorQdrant) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{27}
}

func (x *OperatorQdrant) GetImage() *OperatorQdrantImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *OperatorQdrant) GetStorage() *OperatorQdrantStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *OperatorQdrant) GetLogLevel() string {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return ""
}

func (x *OperatorQdrant) GetSecurityContext() *OperatorSecurityContext {
	if x != nil {
		return x.SecurityContext
	}
	return nil
}

func (x *OperatorQdrant) GetNetworkPolicies() *OperatorV2NetworkPolicy {
	if x != nil {
		return x.NetworkPolicies
	}
	return nil
}

type OperatorV2NetworkPolicy struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Ingress       []*NetworkPolicyIngress `protobuf:"bytes,1,rep,name=ingress,proto3" json:"ingress,omitempty"`
	Egress        []*NetworkPolicyEgress  `protobuf:"bytes,2,rep,name=egress,proto3" json:"egress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorV2NetworkPolicy) Reset() {
	*x = OperatorV2NetworkPolicy{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorV2NetworkPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorV2NetworkPolicy) ProtoMessage() {}

func (x *OperatorV2NetworkPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorV2NetworkPolicy.ProtoReflect.Descriptor instead.
func (*OperatorV2NetworkPolicy) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{28}
}

func (x *OperatorV2NetworkPolicy) GetIngress() []*NetworkPolicyIngress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *OperatorV2NetworkPolicy) GetEgress() []*NetworkPolicyEgress {
	if x != nil {
		return x.Egress
	}
	return nil
}

type NetworkPolicyEgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	To            []*NetworkPolicyItem   `protobuf:"bytes,1,rep,name=to,proto3" json:"to,omitempty"`
	Ports         []*NetworkPolicyPort   `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyEgress) Reset() {
	*x = NetworkPolicyEgress{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyEgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyEgress) ProtoMessage() {}

func (x *NetworkPolicyEgress) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyEgress.ProtoReflect.Descriptor instead.
func (*NetworkPolicyEgress) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{29}
}

func (x *NetworkPolicyEgress) GetTo() []*NetworkPolicyItem {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *NetworkPolicyEgress) GetPorts() []*NetworkPolicyPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

type NetworkPolicyIngress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          []*NetworkPolicyItem   `protobuf:"bytes,1,rep,name=from,proto3" json:"from,omitempty"`
	Ports         []*NetworkPolicyPort   `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyIngress) Reset() {
	*x = NetworkPolicyIngress{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyIngress) ProtoMessage() {}

func (x *NetworkPolicyIngress) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyIngress.ProtoReflect.Descriptor instead.
func (*NetworkPolicyIngress) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{30}
}

func (x *NetworkPolicyIngress) GetFrom() []*NetworkPolicyItem {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *NetworkPolicyIngress) GetPorts() []*NetworkPolicyPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

type NetworkPolicyItem struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	NamespaceSelector *NetworkPolicyItemSelector `protobuf:"bytes,1,opt,name=namespace_selector,json=namespaceSelector,proto3,oneof" json:"namespace_selector,omitempty"`
	PodSelector       *NetworkPolicyItemSelector `protobuf:"bytes,2,opt,name=pod_selector,json=podSelector,proto3,oneof" json:"pod_selector,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkPolicyItem) Reset() {
	*x = NetworkPolicyItem{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyItem) ProtoMessage() {}

func (x *NetworkPolicyItem) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyItem.ProtoReflect.Descriptor instead.
func (*NetworkPolicyItem) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{31}
}

func (x *NetworkPolicyItem) GetNamespaceSelector() *NetworkPolicyItemSelector {
	if x != nil {
		return x.NamespaceSelector
	}
	return nil
}

func (x *NetworkPolicyItem) GetPodSelector() *NetworkPolicyItemSelector {
	if x != nil {
		return x.PodSelector
	}
	return nil
}

type NetworkPolicyItemSelector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchLabels   []*v11.KeyValue        `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyItemSelector) Reset() {
	*x = NetworkPolicyItemSelector{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyItemSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyItemSelector) ProtoMessage() {}

func (x *NetworkPolicyItemSelector) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyItemSelector.ProtoReflect.Descriptor instead.
func (*NetworkPolicyItemSelector) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{32}
}

func (x *NetworkPolicyItemSelector) GetMatchLabels() []*v11.KeyValue {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

type NetworkPolicyPort struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Protocol      string                 `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyPort) Reset() {
	*x = NetworkPolicyPort{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyPort) ProtoMessage() {}

func (x *NetworkPolicyPort) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyPort.ProtoReflect.Descriptor instead.
func (*NetworkPolicyPort) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{33}
}

func (x *NetworkPolicyPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NetworkPolicyPort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type OperatorSecurityContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *string                `protobuf:"bytes,1,opt,name=user,proto3,oneof" json:"user,omitempty"`
	FsGroup       *string                `protobuf:"bytes,2,opt,name=fs_group,json=fsGroup,proto3,oneof" json:"fs_group,omitempty"`
	Group         *string                `protobuf:"bytes,3,opt,name=group,proto3,oneof" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorSecurityContext) Reset() {
	*x = OperatorSecurityContext{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorSecurityContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorSecurityContext) ProtoMessage() {}

func (x *OperatorSecurityContext) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorSecurityContext.ProtoReflect.Descriptor instead.
func (*OperatorSecurityContext) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{34}
}

func (x *OperatorSecurityContext) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *OperatorSecurityContext) GetFsGroup() string {
	if x != nil && x.FsGroup != nil {
		return *x.FsGroup
	}
	return ""
}

func (x *OperatorSecurityContext) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

type OperatorQdrantStorage struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Performance   *OperatorQdrantPerformance `protobuf:"bytes,1,opt,name=performance,proto3,oneof" json:"performance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorQdrantStorage) Reset() {
	*x = OperatorQdrantStorage{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorQdrantStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorQdrantStorage) ProtoMessage() {}

func (x *OperatorQdrantStorage) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorQdrantStorage.ProtoReflect.Descriptor instead.
func (*OperatorQdrantStorage) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{35}
}

func (x *OperatorQdrantStorage) GetPerformance() *OperatorQdrantPerformance {
	if x != nil {
		return x.Performance
	}
	return nil
}

type OperatorQdrantPerformance struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	OptimizerCpuBudget *int32                 `protobuf:"varint,1,opt,name=optimizer_cpu_budget,json=optimizerCpuBudget,proto3,oneof" json:"optimizer_cpu_budget,omitempty"`
	AsyncScorer        *bool                  `protobuf:"varint,2,opt,name=async_scorer,json=asyncScorer,proto3,oneof" json:"async_scorer,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *OperatorQdrantPerformance) Reset() {
	*x = OperatorQdrantPerformance{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorQdrantPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorQdrantPerformance) ProtoMessage() {}

func (x *OperatorQdrantPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorQdrantPerformance.ProtoReflect.Descriptor instead.
func (*OperatorQdrantPerformance) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{36}
}

func (x *OperatorQdrantPerformance) GetOptimizerCpuBudget() int32 {
	if x != nil && x.OptimizerCpuBudget != nil {
		return *x.OptimizerCpuBudget
	}
	return 0
}

func (x *OperatorQdrantPerformance) GetAsyncScorer() bool {
	if x != nil && x.AsyncScorer != nil {
		return *x.AsyncScorer
	}
	return false
}

type OperatorQdrantImage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Repository     *string                `protobuf:"bytes,1,opt,name=repository,proto3,oneof" json:"repository,omitempty"`
	PullPolicy     *string                `protobuf:"bytes,2,opt,name=pull_policy,json=pullPolicy,proto3,oneof" json:"pull_policy,omitempty"`
	PullSecretName *string                `protobuf:"bytes,3,opt,name=pull_secret_name,json=pullSecretName,proto3,oneof" json:"pull_secret_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *OperatorQdrantImage) Reset() {
	*x = OperatorQdrantImage{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorQdrantImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorQdrantImage) ProtoMessage() {}

func (x *OperatorQdrantImage) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorQdrantImage.ProtoReflect.Descriptor instead.
func (*OperatorQdrantImage) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{37}
}

func (x *OperatorQdrantImage) GetRepository() string {
	if x != nil && x.Repository != nil {
		return *x.Repository
	}
	return ""
}

func (x *OperatorQdrantImage) GetPullPolicy() string {
	if x != nil && x.PullPolicy != nil {
		return *x.PullPolicy
	}
	return ""
}

func (x *OperatorQdrantImage) GetPullSecretName() string {
	if x != nil && x.PullSecretName != nil {
		return *x.PullSecretName
	}
	return ""
}

type HybridCloudEnvironmentStatus struct {
	state                   protoimpl.MessageState                       `protogen:"open.v1"`
	ModifiedAt              *timestamppb.Timestamp                       `protobuf:"bytes,1,opt,name=modified_at,json=modifiedAt,proto3,oneof" json:"modified_at,omitempty"`
	SchemaVersion           string                                       `protobuf:"bytes,2,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	Phase                   HybridCloudEnvironmentStatusPhase            `protobuf:"varint,3,opt,name=phase,proto3,enum=qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatusPhase" json:"phase,omitempty"`
	K8SVersion              string                                       `protobuf:"bytes,4,opt,name=k8s_version,json=k8sVersion,proto3" json:"k8s_version,omitempty"`
	NumberOfNodes           uint32                                       `protobuf:"varint,5,opt,name=number_of_nodes,json=numberOfNodes,proto3" json:"number_of_nodes,omitempty"`
	Capabilities            *HybridCloudEnvironmentCapabilities          `protobuf:"bytes,6,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	HelmRepositories        []*HybridCloudEnvironmentComponentStatus     `protobuf:"bytes,7,rep,name=helm_repositories,json=helmRepositories,proto3" json:"helm_repositories,omitempty"`
	HelmReleases            []*HybridCloudEnvironmentComponentStatus     `protobuf:"bytes,8,rep,name=helm_releases,json=helmReleases,proto3" json:"helm_releases,omitempty"`
	ReadyForClusterCreation *bool                                        `protobuf:"varint,9,opt,name=ready_for_cluster_creation,json=readyForClusterCreation,proto3,oneof" json:"ready_for_cluster_creation,omitempty"`
	K8SDistribution         *KubernetesDistribution                      `protobuf:"varint,10,opt,name=k8s_distribution,json=k8sDistribution,proto3,enum=qdrant.cloud.hybrid.v1.KubernetesDistribution,oneof" json:"k8s_distribution,omitempty"`
	Message                 *string                                      `protobuf:"bytes,11,opt,name=message,proto3,oneof" json:"message,omitempty"`
	StorageClasses          []*HybridCloudEnvironmentStorageClass        `protobuf:"bytes,12,rep,name=storage_classes,json=storageClasses,proto3" json:"storage_classes,omitempty"`
	VolumeSnapshotClasses   []*HybridCloudEnvironmentVolumeSnapshotClass `protobuf:"bytes,13,rep,name=volume_snapshot_classes,json=volumeSnapshotClasses,proto3" json:"volume_snapshot_classes,omitempty"`
	NodeInfos               []*HybridCloudEnvironmentNodeInfo            `protobuf:"bytes,14,rep,name=node_infos,json=nodeInfos,proto3" json:"node_infos,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentStatus) Reset() {
	*x = HybridCloudEnvironmentStatus{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentStatus) ProtoMessage() {}

func (x *HybridCloudEnvironmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentStatus.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentStatus) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{38}
}

func (x *HybridCloudEnvironmentStatus) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *HybridCloudEnvironmentStatus) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentStatus) GetPhase() HybridCloudEnvironmentStatusPhase {
	if x != nil {
		return x.Phase
	}
	return HybridCloudEnvironmentStatusPhase_PRIVATE_REGION_STATUS_PHASE_READY
}

func (x *HybridCloudEnvironmentStatus) GetK8SVersion() string {
	if x != nil {
		return x.K8SVersion
	}
	return ""
}

func (x *HybridCloudEnvironmentStatus) GetNumberOfNodes() uint32 {
	if x != nil {
		return x.NumberOfNodes
	}
	return 0
}

func (x *HybridCloudEnvironmentStatus) GetCapabilities() *HybridCloudEnvironmentCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *HybridCloudEnvironmentStatus) GetHelmRepositories() []*HybridCloudEnvironmentComponentStatus {
	if x != nil {
		return x.HelmRepositories
	}
	return nil
}

func (x *HybridCloudEnvironmentStatus) GetHelmReleases() []*HybridCloudEnvironmentComponentStatus {
	if x != nil {
		return x.HelmReleases
	}
	return nil
}

func (x *HybridCloudEnvironmentStatus) GetReadyForClusterCreation() bool {
	if x != nil && x.ReadyForClusterCreation != nil {
		return *x.ReadyForClusterCreation
	}
	return false
}

func (x *HybridCloudEnvironmentStatus) GetK8SDistribution() KubernetesDistribution {
	if x != nil && x.K8SDistribution != nil {
		return *x.K8SDistribution
	}
	return KubernetesDistribution_KUBERNETES_DISTRIBUTION_UNKNOWN
}

func (x *HybridCloudEnvironmentStatus) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *HybridCloudEnvironmentStatus) GetStorageClasses() []*HybridCloudEnvironmentStorageClass {
	if x != nil {
		return x.StorageClasses
	}
	return nil
}

func (x *HybridCloudEnvironmentStatus) GetVolumeSnapshotClasses() []*HybridCloudEnvironmentVolumeSnapshotClass {
	if x != nil {
		return x.VolumeSnapshotClasses
	}
	return nil
}

func (x *HybridCloudEnvironmentStatus) GetNodeInfos() []*HybridCloudEnvironmentNodeInfo {
	if x != nil {
		return x.NodeInfos
	}
	return nil
}

type HybridCloudEnvironmentCapabilities struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	VolumeSnapshot  bool                   `protobuf:"varint,1,opt,name=volume_snapshot,json=volumeSnapshot,proto3" json:"volume_snapshot,omitempty"`
	VolumeExpansion bool                   `protobuf:"varint,2,opt,name=volume_expansion,json=volumeExpansion,proto3" json:"volume_expansion,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentCapabilities) Reset() {
	*x = HybridCloudEnvironmentCapabilities{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentCapabilities) ProtoMessage() {}

func (x *HybridCloudEnvironmentCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentCapabilities.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentCapabilities) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{39}
}

func (x *HybridCloudEnvironmentCapabilities) GetVolumeSnapshot() bool {
	if x != nil {
		return x.VolumeSnapshot
	}
	return false
}

func (x *HybridCloudEnvironmentCapabilities) GetVolumeExpansion() bool {
	if x != nil {
		return x.VolumeExpansion
	}
	return false
}

type HybridCloudEnvironmentComponentStatus struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Name          string                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                                     `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Version       *string                                    `protobuf:"bytes,3,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Phase         HybridCloudEnvironmentComponentStatusPhase `protobuf:"varint,4,opt,name=phase,proto3,enum=qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatusPhase" json:"phase,omitempty"`
	Message       *string                                    `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentComponentStatus) Reset() {
	*x = HybridCloudEnvironmentComponentStatus{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentComponentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentComponentStatus) ProtoMessage() {}

func (x *HybridCloudEnvironmentComponentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentComponentStatus.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentComponentStatus) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{40}
}

func (x *HybridCloudEnvironmentComponentStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HybridCloudEnvironmentComponentStatus) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HybridCloudEnvironmentComponentStatus) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *HybridCloudEnvironmentComponentStatus) GetPhase() HybridCloudEnvironmentComponentStatusPhase {
	if x != nil {
		return x.Phase
	}
	return HybridCloudEnvironmentComponentStatusPhase_HYBRID_CLOUD_ENVIRONMENT_COMPONENT_STATUS_PHASE_READY
}

func (x *HybridCloudEnvironmentComponentStatus) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type HybridCloudEnvironmentStorageClass struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Default              bool                   `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	Provisioner          string                 `protobuf:"bytes,3,opt,name=provisioner,proto3" json:"provisioner,omitempty"`
	AllowVolumeExpansion bool                   `protobuf:"varint,4,opt,name=allow_volume_expansion,json=allowVolumeExpansion,proto3" json:"allow_volume_expansion,omitempty"`
	ReclaimPolicy        string                 `protobuf:"bytes,5,opt,name=reclaim_policy,json=reclaimPolicy,proto3" json:"reclaim_policy,omitempty"`
	Parameters           []*v11.KeyValue        `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentStorageClass) Reset() {
	*x = HybridCloudEnvironmentStorageClass{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentStorageClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentStorageClass) ProtoMessage() {}

func (x *HybridCloudEnvironmentStorageClass) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentStorageClass.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentStorageClass) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{41}
}

func (x *HybridCloudEnvironmentStorageClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HybridCloudEnvironmentStorageClass) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *HybridCloudEnvironmentStorageClass) GetProvisioner() string {
	if x != nil {
		return x.Provisioner
	}
	return ""
}

func (x *HybridCloudEnvironmentStorageClass) GetAllowVolumeExpansion() bool {
	if x != nil {
		return x.AllowVolumeExpansion
	}
	return false
}

func (x *HybridCloudEnvironmentStorageClass) GetReclaimPolicy() string {
	if x != nil {
		return x.ReclaimPolicy
	}
	return ""
}

func (x *HybridCloudEnvironmentStorageClass) GetParameters() []*v11.KeyValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type HybridCloudEnvironmentVolumeSnapshotClass struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Driver        string                 `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentVolumeSnapshotClass) Reset() {
	*x = HybridCloudEnvironmentVolumeSnapshotClass{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentVolumeSnapshotClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentVolumeSnapshotClass) ProtoMessage() {}

func (x *HybridCloudEnvironmentVolumeSnapshotClass) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentVolumeSnapshotClass.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentVolumeSnapshotClass) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{42}
}

func (x *HybridCloudEnvironmentVolumeSnapshotClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HybridCloudEnvironmentVolumeSnapshotClass) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

type HybridCloudEnvironmentNodeInfo struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Name          string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Region        *string                                 `protobuf:"bytes,2,opt,name=region,proto3,oneof" json:"region,omitempty"`
	Zone          *string                                 `protobuf:"bytes,3,opt,name=zone,proto3,oneof" json:"zone,omitempty"`
	InstanceType  *string                                 `protobuf:"bytes,4,opt,name=instance_type,json=instanceType,proto3,oneof" json:"instance_type,omitempty"`
	Arch          *string                                 `protobuf:"bytes,5,opt,name=arch,proto3,oneof" json:"arch,omitempty"`
	Capacity      *HybridCloudEnvironmentNodeResourceInfo `protobuf:"bytes,6,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Allocatable   *HybridCloudEnvironmentNodeResourceInfo `protobuf:"bytes,7,opt,name=allocatable,proto3" json:"allocatable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentNodeInfo) Reset() {
	*x = HybridCloudEnvironmentNodeInfo{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentNodeInfo) ProtoMessage() {}

func (x *HybridCloudEnvironmentNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentNodeInfo.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentNodeInfo) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{43}
}

func (x *HybridCloudEnvironmentNodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeInfo) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeInfo) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeInfo) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeInfo) GetArch() string {
	if x != nil && x.Arch != nil {
		return *x.Arch
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeInfo) GetCapacity() *HybridCloudEnvironmentNodeResourceInfo {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *HybridCloudEnvironmentNodeInfo) GetAllocatable() *HybridCloudEnvironmentNodeResourceInfo {
	if x != nil {
		return x.Allocatable
	}
	return nil
}

type HybridCloudEnvironmentNodeResourceInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Cpu              string                 `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           string                 `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Pods             string                 `protobuf:"bytes,3,opt,name=pods,proto3" json:"pods,omitempty"`
	EphemeralStorage string                 `protobuf:"bytes,4,opt,name=ephemeral_storage,json=ephemeralStorage,proto3" json:"ephemeral_storage,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HybridCloudEnvironmentNodeResourceInfo) Reset() {
	*x = HybridCloudEnvironmentNodeResourceInfo{}
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridCloudEnvironmentNodeResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridCloudEnvironmentNodeResourceInfo) ProtoMessage() {}

func (x *HybridCloudEnvironmentNodeResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridCloudEnvironmentNodeResourceInfo.ProtoReflect.Descriptor instead.
func (*HybridCloudEnvironmentNodeResourceInfo) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP(), []int{44}
}

func (x *HybridCloudEnvironmentNodeResourceInfo) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeResourceInfo) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeResourceInfo) GetPods() string {
	if x != nil {
		return x.Pods
	}
	return ""
}

func (x *HybridCloudEnvironmentNodeResourceInfo) GetEphemeralStorage() string {
	if x != nil {
		return x.EphemeralStorage
	}
	return ""
}

var File_qdrant_cloud_hybrid_v1_hybrid_cloud_proto protoreflect.FileDescriptor

var file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDesc = string([]byte{
	0x0a, 0x29, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x24,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x1b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x91, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x1b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x18, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89,
	0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x68, 0x0a, 0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x16, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x16, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x1b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x18, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x18, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x47, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xff, 0x05, 0x0a, 0x16, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48,
	0x18, 0x72, 0x16, 0x10, 0x04, 0x18, 0x40, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x66, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x3a, 0xaa, 0x01, 0xba, 0x48,
	0xa6, 0x01, 0x1a, 0xa3, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x69,
	0x64, 0x12, 0x1a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x79, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x69, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x27, 0x29, 0x20,
	0x7c, 0x7c, 0x20, 0x21, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x29, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x0d, 0x0a, 0x23, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5b, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0e,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0f, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x0d, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x63, 0x61, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x1d, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x1a, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4e,
	0x0a, 0x21, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x1e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x1c, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x19, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x1c, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x1e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x1b, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0b, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x92, 0x01, 0x02, 0x10, 0x0a, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0x0a,
	0x22, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x48, 0x01, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x10,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x65, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf6, 0x02, 0x0a, 0x18, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x48, 0x01, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x67, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x48, 0x02, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x22, 0xb5, 0x02, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x55, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6e, 0x55, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x55,
	0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x1a, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x72, 0x6f, 0x6e,
	0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x9d, 0x06, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48,
	0x01, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x06, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x48, 0x02, 0x52, 0x06, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x48, 0x04, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x10, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x63, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xcc, 0x01, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a, 0x1b, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x15, 0x70, 0x6f, 0x64, 0x5f,
	0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x70, 0x6f, 0x64, 0x44, 0x69,
	0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x22, 0x8d,
	0x03, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x72, 0x0a, 0x16, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x48, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x22, 0xe3,
	0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x64, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x02,
	0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x65, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x1f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x19, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x09, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x9a,
	0x01, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xd8, 0x03, 0x0a, 0x0e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x46,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x51,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x48, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x56, 0x32, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x48, 0x04, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x56, 0x32, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x91, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x3f, 0x0a, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xfd, 0x01, 0x0a,
	0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x65, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0c, 0x70, 0x6f, 0x64,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x19,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x43,
	0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x17, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x66, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x66, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x66, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x72, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72,
	0x43, 0x70, 0x75, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x72, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x22, 0xc3,
	0x01, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x70,
	0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x09, 0x0a, 0x1c, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f,
	0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6b, 0x38, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x11, 0x68, 0x65, 0x6c, 0x6d,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x10, 0x68, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0d, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x6d,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1a, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x17,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x10, 0x6b, 0x38,
	0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0f, 0x6b, 0x38, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x0f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x79,
	0x0a, 0x17, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x6b, 0x38, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x78, 0x0a, 0x22, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x25, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x22, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x29,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x9a, 0x03, 0x0a, 0x1e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x61, 0x72,
	0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72,
	0x63, 0x68, 0x22, 0x93, 0x01, 0x0a, 0x26, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2a, 0xce, 0x01, 0x0a, 0x21, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01,
	0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02,
	0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0xa2, 0x02, 0x0a, 0x2a, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x35, 0x48, 0x59, 0x42, 0x52,
	0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x39, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x01, 0x12, 0x3d, 0x0a, 0x39, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x02, 0x12, 0x3b, 0x0a, 0x37, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0x85,
	0x04, 0x0a, 0x16, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x55, 0x42,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x5a, 0x55, 0x52,
	0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x4f, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x57, 0x41, 0x59, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x55, 0x42,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x06,
	0x12, 0x22, 0x0a, 0x1e, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x49, 0x56, 0x4f, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x43, 0x49, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x55, 0x42, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x56, 0x48, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x0a, 0x12, 0x23, 0x0a,
	0x1f, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x49, 0x54,
	0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53,
	0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x55,
	0x4c, 0x54, 0x52, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4b, 0x33, 0x53, 0x10, 0x0d, 0x32, 0xc6, 0x0e, 0x0a, 0x12, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x02,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x8a, 0xb5, 0x18, 0x1e, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x50,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x99, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x98, 0x01, 0x8a, 0xb5, 0x18, 0x1e, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x70, 0x12, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc8, 0x02, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x8a, 0xb5, 0x18, 0x1f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x3a, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x92, 0xb5, 0x18, 0x23,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x3a, 0x01, 0x2a, 0x22, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xe8, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xde, 0x01, 0x8a, 0xb5, 0x18, 0x1f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x3a, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x92, 0xb5, 0x18, 0x23, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x8d, 0x01, 0x3a, 0x01, 0x2a, 0x1a, 0x87, 0x01, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69,
	0x64, 0x7d, 0x12, 0x81, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x8a, 0xb5,
	0x18, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x2a, 0x4c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xd6, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x01, 0x8a, 0xb5, 0x18, 0x1e, 0x72, 0x65, 0x61, 0x64,
	0x3a, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8e,
	0x01, 0x12, 0x8b, 0x01, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42,
	0xfb, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x10,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x51, 0x43, 0x48, 0xaa, 0x02, 0x16, 0x51, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x22, 0x51,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x19, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x3a, 0x3a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescOnce sync.Once
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescData []byte
)

func file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescGZIP() []byte {
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescOnce.Do(func() {
		file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDesc), len(file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDesc)))
	})
	return file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDescData
}

var file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_goTypes = []any{
	(HybridCloudEnvironmentStatusPhase)(0),            // 0: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatusPhase
	(HybridCloudEnvironmentComponentStatusPhase)(0),   // 1: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatusPhase
	(KubernetesDistribution)(0),                       // 2: qdrant.cloud.hybrid.v1.KubernetesDistribution
	(*GetInitialInstallationCommandRequest)(nil),      // 3: qdrant.cloud.hybrid.v1.GetInitialInstallationCommandRequest
	(*GetInitialInstallationCommandResponse)(nil),     // 4: qdrant.cloud.hybrid.v1.GetInitialInstallationCommandResponse
	(*DeleteCloudEnvironmentRequest)(nil),             // 5: qdrant.cloud.hybrid.v1.DeleteCloudEnvironmentRequest
	(*DeleteCloudEnvironmentResponse)(nil),            // 6: qdrant.cloud.hybrid.v1.DeleteCloudEnvironmentResponse
	(*UpdateCloudEnvironmentRequest)(nil),             // 7: qdrant.cloud.hybrid.v1.UpdateCloudEnvironmentRequest
	(*UpdateCloudEnvironmentResponse)(nil),            // 8: qdrant.cloud.hybrid.v1.UpdateCloudEnvironmentResponse
	(*CreateCloudEnvironmentRequest)(nil),             // 9: qdrant.cloud.hybrid.v1.CreateCloudEnvironmentRequest
	(*CreateCloudEnvironmentResponse)(nil),            // 10: qdrant.cloud.hybrid.v1.CreateCloudEnvironmentResponse
	(*GetCloudEnvironmentRequest)(nil),                // 11: qdrant.cloud.hybrid.v1.GetCloudEnvironmentRequest
	(*GetCloudEnvironmentResponse)(nil),               // 12: qdrant.cloud.hybrid.v1.GetCloudEnvironmentResponse
	(*ListCloudEnvironmentsRequest)(nil),              // 13: qdrant.cloud.hybrid.v1.ListCloudEnvironmentsRequest
	(*ListCloudEnvironmentsResponse)(nil),             // 14: qdrant.cloud.hybrid.v1.ListCloudEnvironmentsResponse
	(*HybridCloudEnvironment)(nil),                    // 15: qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	(*HybridCloudEnvironmentConfiguration)(nil),       // 16: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration
	(*OperatorConfiguration)(nil),                     // 17: qdrant.cloud.hybrid.v1.OperatorConfiguration
	(*OperatorFeatures)(nil),                          // 18: qdrant.cloud.hybrid.v1.OperatorFeatures
	(*OperatorBackupManagement)(nil),                  // 19: qdrant.cloud.hybrid.v1.OperatorBackupManagement
	(*OperatorSnapshots)(nil),                         // 20: qdrant.cloud.hybrid.v1.OperatorSnapshots
	(*OperatorScheduledSnapshots)(nil),                // 21: qdrant.cloud.hybrid.v1.OperatorScheduledSnapshots
	(*OperatorRestores)(nil),                          // 22: qdrant.cloud.hybrid.v1.OperatorRestores
	(*OperatorClusterManagement)(nil),                 // 23: qdrant.cloud.hybrid.v1.OperatorClusterManagement
	(*OperatorScheduling)(nil),                        // 24: qdrant.cloud.hybrid.v1.OperatorScheduling
	(*OperatorClusterManager)(nil),                    // 25: qdrant.cloud.hybrid.v1.OperatorClusterManager
	(*OperatorIngress)(nil),                           // 26: qdrant.cloud.hybrid.v1.OperatorIngress
	(*OperatorKubernetesIngress)(nil),                 // 27: qdrant.cloud.hybrid.v1.OperatorKubernetesIngress
	(*OperatorClusterManagerOverrides)(nil),           // 28: qdrant.cloud.hybrid.v1.OperatorClusterManagerOverrides
	(*OperatorStorageClass)(nil),                      // 29: qdrant.cloud.hybrid.v1.OperatorStorageClass
	(*OperatorQdrant)(nil),                            // 30: qdrant.cloud.hybrid.v1.OperatorQdrant
	(*OperatorV2NetworkPolicy)(nil),                   // 31: qdrant.cloud.hybrid.v1.OperatorV2NetworkPolicy
	(*NetworkPolicyEgress)(nil),                       // 32: qdrant.cloud.hybrid.v1.NetworkPolicyEgress
	(*NetworkPolicyIngress)(nil),                      // 33: qdrant.cloud.hybrid.v1.NetworkPolicyIngress
	(*NetworkPolicyItem)(nil),                         // 34: qdrant.cloud.hybrid.v1.NetworkPolicyItem
	(*NetworkPolicyItemSelector)(nil),                 // 35: qdrant.cloud.hybrid.v1.NetworkPolicyItemSelector
	(*NetworkPolicyPort)(nil),                         // 36: qdrant.cloud.hybrid.v1.NetworkPolicyPort
	(*OperatorSecurityContext)(nil),                   // 37: qdrant.cloud.hybrid.v1.OperatorSecurityContext
	(*OperatorQdrantStorage)(nil),                     // 38: qdrant.cloud.hybrid.v1.OperatorQdrantStorage
	(*OperatorQdrantPerformance)(nil),                 // 39: qdrant.cloud.hybrid.v1.OperatorQdrantPerformance
	(*OperatorQdrantImage)(nil),                       // 40: qdrant.cloud.hybrid.v1.OperatorQdrantImage
	(*HybridCloudEnvironmentStatus)(nil),              // 41: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus
	(*HybridCloudEnvironmentCapabilities)(nil),        // 42: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentCapabilities
	(*HybridCloudEnvironmentComponentStatus)(nil),     // 43: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatus
	(*HybridCloudEnvironmentStorageClass)(nil),        // 44: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStorageClass
	(*HybridCloudEnvironmentVolumeSnapshotClass)(nil), // 45: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentVolumeSnapshotClass
	(*HybridCloudEnvironmentNodeInfo)(nil),            // 46: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeInfo
	(*HybridCloudEnvironmentNodeResourceInfo)(nil),    // 47: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeResourceInfo
	(*timestamppb.Timestamp)(nil),                     // 48: google.protobuf.Timestamp
	(*v1.Toleration)(nil),                             // 49: qdrant.cloud.cluster.v1.Toleration
	(*v11.KeyValue)(nil),                              // 50: qdrant.cloud.common.v1.KeyValue
}
var file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_depIdxs = []int32{
	15, // 0: qdrant.cloud.hybrid.v1.UpdateCloudEnvironmentRequest.hybrid_cloud_environment:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	15, // 1: qdrant.cloud.hybrid.v1.UpdateCloudEnvironmentResponse.hybrid_cloud_environment:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	15, // 2: qdrant.cloud.hybrid.v1.CreateCloudEnvironmentRequest.hybrid_cloud_environment:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	15, // 3: qdrant.cloud.hybrid.v1.CreateCloudEnvironmentResponse.hybrid_cloud_environment:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	15, // 4: qdrant.cloud.hybrid.v1.GetCloudEnvironmentResponse.hybrid_cloud_environment:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	15, // 5: qdrant.cloud.hybrid.v1.ListCloudEnvironmentsResponse.items:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironment
	48, // 6: qdrant.cloud.hybrid.v1.HybridCloudEnvironment.created_at:type_name -> google.protobuf.Timestamp
	48, // 7: qdrant.cloud.hybrid.v1.HybridCloudEnvironment.modified_at:type_name -> google.protobuf.Timestamp
	16, // 8: qdrant.cloud.hybrid.v1.HybridCloudEnvironment.configuration:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration
	41, // 9: qdrant.cloud.hybrid.v1.HybridCloudEnvironment.status:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus
	48, // 10: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.created_at:type_name -> google.protobuf.Timestamp
	17, // 11: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.operator_config:type_name -> qdrant.cloud.hybrid.v1.OperatorConfiguration
	49, // 12: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.tolerations:type_name -> qdrant.cloud.cluster.v1.Toleration
	50, // 13: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.node_selector:type_name -> qdrant.cloud.common.v1.KeyValue
	18, // 14: qdrant.cloud.hybrid.v1.OperatorConfiguration.features:type_name -> qdrant.cloud.hybrid.v1.OperatorFeatures
	23, // 15: qdrant.cloud.hybrid.v1.OperatorFeatures.cluster_management:type_name -> qdrant.cloud.hybrid.v1.OperatorClusterManagement
	19, // 16: qdrant.cloud.hybrid.v1.OperatorFeatures.backup_management:type_name -> qdrant.cloud.hybrid.v1.OperatorBackupManagement
	20, // 17: qdrant.cloud.hybrid.v1.OperatorBackupManagement.snapshots:type_name -> qdrant.cloud.hybrid.v1.OperatorSnapshots
	21, // 18: qdrant.cloud.hybrid.v1.OperatorBackupManagement.scheduledSnapshots:type_name -> qdrant.cloud.hybrid.v1.OperatorScheduledSnapshots
	22, // 19: qdrant.cloud.hybrid.v1.OperatorBackupManagement.restores:type_name -> qdrant.cloud.hybrid.v1.OperatorRestores
	29, // 20: qdrant.cloud.hybrid.v1.OperatorClusterManagement.storage_Class:type_name -> qdrant.cloud.hybrid.v1.OperatorStorageClass
	30, // 21: qdrant.cloud.hybrid.v1.OperatorClusterManagement.qdrant:type_name -> qdrant.cloud.hybrid.v1.OperatorQdrant
	24, // 22: qdrant.cloud.hybrid.v1.OperatorClusterManagement.scheduling:type_name -> qdrant.cloud.hybrid.v1.OperatorScheduling
	25, // 23: qdrant.cloud.hybrid.v1.OperatorClusterManagement.cluster_manager:type_name -> qdrant.cloud.hybrid.v1.OperatorClusterManager
	26, // 24: qdrant.cloud.hybrid.v1.OperatorClusterManagement.ingress:type_name -> qdrant.cloud.hybrid.v1.OperatorIngress
	50, // 25: qdrant.cloud.hybrid.v1.OperatorScheduling.topology_spread_constraints:type_name -> qdrant.cloud.common.v1.KeyValue
	50, // 26: qdrant.cloud.hybrid.v1.OperatorScheduling.pod_disruption_budget:type_name -> qdrant.cloud.common.v1.KeyValue
	28, // 27: qdrant.cloud.hybrid.v1.OperatorClusterManager.manage_rules_overrides:type_name -> qdrant.cloud.hybrid.v1.OperatorClusterManagerOverrides
	27, // 28: qdrant.cloud.hybrid.v1.OperatorIngress.kubernetesIngress:type_name -> qdrant.cloud.hybrid.v1.OperatorKubernetesIngress
	40, // 29: qdrant.cloud.hybrid.v1.OperatorQdrant.image:type_name -> qdrant.cloud.hybrid.v1.OperatorQdrantImage
	38, // 30: qdrant.cloud.hybrid.v1.OperatorQdrant.storage:type_name -> qdrant.cloud.hybrid.v1.OperatorQdrantStorage
	37, // 31: qdrant.cloud.hybrid.v1.OperatorQdrant.security_context:type_name -> qdrant.cloud.hybrid.v1.OperatorSecurityContext
	31, // 32: qdrant.cloud.hybrid.v1.OperatorQdrant.network_policies:type_name -> qdrant.cloud.hybrid.v1.OperatorV2NetworkPolicy
	33, // 33: qdrant.cloud.hybrid.v1.OperatorV2NetworkPolicy.ingress:type_name -> qdrant.cloud.hybrid.v1.NetworkPolicyIngress
	32, // 34: qdrant.cloud.hybrid.v1.OperatorV2NetworkPolicy.egress:type_name -> qdrant.cloud.hybrid.v1.NetworkPolicyEgress
	34, // 35: qdrant.cloud.hybrid.v1.NetworkPolicyEgress.to:type_name -> qdrant.cloud.hybrid.v1.NetworkPolicyItem
	36, // 36: qdrant.cloud.hybrid.v1.NetworkPolicyEgress.ports:type_name -> qdrant.cloud.hybrid.v1.NetworkPolicyPort
	34, // 37: qdrant.cloud.hybrid.v1.NetworkPolicyIngress.from:type_name -> qdrant.cloud.hybrid.v1.NetworkPolicyItem
	36, // 38: qdrant.cloud.hybrid.v1.NetworkPolicyIngress.ports:type_name -> qdrant.cloud.hybrid.v1.NetworkPolicyPort
	35, // 39: qdrant.cloud.hybrid.v1.NetworkPolicyItem.namespace_selector:type_name -> qdrant.cloud.hybrid.v1.NetworkPolicyItemSelector
	35, // 40: qdrant.cloud.hybrid.v1.NetworkPolicyItem.pod_selector:type_name -> qdrant.cloud.hybrid.v1.NetworkPolicyItemSelector
	50, // 41: qdrant.cloud.hybrid.v1.NetworkPolicyItemSelector.match_labels:type_name -> qdrant.cloud.common.v1.KeyValue
	39, // 42: qdrant.cloud.hybrid.v1.OperatorQdrantStorage.performance:type_name -> qdrant.cloud.hybrid.v1.OperatorQdrantPerformance
	48, // 43: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.modified_at:type_name -> google.protobuf.Timestamp
	0,  // 44: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.phase:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatusPhase
	42, // 45: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.capabilities:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentCapabilities
	43, // 46: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.helm_repositories:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatus
	43, // 47: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.helm_releases:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatus
	2,  // 48: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.k8s_distribution:type_name -> qdrant.cloud.hybrid.v1.KubernetesDistribution
	44, // 49: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.storage_classes:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStorageClass
	45, // 50: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.volume_snapshot_classes:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentVolumeSnapshotClass
	46, // 51: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.node_infos:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeInfo
	1,  // 52: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatus.phase:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatusPhase
	50, // 53: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStorageClass.parameters:type_name -> qdrant.cloud.common.v1.KeyValue
	47, // 54: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeInfo.capacity:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeResourceInfo
	47, // 55: qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeInfo.allocatable:type_name -> qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeResourceInfo
	13, // 56: qdrant.cloud.hybrid.v1.HybridCloudService.ListCloudEnvironments:input_type -> qdrant.cloud.hybrid.v1.ListCloudEnvironmentsRequest
	11, // 57: qdrant.cloud.hybrid.v1.HybridCloudService.GetCloudEnvironment:input_type -> qdrant.cloud.hybrid.v1.GetCloudEnvironmentRequest
	9,  // 58: qdrant.cloud.hybrid.v1.HybridCloudService.CreateCloudEnvironment:input_type -> qdrant.cloud.hybrid.v1.CreateCloudEnvironmentRequest
	7,  // 59: qdrant.cloud.hybrid.v1.HybridCloudService.UpdateCloudEnvironment:input_type -> qdrant.cloud.hybrid.v1.UpdateCloudEnvironmentRequest
	5,  // 60: qdrant.cloud.hybrid.v1.HybridCloudService.DeleteCloudEnvironment:input_type -> qdrant.cloud.hybrid.v1.DeleteCloudEnvironmentRequest
	3,  // 61: qdrant.cloud.hybrid.v1.HybridCloudService.GetInitialInstallationCommand:input_type -> qdrant.cloud.hybrid.v1.GetInitialInstallationCommandRequest
	14, // 62: qdrant.cloud.hybrid.v1.HybridCloudService.ListCloudEnvironments:output_type -> qdrant.cloud.hybrid.v1.ListCloudEnvironmentsResponse
	12, // 63: qdrant.cloud.hybrid.v1.HybridCloudService.GetCloudEnvironment:output_type -> qdrant.cloud.hybrid.v1.GetCloudEnvironmentResponse
	10, // 64: qdrant.cloud.hybrid.v1.HybridCloudService.CreateCloudEnvironment:output_type -> qdrant.cloud.hybrid.v1.CreateCloudEnvironmentResponse
	8,  // 65: qdrant.cloud.hybrid.v1.HybridCloudService.UpdateCloudEnvironment:output_type -> qdrant.cloud.hybrid.v1.UpdateCloudEnvironmentResponse
	6,  // 66: qdrant.cloud.hybrid.v1.HybridCloudService.DeleteCloudEnvironment:output_type -> qdrant.cloud.hybrid.v1.DeleteCloudEnvironmentResponse
	4,  // 67: qdrant.cloud.hybrid.v1.HybridCloudService.GetInitialInstallationCommand:output_type -> qdrant.cloud.hybrid.v1.GetInitialInstallationCommandResponse
	62, // [62:68] is the sub-list for method output_type
	56, // [56:62] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_init() }
func file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_init() {
	if File_qdrant_cloud_hybrid_v1_hybrid_cloud_proto != nil {
		return
	}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[12].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[13].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[14].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[15].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[16].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[17].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[18].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[19].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[20].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[22].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[23].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[24].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[25].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[26].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[27].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[31].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[34].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[35].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[36].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[37].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[38].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[40].OneofWrappers = []any{}
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes[43].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDesc), len(file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_goTypes,
		DependencyIndexes: file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_depIdxs,
		EnumInfos:         file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_enumTypes,
		MessageInfos:      file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_msgTypes,
	}.Build()
	File_qdrant_cloud_hybrid_v1_hybrid_cloud_proto = out.File
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_goTypes = nil
	file_qdrant_cloud_hybrid_v1_hybrid_cloud_proto_depIdxs = nil
}
