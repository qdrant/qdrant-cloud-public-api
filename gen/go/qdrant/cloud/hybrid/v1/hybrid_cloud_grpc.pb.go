// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qdrant/cloud/hybrid/v1/hybrid_cloud.proto

package hybridv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HybridCloudService_ListCloudEnvironments_FullMethodName         = "/qdrant.cloud.hybrid.v1.HybridCloudService/ListCloudEnvironments"
	HybridCloudService_GetCloudEnvironment_FullMethodName           = "/qdrant.cloud.hybrid.v1.HybridCloudService/GetCloudEnvironment"
	HybridCloudService_CreateCloudEnvironment_FullMethodName        = "/qdrant.cloud.hybrid.v1.HybridCloudService/CreateCloudEnvironment"
	HybridCloudService_UpdateCloudEnvironment_FullMethodName        = "/qdrant.cloud.hybrid.v1.HybridCloudService/UpdateCloudEnvironment"
	HybridCloudService_DeleteCloudEnvironment_FullMethodName        = "/qdrant.cloud.hybrid.v1.HybridCloudService/DeleteCloudEnvironment"
	HybridCloudService_GetInitialInstallationCommand_FullMethodName = "/qdrant.cloud.hybrid.v1.HybridCloudService/GetInitialInstallationCommand"
)

// HybridCloudServiceClient is the client API for HybridCloudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HybridCloudServiceClient interface {
	ListCloudEnvironments(ctx context.Context, in *ListCloudEnvironmentsRequest, opts ...grpc.CallOption) (*ListCloudEnvironmentsResponse, error)
	GetCloudEnvironment(ctx context.Context, in *GetCloudEnvironmentRequest, opts ...grpc.CallOption) (*GetCloudEnvironmentResponse, error)
	CreateCloudEnvironment(ctx context.Context, in *CreateCloudEnvironmentRequest, opts ...grpc.CallOption) (*CreateCloudEnvironmentResponse, error)
	UpdateCloudEnvironment(ctx context.Context, in *UpdateCloudEnvironmentRequest, opts ...grpc.CallOption) (*UpdateCloudEnvironmentResponse, error)
	DeleteCloudEnvironment(ctx context.Context, in *DeleteCloudEnvironmentRequest, opts ...grpc.CallOption) (*DeleteCloudEnvironmentResponse, error)
	GetInitialInstallationCommand(ctx context.Context, in *GetInitialInstallationCommandRequest, opts ...grpc.CallOption) (*GetInitialInstallationCommandResponse, error)
}

type hybridCloudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHybridCloudServiceClient(cc grpc.ClientConnInterface) HybridCloudServiceClient {
	return &hybridCloudServiceClient{cc}
}

func (c *hybridCloudServiceClient) ListCloudEnvironments(ctx context.Context, in *ListCloudEnvironmentsRequest, opts ...grpc.CallOption) (*ListCloudEnvironmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCloudEnvironmentsResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_ListCloudEnvironments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hybridCloudServiceClient) GetCloudEnvironment(ctx context.Context, in *GetCloudEnvironmentRequest, opts ...grpc.CallOption) (*GetCloudEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCloudEnvironmentResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_GetCloudEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hybridCloudServiceClient) CreateCloudEnvironment(ctx context.Context, in *CreateCloudEnvironmentRequest, opts ...grpc.CallOption) (*CreateCloudEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCloudEnvironmentResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_CreateCloudEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hybridCloudServiceClient) UpdateCloudEnvironment(ctx context.Context, in *UpdateCloudEnvironmentRequest, opts ...grpc.CallOption) (*UpdateCloudEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCloudEnvironmentResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_UpdateCloudEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hybridCloudServiceClient) DeleteCloudEnvironment(ctx context.Context, in *DeleteCloudEnvironmentRequest, opts ...grpc.CallOption) (*DeleteCloudEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCloudEnvironmentResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_DeleteCloudEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hybridCloudServiceClient) GetInitialInstallationCommand(ctx context.Context, in *GetInitialInstallationCommandRequest, opts ...grpc.CallOption) (*GetInitialInstallationCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInitialInstallationCommandResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_GetInitialInstallationCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HybridCloudServiceServer is the server API for HybridCloudService service.
// All implementations must embed UnimplementedHybridCloudServiceServer
// for forward compatibility.
type HybridCloudServiceServer interface {
	ListCloudEnvironments(context.Context, *ListCloudEnvironmentsRequest) (*ListCloudEnvironmentsResponse, error)
	GetCloudEnvironment(context.Context, *GetCloudEnvironmentRequest) (*GetCloudEnvironmentResponse, error)
	CreateCloudEnvironment(context.Context, *CreateCloudEnvironmentRequest) (*CreateCloudEnvironmentResponse, error)
	UpdateCloudEnvironment(context.Context, *UpdateCloudEnvironmentRequest) (*UpdateCloudEnvironmentResponse, error)
	DeleteCloudEnvironment(context.Context, *DeleteCloudEnvironmentRequest) (*DeleteCloudEnvironmentResponse, error)
	GetInitialInstallationCommand(context.Context, *GetInitialInstallationCommandRequest) (*GetInitialInstallationCommandResponse, error)
	mustEmbedUnimplementedHybridCloudServiceServer()
}

// UnimplementedHybridCloudServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHybridCloudServiceServer struct{}

func (UnimplementedHybridCloudServiceServer) ListCloudEnvironments(context.Context, *ListCloudEnvironmentsRequest) (*ListCloudEnvironmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudEnvironments not implemented")
}
func (UnimplementedHybridCloudServiceServer) GetCloudEnvironment(context.Context, *GetCloudEnvironmentRequest) (*GetCloudEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudEnvironment not implemented")
}
func (UnimplementedHybridCloudServiceServer) CreateCloudEnvironment(context.Context, *CreateCloudEnvironmentRequest) (*CreateCloudEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudEnvironment not implemented")
}
func (UnimplementedHybridCloudServiceServer) UpdateCloudEnvironment(context.Context, *UpdateCloudEnvironmentRequest) (*UpdateCloudEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudEnvironment not implemented")
}
func (UnimplementedHybridCloudServiceServer) DeleteCloudEnvironment(context.Context, *DeleteCloudEnvironmentRequest) (*DeleteCloudEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudEnvironment not implemented")
}
func (UnimplementedHybridCloudServiceServer) GetInitialInstallationCommand(context.Context, *GetInitialInstallationCommandRequest) (*GetInitialInstallationCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitialInstallationCommand not implemented")
}
func (UnimplementedHybridCloudServiceServer) mustEmbedUnimplementedHybridCloudServiceServer() {}
func (UnimplementedHybridCloudServiceServer) testEmbeddedByValue()                            {}

// UnsafeHybridCloudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HybridCloudServiceServer will
// result in compilation errors.
type UnsafeHybridCloudServiceServer interface {
	mustEmbedUnimplementedHybridCloudServiceServer()
}

func RegisterHybridCloudServiceServer(s grpc.ServiceRegistrar, srv HybridCloudServiceServer) {
	// If the following call pancis, it indicates UnimplementedHybridCloudServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HybridCloudService_ServiceDesc, srv)
}

func _HybridCloudService_ListCloudEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).ListCloudEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_ListCloudEnvironments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).ListCloudEnvironments(ctx, req.(*ListCloudEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HybridCloudService_GetCloudEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).GetCloudEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_GetCloudEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).GetCloudEnvironment(ctx, req.(*GetCloudEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HybridCloudService_CreateCloudEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).CreateCloudEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_CreateCloudEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).CreateCloudEnvironment(ctx, req.(*CreateCloudEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HybridCloudService_UpdateCloudEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).UpdateCloudEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_UpdateCloudEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).UpdateCloudEnvironment(ctx, req.(*UpdateCloudEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HybridCloudService_DeleteCloudEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).DeleteCloudEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_DeleteCloudEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).DeleteCloudEnvironment(ctx, req.(*DeleteCloudEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HybridCloudService_GetInitialInstallationCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInitialInstallationCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).GetInitialInstallationCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_GetInitialInstallationCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).GetInitialInstallationCommand(ctx, req.(*GetInitialInstallationCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HybridCloudService_ServiceDesc is the grpc.ServiceDesc for HybridCloudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HybridCloudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.cloud.hybrid.v1.HybridCloudService",
	HandlerType: (*HybridCloudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCloudEnvironments",
			Handler:    _HybridCloudService_ListCloudEnvironments_Handler,
		},
		{
			MethodName: "GetCloudEnvironment",
			Handler:    _HybridCloudService_GetCloudEnvironment_Handler,
		},
		{
			MethodName: "CreateCloudEnvironment",
			Handler:    _HybridCloudService_CreateCloudEnvironment_Handler,
		},
		{
			MethodName: "UpdateCloudEnvironment",
			Handler:    _HybridCloudService_UpdateCloudEnvironment_Handler,
		},
		{
			MethodName: "DeleteCloudEnvironment",
			Handler:    _HybridCloudService_DeleteCloudEnvironment_Handler,
		},
		{
			MethodName: "GetInitialInstallationCommand",
			Handler:    _HybridCloudService_GetInitialInstallationCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/cloud/hybrid/v1/hybrid_cloud.proto",
}
