// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qdrant/cloud/hybrid/v1/hybrid_cloud.proto

package hybridv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HybridCloudService_ListHybridCloudEnvironments_FullMethodName  = "/qdrant.cloud.hybrid.v1.HybridCloudService/ListHybridCloudEnvironments"
	HybridCloudService_GetHybridCloudEnvironment_FullMethodName    = "/qdrant.cloud.hybrid.v1.HybridCloudService/GetHybridCloudEnvironment"
	HybridCloudService_CreateHybridCloudEnvironment_FullMethodName = "/qdrant.cloud.hybrid.v1.HybridCloudService/CreateHybridCloudEnvironment"
	HybridCloudService_UpdateHybridCloudEnvironment_FullMethodName = "/qdrant.cloud.hybrid.v1.HybridCloudService/UpdateHybridCloudEnvironment"
	HybridCloudService_DeleteHybridCloudEnvironment_FullMethodName = "/qdrant.cloud.hybrid.v1.HybridCloudService/DeleteHybridCloudEnvironment"
	HybridCloudService_GenerateBootstrapCommands_FullMethodName    = "/qdrant.cloud.hybrid.v1.HybridCloudService/GenerateBootstrapCommands"
)

// HybridCloudServiceClient is the client API for HybridCloudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HybridCloudService is the API used for configuring hybrid cloud environments.
type HybridCloudServiceClient interface {
	// Lists all hybrid cloud environments in the account identified by the given ID.
	// Required permissions (any-of):
	// - read:hybrid_cloud_environments
	// - write:clusters
	ListHybridCloudEnvironments(ctx context.Context, in *ListHybridCloudEnvironmentsRequest, opts ...grpc.CallOption) (*ListHybridCloudEnvironmentsResponse, error)
	// Gets a hybrid cloud environment in the account identified by the given ID.
	// Required permissions (any-of):
	// - read:hybrid_cloud_environments
	// - write:clusters
	GetHybridCloudEnvironment(ctx context.Context, in *GetHybridCloudEnvironmentRequest, opts ...grpc.CallOption) (*GetHybridCloudEnvironmentResponse, error)
	// Creates a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - write:hybrid_cloud_environments
	CreateHybridCloudEnvironment(ctx context.Context, in *CreateHybridCloudEnvironmentRequest, opts ...grpc.CallOption) (*CreateHybridCloudEnvironmentResponse, error)
	// Updates a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - write:hybrid_cloud_environments
	UpdateHybridCloudEnvironment(ctx context.Context, in *UpdateHybridCloudEnvironmentRequest, opts ...grpc.CallOption) (*UpdateHybridCloudEnvironmentResponse, error)
	// Deletes a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - delete:hybrid_cloud_environments
	DeleteHybridCloudEnvironment(ctx context.Context, in *DeleteHybridCloudEnvironmentRequest, opts ...grpc.CallOption) (*DeleteHybridCloudEnvironmentResponse, error)
	// Generates the commands that should be executed against a kubernetes cluster to
	// bootstrap it to the hybrid cloud environment. The operation can be invoked multiple times,
	// but be aware that each invocation is going to create new Qdrant cloud access token and the registry credentials.
	// Thus, it makes sense to call it only if a kubernetes cluster is not yet registered to the given hybrid environment.
	// Required permissions:
	// - write:hybrid_cloud_environments
	// - write:management_keys
	GenerateBootstrapCommands(ctx context.Context, in *GenerateBootstrapCommandsRequest, opts ...grpc.CallOption) (*GenerateBootstrapCommandsResponse, error)
}

type hybridCloudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHybridCloudServiceClient(cc grpc.ClientConnInterface) HybridCloudServiceClient {
	return &hybridCloudServiceClient{cc}
}

func (c *hybridCloudServiceClient) ListHybridCloudEnvironments(ctx context.Context, in *ListHybridCloudEnvironmentsRequest, opts ...grpc.CallOption) (*ListHybridCloudEnvironmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHybridCloudEnvironmentsResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_ListHybridCloudEnvironments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hybridCloudServiceClient) GetHybridCloudEnvironment(ctx context.Context, in *GetHybridCloudEnvironmentRequest, opts ...grpc.CallOption) (*GetHybridCloudEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHybridCloudEnvironmentResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_GetHybridCloudEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hybridCloudServiceClient) CreateHybridCloudEnvironment(ctx context.Context, in *CreateHybridCloudEnvironmentRequest, opts ...grpc.CallOption) (*CreateHybridCloudEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHybridCloudEnvironmentResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_CreateHybridCloudEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hybridCloudServiceClient) UpdateHybridCloudEnvironment(ctx context.Context, in *UpdateHybridCloudEnvironmentRequest, opts ...grpc.CallOption) (*UpdateHybridCloudEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHybridCloudEnvironmentResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_UpdateHybridCloudEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hybridCloudServiceClient) DeleteHybridCloudEnvironment(ctx context.Context, in *DeleteHybridCloudEnvironmentRequest, opts ...grpc.CallOption) (*DeleteHybridCloudEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHybridCloudEnvironmentResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_DeleteHybridCloudEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hybridCloudServiceClient) GenerateBootstrapCommands(ctx context.Context, in *GenerateBootstrapCommandsRequest, opts ...grpc.CallOption) (*GenerateBootstrapCommandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateBootstrapCommandsResponse)
	err := c.cc.Invoke(ctx, HybridCloudService_GenerateBootstrapCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HybridCloudServiceServer is the server API for HybridCloudService service.
// All implementations must embed UnimplementedHybridCloudServiceServer
// for forward compatibility.
//
// HybridCloudService is the API used for configuring hybrid cloud environments.
type HybridCloudServiceServer interface {
	// Lists all hybrid cloud environments in the account identified by the given ID.
	// Required permissions (any-of):
	// - read:hybrid_cloud_environments
	// - write:clusters
	ListHybridCloudEnvironments(context.Context, *ListHybridCloudEnvironmentsRequest) (*ListHybridCloudEnvironmentsResponse, error)
	// Gets a hybrid cloud environment in the account identified by the given ID.
	// Required permissions (any-of):
	// - read:hybrid_cloud_environments
	// - write:clusters
	GetHybridCloudEnvironment(context.Context, *GetHybridCloudEnvironmentRequest) (*GetHybridCloudEnvironmentResponse, error)
	// Creates a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - write:hybrid_cloud_environments
	CreateHybridCloudEnvironment(context.Context, *CreateHybridCloudEnvironmentRequest) (*CreateHybridCloudEnvironmentResponse, error)
	// Updates a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - write:hybrid_cloud_environments
	UpdateHybridCloudEnvironment(context.Context, *UpdateHybridCloudEnvironmentRequest) (*UpdateHybridCloudEnvironmentResponse, error)
	// Deletes a hybrid cloud environment in the account identified by the given ID.
	// Required permissions:
	// - delete:hybrid_cloud_environments
	DeleteHybridCloudEnvironment(context.Context, *DeleteHybridCloudEnvironmentRequest) (*DeleteHybridCloudEnvironmentResponse, error)
	// Generates the commands that should be executed against a kubernetes cluster to
	// bootstrap it to the hybrid cloud environment. The operation can be invoked multiple times,
	// but be aware that each invocation is going to create new Qdrant cloud access token and the registry credentials.
	// Thus, it makes sense to call it only if a kubernetes cluster is not yet registered to the given hybrid environment.
	// Required permissions:
	// - write:hybrid_cloud_environments
	// - write:management_keys
	GenerateBootstrapCommands(context.Context, *GenerateBootstrapCommandsRequest) (*GenerateBootstrapCommandsResponse, error)
	mustEmbedUnimplementedHybridCloudServiceServer()
}

// UnimplementedHybridCloudServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHybridCloudServiceServer struct{}

func (UnimplementedHybridCloudServiceServer) ListHybridCloudEnvironments(context.Context, *ListHybridCloudEnvironmentsRequest) (*ListHybridCloudEnvironmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHybridCloudEnvironments not implemented")
}
func (UnimplementedHybridCloudServiceServer) GetHybridCloudEnvironment(context.Context, *GetHybridCloudEnvironmentRequest) (*GetHybridCloudEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHybridCloudEnvironment not implemented")
}
func (UnimplementedHybridCloudServiceServer) CreateHybridCloudEnvironment(context.Context, *CreateHybridCloudEnvironmentRequest) (*CreateHybridCloudEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHybridCloudEnvironment not implemented")
}
func (UnimplementedHybridCloudServiceServer) UpdateHybridCloudEnvironment(context.Context, *UpdateHybridCloudEnvironmentRequest) (*UpdateHybridCloudEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHybridCloudEnvironment not implemented")
}
func (UnimplementedHybridCloudServiceServer) DeleteHybridCloudEnvironment(context.Context, *DeleteHybridCloudEnvironmentRequest) (*DeleteHybridCloudEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHybridCloudEnvironment not implemented")
}
func (UnimplementedHybridCloudServiceServer) GenerateBootstrapCommands(context.Context, *GenerateBootstrapCommandsRequest) (*GenerateBootstrapCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBootstrapCommands not implemented")
}
func (UnimplementedHybridCloudServiceServer) mustEmbedUnimplementedHybridCloudServiceServer() {}
func (UnimplementedHybridCloudServiceServer) testEmbeddedByValue()                            {}

// UnsafeHybridCloudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HybridCloudServiceServer will
// result in compilation errors.
type UnsafeHybridCloudServiceServer interface {
	mustEmbedUnimplementedHybridCloudServiceServer()
}

func RegisterHybridCloudServiceServer(s grpc.ServiceRegistrar, srv HybridCloudServiceServer) {
	// If the following call pancis, it indicates UnimplementedHybridCloudServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HybridCloudService_ServiceDesc, srv)
}

func _HybridCloudService_ListHybridCloudEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHybridCloudEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).ListHybridCloudEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_ListHybridCloudEnvironments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).ListHybridCloudEnvironments(ctx, req.(*ListHybridCloudEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HybridCloudService_GetHybridCloudEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHybridCloudEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).GetHybridCloudEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_GetHybridCloudEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).GetHybridCloudEnvironment(ctx, req.(*GetHybridCloudEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HybridCloudService_CreateHybridCloudEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHybridCloudEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).CreateHybridCloudEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_CreateHybridCloudEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).CreateHybridCloudEnvironment(ctx, req.(*CreateHybridCloudEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HybridCloudService_UpdateHybridCloudEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHybridCloudEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).UpdateHybridCloudEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_UpdateHybridCloudEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).UpdateHybridCloudEnvironment(ctx, req.(*UpdateHybridCloudEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HybridCloudService_DeleteHybridCloudEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHybridCloudEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).DeleteHybridCloudEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_DeleteHybridCloudEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).DeleteHybridCloudEnvironment(ctx, req.(*DeleteHybridCloudEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HybridCloudService_GenerateBootstrapCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateBootstrapCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridCloudServiceServer).GenerateBootstrapCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HybridCloudService_GenerateBootstrapCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridCloudServiceServer).GenerateBootstrapCommands(ctx, req.(*GenerateBootstrapCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HybridCloudService_ServiceDesc is the grpc.ServiceDesc for HybridCloudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HybridCloudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.cloud.hybrid.v1.HybridCloudService",
	HandlerType: (*HybridCloudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHybridCloudEnvironments",
			Handler:    _HybridCloudService_ListHybridCloudEnvironments_Handler,
		},
		{
			MethodName: "GetHybridCloudEnvironment",
			Handler:    _HybridCloudService_GetHybridCloudEnvironment_Handler,
		},
		{
			MethodName: "CreateHybridCloudEnvironment",
			Handler:    _HybridCloudService_CreateHybridCloudEnvironment_Handler,
		},
		{
			MethodName: "UpdateHybridCloudEnvironment",
			Handler:    _HybridCloudService_UpdateHybridCloudEnvironment_Handler,
		},
		{
			MethodName: "DeleteHybridCloudEnvironment",
			Handler:    _HybridCloudService_DeleteHybridCloudEnvironment_Handler,
		},
		{
			MethodName: "GenerateBootstrapCommands",
			Handler:    _HybridCloudService_GenerateBootstrapCommands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/cloud/hybrid/v1/hybrid_cloud.proto",
}
