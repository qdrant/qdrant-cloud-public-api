// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qdrant/cloud/metering/v1/metering.proto

package meteringv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeteringService_ListMonthlyMeterings_FullMethodName = "/qdrant.cloud.metering.v1.MeteringService/ListMonthlyMeterings"
	MeteringService_ListMeterings_FullMethodName        = "/qdrant.cloud.metering.v1.MeteringService/ListMeterings"
)

// MeteringServiceClient is the client API for MeteringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MeteringService is the API to retrieve usage data used for billing purposes.
type MeteringServiceClient interface {
	// Lists aggregated monthly meterings for the account identified by the given ID.
	// Each summary represents the total metering amount for one month.
	// Required permissions:
	// - read:payment_information
	ListMonthlyMeterings(ctx context.Context, in *ListMonthlyMeteringsRequest, opts ...grpc.CallOption) (*ListMonthlyMeteringsResponse, error)
	// Lists detailed metering entries for a specific month for the account identified by the given ID.
	// Required permissions:
	// - read:payment_information
	ListMeterings(ctx context.Context, in *ListMeteringsRequest, opts ...grpc.CallOption) (*ListMeteringsResponse, error)
}

type meteringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeteringServiceClient(cc grpc.ClientConnInterface) MeteringServiceClient {
	return &meteringServiceClient{cc}
}

func (c *meteringServiceClient) ListMonthlyMeterings(ctx context.Context, in *ListMonthlyMeteringsRequest, opts ...grpc.CallOption) (*ListMonthlyMeteringsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMonthlyMeteringsResponse)
	err := c.cc.Invoke(ctx, MeteringService_ListMonthlyMeterings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) ListMeterings(ctx context.Context, in *ListMeteringsRequest, opts ...grpc.CallOption) (*ListMeteringsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMeteringsResponse)
	err := c.cc.Invoke(ctx, MeteringService_ListMeterings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeteringServiceServer is the server API for MeteringService service.
// All implementations must embed UnimplementedMeteringServiceServer
// for forward compatibility.
//
// MeteringService is the API to retrieve usage data used for billing purposes.
type MeteringServiceServer interface {
	// Lists aggregated monthly meterings for the account identified by the given ID.
	// Each summary represents the total metering amount for one month.
	// Required permissions:
	// - read:payment_information
	ListMonthlyMeterings(context.Context, *ListMonthlyMeteringsRequest) (*ListMonthlyMeteringsResponse, error)
	// Lists detailed metering entries for a specific month for the account identified by the given ID.
	// Required permissions:
	// - read:payment_information
	ListMeterings(context.Context, *ListMeteringsRequest) (*ListMeteringsResponse, error)
	mustEmbedUnimplementedMeteringServiceServer()
}

// UnimplementedMeteringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeteringServiceServer struct{}

func (UnimplementedMeteringServiceServer) ListMonthlyMeterings(context.Context, *ListMonthlyMeteringsRequest) (*ListMonthlyMeteringsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonthlyMeterings not implemented")
}
func (UnimplementedMeteringServiceServer) ListMeterings(context.Context, *ListMeteringsRequest) (*ListMeteringsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeterings not implemented")
}
func (UnimplementedMeteringServiceServer) mustEmbedUnimplementedMeteringServiceServer() {}
func (UnimplementedMeteringServiceServer) testEmbeddedByValue()                         {}

// UnsafeMeteringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeteringServiceServer will
// result in compilation errors.
type UnsafeMeteringServiceServer interface {
	mustEmbedUnimplementedMeteringServiceServer()
}

func RegisterMeteringServiceServer(s grpc.ServiceRegistrar, srv MeteringServiceServer) {
	// If the following call pancis, it indicates UnimplementedMeteringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeteringService_ServiceDesc, srv)
}

func _MeteringService_ListMonthlyMeterings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMonthlyMeteringsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).ListMonthlyMeterings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteringService_ListMonthlyMeterings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).ListMonthlyMeterings(ctx, req.(*ListMonthlyMeteringsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_ListMeterings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeteringsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).ListMeterings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteringService_ListMeterings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).ListMeterings(ctx, req.(*ListMeteringsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeteringService_ServiceDesc is the grpc.ServiceDesc for MeteringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeteringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.cloud.metering.v1.MeteringService",
	HandlerType: (*MeteringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMonthlyMeterings",
			Handler:    _MeteringService_ListMonthlyMeterings_Handler,
		},
		{
			MethodName: "ListMeterings",
			Handler:    _MeteringService_ListMeterings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/cloud/metering/v1/metering.proto",
}
