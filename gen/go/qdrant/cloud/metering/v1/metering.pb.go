// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: qdrant/cloud/metering/v1/metering.proto

package meteringv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListMonthlyMeteringsRequest is the request for the ListMonthlyMeterings function
type ListMonthlyMeteringsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMonthlyMeteringsRequest) Reset() {
	*x = ListMonthlyMeteringsRequest{}
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMonthlyMeteringsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMonthlyMeteringsRequest) ProtoMessage() {}

func (x *ListMonthlyMeteringsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMonthlyMeteringsRequest.ProtoReflect.Descriptor instead.
func (*ListMonthlyMeteringsRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_metering_v1_metering_proto_rawDescGZIP(), []int{0}
}

func (x *ListMonthlyMeteringsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// ListMonthlyMeterings is the response from the ListMonthlyMeterings function
type ListMonthlyMeteringsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of monthly metering summaries.
	Items         []*MonthlyMeteringSummary `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMonthlyMeteringsResponse) Reset() {
	*x = ListMonthlyMeteringsResponse{}
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMonthlyMeteringsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMonthlyMeteringsResponse) ProtoMessage() {}

func (x *ListMonthlyMeteringsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMonthlyMeteringsResponse.ProtoReflect.Descriptor instead.
func (*ListMonthlyMeteringsResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_metering_v1_metering_proto_rawDescGZIP(), []int{1}
}

func (x *ListMonthlyMeteringsResponse) GetItems() []*MonthlyMeteringSummary {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListMeteringsRequest is the request for the ListMeterings function
type ListMeteringsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The year to filter meterings by (e.g., 2025).
	Year int32 `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	// The month to filter meterings by (1 = January, 12 = December).
	Month         int32 `protobuf:"varint,3,opt,name=month,proto3" json:"month,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMeteringsRequest) Reset() {
	*x = ListMeteringsRequest{}
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMeteringsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMeteringsRequest) ProtoMessage() {}

func (x *ListMeteringsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMeteringsRequest.ProtoReflect.Descriptor instead.
func (*ListMeteringsRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_metering_v1_metering_proto_rawDescGZIP(), []int{2}
}

func (x *ListMeteringsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListMeteringsRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ListMeteringsRequest) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

// ListMeteringsResponse is the response from the ListMeterings function
type ListMeteringsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of detailed metering items for the specified month.
	Items         []*MeteringItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMeteringsResponse) Reset() {
	*x = ListMeteringsResponse{}
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMeteringsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMeteringsResponse) ProtoMessage() {}

func (x *ListMeteringsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMeteringsResponse.ProtoReflect.Descriptor instead.
func (*ListMeteringsResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_metering_v1_metering_proto_rawDescGZIP(), []int{3}
}

func (x *ListMeteringsResponse) GetItems() []*MeteringItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// MonthlyMeteringSummary represents a single month's metering summary.
type MonthlyMeteringSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The year this summary represents (e.g., 2025).
	Year int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	// The month this summary represents (1 = January, 12 = December).
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	// Total amount for the month in millicents.
	// Example: 499900 = $4.999
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Currency of the amount, in ISO 4217 format (e.g., "USD").
	Currency      string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonthlyMeteringSummary) Reset() {
	*x = MonthlyMeteringSummary{}
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonthlyMeteringSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyMeteringSummary) ProtoMessage() {}

func (x *MonthlyMeteringSummary) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyMeteringSummary.ProtoReflect.Descriptor instead.
func (*MonthlyMeteringSummary) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_metering_v1_metering_proto_rawDescGZIP(), []int{4}
}

func (x *MonthlyMeteringSummary) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *MonthlyMeteringSummary) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *MonthlyMeteringSummary) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MonthlyMeteringSummary) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Metering represents a detailed metering item.
type MeteringItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account this metering item belongs to (in GUID format).
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The identifier of the cluster associated with this usage (in GUID format).
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The name of the cluster involved in this metering.
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// The start time of the metering window (UTC).
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the metering window (UTC).
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The identifier of the billable entity (in GUID format), such as a cluster
	// booking or another billable resource.
	BillableEntityId string `protobuf:"bytes,6,opt,name=billable_entity_id,json=billableEntityId,proto3" json:"billable_entity_id,omitempty"`
	// The type of the billable entity (e.g., "ClusterBooking").
	// TODO do we want to have a list (enum) of billable resources?
	BillableEntityType string `protobuf:"bytes,7,opt,name=billable_entity_type,json=billableEntityType,proto3" json:"billable_entity_type,omitempty"`
	// TODO in my account, I only see `aws`, `azure`, `gcp`. Are there other "partners"? Could this be renamed to `cloud_provider_id`?
	Partner string `protobuf:"bytes,8,opt,name=partner,proto3" json:"partner,omitempty"`
	// The unit price in millicents per hour (e.g., 4112 = $0.04112/hour).
	PricePerHour int32 `protobuf:"varint,9,opt,name=price_per_hour,json=pricePerHour,proto3" json:"price_per_hour,omitempty"`
	// Usage duration in decimal hours. (e.g., 2.5 = 2 hours and 30 minutes).
	UsageHours float64 `protobuf:"fixed64,10,opt,name=usage_hours,json=usageHours,proto3" json:"usage_hours,omitempty"`
	// The total charge for this item, in millicents.
	Amount int64 `protobuf:"varint,11,opt,name=amount,proto3" json:"amount,omitempty"`
	// The total discount applied to this item, in millicents.
	DiscountAmount *int64 `protobuf:"varint,12,opt,name=discount_amount,json=discountAmount,proto3,oneof" json:"discount_amount,omitempty"`
	// The Discount applied as a percentage (e.g., 12.5).
	DiscountAmountPercent *float64 `protobuf:"fixed64,13,opt,name=discount_amount_percent,json=discountAmountPercent,proto3,oneof" json:"discount_amount_percent,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MeteringItem) Reset() {
	*x = MeteringItem{}
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeteringItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeteringItem) ProtoMessage() {}

func (x *MeteringItem) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_metering_v1_metering_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeteringItem.ProtoReflect.Descriptor instead.
func (*MeteringItem) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_metering_v1_metering_proto_rawDescGZIP(), []int{5}
}

func (x *MeteringItem) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *MeteringItem) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MeteringItem) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *MeteringItem) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MeteringItem) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *MeteringItem) GetBillableEntityId() string {
	if x != nil {
		return x.BillableEntityId
	}
	return ""
}

func (x *MeteringItem) GetBillableEntityType() string {
	if x != nil {
		return x.BillableEntityType
	}
	return ""
}

func (x *MeteringItem) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *MeteringItem) GetPricePerHour() int32 {
	if x != nil {
		return x.PricePerHour
	}
	return 0
}

func (x *MeteringItem) GetUsageHours() float64 {
	if x != nil {
		return x.UsageHours
	}
	return 0
}

func (x *MeteringItem) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MeteringItem) GetDiscountAmount() int64 {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return 0
}

func (x *MeteringItem) GetDiscountAmountPercent() float64 {
	if x != nil && x.DiscountAmountPercent != nil {
		return *x.DiscountAmountPercent
	}
	return 0
}

var File_qdrant_cloud_metering_v1_metering_proto protoreflect.FileDescriptor

const file_qdrant_cloud_metering_v1_metering_proto_rawDesc = "" +
	"\n" +
	"'qdrant/cloud/metering/v1/metering.proto\x12\x18qdrant.cloud.metering.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a#qdrant/cloud/common/v1/common.proto\"F\n" +
	"\x1bListMonthlyMeteringsRequest\x12'\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\"f\n" +
	"\x1cListMonthlyMeteringsResponse\x12F\n" +
	"\x05items\x18\x01 \x03(\v20.qdrant.cloud.metering.v1.MonthlyMeteringSummaryR\x05items\"\x81\x01\n" +
	"\x14ListMeteringsRequest\x12'\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\taccountId\x12\x1f\n" +
	"\x04year\x18\x02 \x01(\x05B\v\xbaH\b\x1a\x06\x18\xb8\x17(\xd0\x0fR\x04year\x12\x1f\n" +
	"\x05month\x18\x03 \x01(\x05B\t\xbaH\x06\x1a\x04\x18\f(\x01R\x05month\"U\n" +
	"\x15ListMeteringsResponse\x12<\n" +
	"\x05items\x18\x01 \x03(\v2&.qdrant.cloud.metering.v1.MeteringItemR\x05items\"v\n" +
	"\x16MonthlyMeteringSummary\x12\x12\n" +
	"\x04year\x18\x01 \x01(\x05R\x04year\x12\x14\n" +
	"\x05month\x18\x02 \x01(\x05R\x05month\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x03R\x06amount\x12\x1a\n" +
	"\bcurrency\x18\x04 \x01(\tR\bcurrency\"\xd5\x04\n" +
	"\fMeteringItem\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tR\tclusterId\x12!\n" +
	"\fcluster_name\x18\x03 \x01(\tR\vclusterName\x129\n" +
	"\n" +
	"start_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12,\n" +
	"\x12billable_entity_id\x18\x06 \x01(\tR\x10billableEntityId\x120\n" +
	"\x14billable_entity_type\x18\a \x01(\tR\x12billableEntityType\x12\x18\n" +
	"\apartner\x18\b \x01(\tR\apartner\x12$\n" +
	"\x0eprice_per_hour\x18\t \x01(\x05R\fpricePerHour\x12\x1f\n" +
	"\vusage_hours\x18\n" +
	" \x01(\x01R\n" +
	"usageHours\x12\x16\n" +
	"\x06amount\x18\v \x01(\x03R\x06amount\x12,\n" +
	"\x0fdiscount_amount\x18\f \x01(\x03H\x00R\x0ediscountAmount\x88\x01\x01\x12;\n" +
	"\x17discount_amount_percent\x18\r \x01(\x01H\x01R\x15discountAmountPercent\x88\x01\x01B\x12\n" +
	"\x10_discount_amountB\x1a\n" +
	"\x18_discount_amount_percent2\xc7\x03\n" +
	"\x0fMeteringService\x12\xdb\x01\n" +
	"\x14ListMonthlyMeterings\x125.qdrant.cloud.metering.v1.ListMonthlyMeteringsRequest\x1a6.qdrant.cloud.metering.v1.ListMonthlyMeteringsResponse\"T\x8a\xb5\x18\x18read:payment_information\x82\xd3\xe4\x93\x022\x120/api/metering/v1/accounts/{account_id}/meterings\x12\xd5\x01\n" +
	"\rListMeterings\x12..qdrant.cloud.metering.v1.ListMeteringsRequest\x1a/.qdrant.cloud.metering.v1.ListMeteringsResponse\"c\x8a\xb5\x18\x18read:payment_information\x82\xd3\xe4\x93\x02A\x12?/api/metering/v1/accounts/{account_id}/meterings/{year}/{month}B\x86\x02\n" +
	"\x1ccom.qdrant.cloud.metering.v1B\rMeteringProtoP\x01ZTgithub.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/metering/v1;meteringv1\xa2\x02\x03QCM\xaa\x02\x18Qdrant.Cloud.Metering.V1\xca\x02\x18Qdrant\\Cloud\\Metering\\V1\xe2\x02$Qdrant\\Cloud\\Metering\\V1\\GPBMetadata\xea\x02\x1bQdrant::Cloud::Metering::V1b\x06proto3"

var (
	file_qdrant_cloud_metering_v1_metering_proto_rawDescOnce sync.Once
	file_qdrant_cloud_metering_v1_metering_proto_rawDescData []byte
)

func file_qdrant_cloud_metering_v1_metering_proto_rawDescGZIP() []byte {
	file_qdrant_cloud_metering_v1_metering_proto_rawDescOnce.Do(func() {
		file_qdrant_cloud_metering_v1_metering_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qdrant_cloud_metering_v1_metering_proto_rawDesc), len(file_qdrant_cloud_metering_v1_metering_proto_rawDesc)))
	})
	return file_qdrant_cloud_metering_v1_metering_proto_rawDescData
}

var file_qdrant_cloud_metering_v1_metering_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_qdrant_cloud_metering_v1_metering_proto_goTypes = []any{
	(*ListMonthlyMeteringsRequest)(nil),  // 0: qdrant.cloud.metering.v1.ListMonthlyMeteringsRequest
	(*ListMonthlyMeteringsResponse)(nil), // 1: qdrant.cloud.metering.v1.ListMonthlyMeteringsResponse
	(*ListMeteringsRequest)(nil),         // 2: qdrant.cloud.metering.v1.ListMeteringsRequest
	(*ListMeteringsResponse)(nil),        // 3: qdrant.cloud.metering.v1.ListMeteringsResponse
	(*MonthlyMeteringSummary)(nil),       // 4: qdrant.cloud.metering.v1.MonthlyMeteringSummary
	(*MeteringItem)(nil),                 // 5: qdrant.cloud.metering.v1.MeteringItem
	(*timestamppb.Timestamp)(nil),        // 6: google.protobuf.Timestamp
}
var file_qdrant_cloud_metering_v1_metering_proto_depIdxs = []int32{
	4, // 0: qdrant.cloud.metering.v1.ListMonthlyMeteringsResponse.items:type_name -> qdrant.cloud.metering.v1.MonthlyMeteringSummary
	5, // 1: qdrant.cloud.metering.v1.ListMeteringsResponse.items:type_name -> qdrant.cloud.metering.v1.MeteringItem
	6, // 2: qdrant.cloud.metering.v1.MeteringItem.start_time:type_name -> google.protobuf.Timestamp
	6, // 3: qdrant.cloud.metering.v1.MeteringItem.end_time:type_name -> google.protobuf.Timestamp
	0, // 4: qdrant.cloud.metering.v1.MeteringService.ListMonthlyMeterings:input_type -> qdrant.cloud.metering.v1.ListMonthlyMeteringsRequest
	2, // 5: qdrant.cloud.metering.v1.MeteringService.ListMeterings:input_type -> qdrant.cloud.metering.v1.ListMeteringsRequest
	1, // 6: qdrant.cloud.metering.v1.MeteringService.ListMonthlyMeterings:output_type -> qdrant.cloud.metering.v1.ListMonthlyMeteringsResponse
	3, // 7: qdrant.cloud.metering.v1.MeteringService.ListMeterings:output_type -> qdrant.cloud.metering.v1.ListMeteringsResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_qdrant_cloud_metering_v1_metering_proto_init() }
func file_qdrant_cloud_metering_v1_metering_proto_init() {
	if File_qdrant_cloud_metering_v1_metering_proto != nil {
		return
	}
	file_qdrant_cloud_metering_v1_metering_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qdrant_cloud_metering_v1_metering_proto_rawDesc), len(file_qdrant_cloud_metering_v1_metering_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qdrant_cloud_metering_v1_metering_proto_goTypes,
		DependencyIndexes: file_qdrant_cloud_metering_v1_metering_proto_depIdxs,
		MessageInfos:      file_qdrant_cloud_metering_v1_metering_proto_msgTypes,
	}.Build()
	File_qdrant_cloud_metering_v1_metering_proto = out.File
	file_qdrant_cloud_metering_v1_metering_proto_goTypes = nil
	file_qdrant_cloud_metering_v1_metering_proto_depIdxs = nil
}
