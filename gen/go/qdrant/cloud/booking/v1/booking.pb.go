// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: qdrant/cloud/booking/v1/booking.proto

package bookingv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/qdrant/qdrant-cloud-public-api/gen/go/qdrant/cloud/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ResourceUnit defines the units of the available resources options.
type ResourceUnit int32

const (
	// Unspecified resource unit.
	ResourceUnit_RESOURCE_UNIT_UNSPECIFIED ResourceUnit = 0
	// The resource is measured in GiB (Gibibytes).
	ResourceUnit_RESOURCE_UNIT_GIB ResourceUnit = 1
	// The resource is measured in millicore units.
	ResourceUnit_RESOURCE_UNIT_MILLICORE ResourceUnit = 2
)

// Enum value maps for ResourceUnit.
var (
	ResourceUnit_name = map[int32]string{
		0: "RESOURCE_UNIT_UNSPECIFIED",
		1: "RESOURCE_UNIT_GIB",
		2: "RESOURCE_UNIT_MILLICORE",
	}
	ResourceUnit_value = map[string]int32{
		"RESOURCE_UNIT_UNSPECIFIED": 0,
		"RESOURCE_UNIT_GIB":         1,
		"RESOURCE_UNIT_MILLICORE":   2,
	}
)

func (x ResourceUnit) Enum() *ResourceUnit {
	p := new(ResourceUnit)
	*p = x
	return p
}

func (x ResourceUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_booking_v1_booking_proto_enumTypes[0].Descriptor()
}

func (ResourceUnit) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_booking_v1_booking_proto_enumTypes[0]
}

func (x ResourceUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceUnit.Descriptor instead.
func (ResourceUnit) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{0}
}

// ResourceType defines the types of the available resources options.
type ResourceType int32

const (
	// Unspecified resource type.
	ResourceType_RESOURCE_TYPE_UNSPECIFIED ResourceType = 0
	// CPU resource type.
	ResourceType_RESOURCE_TYPE_CPU ResourceType = 1
	// RAM resource type.
	ResourceType_RESOURCE_TYPE_RAM ResourceType = 2
	// Disk resource type.
	ResourceType_RESOURCE_TYPE_DISK ResourceType = 3
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_CPU",
		2: "RESOURCE_TYPE_RAM",
		3: "RESOURCE_TYPE_DISK",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"RESOURCE_TYPE_CPU":         1,
		"RESOURCE_TYPE_RAM":         2,
		"RESOURCE_TYPE_DISK":        3,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_booking_v1_booking_proto_enumTypes[1].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_booking_v1_booking_proto_enumTypes[1]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{1}
}

// PackageStatus defines the valid states a package can be in.
type PackageStatus int32

const (
	// Unspecified package status.
	PackageStatus_PACKAGE_STATUS_UNSPECIFIED PackageStatus = 0
	// The package is active and available for use.
	PackageStatus_PACKAGE_STATUS_ACTIVE PackageStatus = 1
	// The package is deactivated.
	PackageStatus_PACKAGE_STATUS_DEACTIVATED PackageStatus = 2
)

// Enum value maps for PackageStatus.
var (
	PackageStatus_name = map[int32]string{
		0: "PACKAGE_STATUS_UNSPECIFIED",
		1: "PACKAGE_STATUS_ACTIVE",
		2: "PACKAGE_STATUS_DEACTIVATED",
	}
	PackageStatus_value = map[string]int32{
		"PACKAGE_STATUS_UNSPECIFIED": 0,
		"PACKAGE_STATUS_ACTIVE":      1,
		"PACKAGE_STATUS_DEACTIVATED": 2,
	}
)

func (x PackageStatus) Enum() *PackageStatus {
	p := new(PackageStatus)
	*p = x
	return p
}

func (x PackageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_qdrant_cloud_booking_v1_booking_proto_enumTypes[2].Descriptor()
}

func (PackageStatus) Type() protoreflect.EnumType {
	return &file_qdrant_cloud_booking_v1_booking_proto_enumTypes[2]
}

func (x PackageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageStatus.Descriptor instead.
func (PackageStatus) EnumDescriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{2}
}

// ListPackagesRequest is the request for the ListPackages function
type ListPackagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Optional filter specifying the cloud provider where the cluster will be hosted.
	// Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviders` method.
	// If omitted, all packages for the specified account are returned.
	CloudProviderId *string `protobuf:"bytes,2,opt,name=cloud_provider_id,json=cloudProviderId,proto3,oneof" json:"cloud_provider_id,omitempty"`
	// Optional filter specifying the cloud region where the cluster will be hosted.
	// Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions` method.
	// If omitted, all packages for the specified account are returned.
	// This field is ignored when the `cloud_provider_id` is set to 'hybrid'.
	CloudProviderRegionId *string `protobuf:"bytes,3,opt,name=cloud_provider_region_id,json=cloudProviderRegionId,proto3,oneof" json:"cloud_provider_region_id,omitempty"`
	// The status of the packages to filter.
	// This is an optional field. If value is not set, all packages are returned.
	Statuses      []PackageStatus `protobuf:"varint,4,rep,packed,name=statuses,proto3,enum=qdrant.cloud.booking.v1.PackageStatus" json:"statuses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPackagesRequest) Reset() {
	*x = ListPackagesRequest{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPackagesRequest) ProtoMessage() {}

func (x *ListPackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPackagesRequest.ProtoReflect.Descriptor instead.
func (*ListPackagesRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{0}
}

func (x *ListPackagesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListPackagesRequest) GetCloudProviderId() string {
	if x != nil && x.CloudProviderId != nil {
		return *x.CloudProviderId
	}
	return ""
}

func (x *ListPackagesRequest) GetCloudProviderRegionId() string {
	if x != nil && x.CloudProviderRegionId != nil {
		return *x.CloudProviderRegionId
	}
	return ""
}

func (x *ListPackagesRequest) GetStatuses() []PackageStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

// ListPackagesResponse is the response from the ListPackages function
type ListPackagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual packages in this list
	Items         []*Package `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPackagesResponse) Reset() {
	*x = ListPackagesResponse{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPackagesResponse) ProtoMessage() {}

func (x *ListPackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPackagesResponse.ProtoReflect.Descriptor instead.
func (*ListPackagesResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{1}
}

func (x *ListPackagesResponse) GetItems() []*Package {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListGlobalPackagesRequest is the request for the ListGlobalPackages function
type ListGlobalPackagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mandatory filter specifying the cloud provider where the cluster will be hosted.
	// Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviders` method.
	CloudProviderId string `protobuf:"bytes,1,opt,name=cloud_provider_id,json=cloudProviderId,proto3" json:"cloud_provider_id,omitempty"`
	// Filter specifying the cloud region where the cluster will be hosted.
	// Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviderRegions` method.
	// Field can be empty, if cloud_provider_id is `hybrid`
	CloudProviderRegionId *string `protobuf:"bytes,2,opt,name=cloud_provider_region_id,json=cloudProviderRegionId,proto3,oneof" json:"cloud_provider_region_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ListGlobalPackagesRequest) Reset() {
	*x = ListGlobalPackagesRequest{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGlobalPackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGlobalPackagesRequest) ProtoMessage() {}

func (x *ListGlobalPackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGlobalPackagesRequest.ProtoReflect.Descriptor instead.
func (*ListGlobalPackagesRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{2}
}

func (x *ListGlobalPackagesRequest) GetCloudProviderId() string {
	if x != nil {
		return x.CloudProviderId
	}
	return ""
}

func (x *ListGlobalPackagesRequest) GetCloudProviderRegionId() string {
	if x != nil && x.CloudProviderRegionId != nil {
		return *x.CloudProviderRegionId
	}
	return ""
}

// ListPackagesResponse is the response from the ListPackages function
type ListGlobalPackagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual packages in this list
	Items         []*Package `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGlobalPackagesResponse) Reset() {
	*x = ListGlobalPackagesResponse{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGlobalPackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGlobalPackagesResponse) ProtoMessage() {}

func (x *ListGlobalPackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGlobalPackagesResponse.ProtoReflect.Descriptor instead.
func (*ListGlobalPackagesResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{3}
}

func (x *ListGlobalPackagesResponse) GetItems() []*Package {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListGlobalResourceOptionsRequest is the request for the ListGlobalResourceOptions function
type ListGlobalResourceOptionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mandatory filter specifying the cloud provider where the cluster will be hosted.
	// Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviders` method.
	CloudProviderId string `protobuf:"bytes,1,opt,name=cloud_provider_id,json=cloudProviderId,proto3" json:"cloud_provider_id,omitempty"`
	// Filter specifying the cloud region where the cluster will be hosted.
	// Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviderRegions` method.
	// Field can be empty, if cloud_provider_id is `hybrid`
	CloudProviderRegionId *string `protobuf:"bytes,2,opt,name=cloud_provider_region_id,json=cloudProviderRegionId,proto3,oneof" json:"cloud_provider_region_id,omitempty"`
	// Optional filter specifying the type of resources to return.
	// If not set, all resource options are returned.
	ResourceType  ResourceType `protobuf:"varint,3,opt,name=resource_type,json=resourceType,proto3,enum=qdrant.cloud.booking.v1.ResourceType" json:"resource_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGlobalResourceOptionsRequest) Reset() {
	*x = ListGlobalResourceOptionsRequest{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGlobalResourceOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGlobalResourceOptionsRequest) ProtoMessage() {}

func (x *ListGlobalResourceOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGlobalResourceOptionsRequest.ProtoReflect.Descriptor instead.
func (*ListGlobalResourceOptionsRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{4}
}

func (x *ListGlobalResourceOptionsRequest) GetCloudProviderId() string {
	if x != nil {
		return x.CloudProviderId
	}
	return ""
}

func (x *ListGlobalResourceOptionsRequest) GetCloudProviderRegionId() string {
	if x != nil && x.CloudProviderRegionId != nil {
		return *x.CloudProviderRegionId
	}
	return ""
}

func (x *ListGlobalResourceOptionsRequest) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

// ListGlobalResourceOptionsResponse is the response from the ListGlobalResourceOptions function
type ListGlobalResourceOptionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual resource options in this list
	Items         []*ResourceOption `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGlobalResourceOptionsResponse) Reset() {
	*x = ListGlobalResourceOptionsResponse{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGlobalResourceOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGlobalResourceOptionsResponse) ProtoMessage() {}

func (x *ListGlobalResourceOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGlobalResourceOptionsResponse.ProtoReflect.Descriptor instead.
func (*ListGlobalResourceOptionsResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{5}
}

func (x *ListGlobalResourceOptionsResponse) GetItems() []*ResourceOption {
	if x != nil {
		return x.Items
	}
	return nil
}

// GetPackageRequest is the request for the GetPackage function
type GetPackageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account (in GUID format).
	// This is a required field.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The unique identifier of the package.
	// A unique string ID assigned to each package.
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPackageRequest) Reset() {
	*x = GetPackageRequest{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageRequest) ProtoMessage() {}

func (x *GetPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageRequest.ProtoReflect.Descriptor instead.
func (*GetPackageRequest) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{6}
}

func (x *GetPackageRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetPackageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// GetPackageResponse is the response from the GetPackage function
type GetPackageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual package
	Package       *Package `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPackageResponse) Reset() {
	*x = GetPackageResponse{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageResponse) ProtoMessage() {}

func (x *GetPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageResponse.ProtoReflect.Descriptor instead.
func (*GetPackageResponse) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{7}
}

func (x *GetPackageResponse) GetPackage() *Package {
	if x != nil {
		return x.Package
	}
	return nil
}

// Package represents a single package.
// A package is a configuration (CPU/Memory/Disk size) for a cluster with a price.
type Package struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the package.
	// A unique string ID assigned to each package.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the package.
	// A human-readable identifier for the package.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies if this is a free or paid package.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The resource configuration associated with the package
	ResourceConfiguration *ResourceConfiguration `protobuf:"bytes,4,opt,name=resource_configuration,json=resourceConfiguration,proto3" json:"resource_configuration,omitempty"`
	// The currency of the prices.
	// Specifies the currency in which the prices are denominated.
	Currency string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	// The unit price per hour in millicents, in integer format.
	// Represents the cost per hour for a single unit of the resource.
	// You will be billed hourly for the resources you use. Partial hours are rounded up and billed as full hours.
	UnitIntPricePerHour int32 `protobuf:"varint,6,opt,name=unit_int_price_per_hour,json=unitIntPricePerHour,proto3" json:"unit_int_price_per_hour,omitempty"`
	// The status of the package.
	// Indicates the current status of the package.
	Status        PackageStatus `protobuf:"varint,7,opt,name=status,proto3,enum=qdrant.cloud.booking.v1.PackageStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Package) Reset() {
	*x = Package{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{8}
}

func (x *Package) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Package) GetResourceConfiguration() *ResourceConfiguration {
	if x != nil {
		return x.ResourceConfiguration
	}
	return nil
}

func (x *Package) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Package) GetUnitIntPricePerHour() int32 {
	if x != nil {
		return x.UnitIntPricePerHour
	}
	return 0
}

func (x *Package) GetStatus() PackageStatus {
	if x != nil {
		return x.Status
	}
	return PackageStatus_PACKAGE_STATUS_UNSPECIFIED
}

// ResourceConfiguration defines the resource configuration for a package.
type ResourceConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The amount of RAM (e.g., "1GiB")
	Ram string `protobuf:"bytes,1,opt,name=ram,proto3" json:"ram,omitempty"`
	// The amount of CPU (e.g., "1000m" (1 vCPU))
	Cpu string `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// The amount of disk (e.g., "100GiB")
	Disk          string `protobuf:"bytes,3,opt,name=disk,proto3" json:"disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceConfiguration) Reset() {
	*x = ResourceConfiguration{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceConfiguration) ProtoMessage() {}

func (x *ResourceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceConfiguration.ProtoReflect.Descriptor instead.
func (*ResourceConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{9}
}

func (x *ResourceConfiguration) GetRam() string {
	if x != nil {
		return x.Ram
	}
	return ""
}

func (x *ResourceConfiguration) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *ResourceConfiguration) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

// ResourceOption represents a single resource option.
type ResourceOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the resource option.
	// A unique string ID assigned to each resource option.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the resource option.
	// A human-readable name for the resource option.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The type of the resource option.
	Type ResourceType `protobuf:"varint,3,opt,name=type,proto3,enum=qdrant.cloud.booking.v1.ResourceType" json:"type,omitempty"`
	// The status of the resource option.
	// Indicates the current status of the resource option.
	Status PackageStatus `protobuf:"varint,4,opt,name=status,proto3,enum=qdrant.cloud.booking.v1.PackageStatus" json:"status,omitempty"`
	// The unit of the resource option.
	// Specifies the unit in which the resource option is measured.
	Unit ResourceUnit `protobuf:"varint,5,opt,name=unit,proto3,enum=qdrant.cloud.booking.v1.ResourceUnit" json:"unit,omitempty"`
	// The currency of the prices.
	// Specifies the currency in which prices are denominated.
	Currency string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	// The unit price per hour, in millicents, as an integer.
	// Represents the cost per hour for a single unit of the resource.
	// You will be billed hourly for the resources you use; partial hours are rounded up and billed as full hours.
	UnitIntPricePerHour int32 `protobuf:"varint,7,opt,name=unit_int_price_per_hour,json=unitIntPricePerHour,proto3" json:"unit_int_price_per_hour,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ResourceOption) Reset() {
	*x = ResourceOption{}
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceOption) ProtoMessage() {}

func (x *ResourceOption) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_booking_v1_booking_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceOption.ProtoReflect.Descriptor instead.
func (*ResourceOption) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP(), []int{10}
}

func (x *ResourceOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceOption) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *ResourceOption) GetStatus() PackageStatus {
	if x != nil {
		return x.Status
	}
	return PackageStatus_PACKAGE_STATUS_UNSPECIFIED
}

func (x *ResourceOption) GetUnit() ResourceUnit {
	if x != nil {
		return x.Unit
	}
	return ResourceUnit_RESOURCE_UNIT_UNSPECIFIED
}

func (x *ResourceOption) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ResourceOption) GetUnitIntPricePerHour() int32 {
	if x != nil {
		return x.UnitIntPricePerHour
	}
	return 0
}

var File_qdrant_cloud_booking_v1_booking_proto protoreflect.FileDescriptor

var file_qdrant_cloud_booking_v1_booking_proto_rawDesc = string([]byte{
	0x0a, 0x25, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xad, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x10, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x22, 0x4e, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xab, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x03, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x54,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x11, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x03, 0x52, 0x0f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x65, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x17, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x15, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x22, 0xc6, 0x02, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34,
	0x0a, 0x17, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x48, 0x6f, 0x75, 0x72, 0x2a, 0x61, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x47, 0x49, 0x42, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4c, 0x4c,
	0x49, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x73, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x41, 0x4d, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x03, 0x2a, 0x6a, 0x0a, 0x0d,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x1a, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x32, 0xd4, 0x05, 0x0a, 0x0e, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x8a, 0xb5, 0x18, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x8a,
	0xb5, 0x18, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa7,
	0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x8a, 0xb5, 0x18, 0x00, 0x98, 0xb5, 0x18, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x8a,
	0xb5, 0x18, 0x00, 0x98, 0xb5, 0x18, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0xfe, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x42,
	0x0c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x51, 0x43, 0x42, 0xaa, 0x02, 0x17, 0x51, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x17, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x23,
	0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x3a, 0x3a, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_qdrant_cloud_booking_v1_booking_proto_rawDescOnce sync.Once
	file_qdrant_cloud_booking_v1_booking_proto_rawDescData []byte
)

func file_qdrant_cloud_booking_v1_booking_proto_rawDescGZIP() []byte {
	file_qdrant_cloud_booking_v1_booking_proto_rawDescOnce.Do(func() {
		file_qdrant_cloud_booking_v1_booking_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qdrant_cloud_booking_v1_booking_proto_rawDesc), len(file_qdrant_cloud_booking_v1_booking_proto_rawDesc)))
	})
	return file_qdrant_cloud_booking_v1_booking_proto_rawDescData
}

var file_qdrant_cloud_booking_v1_booking_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_qdrant_cloud_booking_v1_booking_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_qdrant_cloud_booking_v1_booking_proto_goTypes = []any{
	(ResourceUnit)(0),                         // 0: qdrant.cloud.booking.v1.ResourceUnit
	(ResourceType)(0),                         // 1: qdrant.cloud.booking.v1.ResourceType
	(PackageStatus)(0),                        // 2: qdrant.cloud.booking.v1.PackageStatus
	(*ListPackagesRequest)(nil),               // 3: qdrant.cloud.booking.v1.ListPackagesRequest
	(*ListPackagesResponse)(nil),              // 4: qdrant.cloud.booking.v1.ListPackagesResponse
	(*ListGlobalPackagesRequest)(nil),         // 5: qdrant.cloud.booking.v1.ListGlobalPackagesRequest
	(*ListGlobalPackagesResponse)(nil),        // 6: qdrant.cloud.booking.v1.ListGlobalPackagesResponse
	(*ListGlobalResourceOptionsRequest)(nil),  // 7: qdrant.cloud.booking.v1.ListGlobalResourceOptionsRequest
	(*ListGlobalResourceOptionsResponse)(nil), // 8: qdrant.cloud.booking.v1.ListGlobalResourceOptionsResponse
	(*GetPackageRequest)(nil),                 // 9: qdrant.cloud.booking.v1.GetPackageRequest
	(*GetPackageResponse)(nil),                // 10: qdrant.cloud.booking.v1.GetPackageResponse
	(*Package)(nil),                           // 11: qdrant.cloud.booking.v1.Package
	(*ResourceConfiguration)(nil),             // 12: qdrant.cloud.booking.v1.ResourceConfiguration
	(*ResourceOption)(nil),                    // 13: qdrant.cloud.booking.v1.ResourceOption
}
var file_qdrant_cloud_booking_v1_booking_proto_depIdxs = []int32{
	2,  // 0: qdrant.cloud.booking.v1.ListPackagesRequest.statuses:type_name -> qdrant.cloud.booking.v1.PackageStatus
	11, // 1: qdrant.cloud.booking.v1.ListPackagesResponse.items:type_name -> qdrant.cloud.booking.v1.Package
	11, // 2: qdrant.cloud.booking.v1.ListGlobalPackagesResponse.items:type_name -> qdrant.cloud.booking.v1.Package
	1,  // 3: qdrant.cloud.booking.v1.ListGlobalResourceOptionsRequest.resource_type:type_name -> qdrant.cloud.booking.v1.ResourceType
	13, // 4: qdrant.cloud.booking.v1.ListGlobalResourceOptionsResponse.items:type_name -> qdrant.cloud.booking.v1.ResourceOption
	11, // 5: qdrant.cloud.booking.v1.GetPackageResponse.package:type_name -> qdrant.cloud.booking.v1.Package
	12, // 6: qdrant.cloud.booking.v1.Package.resource_configuration:type_name -> qdrant.cloud.booking.v1.ResourceConfiguration
	2,  // 7: qdrant.cloud.booking.v1.Package.status:type_name -> qdrant.cloud.booking.v1.PackageStatus
	1,  // 8: qdrant.cloud.booking.v1.ResourceOption.type:type_name -> qdrant.cloud.booking.v1.ResourceType
	2,  // 9: qdrant.cloud.booking.v1.ResourceOption.status:type_name -> qdrant.cloud.booking.v1.PackageStatus
	0,  // 10: qdrant.cloud.booking.v1.ResourceOption.unit:type_name -> qdrant.cloud.booking.v1.ResourceUnit
	3,  // 11: qdrant.cloud.booking.v1.BookingService.ListPackages:input_type -> qdrant.cloud.booking.v1.ListPackagesRequest
	9,  // 12: qdrant.cloud.booking.v1.BookingService.GetPackage:input_type -> qdrant.cloud.booking.v1.GetPackageRequest
	5,  // 13: qdrant.cloud.booking.v1.BookingService.ListGlobalPackages:input_type -> qdrant.cloud.booking.v1.ListGlobalPackagesRequest
	7,  // 14: qdrant.cloud.booking.v1.BookingService.ListGlobalResourceOptions:input_type -> qdrant.cloud.booking.v1.ListGlobalResourceOptionsRequest
	4,  // 15: qdrant.cloud.booking.v1.BookingService.ListPackages:output_type -> qdrant.cloud.booking.v1.ListPackagesResponse
	10, // 16: qdrant.cloud.booking.v1.BookingService.GetPackage:output_type -> qdrant.cloud.booking.v1.GetPackageResponse
	6,  // 17: qdrant.cloud.booking.v1.BookingService.ListGlobalPackages:output_type -> qdrant.cloud.booking.v1.ListGlobalPackagesResponse
	8,  // 18: qdrant.cloud.booking.v1.BookingService.ListGlobalResourceOptions:output_type -> qdrant.cloud.booking.v1.ListGlobalResourceOptionsResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_qdrant_cloud_booking_v1_booking_proto_init() }
func file_qdrant_cloud_booking_v1_booking_proto_init() {
	if File_qdrant_cloud_booking_v1_booking_proto != nil {
		return
	}
	file_qdrant_cloud_booking_v1_booking_proto_msgTypes[0].OneofWrappers = []any{}
	file_qdrant_cloud_booking_v1_booking_proto_msgTypes[2].OneofWrappers = []any{}
	file_qdrant_cloud_booking_v1_booking_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qdrant_cloud_booking_v1_booking_proto_rawDesc), len(file_qdrant_cloud_booking_v1_booking_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qdrant_cloud_booking_v1_booking_proto_goTypes,
		DependencyIndexes: file_qdrant_cloud_booking_v1_booking_proto_depIdxs,
		EnumInfos:         file_qdrant_cloud_booking_v1_booking_proto_enumTypes,
		MessageInfos:      file_qdrant_cloud_booking_v1_booking_proto_msgTypes,
	}.Build()
	File_qdrant_cloud_booking_v1_booking_proto = out.File
	file_qdrant_cloud_booking_v1_booking_proto_goTypes = nil
	file_qdrant_cloud_booking_v1_booking_proto_depIdxs = nil
}
