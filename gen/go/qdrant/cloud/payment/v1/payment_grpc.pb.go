// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qdrant/cloud/payment/v1/payment.proto

package paymentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_ListPaymentInformation_FullMethodName      = "/qdrant.cloud.payment.v1.PaymentService/ListPaymentInformation"
	PaymentService_GetPaymentInformation_FullMethodName       = "/qdrant.cloud.payment.v1.PaymentService/GetPaymentInformation"
	PaymentService_CreatePaymentInformation_FullMethodName    = "/qdrant.cloud.payment.v1.PaymentService/CreatePaymentInformation"
	PaymentService_UpdatePaymentInformation_FullMethodName    = "/qdrant.cloud.payment.v1.PaymentService/UpdatePaymentInformation"
	PaymentService_DeletePaymentInformation_FullMethodName    = "/qdrant.cloud.payment.v1.PaymentService/DeletePaymentInformation"
	PaymentService_GetStripeCheckoutSession_FullMethodName    = "/qdrant.cloud.payment.v1.PaymentService/GetStripeCheckoutSession"
	PaymentService_CreateStripeCheckoutSession_FullMethodName = "/qdrant.cloud.payment.v1.PaymentService/CreateStripeCheckoutSession"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PaymentService is the API used to manage payment settings.
type PaymentServiceClient interface {
	// Lists all payment information known by the system for the provided account.
	// Required permissions:
	// - read:payment_information
	ListPaymentInformation(ctx context.Context, in *ListPaymentInformationRequest, opts ...grpc.CallOption) (*ListPaymentInformationResponse, error)
	// Gets the payment information identified by the given ID.
	// Required permissions:
	// - read:payment_information
	GetPaymentInformation(ctx context.Context, in *GetPaymentInformationRequest, opts ...grpc.CallOption) (*GetPaymentInformationResponse, error)
	// Creates a new payment information for the account.
	// This method is used to create a new payment information, which can then be connected to a payment provider (like Stripe).
	// Required permissions:
	// - write:payment_information
	CreatePaymentInformation(ctx context.Context, in *CreatePaymentInformationRequest, opts ...grpc.CallOption) (*CreatePaymentInformationResponse, error)
	// Updates the payment information for the account.
	// This method is used to update the payment information details, such as billing address.
	// Required permissions:
	// - write:payment_information
	UpdatePaymentInformation(ctx context.Context, in *UpdatePaymentInformationRequest, opts ...grpc.CallOption) (*UpdatePaymentInformationResponse, error)
	// Delete the payment information identified by the given ID.
	// Required permissions:
	// - write:payment_information
	DeletePaymentInformation(ctx context.Context, in *DeletePaymentInformationRequest, opts ...grpc.CallOption) (*DeletePaymentInformationResponse, error)
	// Get the Stripe Checkout session by its ID.
	// This method is used to retrieve the session details after it has been created.
	// Required permissions:
	// - write:payment_information
	GetStripeCheckoutSession(ctx context.Context, in *GetStripeCheckoutSessionRequest, opts ...grpc.CallOption) (*GetStripeCheckoutSessionResponse, error)
	// Initiates the creation of a Stripe Checkout session for the specified account.
	// This session can be used by the client (usually via frontend) to interact directly with Stripe's hosted payment page.
	// Required permissions:
	// - write:payment_information
	CreateStripeCheckoutSession(ctx context.Context, in *CreateStripeCheckoutSessionRequest, opts ...grpc.CallOption) (*CreateStripeCheckoutSessionResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) ListPaymentInformation(ctx context.Context, in *ListPaymentInformationRequest, opts ...grpc.CallOption) (*ListPaymentInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentInformationResponse)
	err := c.cc.Invoke(ctx, PaymentService_ListPaymentInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentInformation(ctx context.Context, in *GetPaymentInformationRequest, opts ...grpc.CallOption) (*GetPaymentInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentInformationResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreatePaymentInformation(ctx context.Context, in *CreatePaymentInformationRequest, opts ...grpc.CallOption) (*CreatePaymentInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentInformationResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreatePaymentInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdatePaymentInformation(ctx context.Context, in *UpdatePaymentInformationRequest, opts ...grpc.CallOption) (*UpdatePaymentInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePaymentInformationResponse)
	err := c.cc.Invoke(ctx, PaymentService_UpdatePaymentInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DeletePaymentInformation(ctx context.Context, in *DeletePaymentInformationRequest, opts ...grpc.CallOption) (*DeletePaymentInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePaymentInformationResponse)
	err := c.cc.Invoke(ctx, PaymentService_DeletePaymentInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetStripeCheckoutSession(ctx context.Context, in *GetStripeCheckoutSessionRequest, opts ...grpc.CallOption) (*GetStripeCheckoutSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStripeCheckoutSessionResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetStripeCheckoutSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateStripeCheckoutSession(ctx context.Context, in *CreateStripeCheckoutSessionRequest, opts ...grpc.CallOption) (*CreateStripeCheckoutSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStripeCheckoutSessionResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreateStripeCheckoutSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
//
// PaymentService is the API used to manage payment settings.
type PaymentServiceServer interface {
	// Lists all payment information known by the system for the provided account.
	// Required permissions:
	// - read:payment_information
	ListPaymentInformation(context.Context, *ListPaymentInformationRequest) (*ListPaymentInformationResponse, error)
	// Gets the payment information identified by the given ID.
	// Required permissions:
	// - read:payment_information
	GetPaymentInformation(context.Context, *GetPaymentInformationRequest) (*GetPaymentInformationResponse, error)
	// Creates a new payment information for the account.
	// This method is used to create a new payment information, which can then be connected to a payment provider (like Stripe).
	// Required permissions:
	// - write:payment_information
	CreatePaymentInformation(context.Context, *CreatePaymentInformationRequest) (*CreatePaymentInformationResponse, error)
	// Updates the payment information for the account.
	// This method is used to update the payment information details, such as billing address.
	// Required permissions:
	// - write:payment_information
	UpdatePaymentInformation(context.Context, *UpdatePaymentInformationRequest) (*UpdatePaymentInformationResponse, error)
	// Delete the payment information identified by the given ID.
	// Required permissions:
	// - write:payment_information
	DeletePaymentInformation(context.Context, *DeletePaymentInformationRequest) (*DeletePaymentInformationResponse, error)
	// Get the Stripe Checkout session by its ID.
	// This method is used to retrieve the session details after it has been created.
	// Required permissions:
	// - write:payment_information
	GetStripeCheckoutSession(context.Context, *GetStripeCheckoutSessionRequest) (*GetStripeCheckoutSessionResponse, error)
	// Initiates the creation of a Stripe Checkout session for the specified account.
	// This session can be used by the client (usually via frontend) to interact directly with Stripe's hosted payment page.
	// Required permissions:
	// - write:payment_information
	CreateStripeCheckoutSession(context.Context, *CreateStripeCheckoutSessionRequest) (*CreateStripeCheckoutSessionResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) ListPaymentInformation(context.Context, *ListPaymentInformationRequest) (*ListPaymentInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentInformation not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentInformation(context.Context, *GetPaymentInformationRequest) (*GetPaymentInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentInformation not implemented")
}
func (UnimplementedPaymentServiceServer) CreatePaymentInformation(context.Context, *CreatePaymentInformationRequest) (*CreatePaymentInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentInformation not implemented")
}
func (UnimplementedPaymentServiceServer) UpdatePaymentInformation(context.Context, *UpdatePaymentInformationRequest) (*UpdatePaymentInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentInformation not implemented")
}
func (UnimplementedPaymentServiceServer) DeletePaymentInformation(context.Context, *DeletePaymentInformationRequest) (*DeletePaymentInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentInformation not implemented")
}
func (UnimplementedPaymentServiceServer) GetStripeCheckoutSession(context.Context, *GetStripeCheckoutSessionRequest) (*GetStripeCheckoutSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStripeCheckoutSession not implemented")
}
func (UnimplementedPaymentServiceServer) CreateStripeCheckoutSession(context.Context, *CreateStripeCheckoutSessionRequest) (*CreateStripeCheckoutSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStripeCheckoutSession not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_ListPaymentInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListPaymentInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ListPaymentInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListPaymentInformation(ctx, req.(*ListPaymentInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentInformation(ctx, req.(*GetPaymentInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreatePaymentInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePaymentInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePaymentInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePaymentInformation(ctx, req.(*CreatePaymentInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdatePaymentInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdatePaymentInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_UpdatePaymentInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdatePaymentInformation(ctx, req.(*UpdatePaymentInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DeletePaymentInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaymentInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DeletePaymentInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_DeletePaymentInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DeletePaymentInformation(ctx, req.(*DeletePaymentInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetStripeCheckoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStripeCheckoutSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetStripeCheckoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetStripeCheckoutSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetStripeCheckoutSession(ctx, req.(*GetStripeCheckoutSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateStripeCheckoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStripeCheckoutSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateStripeCheckoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreateStripeCheckoutSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateStripeCheckoutSession(ctx, req.(*CreateStripeCheckoutSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.cloud.payment.v1.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPaymentInformation",
			Handler:    _PaymentService_ListPaymentInformation_Handler,
		},
		{
			MethodName: "GetPaymentInformation",
			Handler:    _PaymentService_GetPaymentInformation_Handler,
		},
		{
			MethodName: "CreatePaymentInformation",
			Handler:    _PaymentService_CreatePaymentInformation_Handler,
		},
		{
			MethodName: "UpdatePaymentInformation",
			Handler:    _PaymentService_UpdatePaymentInformation_Handler,
		},
		{
			MethodName: "DeletePaymentInformation",
			Handler:    _PaymentService_DeletePaymentInformation_Handler,
		},
		{
			MethodName: "GetStripeCheckoutSession",
			Handler:    _PaymentService_GetStripeCheckoutSession_Handler,
		},
		{
			MethodName: "CreateStripeCheckoutSession",
			Handler:    _PaymentService_CreateStripeCheckoutSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/cloud/payment/v1/payment.proto",
}
