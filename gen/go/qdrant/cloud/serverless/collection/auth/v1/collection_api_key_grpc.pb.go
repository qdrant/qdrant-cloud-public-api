// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qdrant/cloud/serverless/collection/auth/v1/collection_api_key.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectionApiKeyService_ListCollectionApiKeys_FullMethodName  = "/qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService/ListCollectionApiKeys"
	CollectionApiKeyService_CreateCollectionApiKey_FullMethodName = "/qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService/CreateCollectionApiKey"
	CollectionApiKeyService_DeleteCollectionApiKey_FullMethodName = "/qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService/DeleteCollectionApiKey"
)

// CollectionApiKeyServiceClient is the client API for CollectionApiKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing API keys for a serverless collection
type CollectionApiKeyServiceClient interface {
	// ListCollectionApiKeys returns all API keys for a collection
	// Required Permissions:
	// - read:serverless_api_keys
	ListCollectionApiKeys(ctx context.Context, in *ListCollectionApiKeysRequest, opts ...grpc.CallOption) (*ListCollectionApiKeysResponse, error)
	// CreateCollectionApiKey creates a new API key for a collection
	// Required Permissions:
	// - write:serverless_api_keys
	CreateCollectionApiKey(ctx context.Context, in *CreateCollectionApiKeyRequest, opts ...grpc.CallOption) (*CreateCollectionApiKeyResponse, error)
	// DeleteCollectionApiKey removes an API key from a collection
	// Required Permissions:
	// - delete:serverless_api_keys
	DeleteCollectionApiKey(ctx context.Context, in *DeleteCollectionApiKeyRequest, opts ...grpc.CallOption) (*DeleteCollectionApiKeyResponse, error)
}

type collectionApiKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionApiKeyServiceClient(cc grpc.ClientConnInterface) CollectionApiKeyServiceClient {
	return &collectionApiKeyServiceClient{cc}
}

func (c *collectionApiKeyServiceClient) ListCollectionApiKeys(ctx context.Context, in *ListCollectionApiKeysRequest, opts ...grpc.CallOption) (*ListCollectionApiKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCollectionApiKeysResponse)
	err := c.cc.Invoke(ctx, CollectionApiKeyService_ListCollectionApiKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionApiKeyServiceClient) CreateCollectionApiKey(ctx context.Context, in *CreateCollectionApiKeyRequest, opts ...grpc.CallOption) (*CreateCollectionApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCollectionApiKeyResponse)
	err := c.cc.Invoke(ctx, CollectionApiKeyService_CreateCollectionApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionApiKeyServiceClient) DeleteCollectionApiKey(ctx context.Context, in *DeleteCollectionApiKeyRequest, opts ...grpc.CallOption) (*DeleteCollectionApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCollectionApiKeyResponse)
	err := c.cc.Invoke(ctx, CollectionApiKeyService_DeleteCollectionApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionApiKeyServiceServer is the server API for CollectionApiKeyService service.
// All implementations must embed UnimplementedCollectionApiKeyServiceServer
// for forward compatibility.
//
// Service for managing API keys for a serverless collection
type CollectionApiKeyServiceServer interface {
	// ListCollectionApiKeys returns all API keys for a collection
	// Required Permissions:
	// - read:serverless_api_keys
	ListCollectionApiKeys(context.Context, *ListCollectionApiKeysRequest) (*ListCollectionApiKeysResponse, error)
	// CreateCollectionApiKey creates a new API key for a collection
	// Required Permissions:
	// - write:serverless_api_keys
	CreateCollectionApiKey(context.Context, *CreateCollectionApiKeyRequest) (*CreateCollectionApiKeyResponse, error)
	// DeleteCollectionApiKey removes an API key from a collection
	// Required Permissions:
	// - delete:serverless_api_keys
	DeleteCollectionApiKey(context.Context, *DeleteCollectionApiKeyRequest) (*DeleteCollectionApiKeyResponse, error)
	mustEmbedUnimplementedCollectionApiKeyServiceServer()
}

// UnimplementedCollectionApiKeyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectionApiKeyServiceServer struct{}

func (UnimplementedCollectionApiKeyServiceServer) ListCollectionApiKeys(context.Context, *ListCollectionApiKeysRequest) (*ListCollectionApiKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionApiKeys not implemented")
}
func (UnimplementedCollectionApiKeyServiceServer) CreateCollectionApiKey(context.Context, *CreateCollectionApiKeyRequest) (*CreateCollectionApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollectionApiKey not implemented")
}
func (UnimplementedCollectionApiKeyServiceServer) DeleteCollectionApiKey(context.Context, *DeleteCollectionApiKeyRequest) (*DeleteCollectionApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionApiKey not implemented")
}
func (UnimplementedCollectionApiKeyServiceServer) mustEmbedUnimplementedCollectionApiKeyServiceServer() {
}
func (UnimplementedCollectionApiKeyServiceServer) testEmbeddedByValue() {}

// UnsafeCollectionApiKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionApiKeyServiceServer will
// result in compilation errors.
type UnsafeCollectionApiKeyServiceServer interface {
	mustEmbedUnimplementedCollectionApiKeyServiceServer()
}

func RegisterCollectionApiKeyServiceServer(s grpc.ServiceRegistrar, srv CollectionApiKeyServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollectionApiKeyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectionApiKeyService_ServiceDesc, srv)
}

func _CollectionApiKeyService_ListCollectionApiKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionApiKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionApiKeyServiceServer).ListCollectionApiKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionApiKeyService_ListCollectionApiKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionApiKeyServiceServer).ListCollectionApiKeys(ctx, req.(*ListCollectionApiKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionApiKeyService_CreateCollectionApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionApiKeyServiceServer).CreateCollectionApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionApiKeyService_CreateCollectionApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionApiKeyServiceServer).CreateCollectionApiKey(ctx, req.(*CreateCollectionApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionApiKeyService_DeleteCollectionApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionApiKeyServiceServer).DeleteCollectionApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionApiKeyService_DeleteCollectionApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionApiKeyServiceServer).DeleteCollectionApiKey(ctx, req.(*DeleteCollectionApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionApiKeyService_ServiceDesc is the grpc.ServiceDesc for CollectionApiKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionApiKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.cloud.serverless.collection.auth.v1.CollectionApiKeyService",
	HandlerType: (*CollectionApiKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCollectionApiKeys",
			Handler:    _CollectionApiKeyService_ListCollectionApiKeys_Handler,
		},
		{
			MethodName: "CreateCollectionApiKey",
			Handler:    _CollectionApiKeyService_CreateCollectionApiKey_Handler,
		},
		{
			MethodName: "DeleteCollectionApiKey",
			Handler:    _CollectionApiKeyService_DeleteCollectionApiKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/cloud/serverless/collection/auth/v1/collection_api_key.proto",
}
