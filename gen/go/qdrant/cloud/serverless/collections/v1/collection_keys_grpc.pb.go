// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qdrant/cloud/serverless/collections/v1/collection_keys.proto

package collectionsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectionKeysService_ListCollectionKeys_FullMethodName  = "/qdrant.cloud.serverless.collections.v1.CollectionKeysService/ListCollectionKeys"
	CollectionKeysService_CreateCollectionKey_FullMethodName = "/qdrant.cloud.serverless.collections.v1.CollectionKeysService/CreateCollectionKey"
	CollectionKeysService_DeleteCollectionKey_FullMethodName = "/qdrant.cloud.serverless.collections.v1.CollectionKeysService/DeleteCollectionKey"
)

// CollectionKeysServiceClient is the client API for CollectionKeysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing API keys for a serverless collection
type CollectionKeysServiceClient interface {
	// ListCollectionKeys returns all API keys for a collection
	// Required Permissions:
	// - read:serverless_api_keys
	ListCollectionKeys(ctx context.Context, in *ListCollectionKeysRequest, opts ...grpc.CallOption) (*ListCollectionKeysResponse, error)
	// CreateCollectionKey creates a new API key for a collection
	// Required Permissions:
	// - write:serverless_api_keys
	CreateCollectionKey(ctx context.Context, in *CreateCollectionKeyRequest, opts ...grpc.CallOption) (*CreateCollectionKeyResponse, error)
	// DeleteCollectionKey removes an API key from a collection
	// Required Permissions:
	// - write:serverless_api_keys
	DeleteCollectionKey(ctx context.Context, in *DeleteCollectionKeyRequest, opts ...grpc.CallOption) (*DeleteCollectionKeyResponse, error)
}

type collectionKeysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionKeysServiceClient(cc grpc.ClientConnInterface) CollectionKeysServiceClient {
	return &collectionKeysServiceClient{cc}
}

func (c *collectionKeysServiceClient) ListCollectionKeys(ctx context.Context, in *ListCollectionKeysRequest, opts ...grpc.CallOption) (*ListCollectionKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCollectionKeysResponse)
	err := c.cc.Invoke(ctx, CollectionKeysService_ListCollectionKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionKeysServiceClient) CreateCollectionKey(ctx context.Context, in *CreateCollectionKeyRequest, opts ...grpc.CallOption) (*CreateCollectionKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCollectionKeyResponse)
	err := c.cc.Invoke(ctx, CollectionKeysService_CreateCollectionKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionKeysServiceClient) DeleteCollectionKey(ctx context.Context, in *DeleteCollectionKeyRequest, opts ...grpc.CallOption) (*DeleteCollectionKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCollectionKeyResponse)
	err := c.cc.Invoke(ctx, CollectionKeysService_DeleteCollectionKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionKeysServiceServer is the server API for CollectionKeysService service.
// All implementations must embed UnimplementedCollectionKeysServiceServer
// for forward compatibility.
//
// Service for managing API keys for a serverless collection
type CollectionKeysServiceServer interface {
	// ListCollectionKeys returns all API keys for a collection
	// Required Permissions:
	// - read:serverless_api_keys
	ListCollectionKeys(context.Context, *ListCollectionKeysRequest) (*ListCollectionKeysResponse, error)
	// CreateCollectionKey creates a new API key for a collection
	// Required Permissions:
	// - write:serverless_api_keys
	CreateCollectionKey(context.Context, *CreateCollectionKeyRequest) (*CreateCollectionKeyResponse, error)
	// DeleteCollectionKey removes an API key from a collection
	// Required Permissions:
	// - write:serverless_api_keys
	DeleteCollectionKey(context.Context, *DeleteCollectionKeyRequest) (*DeleteCollectionKeyResponse, error)
	mustEmbedUnimplementedCollectionKeysServiceServer()
}

// UnimplementedCollectionKeysServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectionKeysServiceServer struct{}

func (UnimplementedCollectionKeysServiceServer) ListCollectionKeys(context.Context, *ListCollectionKeysRequest) (*ListCollectionKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionKeys not implemented")
}
func (UnimplementedCollectionKeysServiceServer) CreateCollectionKey(context.Context, *CreateCollectionKeyRequest) (*CreateCollectionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollectionKey not implemented")
}
func (UnimplementedCollectionKeysServiceServer) DeleteCollectionKey(context.Context, *DeleteCollectionKeyRequest) (*DeleteCollectionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionKey not implemented")
}
func (UnimplementedCollectionKeysServiceServer) mustEmbedUnimplementedCollectionKeysServiceServer() {}
func (UnimplementedCollectionKeysServiceServer) testEmbeddedByValue()                               {}

// UnsafeCollectionKeysServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionKeysServiceServer will
// result in compilation errors.
type UnsafeCollectionKeysServiceServer interface {
	mustEmbedUnimplementedCollectionKeysServiceServer()
}

func RegisterCollectionKeysServiceServer(s grpc.ServiceRegistrar, srv CollectionKeysServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollectionKeysServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectionKeysService_ServiceDesc, srv)
}

func _CollectionKeysService_ListCollectionKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionKeysServiceServer).ListCollectionKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionKeysService_ListCollectionKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionKeysServiceServer).ListCollectionKeys(ctx, req.(*ListCollectionKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionKeysService_CreateCollectionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionKeysServiceServer).CreateCollectionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionKeysService_CreateCollectionKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionKeysServiceServer).CreateCollectionKey(ctx, req.(*CreateCollectionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionKeysService_DeleteCollectionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionKeysServiceServer).DeleteCollectionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionKeysService_DeleteCollectionKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionKeysServiceServer).DeleteCollectionKey(ctx, req.(*DeleteCollectionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionKeysService_ServiceDesc is the grpc.ServiceDesc for CollectionKeysService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionKeysService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.cloud.serverless.collections.v1.CollectionKeysService",
	HandlerType: (*CollectionKeysServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCollectionKeys",
			Handler:    _CollectionKeysService_ListCollectionKeys_Handler,
		},
		{
			MethodName: "CreateCollectionKey",
			Handler:    _CollectionKeysService_CreateCollectionKey_Handler,
		},
		{
			MethodName: "DeleteCollectionKey",
			Handler:    _CollectionKeysService_DeleteCollectionKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qdrant/cloud/serverless/collections/v1/collection_keys.proto",
}
