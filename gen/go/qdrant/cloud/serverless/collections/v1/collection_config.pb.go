// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: qdrant/cloud/serverless/collections/v1/collection_config.proto

package collectionsv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CollectionConfiguration defines the structure and settings for a collection
type CollectionConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Field name used for tenant isolation
	TenantKey *string `protobuf:"bytes,1,opt,name=tenant_key,json=tenantKey,proto3,oneof" json:"tenant_key,omitempty"`
	// Map of dense vector configurations with field name as key
	DenseVectors map[string]*DenseVectorConfiguration `protobuf:"bytes,2,rep,name=dense_vectors,json=denseVectors,proto3" json:"dense_vectors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map of sparse vector configurations with field name as key
	SparseVectors map[string]*SparseVectorConfiguration `protobuf:"bytes,3,rep,name=sparse_vectors,json=sparseVectors,proto3" json:"sparse_vectors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Schema definition for payload fields
	PayloadSchema map[string]*PayloadFieldSchema `protobuf:"bytes,4,rep,name=payload_schema,json=payloadSchema,proto3" json:"payload_schema,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectionConfiguration) Reset() {
	*x = CollectionConfiguration{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionConfiguration) ProtoMessage() {}

func (x *CollectionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionConfiguration.ProtoReflect.Descriptor instead.
func (*CollectionConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{0}
}

func (x *CollectionConfiguration) GetTenantKey() string {
	if x != nil && x.TenantKey != nil {
		return *x.TenantKey
	}
	return ""
}

func (x *CollectionConfiguration) GetDenseVectors() map[string]*DenseVectorConfiguration {
	if x != nil {
		return x.DenseVectors
	}
	return nil
}

func (x *CollectionConfiguration) GetSparseVectors() map[string]*SparseVectorConfiguration {
	if x != nil {
		return x.SparseVectors
	}
	return nil
}

func (x *CollectionConfiguration) GetPayloadSchema() map[string]*PayloadFieldSchema {
	if x != nil {
		return x.PayloadSchema
	}
	return nil
}

// DenseVectorConfiguration defines the settings for dense vector fields
type DenseVectorConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The dimensionality of the vector space
	Dimension int32 `protobuf:"varint,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	// The distance metric used for vector similarity calculations
	Distance string `protobuf:"bytes,2,opt,name=distance,proto3" json:"distance,omitempty"`
	// Whether to use multi-vector storage for this configuration
	Multivector *bool `protobuf:"varint,3,opt,name=multivector,proto3,oneof" json:"multivector,omitempty"`
	// Whether to enable rescoring for search results
	Rescoring *bool `protobuf:"varint,4,opt,name=rescoring,proto3,oneof" json:"rescoring,omitempty"`
	// The storage performance tier to use (STORAGE, BALANCED, or PERFORMANCE)
	StorageTier *string `protobuf:"bytes,5,opt,name=storage_tier,json=storageTier,proto3,oneof" json:"storage_tier,omitempty"`
	// The precision level for vector operations (LOW, MEDIUM, or HIGH)
	PrecisionTier *string `protobuf:"bytes,6,opt,name=precision_tier,json=precisionTier,proto3,oneof" json:"precision_tier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DenseVectorConfiguration) Reset() {
	*x = DenseVectorConfiguration{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenseVectorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenseVectorConfiguration) ProtoMessage() {}

func (x *DenseVectorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenseVectorConfiguration.ProtoReflect.Descriptor instead.
func (*DenseVectorConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{1}
}

func (x *DenseVectorConfiguration) GetDimension() int32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *DenseVectorConfiguration) GetDistance() string {
	if x != nil {
		return x.Distance
	}
	return ""
}

func (x *DenseVectorConfiguration) GetMultivector() bool {
	if x != nil && x.Multivector != nil {
		return *x.Multivector
	}
	return false
}

func (x *DenseVectorConfiguration) GetRescoring() bool {
	if x != nil && x.Rescoring != nil {
		return *x.Rescoring
	}
	return false
}

func (x *DenseVectorConfiguration) GetStorageTier() string {
	if x != nil && x.StorageTier != nil {
		return *x.StorageTier
	}
	return ""
}

func (x *DenseVectorConfiguration) GetPrecisionTier() string {
	if x != nil && x.PrecisionTier != nil {
		return *x.PrecisionTier
	}
	return ""
}

// SparseVectorConfiguration defines the settings for sparse vector fields
type SparseVectorConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Precision tier for vector operations
	PrecisionTier string `protobuf:"bytes,1,opt,name=precision_tier,json=precisionTier,proto3" json:"precision_tier,omitempty"`
	// Vector value modification approach
	Modifier      string `protobuf:"bytes,2,opt,name=modifier,proto3" json:"modifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SparseVectorConfiguration) Reset() {
	*x = SparseVectorConfiguration{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SparseVectorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseVectorConfiguration) ProtoMessage() {}

func (x *SparseVectorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseVectorConfiguration.ProtoReflect.Descriptor instead.
func (*SparseVectorConfiguration) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{2}
}

func (x *SparseVectorConfiguration) GetPrecisionTier() string {
	if x != nil {
		return x.PrecisionTier
	}
	return ""
}

func (x *SparseVectorConfiguration) GetModifier() string {
	if x != nil {
		return x.Modifier
	}
	return ""
}

// KeywordIndexParams defines parameters for keyword indexing
type KeywordIndexParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether this field is used as tenant identifier
	IsTenant *bool `protobuf:"varint,1,opt,name=is_tenant,json=isTenant,proto3,oneof" json:"is_tenant,omitempty"`
	// Whether to store index on disk vs memory
	OnDisk        *bool `protobuf:"varint,2,opt,name=on_disk,json=onDisk,proto3,oneof" json:"on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeywordIndexParams) Reset() {
	*x = KeywordIndexParams{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeywordIndexParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordIndexParams) ProtoMessage() {}

func (x *KeywordIndexParams) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordIndexParams.ProtoReflect.Descriptor instead.
func (*KeywordIndexParams) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{3}
}

func (x *KeywordIndexParams) GetIsTenant() bool {
	if x != nil && x.IsTenant != nil {
		return *x.IsTenant
	}
	return false
}

func (x *KeywordIndexParams) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return false
}

// IntegerIndexParams defines parameters for integer indexing
type IntegerIndexParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable lookup operations
	Lookup *bool `protobuf:"varint,1,opt,name=lookup,proto3,oneof" json:"lookup,omitempty"`
	// Enable range queries
	Range *bool `protobuf:"varint,2,opt,name=range,proto3,oneof" json:"range,omitempty"`
	// Whether this is a principal field
	IsPrincipal *bool `protobuf:"varint,3,opt,name=is_principal,json=isPrincipal,proto3,oneof" json:"is_principal,omitempty"`
	// Whether to store index on disk vs memory
	OnDisk        *bool `protobuf:"varint,4,opt,name=on_disk,json=onDisk,proto3,oneof" json:"on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntegerIndexParams) Reset() {
	*x = IntegerIndexParams{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntegerIndexParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerIndexParams) ProtoMessage() {}

func (x *IntegerIndexParams) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerIndexParams.ProtoReflect.Descriptor instead.
func (*IntegerIndexParams) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{4}
}

func (x *IntegerIndexParams) GetLookup() bool {
	if x != nil && x.Lookup != nil {
		return *x.Lookup
	}
	return false
}

func (x *IntegerIndexParams) GetRange() bool {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return false
}

func (x *IntegerIndexParams) GetIsPrincipal() bool {
	if x != nil && x.IsPrincipal != nil {
		return *x.IsPrincipal
	}
	return false
}

func (x *IntegerIndexParams) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return false
}

// FloatIndexParams defines parameters for float indexing
type FloatIndexParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether this is a principal field
	IsPrincipal *bool `protobuf:"varint,1,opt,name=is_principal,json=isPrincipal,proto3,oneof" json:"is_principal,omitempty"`
	// Whether to store index on disk vs memory
	OnDisk        *bool `protobuf:"varint,2,opt,name=on_disk,json=onDisk,proto3,oneof" json:"on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatIndexParams) Reset() {
	*x = FloatIndexParams{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatIndexParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatIndexParams) ProtoMessage() {}

func (x *FloatIndexParams) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatIndexParams.ProtoReflect.Descriptor instead.
func (*FloatIndexParams) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{5}
}

func (x *FloatIndexParams) GetIsPrincipal() bool {
	if x != nil && x.IsPrincipal != nil {
		return *x.IsPrincipal
	}
	return false
}

func (x *FloatIndexParams) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return false
}

// GeoIndexParams defines parameters for geographical indexing
type GeoIndexParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to store index on disk vs memory
	OnDisk        *bool `protobuf:"varint,1,opt,name=on_disk,json=onDisk,proto3,oneof" json:"on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoIndexParams) Reset() {
	*x = GeoIndexParams{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoIndexParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIndexParams) ProtoMessage() {}

func (x *GeoIndexParams) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIndexParams.ProtoReflect.Descriptor instead.
func (*GeoIndexParams) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{6}
}

func (x *GeoIndexParams) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return false
}

// TextIndexParams defines parameters for text indexing
type TextIndexParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tokenization strategy
	Tokenizer *string `protobuf:"bytes,1,opt,name=tokenizer,proto3,oneof" json:"tokenizer,omitempty"`
	// Minimum token length to index
	MinTokenLen *int32 `protobuf:"varint,2,opt,name=min_token_len,json=minTokenLen,proto3,oneof" json:"min_token_len,omitempty"`
	// Maximum token length to index
	MaxTokenLen *int32 `protobuf:"varint,3,opt,name=max_token_len,json=maxTokenLen,proto3,oneof" json:"max_token_len,omitempty"`
	// Whether to lowercase text before indexing
	Lowercase *bool `protobuf:"varint,4,opt,name=lowercase,proto3,oneof" json:"lowercase,omitempty"`
	// Whether to store index on disk vs memory
	OnDisk        *bool `protobuf:"varint,5,opt,name=on_disk,json=onDisk,proto3,oneof" json:"on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextIndexParams) Reset() {
	*x = TextIndexParams{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextIndexParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextIndexParams) ProtoMessage() {}

func (x *TextIndexParams) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextIndexParams.ProtoReflect.Descriptor instead.
func (*TextIndexParams) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{7}
}

func (x *TextIndexParams) GetTokenizer() string {
	if x != nil && x.Tokenizer != nil {
		return *x.Tokenizer
	}
	return ""
}

func (x *TextIndexParams) GetMinTokenLen() int32 {
	if x != nil && x.MinTokenLen != nil {
		return *x.MinTokenLen
	}
	return 0
}

func (x *TextIndexParams) GetMaxTokenLen() int32 {
	if x != nil && x.MaxTokenLen != nil {
		return *x.MaxTokenLen
	}
	return 0
}

func (x *TextIndexParams) GetLowercase() bool {
	if x != nil && x.Lowercase != nil {
		return *x.Lowercase
	}
	return false
}

func (x *TextIndexParams) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return false
}

// BoolIndexParams defines parameters for boolean indexing
type BoolIndexParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to store index on disk vs memory
	OnDisk        *bool `protobuf:"varint,1,opt,name=on_disk,json=onDisk,proto3,oneof" json:"on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolIndexParams) Reset() {
	*x = BoolIndexParams{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolIndexParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolIndexParams) ProtoMessage() {}

func (x *BoolIndexParams) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolIndexParams.ProtoReflect.Descriptor instead.
func (*BoolIndexParams) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{8}
}

func (x *BoolIndexParams) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return false
}

// DatetimeIndexParams defines parameters for datetime indexing
type DatetimeIndexParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether this is a principal field
	IsPrincipal *bool `protobuf:"varint,1,opt,name=is_principal,json=isPrincipal,proto3,oneof" json:"is_principal,omitempty"`
	// Whether to store index on disk vs memory
	OnDisk        *bool `protobuf:"varint,2,opt,name=on_disk,json=onDisk,proto3,oneof" json:"on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatetimeIndexParams) Reset() {
	*x = DatetimeIndexParams{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatetimeIndexParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimeIndexParams) ProtoMessage() {}

func (x *DatetimeIndexParams) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimeIndexParams.ProtoReflect.Descriptor instead.
func (*DatetimeIndexParams) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{9}
}

func (x *DatetimeIndexParams) GetIsPrincipal() bool {
	if x != nil && x.IsPrincipal != nil {
		return *x.IsPrincipal
	}
	return false
}

func (x *DatetimeIndexParams) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return false
}

// UuidIndexParams defines parameters for UUID indexing
type UuidIndexParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether this field is used as tenant identifier
	IsTenant *bool `protobuf:"varint,1,opt,name=is_tenant,json=isTenant,proto3,oneof" json:"is_tenant,omitempty"`
	// Whether to store index on disk vs memory
	OnDisk        *bool `protobuf:"varint,2,opt,name=on_disk,json=onDisk,proto3,oneof" json:"on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UuidIndexParams) Reset() {
	*x = UuidIndexParams{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UuidIndexParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidIndexParams) ProtoMessage() {}

func (x *UuidIndexParams) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidIndexParams.ProtoReflect.Descriptor instead.
func (*UuidIndexParams) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{10}
}

func (x *UuidIndexParams) GetIsTenant() bool {
	if x != nil && x.IsTenant != nil {
		return *x.IsTenant
	}
	return false
}

func (x *UuidIndexParams) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return false
}

// Describes the schema for a payload field
type PayloadFieldSchema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Oneof for index parameters
	//
	// Types that are valid to be assigned to IndexParams:
	//
	//	*PayloadFieldSchema_Keyword
	//	*PayloadFieldSchema_Integer
	//	*PayloadFieldSchema_Float
	//	*PayloadFieldSchema_Geo
	//	*PayloadFieldSchema_Text
	//	*PayloadFieldSchema_Bool
	//	*PayloadFieldSchema_Datetime
	//	*PayloadFieldSchema_Uuid
	IndexParams   isPayloadFieldSchema_IndexParams `protobuf_oneof:"index_params"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayloadFieldSchema) Reset() {
	*x = PayloadFieldSchema{}
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayloadFieldSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadFieldSchema) ProtoMessage() {}

func (x *PayloadFieldSchema) ProtoReflect() protoreflect.Message {
	mi := &file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadFieldSchema.ProtoReflect.Descriptor instead.
func (*PayloadFieldSchema) Descriptor() ([]byte, []int) {
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP(), []int{11}
}

func (x *PayloadFieldSchema) GetIndexParams() isPayloadFieldSchema_IndexParams {
	if x != nil {
		return x.IndexParams
	}
	return nil
}

func (x *PayloadFieldSchema) GetKeyword() *KeywordIndexParams {
	if x != nil {
		if x, ok := x.IndexParams.(*PayloadFieldSchema_Keyword); ok {
			return x.Keyword
		}
	}
	return nil
}

func (x *PayloadFieldSchema) GetInteger() *IntegerIndexParams {
	if x != nil {
		if x, ok := x.IndexParams.(*PayloadFieldSchema_Integer); ok {
			return x.Integer
		}
	}
	return nil
}

func (x *PayloadFieldSchema) GetFloat() *FloatIndexParams {
	if x != nil {
		if x, ok := x.IndexParams.(*PayloadFieldSchema_Float); ok {
			return x.Float
		}
	}
	return nil
}

func (x *PayloadFieldSchema) GetGeo() *GeoIndexParams {
	if x != nil {
		if x, ok := x.IndexParams.(*PayloadFieldSchema_Geo); ok {
			return x.Geo
		}
	}
	return nil
}

func (x *PayloadFieldSchema) GetText() *TextIndexParams {
	if x != nil {
		if x, ok := x.IndexParams.(*PayloadFieldSchema_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *PayloadFieldSchema) GetBool() *BoolIndexParams {
	if x != nil {
		if x, ok := x.IndexParams.(*PayloadFieldSchema_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *PayloadFieldSchema) GetDatetime() *DatetimeIndexParams {
	if x != nil {
		if x, ok := x.IndexParams.(*PayloadFieldSchema_Datetime); ok {
			return x.Datetime
		}
	}
	return nil
}

func (x *PayloadFieldSchema) GetUuid() *UuidIndexParams {
	if x != nil {
		if x, ok := x.IndexParams.(*PayloadFieldSchema_Uuid); ok {
			return x.Uuid
		}
	}
	return nil
}

type isPayloadFieldSchema_IndexParams interface {
	isPayloadFieldSchema_IndexParams()
}

type PayloadFieldSchema_Keyword struct {
	// Keyword index parameters
	Keyword *KeywordIndexParams `protobuf:"bytes,1,opt,name=keyword,proto3,oneof"`
}

type PayloadFieldSchema_Integer struct {
	// Integer index parameters
	Integer *IntegerIndexParams `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

type PayloadFieldSchema_Float struct {
	// Float index parameters
	Float *FloatIndexParams `protobuf:"bytes,3,opt,name=float,proto3,oneof"`
}

type PayloadFieldSchema_Geo struct {
	// Geo Index parameters
	Geo *GeoIndexParams `protobuf:"bytes,4,opt,name=geo,proto3,oneof"`
}

type PayloadFieldSchema_Text struct {
	// Text index parameters
	Text *TextIndexParams `protobuf:"bytes,5,opt,name=text,proto3,oneof"`
}

type PayloadFieldSchema_Bool struct {
	// Boolean index parameters
	Bool *BoolIndexParams `protobuf:"bytes,6,opt,name=bool,proto3,oneof"`
}

type PayloadFieldSchema_Datetime struct {
	// Datetime index parameters
	Datetime *DatetimeIndexParams `protobuf:"bytes,7,opt,name=datetime,proto3,oneof"`
}

type PayloadFieldSchema_Uuid struct {
	// UUID index parameters
	Uuid *UuidIndexParams `protobuf:"bytes,8,opt,name=uuid,proto3,oneof"`
}

func (*PayloadFieldSchema_Keyword) isPayloadFieldSchema_IndexParams() {}

func (*PayloadFieldSchema_Integer) isPayloadFieldSchema_IndexParams() {}

func (*PayloadFieldSchema_Float) isPayloadFieldSchema_IndexParams() {}

func (*PayloadFieldSchema_Geo) isPayloadFieldSchema_IndexParams() {}

func (*PayloadFieldSchema_Text) isPayloadFieldSchema_IndexParams() {}

func (*PayloadFieldSchema_Bool) isPayloadFieldSchema_IndexParams() {}

func (*PayloadFieldSchema_Datetime) isPayloadFieldSchema_IndexParams() {}

func (*PayloadFieldSchema_Uuid) isPayloadFieldSchema_IndexParams() {}

var File_qdrant_cloud_serverless_collections_v1_collection_config_proto protoreflect.FileDescriptor

var file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDesc = string([]byte{
	0x0a, 0x3e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x26, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x06, 0x0a, 0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x0d, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6e, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x79, 0x0a,
	0x0e, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x79, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x52, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x1a, 0x81, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x83, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a,
	0x12, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x9c, 0x03, 0x0a, 0x18, 0x44,
	0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xba, 0x48, 0x22, 0x72, 0x20, 0x52, 0x06,
	0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x65, 0x75, 0x63, 0x6c, 0x69, 0x64, 0x52, 0x03,
	0x64, 0x6f, 0x74, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x68, 0x61, 0x74, 0x74, 0x61, 0x6e, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xba, 0x48, 0x22, 0x72, 0x20, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x02, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x48, 0x15, 0x72, 0x13,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x53, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xba, 0x48, 0x15, 0x72, 0x13, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x52, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x0d, 0x72,
	0x0b, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x52, 0x03, 0x69, 0x64, 0x66, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x73, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x06, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a,
	0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0b, 0x69,
	0x73, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x06, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x22, 0x75, 0x0a,
	0x10, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x22, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x22, 0xc2, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xba, 0x48, 0x2a, 0x72, 0x28, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x75, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69,
	0x7a, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x09, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x06,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x6b, 0x22, 0x3b, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x22, 0x78, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x22, 0x6b, 0x0a, 0x0f,
	0x55, 0x75, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x69, 0x73, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x22, 0xba, 0x05, 0x0a, 0x12, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x56, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x56, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x4a, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x4d,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x59, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x75, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0xe7, 0x02, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x65,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x51, 0x43, 0x53, 0x43, 0xaa, 0x02, 0x26, 0x51,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x26, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x5c,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x32, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x5c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x2a, 0x51, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x3a, 0x3a, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x3a,
	0x3a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescOnce sync.Once
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescData []byte
)

func file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescGZIP() []byte {
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescOnce.Do(func() {
		file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDesc), len(file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDesc)))
	})
	return file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDescData
}

var file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_qdrant_cloud_serverless_collections_v1_collection_config_proto_goTypes = []any{
	(*CollectionConfiguration)(nil),   // 0: qdrant.cloud.serverless.collections.v1.CollectionConfiguration
	(*DenseVectorConfiguration)(nil),  // 1: qdrant.cloud.serverless.collections.v1.DenseVectorConfiguration
	(*SparseVectorConfiguration)(nil), // 2: qdrant.cloud.serverless.collections.v1.SparseVectorConfiguration
	(*KeywordIndexParams)(nil),        // 3: qdrant.cloud.serverless.collections.v1.KeywordIndexParams
	(*IntegerIndexParams)(nil),        // 4: qdrant.cloud.serverless.collections.v1.IntegerIndexParams
	(*FloatIndexParams)(nil),          // 5: qdrant.cloud.serverless.collections.v1.FloatIndexParams
	(*GeoIndexParams)(nil),            // 6: qdrant.cloud.serverless.collections.v1.GeoIndexParams
	(*TextIndexParams)(nil),           // 7: qdrant.cloud.serverless.collections.v1.TextIndexParams
	(*BoolIndexParams)(nil),           // 8: qdrant.cloud.serverless.collections.v1.BoolIndexParams
	(*DatetimeIndexParams)(nil),       // 9: qdrant.cloud.serverless.collections.v1.DatetimeIndexParams
	(*UuidIndexParams)(nil),           // 10: qdrant.cloud.serverless.collections.v1.UuidIndexParams
	(*PayloadFieldSchema)(nil),        // 11: qdrant.cloud.serverless.collections.v1.PayloadFieldSchema
	nil,                               // 12: qdrant.cloud.serverless.collections.v1.CollectionConfiguration.DenseVectorsEntry
	nil,                               // 13: qdrant.cloud.serverless.collections.v1.CollectionConfiguration.SparseVectorsEntry
	nil,                               // 14: qdrant.cloud.serverless.collections.v1.CollectionConfiguration.PayloadSchemaEntry
}
var file_qdrant_cloud_serverless_collections_v1_collection_config_proto_depIdxs = []int32{
	12, // 0: qdrant.cloud.serverless.collections.v1.CollectionConfiguration.dense_vectors:type_name -> qdrant.cloud.serverless.collections.v1.CollectionConfiguration.DenseVectorsEntry
	13, // 1: qdrant.cloud.serverless.collections.v1.CollectionConfiguration.sparse_vectors:type_name -> qdrant.cloud.serverless.collections.v1.CollectionConfiguration.SparseVectorsEntry
	14, // 2: qdrant.cloud.serverless.collections.v1.CollectionConfiguration.payload_schema:type_name -> qdrant.cloud.serverless.collections.v1.CollectionConfiguration.PayloadSchemaEntry
	3,  // 3: qdrant.cloud.serverless.collections.v1.PayloadFieldSchema.keyword:type_name -> qdrant.cloud.serverless.collections.v1.KeywordIndexParams
	4,  // 4: qdrant.cloud.serverless.collections.v1.PayloadFieldSchema.integer:type_name -> qdrant.cloud.serverless.collections.v1.IntegerIndexParams
	5,  // 5: qdrant.cloud.serverless.collections.v1.PayloadFieldSchema.float:type_name -> qdrant.cloud.serverless.collections.v1.FloatIndexParams
	6,  // 6: qdrant.cloud.serverless.collections.v1.PayloadFieldSchema.geo:type_name -> qdrant.cloud.serverless.collections.v1.GeoIndexParams
	7,  // 7: qdrant.cloud.serverless.collections.v1.PayloadFieldSchema.text:type_name -> qdrant.cloud.serverless.collections.v1.TextIndexParams
	8,  // 8: qdrant.cloud.serverless.collections.v1.PayloadFieldSchema.bool:type_name -> qdrant.cloud.serverless.collections.v1.BoolIndexParams
	9,  // 9: qdrant.cloud.serverless.collections.v1.PayloadFieldSchema.datetime:type_name -> qdrant.cloud.serverless.collections.v1.DatetimeIndexParams
	10, // 10: qdrant.cloud.serverless.collections.v1.PayloadFieldSchema.uuid:type_name -> qdrant.cloud.serverless.collections.v1.UuidIndexParams
	1,  // 11: qdrant.cloud.serverless.collections.v1.CollectionConfiguration.DenseVectorsEntry.value:type_name -> qdrant.cloud.serverless.collections.v1.DenseVectorConfiguration
	2,  // 12: qdrant.cloud.serverless.collections.v1.CollectionConfiguration.SparseVectorsEntry.value:type_name -> qdrant.cloud.serverless.collections.v1.SparseVectorConfiguration
	11, // 13: qdrant.cloud.serverless.collections.v1.CollectionConfiguration.PayloadSchemaEntry.value:type_name -> qdrant.cloud.serverless.collections.v1.PayloadFieldSchema
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_qdrant_cloud_serverless_collections_v1_collection_config_proto_init() }
func file_qdrant_cloud_serverless_collections_v1_collection_config_proto_init() {
	if File_qdrant_cloud_serverless_collections_v1_collection_config_proto != nil {
		return
	}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[0].OneofWrappers = []any{}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[1].OneofWrappers = []any{}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[3].OneofWrappers = []any{}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[4].OneofWrappers = []any{}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[5].OneofWrappers = []any{}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[6].OneofWrappers = []any{}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[7].OneofWrappers = []any{}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[8].OneofWrappers = []any{}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[9].OneofWrappers = []any{}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[10].OneofWrappers = []any{}
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes[11].OneofWrappers = []any{
		(*PayloadFieldSchema_Keyword)(nil),
		(*PayloadFieldSchema_Integer)(nil),
		(*PayloadFieldSchema_Float)(nil),
		(*PayloadFieldSchema_Geo)(nil),
		(*PayloadFieldSchema_Text)(nil),
		(*PayloadFieldSchema_Bool)(nil),
		(*PayloadFieldSchema_Datetime)(nil),
		(*PayloadFieldSchema_Uuid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDesc), len(file_qdrant_cloud_serverless_collections_v1_collection_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qdrant_cloud_serverless_collections_v1_collection_config_proto_goTypes,
		DependencyIndexes: file_qdrant_cloud_serverless_collections_v1_collection_config_proto_depIdxs,
		MessageInfos:      file_qdrant_cloud_serverless_collections_v1_collection_config_proto_msgTypes,
	}.Build()
	File_qdrant_cloud_serverless_collections_v1_collection_config_proto = out.File
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_goTypes = nil
	file_qdrant_cloud_serverless_collections_v1_collection_config_proto_depIdxs = nil
}
