// @generated by protoc-gen-es v2.9.0 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required"
// @generated from file qdrant/cloud/account/v1/account.proto (package qdrant.cloud.account.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { User, UserValid } from "../../iam/v1/iam_pb.js";

/**
 * Describes the file qdrant/cloud/account/v1/account.proto.
 */
export declare const file_qdrant_cloud_account_v1_account: GenFile;

/**
 * ListAccountsRequest is the request for the ListAccounts function
 *
 * Empty
 *
 * @generated from message qdrant.cloud.account.v1.ListAccountsRequest
 */
export declare type ListAccountsRequest = Message<"qdrant.cloud.account.v1.ListAccountsRequest"> & {
};

export declare type ListAccountsRequestValid = ListAccountsRequest;

/**
 * Describes the message qdrant.cloud.account.v1.ListAccountsRequest.
 * Use `create(ListAccountsRequestSchema)` to create a new message.
 */
export declare const ListAccountsRequestSchema: GenMessage<ListAccountsRequest, {validType: ListAccountsRequestValid}>;

/**
 * ListAccountsResponse is the response from the ListAccounts function
 *
 * @generated from message qdrant.cloud.account.v1.ListAccountsResponse
 */
export declare type ListAccountsResponse = Message<"qdrant.cloud.account.v1.ListAccountsResponse"> & {
  /**
   * The actual accounts in this list.
   *
   * @generated from field: repeated qdrant.cloud.account.v1.Account items = 1;
   */
  items: Account[];
};

export declare type ListAccountsResponseValid = ListAccountsResponse;

/**
 * Describes the message qdrant.cloud.account.v1.ListAccountsResponse.
 * Use `create(ListAccountsResponseSchema)` to create a new message.
 */
export declare const ListAccountsResponseSchema: GenMessage<ListAccountsResponse, {validType: ListAccountsResponseValid}>;

/**
 * GetAccountRequest is the request for the GetAccount function
 *
 * @generated from message qdrant.cloud.account.v1.GetAccountRequest
 */
export declare type GetAccountRequest = Message<"qdrant.cloud.account.v1.GetAccountRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

export declare type GetAccountRequestValid = GetAccountRequest;

/**
 * Describes the message qdrant.cloud.account.v1.GetAccountRequest.
 * Use `create(GetAccountRequestSchema)` to create a new message.
 */
export declare const GetAccountRequestSchema: GenMessage<GetAccountRequest, {validType: GetAccountRequestValid}>;

/**
 * GetAccountResponse is the response from the GetAccount function
 *
 * @generated from message qdrant.cloud.account.v1.GetAccountResponse
 */
export declare type GetAccountResponse = Message<"qdrant.cloud.account.v1.GetAccountResponse"> & {
  /**
   * The actual account.
   *
   * @generated from field: qdrant.cloud.account.v1.Account account = 1;
   */
  account?: Account;
};

/**
 * GetAccountResponse is the response from the GetAccount function
 *
 * @generated from message qdrant.cloud.account.v1.GetAccountResponse
 */
export declare type GetAccountResponseValid = Message<"qdrant.cloud.account.v1.GetAccountResponse"> & {
  /**
   * The actual account.
   *
   * @generated from field: qdrant.cloud.account.v1.Account account = 1;
   */
  account: AccountValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.GetAccountResponse.
 * Use `create(GetAccountResponseSchema)` to create a new message.
 */
export declare const GetAccountResponseSchema: GenMessage<GetAccountResponse, {validType: GetAccountResponseValid}>;

/**
 * CreateAccountRequest is the request for the CreateAccount function.
 *
 * @generated from message qdrant.cloud.account.v1.CreateAccountRequest
 */
export declare type CreateAccountRequest = Message<"qdrant.cloud.account.v1.CreateAccountRequest"> & {
  /**
   * The actual account.
   *
   * @generated from field: qdrant.cloud.account.v1.Account account = 1;
   */
  account?: Account;
};

/**
 * CreateAccountRequest is the request for the CreateAccount function.
 *
 * @generated from message qdrant.cloud.account.v1.CreateAccountRequest
 */
export declare type CreateAccountRequestValid = Message<"qdrant.cloud.account.v1.CreateAccountRequest"> & {
  /**
   * The actual account.
   *
   * @generated from field: qdrant.cloud.account.v1.Account account = 1;
   */
  account: AccountValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.CreateAccountRequest.
 * Use `create(CreateAccountRequestSchema)` to create a new message.
 */
export declare const CreateAccountRequestSchema: GenMessage<CreateAccountRequest, {validType: CreateAccountRequestValid}>;

/**
 * CreateAccountResponse is the response from the CreateAccount function.
 *
 * @generated from message qdrant.cloud.account.v1.CreateAccountResponse
 */
export declare type CreateAccountResponse = Message<"qdrant.cloud.account.v1.CreateAccountResponse"> & {
  /**
   * The actual account.
   *
   * @generated from field: qdrant.cloud.account.v1.Account account = 1;
   */
  account?: Account;
};

/**
 * CreateAccountResponse is the response from the CreateAccount function.
 *
 * @generated from message qdrant.cloud.account.v1.CreateAccountResponse
 */
export declare type CreateAccountResponseValid = Message<"qdrant.cloud.account.v1.CreateAccountResponse"> & {
  /**
   * The actual account.
   *
   * @generated from field: qdrant.cloud.account.v1.Account account = 1;
   */
  account: AccountValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.CreateAccountResponse.
 * Use `create(CreateAccountResponseSchema)` to create a new message.
 */
export declare const CreateAccountResponseSchema: GenMessage<CreateAccountResponse, {validType: CreateAccountResponseValid}>;

/**
 * UpdateAccountRequest is the request for the UpdateAccount function.
 *
 * @generated from message qdrant.cloud.account.v1.UpdateAccountRequest
 */
export declare type UpdateAccountRequest = Message<"qdrant.cloud.account.v1.UpdateAccountRequest"> & {
  /**
   * The actual account.
   *
   * @generated from field: qdrant.cloud.account.v1.Account account = 1;
   */
  account?: Account;
};

/**
 * UpdateAccountRequest is the request for the UpdateAccount function.
 *
 * @generated from message qdrant.cloud.account.v1.UpdateAccountRequest
 */
export declare type UpdateAccountRequestValid = Message<"qdrant.cloud.account.v1.UpdateAccountRequest"> & {
  /**
   * The actual account.
   *
   * @generated from field: qdrant.cloud.account.v1.Account account = 1;
   */
  account: AccountValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.UpdateAccountRequest.
 * Use `create(UpdateAccountRequestSchema)` to create a new message.
 */
export declare const UpdateAccountRequestSchema: GenMessage<UpdateAccountRequest, {validType: UpdateAccountRequestValid}>;

/**
 * UpdateAccountResponse is the response from the UpdateAccount function.
 *
 * @generated from message qdrant.cloud.account.v1.UpdateAccountResponse
 */
export declare type UpdateAccountResponse = Message<"qdrant.cloud.account.v1.UpdateAccountResponse"> & {
  /**
   * The actual account.
   *
   * @generated from field: qdrant.cloud.account.v1.Account account = 1;
   */
  account?: Account;
};

/**
 * UpdateAccountResponse is the response from the UpdateAccount function.
 *
 * @generated from message qdrant.cloud.account.v1.UpdateAccountResponse
 */
export declare type UpdateAccountResponseValid = Message<"qdrant.cloud.account.v1.UpdateAccountResponse"> & {
  /**
   * The actual account.
   *
   * @generated from field: qdrant.cloud.account.v1.Account account = 1;
   */
  account: AccountValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.UpdateAccountResponse.
 * Use `create(UpdateAccountResponseSchema)` to create a new message.
 */
export declare const UpdateAccountResponseSchema: GenMessage<UpdateAccountResponse, {validType: UpdateAccountResponseValid}>;

/**
 * DeleteAccountRequest is the request for the DeleteAccount function.
 *
 * @generated from message qdrant.cloud.account.v1.DeleteAccountRequest
 */
export declare type DeleteAccountRequest = Message<"qdrant.cloud.account.v1.DeleteAccountRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

export declare type DeleteAccountRequestValid = DeleteAccountRequest;

/**
 * Describes the message qdrant.cloud.account.v1.DeleteAccountRequest.
 * Use `create(DeleteAccountRequestSchema)` to create a new message.
 */
export declare const DeleteAccountRequestSchema: GenMessage<DeleteAccountRequest, {validType: DeleteAccountRequestValid}>;

/**
 * DeleteAccountResponse is the response from the DeleteAccount function.
 *
 * Empty
 *
 * @generated from message qdrant.cloud.account.v1.DeleteAccountResponse
 */
export declare type DeleteAccountResponse = Message<"qdrant.cloud.account.v1.DeleteAccountResponse"> & {
};

export declare type DeleteAccountResponseValid = DeleteAccountResponse;

/**
 * Describes the message qdrant.cloud.account.v1.DeleteAccountResponse.
 * Use `create(DeleteAccountResponseSchema)` to create a new message.
 */
export declare const DeleteAccountResponseSchema: GenMessage<DeleteAccountResponse, {validType: DeleteAccountResponseValid}>;

/**
 * ListAccountInvitesRequest is the request for the ListAccountInvites function.
 *
 * @generated from message qdrant.cloud.account.v1.ListAccountInvitesRequest
 */
export declare type ListAccountInvitesRequest = Message<"qdrant.cloud.account.v1.ListAccountInvitesRequest"> & {
  /**
   * The identifier of the account (in GUID format) to list invites for.
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

export declare type ListAccountInvitesRequestValid = ListAccountInvitesRequest;

/**
 * Describes the message qdrant.cloud.account.v1.ListAccountInvitesRequest.
 * Use `create(ListAccountInvitesRequestSchema)` to create a new message.
 */
export declare const ListAccountInvitesRequestSchema: GenMessage<ListAccountInvitesRequest, {validType: ListAccountInvitesRequestValid}>;

/**
 * ListAccountInvitesResponse is the response from the ListAccountInvites function.
 *
 * @generated from message qdrant.cloud.account.v1.ListAccountInvitesResponse
 */
export declare type ListAccountInvitesResponse = Message<"qdrant.cloud.account.v1.ListAccountInvitesResponse"> & {
  /**
   * The list of account invites.
   *
   * @generated from field: repeated qdrant.cloud.account.v1.AccountInvite items = 1;
   */
  items: AccountInvite[];
};

export declare type ListAccountInvitesResponseValid = ListAccountInvitesResponse;

/**
 * Describes the message qdrant.cloud.account.v1.ListAccountInvitesResponse.
 * Use `create(ListAccountInvitesResponseSchema)` to create a new message.
 */
export declare const ListAccountInvitesResponseSchema: GenMessage<ListAccountInvitesResponse, {validType: ListAccountInvitesResponseValid}>;

/**
 * ListReceivedAccountInvitesRequest is the request for the ListReceivedAccountInvites function.
 * This lists invites for the authenticated user across all accounts.
 *
 * Empty
 *
 * @generated from message qdrant.cloud.account.v1.ListReceivedAccountInvitesRequest
 */
export declare type ListReceivedAccountInvitesRequest = Message<"qdrant.cloud.account.v1.ListReceivedAccountInvitesRequest"> & {
};

export declare type ListReceivedAccountInvitesRequestValid = ListReceivedAccountInvitesRequest;

/**
 * Describes the message qdrant.cloud.account.v1.ListReceivedAccountInvitesRequest.
 * Use `create(ListReceivedAccountInvitesRequestSchema)` to create a new message.
 */
export declare const ListReceivedAccountInvitesRequestSchema: GenMessage<ListReceivedAccountInvitesRequest, {validType: ListReceivedAccountInvitesRequestValid}>;

/**
 * ListReceivedAccountInvitesResponse is the response from the ListReceivedAccountInvites function.
 *
 * @generated from message qdrant.cloud.account.v1.ListReceivedAccountInvitesResponse
 */
export declare type ListReceivedAccountInvitesResponse = Message<"qdrant.cloud.account.v1.ListReceivedAccountInvitesResponse"> & {
  /**
   * The list of account invites for the authenticated user.
   *
   * @generated from field: repeated qdrant.cloud.account.v1.AccountInvite items = 1;
   */
  items: AccountInvite[];
};

export declare type ListReceivedAccountInvitesResponseValid = ListReceivedAccountInvitesResponse;

/**
 * Describes the message qdrant.cloud.account.v1.ListReceivedAccountInvitesResponse.
 * Use `create(ListReceivedAccountInvitesResponseSchema)` to create a new message.
 */
export declare const ListReceivedAccountInvitesResponseSchema: GenMessage<ListReceivedAccountInvitesResponse, {validType: ListReceivedAccountInvitesResponseValid}>;

/**
 * GetAccountInviteRequest is the request for the GetAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.GetAccountInviteRequest
 */
export declare type GetAccountInviteRequest = Message<"qdrant.cloud.account.v1.GetAccountInviteRequest"> & {
  /**
   * The identifier of the account (in GUID format) the invite belongs to.
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the invite (in GUID format).
   * This is a required field.
   *
   * @generated from field: string invite_id = 2;
   */
  inviteId: string;
};

export declare type GetAccountInviteRequestValid = GetAccountInviteRequest;

/**
 * Describes the message qdrant.cloud.account.v1.GetAccountInviteRequest.
 * Use `create(GetAccountInviteRequestSchema)` to create a new message.
 */
export declare const GetAccountInviteRequestSchema: GenMessage<GetAccountInviteRequest, {validType: GetAccountInviteRequestValid}>;

/**
 * GetAccountInviteResponse is the response from the GetAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.GetAccountInviteResponse
 */
export declare type GetAccountInviteResponse = Message<"qdrant.cloud.account.v1.GetAccountInviteResponse"> & {
  /**
   * The account invite.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInvite account_invite = 1;
   */
  accountInvite?: AccountInvite;
};

/**
 * GetAccountInviteResponse is the response from the GetAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.GetAccountInviteResponse
 */
export declare type GetAccountInviteResponseValid = Message<"qdrant.cloud.account.v1.GetAccountInviteResponse"> & {
  /**
   * The account invite.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInvite account_invite = 1;
   */
  accountInvite: AccountInviteValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.GetAccountInviteResponse.
 * Use `create(GetAccountInviteResponseSchema)` to create a new message.
 */
export declare const GetAccountInviteResponseSchema: GenMessage<GetAccountInviteResponse, {validType: GetAccountInviteResponseValid}>;

/**
 * CreateAccountInviteRequest is the request for the CreateAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.CreateAccountInviteRequest
 */
export declare type CreateAccountInviteRequest = Message<"qdrant.cloud.account.v1.CreateAccountInviteRequest"> & {
  /**
   * The details of the invite to create.
   * This is a required field.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInvite account_invite = 1;
   */
  accountInvite?: AccountInvite;
};

/**
 * CreateAccountInviteRequest is the request for the CreateAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.CreateAccountInviteRequest
 */
export declare type CreateAccountInviteRequestValid = Message<"qdrant.cloud.account.v1.CreateAccountInviteRequest"> & {
  /**
   * The details of the invite to create.
   * This is a required field.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInvite account_invite = 1;
   */
  accountInvite: AccountInviteValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.CreateAccountInviteRequest.
 * Use `create(CreateAccountInviteRequestSchema)` to create a new message.
 */
export declare const CreateAccountInviteRequestSchema: GenMessage<CreateAccountInviteRequest, {validType: CreateAccountInviteRequestValid}>;

/**
 * CreateAccountInviteResponse is the response from the CreateAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.CreateAccountInviteResponse
 */
export declare type CreateAccountInviteResponse = Message<"qdrant.cloud.account.v1.CreateAccountInviteResponse"> & {
  /**
   * The created account invite.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInvite account_invite = 1;
   */
  accountInvite?: AccountInvite;
};

/**
 * CreateAccountInviteResponse is the response from the CreateAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.CreateAccountInviteResponse
 */
export declare type CreateAccountInviteResponseValid = Message<"qdrant.cloud.account.v1.CreateAccountInviteResponse"> & {
  /**
   * The created account invite.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInvite account_invite = 1;
   */
  accountInvite: AccountInviteValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.CreateAccountInviteResponse.
 * Use `create(CreateAccountInviteResponseSchema)` to create a new message.
 */
export declare const CreateAccountInviteResponseSchema: GenMessage<CreateAccountInviteResponse, {validType: CreateAccountInviteResponseValid}>;

/**
 * DeleteAccountInviteRequest is the request for the DeleteAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.DeleteAccountInviteRequest
 */
export declare type DeleteAccountInviteRequest = Message<"qdrant.cloud.account.v1.DeleteAccountInviteRequest"> & {
  /**
   * The identifier of the account (in GUID format) the invite belongs to.
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the invite (in GUID format) to delete.
   * This is a required field.
   *
   * @generated from field: string invite_id = 2;
   */
  inviteId: string;
};

export declare type DeleteAccountInviteRequestValid = DeleteAccountInviteRequest;

/**
 * Describes the message qdrant.cloud.account.v1.DeleteAccountInviteRequest.
 * Use `create(DeleteAccountInviteRequestSchema)` to create a new message.
 */
export declare const DeleteAccountInviteRequestSchema: GenMessage<DeleteAccountInviteRequest, {validType: DeleteAccountInviteRequestValid}>;

/**
 * DeleteAccountInviteResponse is the response from the DeleteAccountInvite function.
 *
 * Empty
 *
 * @generated from message qdrant.cloud.account.v1.DeleteAccountInviteResponse
 */
export declare type DeleteAccountInviteResponse = Message<"qdrant.cloud.account.v1.DeleteAccountInviteResponse"> & {
};

export declare type DeleteAccountInviteResponseValid = DeleteAccountInviteResponse;

/**
 * Describes the message qdrant.cloud.account.v1.DeleteAccountInviteResponse.
 * Use `create(DeleteAccountInviteResponseSchema)` to create a new message.
 */
export declare const DeleteAccountInviteResponseSchema: GenMessage<DeleteAccountInviteResponse, {validType: DeleteAccountInviteResponseValid}>;

/**
 * AcceptAccountInviteRequest is the request for the AcceptAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.AcceptAccountInviteRequest
 */
export declare type AcceptAccountInviteRequest = Message<"qdrant.cloud.account.v1.AcceptAccountInviteRequest"> & {
  /**
   * The identifier of the account (in GUID format) the invite is for.
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the invite (in GUID format) to accept.
   * This is a required field.
   *
   * @generated from field: string invite_id = 2;
   */
  inviteId: string;
};

export declare type AcceptAccountInviteRequestValid = AcceptAccountInviteRequest;

/**
 * Describes the message qdrant.cloud.account.v1.AcceptAccountInviteRequest.
 * Use `create(AcceptAccountInviteRequestSchema)` to create a new message.
 */
export declare const AcceptAccountInviteRequestSchema: GenMessage<AcceptAccountInviteRequest, {validType: AcceptAccountInviteRequestValid}>;

/**
 * AcceptAccountInviteResponse is the response from the AcceptAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.AcceptAccountInviteResponse
 */
export declare type AcceptAccountInviteResponse = Message<"qdrant.cloud.account.v1.AcceptAccountInviteResponse"> & {
  /**
   * The invite that was accepted, with its status updated.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInvite invite = 1;
   */
  invite?: AccountInvite;
};

/**
 * AcceptAccountInviteResponse is the response from the AcceptAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.AcceptAccountInviteResponse
 */
export declare type AcceptAccountInviteResponseValid = Message<"qdrant.cloud.account.v1.AcceptAccountInviteResponse"> & {
  /**
   * The invite that was accepted, with its status updated.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInvite invite = 1;
   */
  invite: AccountInviteValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.AcceptAccountInviteResponse.
 * Use `create(AcceptAccountInviteResponseSchema)` to create a new message.
 */
export declare const AcceptAccountInviteResponseSchema: GenMessage<AcceptAccountInviteResponse, {validType: AcceptAccountInviteResponseValid}>;

/**
 * RejectAccountInviteRequest is the request for the RejectAccountInvite function.
 * Note: This RPC, despite its name, is used to reject an *Account Invite*.
 *
 * @generated from message qdrant.cloud.account.v1.RejectAccountInviteRequest
 */
export declare type RejectAccountInviteRequest = Message<"qdrant.cloud.account.v1.RejectAccountInviteRequest"> & {
  /**
   * The identifier of the account (in GUID format) the invite is for.
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the invite (in GUID format) to reject.
   * This is a required field.
   *
   * @generated from field: string invite_id = 2;
   */
  inviteId: string;
};

export declare type RejectAccountInviteRequestValid = RejectAccountInviteRequest;

/**
 * Describes the message qdrant.cloud.account.v1.RejectAccountInviteRequest.
 * Use `create(RejectAccountInviteRequestSchema)` to create a new message.
 */
export declare const RejectAccountInviteRequestSchema: GenMessage<RejectAccountInviteRequest, {validType: RejectAccountInviteRequestValid}>;

/**
 * RejectAccountInviteResponse is the response from the RejectAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.RejectAccountInviteResponse
 */
export declare type RejectAccountInviteResponse = Message<"qdrant.cloud.account.v1.RejectAccountInviteResponse"> & {
  /**
   * The invite that was rejected, with its status updated.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInvite invite = 1;
   */
  invite?: AccountInvite;
};

/**
 * RejectAccountInviteResponse is the response from the RejectAccountInvite function.
 *
 * @generated from message qdrant.cloud.account.v1.RejectAccountInviteResponse
 */
export declare type RejectAccountInviteResponseValid = Message<"qdrant.cloud.account.v1.RejectAccountInviteResponse"> & {
  /**
   * The invite that was rejected, with its status updated.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInvite invite = 1;
   */
  invite: AccountInviteValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.RejectAccountInviteResponse.
 * Use `create(RejectAccountInviteResponseSchema)` to create a new message.
 */
export declare const RejectAccountInviteResponseSchema: GenMessage<RejectAccountInviteResponse, {validType: RejectAccountInviteResponseValid}>;

/**
 * ListAccountMembersRequest is the request for the ListAccountMembers function.
 *
 * @generated from message qdrant.cloud.account.v1.ListAccountMembersRequest
 */
export declare type ListAccountMembersRequest = Message<"qdrant.cloud.account.v1.ListAccountMembersRequest"> & {
  /**
   * The identifier of the account (in GUID format) to list members for.
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

export declare type ListAccountMembersRequestValid = ListAccountMembersRequest;

/**
 * Describes the message qdrant.cloud.account.v1.ListAccountMembersRequest.
 * Use `create(ListAccountMembersRequestSchema)` to create a new message.
 */
export declare const ListAccountMembersRequestSchema: GenMessage<ListAccountMembersRequest, {validType: ListAccountMembersRequestValid}>;

/**
 * ListAccountMembersResponse is the response from the ListAccountMembers function.
 *
 * @generated from message qdrant.cloud.account.v1.ListAccountMembersResponse
 */
export declare type ListAccountMembersResponse = Message<"qdrant.cloud.account.v1.ListAccountMembersResponse"> & {
  /**
   * The list of account members.
   *
   * @generated from field: repeated qdrant.cloud.account.v1.AccountMember items = 1;
   */
  items: AccountMember[];
};

/**
 * ListAccountMembersResponse is the response from the ListAccountMembers function.
 *
 * @generated from message qdrant.cloud.account.v1.ListAccountMembersResponse
 */
export declare type ListAccountMembersResponseValid = Message<"qdrant.cloud.account.v1.ListAccountMembersResponse"> & {
  /**
   * The list of account members.
   *
   * @generated from field: repeated qdrant.cloud.account.v1.AccountMember items = 1;
   */
  items: AccountMemberValid[];
};

/**
 * Describes the message qdrant.cloud.account.v1.ListAccountMembersResponse.
 * Use `create(ListAccountMembersResponseSchema)` to create a new message.
 */
export declare const ListAccountMembersResponseSchema: GenMessage<ListAccountMembersResponse, {validType: ListAccountMembersResponseValid}>;

/**
 * GetAccountMemberRequest is the request for the GetAccountMember function.
 *
 * @generated from message qdrant.cloud.account.v1.GetAccountMemberRequest
 */
export declare type GetAccountMemberRequest = Message<"qdrant.cloud.account.v1.GetAccountMemberRequest"> & {
  /**
   * The identifier of the account (in GUID format) the member belongs to.
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the user (in GUID format).
   * This is a required field.
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

export declare type GetAccountMemberRequestValid = GetAccountMemberRequest;

/**
 * Describes the message qdrant.cloud.account.v1.GetAccountMemberRequest.
 * Use `create(GetAccountMemberRequestSchema)` to create a new message.
 */
export declare const GetAccountMemberRequestSchema: GenMessage<GetAccountMemberRequest, {validType: GetAccountMemberRequestValid}>;

/**
 * GetAccountMemberResponse is the response from the GetAccountMember function.
 *
 * @generated from message qdrant.cloud.account.v1.GetAccountMemberResponse
 */
export declare type GetAccountMemberResponse = Message<"qdrant.cloud.account.v1.GetAccountMemberResponse"> & {
  /**
   * The retrieved account member.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountMember account_member = 1;
   */
  accountMember?: AccountMember;
};

/**
 * GetAccountMemberResponse is the response from the GetAccountMember function.
 *
 * @generated from message qdrant.cloud.account.v1.GetAccountMemberResponse
 */
export declare type GetAccountMemberResponseValid = Message<"qdrant.cloud.account.v1.GetAccountMemberResponse"> & {
  /**
   * The retrieved account member.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountMember account_member = 1;
   */
  accountMember: AccountMemberValid;
};

/**
 * Describes the message qdrant.cloud.account.v1.GetAccountMemberResponse.
 * Use `create(GetAccountMemberResponseSchema)` to create a new message.
 */
export declare const GetAccountMemberResponseSchema: GenMessage<GetAccountMemberResponse, {validType: GetAccountMemberResponseValid}>;

/**
 * DeleteAccountMemberRequest is the request for the DeleteAccountMember function.
 *
 * @generated from message qdrant.cloud.account.v1.DeleteAccountMemberRequest
 */
export declare type DeleteAccountMemberRequest = Message<"qdrant.cloud.account.v1.DeleteAccountMemberRequest"> & {
  /**
   * The identifier of the account (in GUID format) the member belongs to.
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the user (in GUID format) to delete.
   * It is allowed to delete the authenticated user (aka leave account), however only if at least one other user remains in the account.
   * If you are the owner of the account a random other user will be automatically assigned as owner.
   * It is recommended to transfer ownership of the account before leaving.
   * This is a required field.
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;
};

export declare type DeleteAccountMemberRequestValid = DeleteAccountMemberRequest;

/**
 * Describes the message qdrant.cloud.account.v1.DeleteAccountMemberRequest.
 * Use `create(DeleteAccountMemberRequestSchema)` to create a new message.
 */
export declare const DeleteAccountMemberRequestSchema: GenMessage<DeleteAccountMemberRequest, {validType: DeleteAccountMemberRequestValid}>;

/**
 * DeleteAccountMemberResponse is the response from the DeleteAccountMember function.
 *
 * Empty
 *
 * @generated from message qdrant.cloud.account.v1.DeleteAccountMemberResponse
 */
export declare type DeleteAccountMemberResponse = Message<"qdrant.cloud.account.v1.DeleteAccountMemberResponse"> & {
};

export declare type DeleteAccountMemberResponseValid = DeleteAccountMemberResponse;

/**
 * Describes the message qdrant.cloud.account.v1.DeleteAccountMemberResponse.
 * Use `create(DeleteAccountMemberResponseSchema)` to create a new message.
 */
export declare const DeleteAccountMemberResponseSchema: GenMessage<DeleteAccountMemberResponse, {validType: DeleteAccountMemberResponseValid}>;

/**
 * An Account represents an account in the Qdrant cloud.
 *
 * @generated from message qdrant.cloud.account.v1.Account
 */
export declare type Account = Message<"qdrant.cloud.account.v1.Account"> & {
  /**
   * Unique identifier for the account (in GUID format).
   * This is a read-only field and will be available after an account is created.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The timestamp when the account was created.
   * This is a read-only field and will be available after an account is created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * The timestamp when the account was last updated.
   * This is a read-only field and will be available after an account is created.
   *
   * @generated from field: google.protobuf.Timestamp last_modified_at = 3;
   */
  lastModifiedAt?: Timestamp;

  /**
   * The name of the account.
   * Name can only contain printable characters.
   *
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * The external identifier of the owner of the account.
   *
   * @generated from field: string external_owner_id = 6;
   */
  externalOwnerId: string;

  /**
   * The email address of the owner of the account.
   * This is a read-only field and is derived from the owner user.
   *
   * @generated from field: string owner_email = 7;
   */
  ownerEmail: string;

  /**
   * The privileges of the account, if any.
   * This is a read-only field.
   *
   * @generated from field: repeated string privileges = 8;
   */
  privileges: string[];
};

export declare type AccountValid = Account;

/**
 * Describes the message qdrant.cloud.account.v1.Account.
 * Use `create(AccountSchema)` to create a new message.
 */
export declare const AccountSchema: GenMessage<Account, {validType: AccountValid}>;

/**
 * An AccountInvite represents an invitation for a user to join an account.
 *
 * @generated from message qdrant.cloud.account.v1.AccountInvite
 */
export declare type AccountInvite = Message<"qdrant.cloud.account.v1.AccountInvite"> & {
  /**
   * Unique identifier for the invite (in GUID format).
   * This is a read-only field and will be available after an invite is created.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The identifier of the account this invite is for (in GUID format).
   * This field is required when creating an invite.
   *
   * @generated from field: string account_id = 2;
   */
  accountId: string;

  /**
   * Human readable name of the account that the human is invited to join.
   * This is a read-only value.
   *
   * @generated from field: string account_name = 3;
   */
  accountName: string;

  /**
   * The email address of the user being invited.
   * This field is required when creating an invite.
   *
   * @generated from field: string user_email = 4;
   */
  userEmail: string;

  /**
   * The identifiers of the roles to be assigned to the user upon accepting the invite.
   * This field is required when creating an invite, and the list must not be empty.
   * Each string in the list must be a valid UUID, to be resolved in the provided account.
   * Please use IAMService.ListRoles to get the possible roles to assign.
   *
   * @generated from field: repeated string user_role_ids = 5;
   */
  userRoleIds: string[];

  /**
   * The timestamp when the invite was created.
   * This is a read-only field.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * The identifier of the user who created the invite (in GUID format).
   * This is a read-only field, populated by the server based on the authenticated user.
   *
   * @generated from field: optional string created_by_user_id = 7;
   */
  createdByUserId?: string;

  /**
   * The email of the user who created this invite.
   * This is a read-only value, populated by the server based on the created_by_user_id field.
   *
   * @generated from field: optional string created_by_email = 8;
   */
  createdByEmail?: string;

  /**
   * The timestamp when the invite was last updated (e.g., status change).
   * This is a read-only field.
   *
   * @generated from field: google.protobuf.Timestamp last_modified_at = 9;
   */
  lastModifiedAt?: Timestamp;

  /**
   * The status of the invite.
   * This is a read-only field.
   *
   * @generated from field: qdrant.cloud.account.v1.AccountInviteStatus status = 10;
   */
  status: AccountInviteStatus;
};

export declare type AccountInviteValid = AccountInvite;

/**
 * Describes the message qdrant.cloud.account.v1.AccountInvite.
 * Use `create(AccountInviteSchema)` to create a new message.
 */
export declare const AccountInviteSchema: GenMessage<AccountInvite, {validType: AccountInviteValid}>;

/**
 * An AccountMember represents a user who is a member of an account.
 *
 * @generated from message qdrant.cloud.account.v1.AccountMember
 */
export declare type AccountMember = Message<"qdrant.cloud.account.v1.AccountMember"> & {
  /**
   * The user associated with this membership record.
   * This is a read-only field.
   *
   * @generated from field: qdrant.cloud.iam.v1.User account_member = 1;
   */
  accountMember?: User;

  /**
   * Wether or not this user is the owner of the account.
   * This is a read-only field.
   *
   * @generated from field: bool is_owner = 2;
   */
  isOwner: boolean;
};

/**
 * An AccountMember represents a user who is a member of an account.
 *
 * @generated from message qdrant.cloud.account.v1.AccountMember
 */
export declare type AccountMemberValid = Message<"qdrant.cloud.account.v1.AccountMember"> & {
  /**
   * The user associated with this membership record.
   * This is a read-only field.
   *
   * @generated from field: qdrant.cloud.iam.v1.User account_member = 1;
   */
  accountMember: UserValid;

  /**
   * Wether or not this user is the owner of the account.
   * This is a read-only field.
   *
   * @generated from field: bool is_owner = 2;
   */
  isOwner: boolean;
};

/**
 * Describes the message qdrant.cloud.account.v1.AccountMember.
 * Use `create(AccountMemberSchema)` to create a new message.
 */
export declare const AccountMemberSchema: GenMessage<AccountMember, {validType: AccountMemberValid}>;

/**
 * AccountInviteStatus defines the possible statuses of an account invitation.
 *
 * @generated from enum qdrant.cloud.account.v1.AccountInviteStatus
 */
export enum AccountInviteStatus {
  /**
   * Default, unspecified status.
   *
   * @generated from enum value: ACCOUNT_INVITE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The invite is pending and waiting for the user to accept or reject.
   *
   * @generated from enum value: ACCOUNT_INVITE_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * The invite has been accepted by the user.
   *
   * @generated from enum value: ACCOUNT_INVITE_STATUS_ACCEPTED = 2;
   */
  ACCEPTED = 2,

  /**
   * The invite has been rejected by the user.
   *
   * @generated from enum value: ACCOUNT_INVITE_STATUS_REJECTED = 3;
   */
  REJECTED = 3,

  /**
   * The invite has been canceled (e.g., by an account admin).
   *
   * @generated from enum value: ACCOUNT_INVITE_STATUS_CANCELED = 5;
   */
  CANCELED = 5,
}

/**
 * Describes the enum qdrant.cloud.account.v1.AccountInviteStatus.
 */
export declare const AccountInviteStatusSchema: GenEnum<AccountInviteStatus>;

/**
 * AccountService is the API used to configure Accounts.
 *
 * @generated from service qdrant.cloud.account.v1.AccountService
 */
export declare const AccountService: GenService<{
  /**
   * Lists all accounts associated with the authenticated actor, where the actor has the specified permission.
   * Required permissions:
   * - read:accounts
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.ListAccounts
   */
  listAccounts: {
    methodKind: "unary";
    input: typeof ListAccountsRequestSchema;
    output: typeof ListAccountsResponseSchema;
  },
  /**
   * Gets an account identified by the given ID.
   * Required permissions:
   * - read:account
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.GetAccount
   */
  getAccount: {
    methodKind: "unary";
    input: typeof GetAccountRequestSchema;
    output: typeof GetAccountResponseSchema;
  },
  /**
   * Creates an account for the authenticated user.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.CreateAccount
   */
  createAccount: {
    methodKind: "unary";
    input: typeof CreateAccountRequestSchema;
    output: typeof CreateAccountResponseSchema;
  },
  /**
   * Updates an account identified by the given ID.
   * Required permissions:
   * - write:account
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.UpdateAccount
   */
  updateAccount: {
    methodKind: "unary";
    input: typeof UpdateAccountRequestSchema;
    output: typeof UpdateAccountResponseSchema;
  },
  /**
   * Deletes an account identified by the given ID.
   * Required permissions:
   * - delete:account
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.DeleteAccount
   */
  deleteAccount: {
    methodKind: "unary";
    input: typeof DeleteAccountRequestSchema;
    output: typeof DeleteAccountResponseSchema;
  },
  /**
   * Lists all account invites in the account identified by the given account ID.
   * Required permissions:
   * - read:invites
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.ListAccountInvites
   */
  listAccountInvites: {
    methodKind: "unary";
    input: typeof ListAccountInvitesRequestSchema;
    output: typeof ListAccountInvitesResponseSchema;
  },
  /**
   * Lists all account invites for the authenticated user (across all accounts).
   * These are the invites the user has received, not the ones they have sent.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.ListReceivedAccountInvites
   */
  listReceivedAccountInvites: {
    methodKind: "unary";
    input: typeof ListReceivedAccountInvitesRequestSchema;
    output: typeof ListReceivedAccountInvitesResponseSchema;
  },
  /**
   * Gets an account invite identified by the given account ID and invite ID.
   * Required permissions:
   * - read:invites
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.GetAccountInvite
   */
  getAccountInvite: {
    methodKind: "unary";
    input: typeof GetAccountInviteRequestSchema;
    output: typeof GetAccountInviteResponseSchema;
  },
  /**
   * Creates a new account invite.
   * Required permissions:
   * - write:invites
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.CreateAccountInvite
   */
  createAccountInvite: {
    methodKind: "unary";
    input: typeof CreateAccountInviteRequestSchema;
    output: typeof CreateAccountInviteResponseSchema;
  },
  /**
   * Deletes an account invite.
   * Required permissions:
   * - delete:invites
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.DeleteAccountInvite
   */
  deleteAccountInvite: {
    methodKind: "unary";
    input: typeof DeleteAccountInviteRequestSchema;
    output: typeof DeleteAccountInviteResponseSchema;
  },
  /**
   * Accepts an account invite.
   * The authenticated user's email address must match the email address specified in
   * the invite.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.AcceptAccountInvite
   */
  acceptAccountInvite: {
    methodKind: "unary";
    input: typeof AcceptAccountInviteRequestSchema;
    output: typeof AcceptAccountInviteResponseSchema;
  },
  /**
   * Rejects an account invite.
   * The authenticated user's email address must match the email address specified in
   * the invite.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.RejectAccountInvite
   */
  rejectAccountInvite: {
    methodKind: "unary";
    input: typeof RejectAccountInviteRequestSchema;
    output: typeof RejectAccountInviteResponseSchema;
  },
  /**
   * Lists all account members in the account identified by the given account ID.
   * The authenticated actor must be a member of the account identified by the given account ID.
   * Required permissions:
   * - read:users
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.ListAccountMembers
   */
  listAccountMembers: {
    methodKind: "unary";
    input: typeof ListAccountMembersRequestSchema;
    output: typeof ListAccountMembersResponseSchema;
  },
  /**
   * Gets an account member by ID.
   * The authenticated actor must be a member of the same account as the member being fetch.
   * Required permissions:
   * - read:users
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.GetAccountMember
   */
  getAccountMember: {
    methodKind: "unary";
    input: typeof GetAccountMemberRequestSchema;
    output: typeof GetAccountMemberResponseSchema;
  },
  /**
   * Deletes an account member.
   * The authenticated actor must be a member of the account from which the the member is being removed.
   * Required permissions:
   * - delete:users
   *
   * @generated from rpc qdrant.cloud.account.v1.AccountService.DeleteAccountMember
   */
  deleteAccountMember: {
    methodKind: "unary";
    input: typeof DeleteAccountMemberRequestSchema;
    output: typeof DeleteAccountMemberResponseSchema;
  },
}>;

