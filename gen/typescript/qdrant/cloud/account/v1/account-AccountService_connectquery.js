// @generated by protoc-gen-connect-query v0.4.1
// @generated from file qdrant/cloud/account/v1/account.proto (package qdrant.cloud.account.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { MethodKind } from "@bufbuild/protobuf";
import { AcceptAccountInviteRequest, AcceptAccountInviteResponse, CreateAccountInviteRequest, CreateAccountInviteResponse, CreateAccountRequest, CreateAccountResponse, DeleteAccountInviteRequest, DeleteAccountInviteResponse, DeleteAccountMemberRequest, DeleteAccountMemberResponse, DeleteAccountRequest, DeleteAccountResponse, GetAccountInviteRequest, GetAccountInviteResponse, GetAccountMemberRequest, GetAccountMemberResponse, GetAccountRequest, GetAccountResponse, ListAccountInvitesRequest, ListAccountInvitesResponse, ListAccountMembersRequest, ListAccountMembersResponse, ListAccountsRequest, ListAccountsResponse, ListReceivedAccountInvitesRequest, ListReceivedAccountInvitesResponse, RejectAccountInviteRequest, RejectAccountInviteResponse, UpdateAccountRequest, UpdateAccountResponse } from "./account_pb.js";

export const typeName = "qdrant.cloud.account.v1.AccountService";

/**
 * Lists all accounts associated with the authenticated actor, where the actor has the specified permission.
 * Required permissions:
 * - read:accounts
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.ListAccounts
 */
export const listAccounts = createQueryService({
  service: {
    methods: {
      listAccounts: {
        name: "ListAccounts",
        kind: MethodKind.Unary,
        I: ListAccountsRequest,
        O: ListAccountsResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).listAccounts;

/**
 * Gets an account identified by the given ID.
 * Required permissions:
 * - read:account
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.GetAccount
 */
export const getAccount = createQueryService({
  service: {
    methods: {
      getAccount: {
        name: "GetAccount",
        kind: MethodKind.Unary,
        I: GetAccountRequest,
        O: GetAccountResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).getAccount;

/**
 * Creates an account for the authenticated user.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.CreateAccount
 */
export const createAccount = createQueryService({
  service: {
    methods: {
      createAccount: {
        name: "CreateAccount",
        kind: MethodKind.Unary,
        I: CreateAccountRequest,
        O: CreateAccountResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).createAccount;

/**
 * Updates an account identified by the given ID.
 * Required permissions:
 * - write:account
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.UpdateAccount
 */
export const updateAccount = createQueryService({
  service: {
    methods: {
      updateAccount: {
        name: "UpdateAccount",
        kind: MethodKind.Unary,
        I: UpdateAccountRequest,
        O: UpdateAccountResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).updateAccount;

/**
 * Deletes an account identified by the given ID.
 * Required permissions:
 * - delete:account
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.DeleteAccount
 */
export const deleteAccount = createQueryService({
  service: {
    methods: {
      deleteAccount: {
        name: "DeleteAccount",
        kind: MethodKind.Unary,
        I: DeleteAccountRequest,
        O: DeleteAccountResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).deleteAccount;

/**
 * Lists all account invites in the account identified by the given account ID.
 * Required permissions:
 * - read:invites
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.ListAccountInvites
 */
export const listAccountInvites = createQueryService({
  service: {
    methods: {
      listAccountInvites: {
        name: "ListAccountInvites",
        kind: MethodKind.Unary,
        I: ListAccountInvitesRequest,
        O: ListAccountInvitesResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).listAccountInvites;

/**
 * Lists all account invites for the authenticated user (across all accounts).
 * These are the invites the user has received, not the ones they have sent.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.ListReceivedAccountInvites
 */
export const listReceivedAccountInvites = createQueryService({
  service: {
    methods: {
      listReceivedAccountInvites: {
        name: "ListReceivedAccountInvites",
        kind: MethodKind.Unary,
        I: ListReceivedAccountInvitesRequest,
        O: ListReceivedAccountInvitesResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).listReceivedAccountInvites;

/**
 * Gets an account invite identified by the given account ID and invite ID.
 * Required permissions:
 * - read:invites
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.GetAccountInvite
 */
export const getAccountInvite = createQueryService({
  service: {
    methods: {
      getAccountInvite: {
        name: "GetAccountInvite",
        kind: MethodKind.Unary,
        I: GetAccountInviteRequest,
        O: GetAccountInviteResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).getAccountInvite;

/**
 * Creates a new account invite.
 * Required permissions:
 * - write:invites
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.CreateAccountInvite
 */
export const createAccountInvite = createQueryService({
  service: {
    methods: {
      createAccountInvite: {
        name: "CreateAccountInvite",
        kind: MethodKind.Unary,
        I: CreateAccountInviteRequest,
        O: CreateAccountInviteResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).createAccountInvite;

/**
 * Deletes an account invite.
 * Required permissions:
 * - delete:invites
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.DeleteAccountInvite
 */
export const deleteAccountInvite = createQueryService({
  service: {
    methods: {
      deleteAccountInvite: {
        name: "DeleteAccountInvite",
        kind: MethodKind.Unary,
        I: DeleteAccountInviteRequest,
        O: DeleteAccountInviteResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).deleteAccountInvite;

/**
 * Accepts an account invite.
 * The authenticated user's email address must match the email address specified in
 * the invite.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.AcceptAccountInvite
 */
export const acceptAccountInvite = createQueryService({
  service: {
    methods: {
      acceptAccountInvite: {
        name: "AcceptAccountInvite",
        kind: MethodKind.Unary,
        I: AcceptAccountInviteRequest,
        O: AcceptAccountInviteResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).acceptAccountInvite;

/**
 * Rejects an account invite.
 * The authenticated user's email address must match the email address specified in
 * the invite.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.RejectAccountInvite
 */
export const rejectAccountInvite = createQueryService({
  service: {
    methods: {
      rejectAccountInvite: {
        name: "RejectAccountInvite",
        kind: MethodKind.Unary,
        I: RejectAccountInviteRequest,
        O: RejectAccountInviteResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).rejectAccountInvite;

/**
 * Lists all account members in the account identified by the given account ID.
 * The authenticated actor must be a member of the account identified by the given account ID.
 * Required permissions:
 * - read:users
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.ListAccountMembers
 */
export const listAccountMembers = createQueryService({
  service: {
    methods: {
      listAccountMembers: {
        name: "ListAccountMembers",
        kind: MethodKind.Unary,
        I: ListAccountMembersRequest,
        O: ListAccountMembersResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).listAccountMembers;

/**
 * Gets an account member by ID.
 * The authenticated actor must be a member of the same account as the member being fetch.
 * Required permissions:
 * - read:users
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.GetAccountMember
 */
export const getAccountMember = createQueryService({
  service: {
    methods: {
      getAccountMember: {
        name: "GetAccountMember",
        kind: MethodKind.Unary,
        I: GetAccountMemberRequest,
        O: GetAccountMemberResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).getAccountMember;

/**
 * Deletes an account member.
 * The authenticated actor must be a member of the account from which the the member is being removed.
 * Required permissions:
 * - delete:users
 *
 * @generated from rpc qdrant.cloud.account.v1.AccountService.DeleteAccountMember
 */
export const deleteAccountMember = createQueryService({
  service: {
    methods: {
      deleteAccountMember: {
        name: "DeleteAccountMember",
        kind: MethodKind.Unary,
        I: DeleteAccountMemberRequest,
        O: DeleteAccountMemberResponse,
      },
    },
    typeName: "qdrant.cloud.account.v1.AccountService",
  },
}).deleteAccountMember;
