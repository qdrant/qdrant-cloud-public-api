// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/monitoring/v1/monitoring.proto (package qdrant.cloud.monitoring.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file qdrant/cloud/monitoring/v1/monitoring.proto.
 */
export declare const file_qdrant_cloud_monitoring_v1_monitoring: GenFile;

/**
 * GetClusterSummaryMetricsRequest is the request for the GetClusterSummaryMetrics function
 *
 * @generated from message qdrant.cloud.monitoring.v1.GetClusterSummaryMetricsRequest
 */
export declare type GetClusterSummaryMetricsRequest = Message<"qdrant.cloud.monitoring.v1.GetClusterSummaryMetricsRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier for the cluster (in GUID format).
   * This cluster should be part of the provided account.
   * This is a required field.
   *
   * @generated from field: string cluster_id = 2;
   */
  clusterId: string;
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.GetClusterSummaryMetricsRequest.
 * Use `create(GetClusterSummaryMetricsRequestSchema)` to create a new message.
 */
export declare const GetClusterSummaryMetricsRequestSchema: GenMessage<GetClusterSummaryMetricsRequest>;

/**
 * GetClusterSummaryMetricsResponse is the response from the GetClusterSummaryMetrics function
 *
 * @generated from message qdrant.cloud.monitoring.v1.GetClusterSummaryMetricsResponse
 */
export declare type GetClusterSummaryMetricsResponse = Message<"qdrant.cloud.monitoring.v1.GetClusterSummaryMetricsResponse"> & {
  /**
   * List of metrics aggregated per node in the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.ClusterNodeMetrics nodes = 1;
   */
  nodes: ClusterNodeMetrics[];
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.GetClusterSummaryMetricsResponse.
 * Use `create(GetClusterSummaryMetricsResponseSchema)` to create a new message.
 */
export declare const GetClusterSummaryMetricsResponseSchema: GenMessage<GetClusterSummaryMetricsResponse>;

/**
 * GetClusterUsageMetricsRequest is the request for the GetClusterUsageMetrics function
 *
 * @generated from message qdrant.cloud.monitoring.v1.GetClusterUsageMetricsRequest
 */
export declare type GetClusterUsageMetricsRequest = Message<"qdrant.cloud.monitoring.v1.GetClusterUsageMetricsRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier for the cluster (in GUID format).
   * This cluster should be part of the provided account.
   * This is a required field.
   *
   * @generated from field: string cluster_id = 2;
   */
  clusterId: string;

  /**
   * Optional start time for the metrics query.
   * If omitted, defaults to 1 hour ago.
   *
   * @generated from field: optional google.protobuf.Timestamp since = 3;
   */
  since?: Timestamp;

  /**
   * Optional end time for the metrics query.
   * If omitted, defaults to current time.
   *
   * @generated from field: optional google.protobuf.Timestamp until = 4;
   */
  until?: Timestamp;

  /**
   * Aggregation function to apply to the time series data.
   * If omitted, defaults to SUM.
   *
   * @generated from field: optional qdrant.cloud.monitoring.v1.Aggregator aggregator = 5;
   */
  aggregator?: Aggregator;
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.GetClusterUsageMetricsRequest.
 * Use `create(GetClusterUsageMetricsRequestSchema)` to create a new message.
 */
export declare const GetClusterUsageMetricsRequestSchema: GenMessage<GetClusterUsageMetricsRequest>;

/**
 * GetClusterUsageMetricsResponse is the response from the GetClusterUsageMetrics function
 *
 * @generated from message qdrant.cloud.monitoring.v1.GetClusterUsageMetricsResponse
 */
export declare type GetClusterUsageMetricsResponse = Message<"qdrant.cloud.monitoring.v1.GetClusterUsageMetricsResponse"> & {
  /**
   * Timeseries of overall CPU usage across the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric cpu = 1;
   */
  cpu: Metric[];

  /**
   * Timeseries of overall RAM usage across the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric ram = 2;
   */
  ram: Metric[];

  /**
   * Timeseries of RAM used for cache across the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric ram_cache = 3;
   */
  ramCache: Metric[];

  /**
   * Timeseries of RSS memory used across the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric ram_rss = 4;
   */
  ramRss: Metric[];

  /**
   * Timeseries of RSS memory used by the Qdrant database across the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric ram_qdrant_rss = 5;
   */
  ramQdrantRss: Metric[];

  /**
   * Timeseries of disk usage across the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric disk = 6;
   */
  disk: Metric[];

  /**
   * Timeseries of requests per second (RPS) across the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric rps = 7;
   */
  rps: Metric[];

  /**
   * Timeseries of request latency across the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric latency = 8;
   */
  latency: Metric[];

  /**
   * Per-node metrics.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.ClusterNodeUsageMetrics nodes = 9;
   */
  nodes: ClusterNodeUsageMetrics[];
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.GetClusterUsageMetricsResponse.
 * Use `create(GetClusterUsageMetricsResponseSchema)` to create a new message.
 */
export declare const GetClusterUsageMetricsResponseSchema: GenMessage<GetClusterUsageMetricsResponse>;

/**
 * GetClusterLogsRequest is the request for the GetClusterLogs function
 *
 * @generated from message qdrant.cloud.monitoring.v1.GetClusterLogsRequest
 */
export declare type GetClusterLogsRequest = Message<"qdrant.cloud.monitoring.v1.GetClusterLogsRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier for the cluster (in GUID format).
   * This cluster should be part of the provided account.
   * This is a required field.
   *
   * @generated from field: string cluster_id = 2;
   */
  clusterId: string;

  /**
   * Optional start time for the logs query.
   * If omitted, defaults to 3 days ago.
   *
   * @generated from field: optional google.protobuf.Timestamp since = 3;
   */
  since?: Timestamp;

  /**
   * Optional end time for the logs query.
   * If omitted, defaults to current time.
   *
   * @generated from field: optional google.protobuf.Timestamp until = 4;
   */
  until?: Timestamp;
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.GetClusterLogsRequest.
 * Use `create(GetClusterLogsRequestSchema)` to create a new message.
 */
export declare const GetClusterLogsRequestSchema: GenMessage<GetClusterLogsRequest>;

/**
 * GetClusterLogsResponse is the response from the GetClusterLogs function
 *
 * @generated from message qdrant.cloud.monitoring.v1.GetClusterLogsResponse
 */
export declare type GetClusterLogsResponse = Message<"qdrant.cloud.monitoring.v1.GetClusterLogsResponse"> & {
  /**
   * A list of log entries from the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.LogEntry items = 1;
   */
  items: LogEntry[];
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.GetClusterLogsResponse.
 * Use `create(GetClusterLogsResponseSchema)` to create a new message.
 */
export declare const GetClusterLogsResponseSchema: GenMessage<GetClusterLogsResponse>;

/**
 * GetClusterEventsRequest is the request for the GetClusterEvents function
 *
 * @generated from message qdrant.cloud.monitoring.v1.GetClusterEventsRequest
 */
export declare type GetClusterEventsRequest = Message<"qdrant.cloud.monitoring.v1.GetClusterEventsRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier for the cluster (in GUID format).
   * This cluster should be part of the provided account.
   * This is a required field.
   *
   * @generated from field: string cluster_id = 2;
   */
  clusterId: string;

  /**
   * Optional start time for the events query.
   * If omitted, defaults to 7 days ago.
   *
   * @generated from field: optional google.protobuf.Timestamp since = 3;
   */
  since?: Timestamp;

  /**
   * Optional end time for the events query.
   * If omitted, defaults to current time.
   *
   * @generated from field: optional google.protobuf.Timestamp until = 4;
   */
  until?: Timestamp;
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.GetClusterEventsRequest.
 * Use `create(GetClusterEventsRequestSchema)` to create a new message.
 */
export declare const GetClusterEventsRequestSchema: GenMessage<GetClusterEventsRequest>;

/**
 * GetClusterEventsRequest is the response from the GetClusterEvents function
 *
 * @generated from message qdrant.cloud.monitoring.v1.GetClusterEventsResponse
 */
export declare type GetClusterEventsResponse = Message<"qdrant.cloud.monitoring.v1.GetClusterEventsResponse"> & {
  /**
   * A list of entries representing events that have happened in the cluster.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.LogEntry items = 1;
   */
  items: LogEntry[];
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.GetClusterEventsResponse.
 * Use `create(GetClusterEventsResponseSchema)` to create a new message.
 */
export declare const GetClusterEventsResponseSchema: GenMessage<GetClusterEventsResponse>;

/**
 * ClusterNodeMetrics contains metric overview for a node.
 *
 * @generated from message qdrant.cloud.monitoring.v1.ClusterNodeMetrics
 */
export declare type ClusterNodeMetrics = Message<"qdrant.cloud.monitoring.v1.ClusterNodeMetrics"> & {
  /**
   * Unique identifier of the node.
   *
   * @generated from field: string node_id = 1;
   */
  nodeId: string;

  /**
   * Overview of CPU usage.
   *
   * @generated from field: qdrant.cloud.monitoring.v1.ClusterMetricOverview cpu = 2;
   */
  cpu?: ClusterMetricOverview;

  /**
   * Overview of RAM usage.
   *
   * @generated from field: qdrant.cloud.monitoring.v1.ClusterMetricOverview ram = 3;
   */
  ram?: ClusterMetricOverview;

  /**
   * Overview of RAM cache usage.
   *
   * @generated from field: qdrant.cloud.monitoring.v1.ClusterMetricOverview ram_cache = 4;
   */
  ramCache?: ClusterMetricOverview;

  /**
   * Overview of RSS memory usage.
   *
   * @generated from field: qdrant.cloud.monitoring.v1.ClusterMetricOverview ram_rss = 5;
   */
  ramRss?: ClusterMetricOverview;

  /**
   * Overview of RSS memory usage by the Qdrant database.
   *
   * @generated from field: qdrant.cloud.monitoring.v1.ClusterMetricOverview ram_qdrant_rss = 6;
   */
  ramQdrantRss?: ClusterMetricOverview;

  /**
   * Overview of disk usage.
   *
   * @generated from field: qdrant.cloud.monitoring.v1.ClusterMetricOverview disk = 7;
   */
  disk?: ClusterMetricOverview;
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.ClusterNodeMetrics.
 * Use `create(ClusterNodeMetricsSchema)` to create a new message.
 */
export declare const ClusterNodeMetricsSchema: GenMessage<ClusterNodeMetrics>;

/**
 * ClusterMetricOverview contains both the average values of a metric over
 * predefined intervals, and the total available value of that resource.
 *
 * @generated from message qdrant.cloud.monitoring.v1.ClusterMetricOverview
 */
export declare type ClusterMetricOverview = Message<"qdrant.cloud.monitoring.v1.ClusterMetricOverview"> & {
  /**
   * Average metric values calculated over various time intervals.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.IntervalAverage avg = 1;
   */
  avg: IntervalAverage[];

  /**
   * Total available value of the resource on the node.
   *
   * @generated from field: qdrant.cloud.monitoring.v1.ResourceValue total = 2;
   */
  total?: ResourceValue;
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.ClusterMetricOverview.
 * Use `create(ClusterMetricOverviewSchema)` to create a new message.
 */
export declare const ClusterMetricOverviewSchema: GenMessage<ClusterMetricOverview>;

/**
 * IntervalAverage represents the average value of a metric over a specific time interval.
 *
 * @generated from message qdrant.cloud.monitoring.v1.IntervalAverage
 */
export declare type IntervalAverage = Message<"qdrant.cloud.monitoring.v1.IntervalAverage"> & {
  /**
   * The duration of the interval.
   *
   * @generated from field: google.protobuf.Duration interval = 1;
   */
  interval?: Duration;

  /**
   * Average value of the metric during the specified interval.
   *
   * @generated from field: double value = 2;
   */
  value: number;
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.IntervalAverage.
 * Use `create(IntervalAverageSchema)` to create a new message.
 */
export declare const IntervalAverageSchema: GenMessage<IntervalAverage>;

/**
 * ResourceValue represents the total value of a resource along with its unit.
 *
 * @generated from message qdrant.cloud.monitoring.v1.ResourceValue
 */
export declare type ResourceValue = Message<"qdrant.cloud.monitoring.v1.ResourceValue"> & {
  /**
   * Value of the resource, e.g., 0.5.
   *
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * Unit of the resource value, e.g., "vcpu/core".
   *
   * @generated from field: string unit = 2;
   */
  unit: string;
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.ResourceValue.
 * Use `create(ResourceValueSchema)` to create a new message.
 */
export declare const ResourceValueSchema: GenMessage<ResourceValue>;

/**
 * ClusterNodeUsageMetrics defines per-node usage metrics.
 *
 * @generated from message qdrant.cloud.monitoring.v1.ClusterNodeUsageMetrics
 */
export declare type ClusterNodeUsageMetrics = Message<"qdrant.cloud.monitoring.v1.ClusterNodeUsageMetrics"> & {
  /**
   * Unique identifier of the node.
   *
   * @generated from field: string node_id = 1;
   */
  nodeId: string;

  /**
   * Timeseries of CPU usage for the node.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric cpu = 2;
   */
  cpu: Metric[];

  /**
   * Timeseries of RAM usage for the node.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric ram = 3;
   */
  ram: Metric[];

  /**
   * Timeseries of RAM cache usage for the node.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric ram_cache = 4;
   */
  ramCache: Metric[];

  /**
   * Timeseries of RSS memory usage for the node.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric ram_rss = 5;
   */
  ramRss: Metric[];

  /**
   * Timeseries of RSS memory usage by the Qdrant database for the node.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric ram_qdrant_rss = 6;
   */
  ramQdrantRss: Metric[];

  /**
   * Timeseries of disk usage for the node.
   *
   * @generated from field: repeated qdrant.cloud.monitoring.v1.Metric disk = 7;
   */
  disk: Metric[];
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.ClusterNodeUsageMetrics.
 * Use `create(ClusterNodeUsageMetricsSchema)` to create a new message.
 */
export declare const ClusterNodeUsageMetricsSchema: GenMessage<ClusterNodeUsageMetrics>;

/**
 * A single metric data point.
 *
 * @generated from message qdrant.cloud.monitoring.v1.Metric
 */
export declare type Metric = Message<"qdrant.cloud.monitoring.v1.Metric"> & {
  /**
   * Timestamp of the data point.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * Numerical value of the metric at the given timestamp.
   *
   * @generated from field: double value = 2;
   */
  value: number;
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.Metric.
 * Use `create(MetricSchema)` to create a new message.
 */
export declare const MetricSchema: GenMessage<Metric>;

/**
 * LogEntry represents a single log line.
 *
 * @generated from message qdrant.cloud.monitoring.v1.LogEntry
 */
export declare type LogEntry = Message<"qdrant.cloud.monitoring.v1.LogEntry"> & {
  /**
   * The timestamp indicating when the log entry was recorded.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * The content of the log message.
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message qdrant.cloud.monitoring.v1.LogEntry.
 * Use `create(LogEntrySchema)` to create a new message.
 */
export declare const LogEntrySchema: GenMessage<LogEntry>;

/**
 * Aggregator defines how metrics should be aggregated over time.
 *
 * @generated from enum qdrant.cloud.monitoring.v1.Aggregator
 */
export enum Aggregator {
  /**
   * Unspecified aggregation function.
   *
   * @generated from enum value: AGGREGATOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * SUM aggregation function.
   *
   * @generated from enum value: AGGREGATOR_SUM = 1;
   */
  SUM = 1,

  /**
   * AVG aggregation function.
   *
   * @generated from enum value: AGGREGATOR_AVG = 2;
   */
  AVG = 2,

  /**
   * MAX aggregation function.
   *
   * @generated from enum value: AGGREGATOR_MAX = 3;
   */
  MAX = 3,

  /**
   * MIN aggregation function.
   *
   * @generated from enum value: AGGREGATOR_MIN = 4;
   */
  MIN = 4,
}

/**
 * Describes the enum qdrant.cloud.monitoring.v1.Aggregator.
 */
export declare const AggregatorSchema: GenEnum<Aggregator>;

/**
 * MonitoringService provides access to monitoring data such as cluster metrics, logs, and events.
 *
 * @generated from service qdrant.cloud.monitoring.v1.MonitoringService
 */
export declare const MonitoringService: GenService<{
  /**
   * Gets the summary metrics of a cluster in the account identified by the given ID.
   * Required permissions:
   * - read:clusters
   *
   * @generated from rpc qdrant.cloud.monitoring.v1.MonitoringService.GetClusterSummaryMetrics
   */
  getClusterSummaryMetrics: {
    methodKind: "unary";
    input: typeof GetClusterSummaryMetricsRequestSchema;
    output: typeof GetClusterSummaryMetricsResponseSchema;
  },
  /**
   * Gets the detailed usage metrics (as timeseries) of a cluster in the account identified by the given ID.
   * Required permissions:
   * - read:clusters
   *
   * @generated from rpc qdrant.cloud.monitoring.v1.MonitoringService.GetClusterUsageMetrics
   */
  getClusterUsageMetrics: {
    methodKind: "unary";
    input: typeof GetClusterUsageMetricsRequestSchema;
    output: typeof GetClusterUsageMetricsResponseSchema;
  },
  /**
   * Gets the logs of a cluster in the account identified by the given ID.
   * Required permissions:
   * - read:clusters
   *
   * @generated from rpc qdrant.cloud.monitoring.v1.MonitoringService.GetClusterLogs
   */
  getClusterLogs: {
    methodKind: "unary";
    input: typeof GetClusterLogsRequestSchema;
    output: typeof GetClusterLogsResponseSchema;
  },
  /**
   * Gets the events of a cluster in the account identified by the given ID.
   * This method is currently available only for clusters running in hybrid cloud environments.
   * Required permissions:
   * - read:clusters
   *
   * @generated from rpc qdrant.cloud.monitoring.v1.MonitoringService.GetClusterEvents
   */
  getClusterEvents: {
    methodKind: "unary";
    input: typeof GetClusterEventsRequestSchema;
    output: typeof GetClusterEventsResponseSchema;
  },
}>;

