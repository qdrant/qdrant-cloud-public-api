// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/cluster/v1/cluster.proto (package qdrant.cloud.cluster.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb.js";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb.js";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_qdrant_cloud_common_v1_common } from "../../common/v1/common_pb.js";

/**
 * Describes the file qdrant/cloud/cluster/v1/cluster.proto.
 */
export const file_qdrant_cloud_cluster_v1_cluster = /*@__PURE__*/
  fileDesc("", [file_buf_validate_validate, file_google_api_annotations, file_google_protobuf_timestamp, file_qdrant_cloud_common_v1_common]);

/**
 * Describes the message qdrant.cloud.cluster.v1.ListClustersRequest.
 * Use `create(ListClustersRequestSchema)` to create a new message.
 */
export const ListClustersRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 0);

/**
 * Describes the message qdrant.cloud.cluster.v1.ListClustersResponse.
 * Use `create(ListClustersResponseSchema)` to create a new message.
 */
export const ListClustersResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 1);

/**
 * Describes the message qdrant.cloud.cluster.v1.GetClusterRequest.
 * Use `create(GetClusterRequestSchema)` to create a new message.
 */
export const GetClusterRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 2);

/**
 * Describes the message qdrant.cloud.cluster.v1.GetClusterResponse.
 * Use `create(GetClusterResponseSchema)` to create a new message.
 */
export const GetClusterResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 3);

/**
 * Describes the message qdrant.cloud.cluster.v1.CreateClusterRequest.
 * Use `create(CreateClusterRequestSchema)` to create a new message.
 */
export const CreateClusterRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 4);

/**
 * Describes the message qdrant.cloud.cluster.v1.CreateClusterResponse.
 * Use `create(CreateClusterResponseSchema)` to create a new message.
 */
export const CreateClusterResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 5);

/**
 * Describes the message qdrant.cloud.cluster.v1.UpdateClusterRequest.
 * Use `create(UpdateClusterRequestSchema)` to create a new message.
 */
export const UpdateClusterRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 6);

/**
 * Describes the message qdrant.cloud.cluster.v1.UpdateClusterResponse.
 * Use `create(UpdateClusterResponseSchema)` to create a new message.
 */
export const UpdateClusterResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 7);

/**
 * Describes the message qdrant.cloud.cluster.v1.DeleteClusterRequest.
 * Use `create(DeleteClusterRequestSchema)` to create a new message.
 */
export const DeleteClusterRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 8);

/**
 * Describes the message qdrant.cloud.cluster.v1.DeleteClusterResponse.
 * Use `create(DeleteClusterResponseSchema)` to create a new message.
 */
export const DeleteClusterResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 9);

/**
 * Describes the message qdrant.cloud.cluster.v1.RestartClusterRequest.
 * Use `create(RestartClusterRequestSchema)` to create a new message.
 */
export const RestartClusterRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 10);

/**
 * Describes the message qdrant.cloud.cluster.v1.RestartClusterResponse.
 * Use `create(RestartClusterResponseSchema)` to create a new message.
 */
export const RestartClusterResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 11);

/**
 * Describes the message qdrant.cloud.cluster.v1.SuspendClusterRequest.
 * Use `create(SuspendClusterRequestSchema)` to create a new message.
 */
export const SuspendClusterRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 12);

/**
 * Describes the message qdrant.cloud.cluster.v1.SuspendClusterResponse.
 * Use `create(SuspendClusterResponseSchema)` to create a new message.
 */
export const SuspendClusterResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 13);

/**
 * Describes the message qdrant.cloud.cluster.v1.SuggestClusterNameRequest.
 * Use `create(SuggestClusterNameRequestSchema)` to create a new message.
 */
export const SuggestClusterNameRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 14);

/**
 * Describes the message qdrant.cloud.cluster.v1.SuggestClusterNameResponse.
 * Use `create(SuggestClusterNameResponseSchema)` to create a new message.
 */
export const SuggestClusterNameResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 15);

/**
 * Describes the message qdrant.cloud.cluster.v1.ListQdrantReleasesRequest.
 * Use `create(ListQdrantReleasesRequestSchema)` to create a new message.
 */
export const ListQdrantReleasesRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 16);

/**
 * Describes the message qdrant.cloud.cluster.v1.ListQdrantReleasesResponse.
 * Use `create(ListQdrantReleasesResponseSchema)` to create a new message.
 */
export const ListQdrantReleasesResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 17);

/**
 * Describes the message qdrant.cloud.cluster.v1.Cluster.
 * Use `create(ClusterSchema)` to create a new message.
 */
export const ClusterSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 18);

/**
 * Describes the message qdrant.cloud.cluster.v1.ClusterConfiguration.
 * Use `create(ClusterConfigurationSchema)` to create a new message.
 */
export const ClusterConfigurationSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 19);

/**
 * Describes the message qdrant.cloud.cluster.v1.DatabaseConfiguration.
 * Use `create(DatabaseConfigurationSchema)` to create a new message.
 */
export const DatabaseConfigurationSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 20);

/**
 * Describes the message qdrant.cloud.cluster.v1.DatabaseConfigurationCollection.
 * Use `create(DatabaseConfigurationCollectionSchema)` to create a new message.
 */
export const DatabaseConfigurationCollectionSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 21);

/**
 * Describes the message qdrant.cloud.cluster.v1.DatabaseConfigurationCollectionVectors.
 * Use `create(DatabaseConfigurationCollectionVectorsSchema)` to create a new message.
 */
export const DatabaseConfigurationCollectionVectorsSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 22);

/**
 * Describes the message qdrant.cloud.cluster.v1.DatabaseConfigurationStorage.
 * Use `create(DatabaseConfigurationStorageSchema)` to create a new message.
 */
export const DatabaseConfigurationStorageSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 23);

/**
 * Describes the message qdrant.cloud.cluster.v1.DatabaseConfigurationStoragePerformance.
 * Use `create(DatabaseConfigurationStoragePerformanceSchema)` to create a new message.
 */
export const DatabaseConfigurationStoragePerformanceSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 24);

/**
 * Describes the message qdrant.cloud.cluster.v1.DatabaseConfigurationService.
 * Use `create(DatabaseConfigurationServiceSchema)` to create a new message.
 */
export const DatabaseConfigurationServiceSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 25);

/**
 * Describes the message qdrant.cloud.cluster.v1.DatabaseConfigurationTls.
 * Use `create(DatabaseConfigurationTlsSchema)` to create a new message.
 */
export const DatabaseConfigurationTlsSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 26);

/**
 * Describes the message qdrant.cloud.cluster.v1.DatabaseConfigurationInference.
 * Use `create(DatabaseConfigurationInferenceSchema)` to create a new message.
 */
export const DatabaseConfigurationInferenceSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 27);

/**
 * Describes the message qdrant.cloud.cluster.v1.AdditionalResources.
 * Use `create(AdditionalResourcesSchema)` to create a new message.
 */
export const AdditionalResourcesSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 28);

/**
 * Describes the message qdrant.cloud.cluster.v1.Toleration.
 * Use `create(TolerationSchema)` to create a new message.
 */
export const TolerationSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 29);

/**
 * Describes the message qdrant.cloud.cluster.v1.ClusterState.
 * Use `create(ClusterStateSchema)` to create a new message.
 */
export const ClusterStateSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 30);

/**
 * Describes the message qdrant.cloud.cluster.v1.ClusterEndpoint.
 * Use `create(ClusterEndpointSchema)` to create a new message.
 */
export const ClusterEndpointSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 31);

/**
 * Describes the message qdrant.cloud.cluster.v1.ClusterNodeResourcesSummary.
 * Use `create(ClusterNodeResourcesSummarySchema)` to create a new message.
 */
export const ClusterNodeResourcesSummarySchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 32);

/**
 * Describes the message qdrant.cloud.cluster.v1.ClusterNodeResources.
 * Use `create(ClusterNodeResourcesSchema)` to create a new message.
 */
export const ClusterNodeResourcesSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 33);

/**
 * Describes the message qdrant.cloud.cluster.v1.ClusterScalabilityInfo.
 * Use `create(ClusterScalabilityInfoSchema)` to create a new message.
 */
export const ClusterScalabilityInfoSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 34);

/**
 * Describes the message qdrant.cloud.cluster.v1.QdrantRelease.
 * Use `create(QdrantReleaseSchema)` to create a new message.
 */
export const QdrantReleaseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_cluster_v1_cluster, 35);

/**
 * Describes the enum qdrant.cloud.cluster.v1.ClusterConfigurationGpuType.
 */
export const ClusterConfigurationGpuTypeSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_cluster_v1_cluster, 0);

/**
 * ClusterConfigurationGpuType defines GPU types available for clusters.
 *
 * @generated from enum qdrant.cloud.cluster.v1.ClusterConfigurationGpuType
 */
export const ClusterConfigurationGpuType = /*@__PURE__*/
  tsEnum(ClusterConfigurationGpuTypeSchema);

/**
 * Describes the enum qdrant.cloud.cluster.v1.ClusterConfigurationRestartPolicy.
 */
export const ClusterConfigurationRestartPolicySchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_cluster_v1_cluster, 1);

/**
 * ClusterConfigurationRestartPolicy defines restart strategies for the cluster's database.
 *
 * @generated from enum qdrant.cloud.cluster.v1.ClusterConfigurationRestartPolicy
 */
export const ClusterConfigurationRestartPolicy = /*@__PURE__*/
  tsEnum(ClusterConfigurationRestartPolicySchema);

/**
 * Describes the enum qdrant.cloud.cluster.v1.ClusterConfigurationRebalanceStrategy.
 */
export const ClusterConfigurationRebalanceStrategySchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_cluster_v1_cluster, 2);

/**
 * ClusterConfigurationRebalanceStrategy defines shard rebalancing strategies.
 *
 * @generated from enum qdrant.cloud.cluster.v1.ClusterConfigurationRebalanceStrategy
 */
export const ClusterConfigurationRebalanceStrategy = /*@__PURE__*/
  tsEnum(ClusterConfigurationRebalanceStrategySchema);

/**
 * Describes the enum qdrant.cloud.cluster.v1.DatabaseConfigurationLogLevel.
 */
export const DatabaseConfigurationLogLevelSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_cluster_v1_cluster, 3);

/**
 * DatabaseConfigurationLogLevel defines the supported logging levels for the
 * Qdrant database. See: https://docs.rs/log/latest/log/enum.LevelFilter.html
 *
 * @generated from enum qdrant.cloud.cluster.v1.DatabaseConfigurationLogLevel
 */
export const DatabaseConfigurationLogLevel = /*@__PURE__*/
  tsEnum(DatabaseConfigurationLogLevelSchema);

/**
 * Describes the enum qdrant.cloud.cluster.v1.TolerationOperator.
 */
export const TolerationOperatorSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_cluster_v1_cluster, 4);

/**
 * TolerationOperator defines the valid operators for tolerations.
 * See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
 *
 * @generated from enum qdrant.cloud.cluster.v1.TolerationOperator
 */
export const TolerationOperator = /*@__PURE__*/
  tsEnum(TolerationOperatorSchema);

/**
 * Describes the enum qdrant.cloud.cluster.v1.TolerationEffect.
 */
export const TolerationEffectSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_cluster_v1_cluster, 5);

/**
 * TolerationEffect represents the effects a taint has on pod scheduling and eviction.
 * See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
 *
 * @generated from enum qdrant.cloud.cluster.v1.TolerationEffect
 */
export const TolerationEffect = /*@__PURE__*/
  tsEnum(TolerationEffectSchema);

/**
 * Describes the enum qdrant.cloud.cluster.v1.ClusterPhase.
 */
export const ClusterPhaseSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_cluster_v1_cluster, 6);

/**
 * Defines the operational or transitional state of the Qdrant cluster.
 *
 * @generated from enum qdrant.cloud.cluster.v1.ClusterPhase
 */
export const ClusterPhase = /*@__PURE__*/
  tsEnum(ClusterPhaseSchema);

/**
 * Describes the enum qdrant.cloud.cluster.v1.ClusterScalabilityStatus.
 */
export const ClusterScalabilityStatusSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_cluster_v1_cluster, 7);

/**
 * ClusterScalabilityStatus defines the scalability states of a cluster.
 *
 * @generated from enum qdrant.cloud.cluster.v1.ClusterScalabilityStatus
 */
export const ClusterScalabilityStatus = /*@__PURE__*/
  tsEnum(ClusterScalabilityStatusSchema);

/**
 * ClusterService is the API used to configure cluster objects.
 *
 * @generated from service qdrant.cloud.cluster.v1.ClusterService
 */
export const ClusterService = /*@__PURE__*/
  serviceDesc(file_qdrant_cloud_cluster_v1_cluster, 0);

