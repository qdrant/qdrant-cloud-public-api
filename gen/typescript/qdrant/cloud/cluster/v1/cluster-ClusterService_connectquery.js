// @generated by protoc-gen-connect-query v0.4.1
// @generated from file qdrant/cloud/cluster/v1/cluster.proto (package qdrant.cloud.cluster.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { MethodKind } from "@bufbuild/protobuf";
import { CreateClusterRequest, CreateClusterResponse, DeleteClusterRequest, DeleteClusterResponse, GetClusterRequest, GetClusterResponse, ListClustersRequest, ListClustersResponse, ListQdrantReleasesRequest, ListQdrantReleasesResponse, RestartClusterRequest, RestartClusterResponse, SuggestClusterNameRequest, SuggestClusterNameResponse, SuspendClusterRequest, SuspendClusterResponse, UpdateClusterRequest, UpdateClusterResponse } from "./cluster_pb.js";

export const typeName = "qdrant.cloud.cluster.v1.ClusterService";

/**
 * Lists all clusters in the account identified by the given ID.
 * Required permissions:
 * - read:clusters
 *
 * @generated from rpc qdrant.cloud.cluster.v1.ClusterService.ListClusters
 */
export const listClusters = createQueryService({
  service: {
    methods: {
      listClusters: {
        name: "ListClusters",
        kind: MethodKind.Unary,
        I: ListClustersRequest,
        O: ListClustersResponse,
      },
    },
    typeName: "qdrant.cloud.cluster.v1.ClusterService",
  },
}).listClusters;

/**
 * Gets a cluster in the account identified by the given ID.
 * Required permissions:
 * - read:clusters
 *
 * @generated from rpc qdrant.cloud.cluster.v1.ClusterService.GetCluster
 */
export const getCluster = createQueryService({
  service: {
    methods: {
      getCluster: {
        name: "GetCluster",
        kind: MethodKind.Unary,
        I: GetClusterRequest,
        O: GetClusterResponse,
      },
    },
    typeName: "qdrant.cloud.cluster.v1.ClusterService",
  },
}).getCluster;

/**
 * Creates a cluster in the account identified by the given ID.
 * Required permissions:
 * - write:clusters
 *
 * @generated from rpc qdrant.cloud.cluster.v1.ClusterService.CreateCluster
 */
export const createCluster = createQueryService({
  service: {
    methods: {
      createCluster: {
        name: "CreateCluster",
        kind: MethodKind.Unary,
        I: CreateClusterRequest,
        O: CreateClusterResponse,
      },
    },
    typeName: "qdrant.cloud.cluster.v1.ClusterService",
  },
}).createCluster;

/**
 * Updates a cluster in the account identified by the given ID.
 * Required permissions:
 * - write:clusters
 *
 * @generated from rpc qdrant.cloud.cluster.v1.ClusterService.UpdateCluster
 */
export const updateCluster = createQueryService({
  service: {
    methods: {
      updateCluster: {
        name: "UpdateCluster",
        kind: MethodKind.Unary,
        I: UpdateClusterRequest,
        O: UpdateClusterResponse,
      },
    },
    typeName: "qdrant.cloud.cluster.v1.ClusterService",
  },
}).updateCluster;

/**
 * Deletes a cluster in the account identified by the given ID.
 * Required permissions:
 * - delete:clusters
 *
 * @generated from rpc qdrant.cloud.cluster.v1.ClusterService.DeleteCluster
 */
export const deleteCluster = createQueryService({
  service: {
    methods: {
      deleteCluster: {
        name: "DeleteCluster",
        kind: MethodKind.Unary,
        I: DeleteClusterRequest,
        O: DeleteClusterResponse,
      },
    },
    typeName: "qdrant.cloud.cluster.v1.ClusterService",
  },
}).deleteCluster;

/**
 * Restarts a cluster in the account identified by the given ID.
 * Required permissions:
 * - write:clusters
 *
 * @generated from rpc qdrant.cloud.cluster.v1.ClusterService.RestartCluster
 */
export const restartCluster = createQueryService({
  service: {
    methods: {
      restartCluster: {
        name: "RestartCluster",
        kind: MethodKind.Unary,
        I: RestartClusterRequest,
        O: RestartClusterResponse,
      },
    },
    typeName: "qdrant.cloud.cluster.v1.ClusterService",
  },
}).restartCluster;

/**
 * Suspends a cluster in the account identified by the given ID.
 * Required permissions:
 * - write:clusters
 *
 * @generated from rpc qdrant.cloud.cluster.v1.ClusterService.SuspendCluster
 */
export const suspendCluster = createQueryService({
  service: {
    methods: {
      suspendCluster: {
        name: "SuspendCluster",
        kind: MethodKind.Unary,
        I: SuspendClusterRequest,
        O: SuspendClusterResponse,
      },
    },
    typeName: "qdrant.cloud.cluster.v1.ClusterService",
  },
}).suspendCluster;

/**
 * Suggests a unique and human-friendly name for a new cluster in the specified account.
 * This can be used by clients to pre-fill the name field when creating a new cluster.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.cluster.v1.ClusterService.SuggestClusterName
 */
export const suggestClusterName = createQueryService({
  service: {
    methods: {
      suggestClusterName: {
        name: "SuggestClusterName",
        kind: MethodKind.Unary,
        I: SuggestClusterNameRequest,
        O: SuggestClusterNameResponse,
      },
    },
    typeName: "qdrant.cloud.cluster.v1.ClusterService",
  },
}).suggestClusterName;

/**
 * Lists all qdrant releases in the account identified by the given ID.
 * Optional a cluster ID can be provided, the list will return the options to update to only.
 * Required permissions:
 * - read:clusters
 *
 * @generated from rpc qdrant.cloud.cluster.v1.ClusterService.ListQdrantReleases
 */
export const listQdrantReleases = createQueryService({
  service: {
    methods: {
      listQdrantReleases: {
        name: "ListQdrantReleases",
        kind: MethodKind.Unary,
        I: ListQdrantReleasesRequest,
        O: ListQdrantReleasesResponse,
      },
    },
    typeName: "qdrant.cloud.cluster.v1.ClusterService",
  },
}).listQdrantReleases;
