// @generated by protoc-gen-es v2.5.2 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/cluster/auth/v1/ephemeral_dashboard_token.proto (package qdrant.cloud.cluster.auth.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file qdrant/cloud/cluster/auth/v1/ephemeral_dashboard_token.proto.
 */
export declare const file_qdrant_cloud_cluster_auth_v1_ephemeral_dashboard_token: GenFile;

/**
 * CreateEphemeralDashboardTokenRequest is the request for the CreateEphemeralDashboardToken function.
 *
 * @generated from message qdrant.cloud.cluster.auth.v1.CreateEphemeralDashboardTokenRequest
 */
export declare type CreateEphemeralDashboardTokenRequest = Message<"qdrant.cloud.cluster.auth.v1.CreateEphemeralDashboardTokenRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier for the cluster (in GUID format).
   * This cluster should be part of the provided account.
   * This is a required field.
   *
   * @generated from field: string cluster_id = 2;
   */
  clusterId: string;
};

/**
 * Describes the message qdrant.cloud.cluster.auth.v1.CreateEphemeralDashboardTokenRequest.
 * Use `create(CreateEphemeralDashboardTokenRequestSchema)` to create a new message.
 */
export declare const CreateEphemeralDashboardTokenRequestSchema: GenMessage<CreateEphemeralDashboardTokenRequest>;

/**
 * CreateEphemeralDashboardTokenResponse is the response from the CreateEphemeralDashboardToken function.
 *
 * @generated from message qdrant.cloud.cluster.auth.v1.CreateEphemeralDashboardTokenResponse
 */
export declare type CreateEphemeralDashboardTokenResponse = Message<"qdrant.cloud.cluster.auth.v1.CreateEphemeralDashboardTokenResponse"> & {
  /**
   * The encrypted cookie.
   *
   * @generated from field: qdrant.cloud.cluster.auth.v1.EphemeralDashboardToken encrypted_cookie = 1;
   */
  encryptedCookie?: EphemeralDashboardToken;
};

/**
 * Describes the message qdrant.cloud.cluster.auth.v1.CreateEphemeralDashboardTokenResponse.
 * Use `create(CreateEphemeralDashboardTokenResponseSchema)` to create a new message.
 */
export declare const CreateEphemeralDashboardTokenResponseSchema: GenMessage<CreateEphemeralDashboardTokenResponse>;

/**
 * An EphemeralDashboardToken represents the encrypted cookie to access one Qdrant database (cluster).
 *
 * @generated from message qdrant.cloud.cluster.auth.v1.EphemeralDashboardToken
 */
export declare type EphemeralDashboardToken = Message<"qdrant.cloud.cluster.auth.v1.EphemeralDashboardToken"> & {
  /**
   * token is used as cookie value
   * Example: local:v1:string
   *
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message qdrant.cloud.cluster.auth.v1.EphemeralDashboardToken.
 * Use `create(EphemeralDashboardTokenSchema)` to create a new message.
 */
export declare const EphemeralDashboardTokenSchema: GenMessage<EphemeralDashboardToken>;

/**
 * EphemeralDashboardTokenService is the API used to create ephemeral tokens to access the Qdrant Dashboard, used by the Qdrant Cloud UI
 *
 * @generated from service qdrant.cloud.cluster.auth.v1.EphemeralDashboardTokenService
 */
export declare const EphemeralDashboardTokenService: GenService<{
  /**
   * Creates an ephemeral dashboard token in the account identified by the given ID.
   * Required permissions:
   * - read:clusters
   *
   * @generated from rpc qdrant.cloud.cluster.auth.v1.EphemeralDashboardTokenService.CreateEphemeralDashboardToken
   */
  createEphemeralDashboardToken: {
    methodKind: "unary";
    input: typeof CreateEphemeralDashboardTokenRequestSchema;
    output: typeof CreateEphemeralDashboardTokenResponseSchema;
  },
}>;

