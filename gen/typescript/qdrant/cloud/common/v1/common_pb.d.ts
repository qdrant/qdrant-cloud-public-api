// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/common/v1/common.proto (package qdrant.cloud.common.v1, syntax proto3)
/* eslint-disable */

import type { GenExtension, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { MethodOptions } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file qdrant/cloud/common/v1/common.proto.
 */
export declare const file_qdrant_cloud_common_v1_common: GenFile;

/**
 * Semantic version number.
 *
 * @generated from message qdrant.cloud.common.v1.Version
 */
export declare type Version = Message<"qdrant.cloud.common.v1.Version"> & {
  /**
   * Major version (increasing may break APIs)
   *
   * @generated from field: uint32 major = 1;
   */
  major: number;

  /**
   * Minor version (increased for new features)
   *
   * @generated from field: uint32 minor = 2;
   */
  minor: number;

  /**
   * Patch version (increased for fixes)
   *
   * @generated from field: uint32 patch = 3;
   */
  patch: number;
};

/**
 * Describes the message qdrant.cloud.common.v1.Version.
 * Use `create(VersionSchema)` to create a new message.
 */
export declare const VersionSchema: GenMessage<Version>;

/**
 * SecretKeyRef is a reference to a Kubernetes secret name and the key inside the secret
 *
 * @generated from message qdrant.cloud.common.v1.SecretKeyRef
 */
export declare type SecretKeyRef = Message<"qdrant.cloud.common.v1.SecretKeyRef"> & {
  /**
   * The name of the secret (in the same namespace as the QdrantCluster CRD instance)
   * This is a required field
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The key inside the secret
   * This is a required field
   *
   * @generated from field: string key = 2;
   */
  key: string;
};

/**
 * Describes the message qdrant.cloud.common.v1.SecretKeyRef.
 * Use `create(SecretKeyRefSchema)` to create a new message.
 */
export declare const SecretKeyRefSchema: GenMessage<SecretKeyRef>;

/**
 * KeyValue is a key-value tuple (used in e.g. node selectors / annotations)
 * The message represents an object for Kubernetes.
 *
 * @generated from message qdrant.cloud.common.v1.KeyValue
 */
export declare type KeyValue = Message<"qdrant.cloud.common.v1.KeyValue"> & {
  /**
   * The key part of a key-value pair
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * The value part of a key-value pair
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message qdrant.cloud.common.v1.KeyValue.
 * Use `create(KeyValueSchema)` to create a new message.
 */
export declare const KeyValueSchema: GenMessage<KeyValue>;

/**
 * A list of permissions which ALL need to be met by the current user.
 *
 * @generated from extension: repeated string permissions = 50001;
 */
export declare const permissions: GenExtension<MethodOptions, string[]>;

/**
 * The expression to find the account ID field, which should be a string field.
 * It is allowed to nest fields with a point, like 'cluster.account_id' or 'account.id'
 * If the expression is set to an empty string, no account ID will be used.
 *
 * @generated from extension: string account_id_expression = 50002;
 */
export declare const account_id_expression: GenExtension<MethodOptions, string>;

/**
 * Set to allow a method to be used without authentication.
 *
 * @generated from extension: bool requires_authentication = 50003;
 */
export declare const requires_authentication: GenExtension<MethodOptions, boolean>;

