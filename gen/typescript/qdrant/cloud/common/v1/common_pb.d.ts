// @generated by protoc-gen-es v2.9.0 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required"
// @generated from file qdrant/cloud/common/v1/common.proto (package qdrant.cloud.common.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenExtension, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { MethodOptions } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file qdrant/cloud/common/v1/common.proto.
 */
export declare const file_qdrant_cloud_common_v1_common: GenFile;

/**
 * LogField represents a field to log (in case of an error).
 *
 * @generated from message qdrant.cloud.common.v1.LogField
 */
export declare type LogField = Message<"qdrant.cloud.common.v1.LogField"> & {
  /**
   * The name of the field to log (in the logger).
   * It will automatically prefixed with `request.`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The field expression to find the value of the field to log (in the request).
   * It is allowed to nest fields with a point, like 'cluster.account_id' or 'account.id'
   *
   * @generated from field: string field_expression = 2;
   */
  fieldExpression: string;
};

export declare type LogFieldValid = LogField;

/**
 * Describes the message qdrant.cloud.common.v1.LogField.
 * Use `create(LogFieldSchema)` to create a new message.
 */
export declare const LogFieldSchema: GenMessage<LogField, {validType: LogFieldValid}>;

/**
 * Semantic version number.
 *
 * @generated from message qdrant.cloud.common.v1.Version
 */
export declare type Version = Message<"qdrant.cloud.common.v1.Version"> & {
  /**
   * Major version (increasing may break APIs)
   *
   * @generated from field: uint32 major = 1;
   */
  major: number;

  /**
   * Minor version (increased for new features)
   *
   * @generated from field: uint32 minor = 2;
   */
  minor: number;

  /**
   * Patch version (increased for fixes)
   *
   * @generated from field: uint32 patch = 3;
   */
  patch: number;
};

export declare type VersionValid = Version;

/**
 * Describes the message qdrant.cloud.common.v1.Version.
 * Use `create(VersionSchema)` to create a new message.
 */
export declare const VersionSchema: GenMessage<Version, {validType: VersionValid}>;

/**
 * SecretKeyRef is a reference to a Kubernetes secret name and the key inside the secret
 *
 * @generated from message qdrant.cloud.common.v1.SecretKeyRef
 */
export declare type SecretKeyRef = Message<"qdrant.cloud.common.v1.SecretKeyRef"> & {
  /**
   * The name of the secret (in the same namespace as the QdrantCluster CRD instance)
   * This is a required field
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The key inside the secret
   * This is a required field
   *
   * @generated from field: string key = 2;
   */
  key: string;
};

export declare type SecretKeyRefValid = SecretKeyRef;

/**
 * Describes the message qdrant.cloud.common.v1.SecretKeyRef.
 * Use `create(SecretKeyRefSchema)` to create a new message.
 */
export declare const SecretKeyRefSchema: GenMessage<SecretKeyRef, {validType: SecretKeyRefValid}>;

/**
 * KeyValue is a key-value tuple (used in e.g. node selectors / annotations)
 * The message represents an object for Kubernetes.
 *
 * @generated from message qdrant.cloud.common.v1.KeyValue
 */
export declare type KeyValue = Message<"qdrant.cloud.common.v1.KeyValue"> & {
  /**
   * The key part of a key-value pair
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * The value part of a key-value pair
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

export declare type KeyValueValid = KeyValue;

/**
 * Describes the message qdrant.cloud.common.v1.KeyValue.
 * Use `create(KeyValueSchema)` to create a new message.
 */
export declare const KeyValueSchema: GenMessage<KeyValue, {validType: KeyValueValid}>;

/**
 * ActorType specifies the type of actor that can call a method.
 *
 * @generated from enum qdrant.cloud.common.v1.ActorType
 */
export enum ActorType {
  /**
   * Default, unspecified actor type. Should generally not be used explicitly in options
   * unless to signify an error or uninitialized state.
   *
   * @generated from enum value: ACTOR_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Represents a human user, typically authenticated via an identity provider (Auth0).
   *
   * @generated from enum value: ACTOR_TYPE_USER = 1;
   */
  USER = 1,

  /**
   * Represents a programmatic access key, also called management key,
   * that is not be tied to a specific user or service account identity, but rather an account.
   *
   * @generated from enum value: ACTOR_TYPE_MANAGEMENT_KEY = 2;
   */
  MANAGEMENT_KEY = 2,

  /**
   * Represents a service account or machine user, often used for M2M communication.
   * This is for internal platform use only.
   *
   * @generated from enum value: ACTOR_TYPE_SERVICE_ACCOUNT = 3;
   */
  SERVICE_ACCOUNT = 3,
}

/**
 * Describes the enum qdrant.cloud.common.v1.ActorType.
 */
export declare const ActorTypeSchema: GenEnum<ActorType>;

/**
 * A list of permissions which need to be met by the current user.
 * If `requires_all_permissions` is true (or missing): ALL of the permissions should be met (and)
 * If `requires_all_permissions` is false: ANY-OF the permissions should be met (or)
 *
 * @generated from extension: repeated string permissions = 50001;
 */
export declare const permissions: GenExtension<MethodOptions, string[]>;

/**
 * The expression to find the account ID field, which should be a string field.
 * It is allowed to nest fields with a point, like 'cluster.account_id' or 'account.id'
 * If the expression is set to an empty string, no account ID will be used.
 *
 * @generated from extension: string account_id_expression = 50002;
 */
export declare const account_id_expression: GenExtension<MethodOptions, string>;

/**
 * Set to allow a method to be used without authentication.
 *
 * @generated from extension: bool requires_authentication = 50003;
 */
export declare const requires_authentication: GenExtension<MethodOptions, boolean>;

/**
 * If this option is set, only the specified actor types are allowed to call the method.
 * If empty or not set, all authenticated actor types (that pass other permission checks) are allowed.
 *
 * @generated from extension: repeated qdrant.cloud.common.v1.ActorType supported_actor_types = 50004 [packed = true];
 */
export declare const supported_actor_types: GenExtension<MethodOptions, ActorType[]>;

/**
 * If set to true the provided permissions are ALL (and)
 * if set to false the provided permissions are ANY-OF (or).
 *
 * @generated from extension: bool requires_all_permissions = 50005;
 */
export declare const requires_all_permissions: GenExtension<MethodOptions, boolean>;

/**
 * The override of the default maximum message size in MB (per message).
 *
 * @generated from extension: int32 max_message_size = 50006;
 */
export declare const max_message_size: GenExtension<MethodOptions, number>;

/**
 * The fields to log.
 *
 * @generated from extension: repeated qdrant.cloud.common.v1.LogField log_fields = 50007;
 */
export declare const log_fields: GenExtension<MethodOptions, LogField[]>;

