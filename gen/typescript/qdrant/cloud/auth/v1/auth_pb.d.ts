// @generated by protoc-gen-es v2.9.0 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required"
// @generated from file qdrant/cloud/auth/v1/auth.proto (package qdrant.cloud.auth.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file qdrant/cloud/auth/v1/auth.proto.
 */
export declare const file_qdrant_cloud_auth_v1_auth: GenFile;

/**
 * ListManagementKeysRequest is the request for the ListManagementKeys function
 *
 * @generated from message qdrant.cloud.auth.v1.ListManagementKeysRequest
 */
export declare type ListManagementKeysRequest = Message<"qdrant.cloud.auth.v1.ListManagementKeysRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

export declare type ListManagementKeysRequestValid = ListManagementKeysRequest;

/**
 * Describes the message qdrant.cloud.auth.v1.ListManagementKeysRequest.
 * Use `create(ListManagementKeysRequestSchema)` to create a new message.
 */
export declare const ListManagementKeysRequestSchema: GenMessage<ListManagementKeysRequest, {validType: ListManagementKeysRequestValid}>;

/**
 * ListManagementKeysResponse is the response from the ListManagementKeys function
 *
 * @generated from message qdrant.cloud.auth.v1.ListManagementKeysResponse
 */
export declare type ListManagementKeysResponse = Message<"qdrant.cloud.auth.v1.ListManagementKeysResponse"> & {
  /**
   * The actual management keys in this list.
   *
   * @generated from field: repeated qdrant.cloud.auth.v1.ManagementKey items = 1;
   */
  items: ManagementKey[];
};

export declare type ListManagementKeysResponseValid = ListManagementKeysResponse;

/**
 * Describes the message qdrant.cloud.auth.v1.ListManagementKeysResponse.
 * Use `create(ListManagementKeysResponseSchema)` to create a new message.
 */
export declare const ListManagementKeysResponseSchema: GenMessage<ListManagementKeysResponse, {validType: ListManagementKeysResponseValid}>;

/**
 * CreateManagementKeyRequest is the request for the CreateManagementKey function
 *
 * @generated from message qdrant.cloud.auth.v1.CreateManagementKeyRequest
 */
export declare type CreateManagementKeyRequest = Message<"qdrant.cloud.auth.v1.CreateManagementKeyRequest"> & {
  /**
   * The actual management key.
   *
   * @generated from field: qdrant.cloud.auth.v1.ManagementKey management_key = 1;
   */
  managementKey?: ManagementKey;
};

/**
 * CreateManagementKeyRequest is the request for the CreateManagementKey function
 *
 * @generated from message qdrant.cloud.auth.v1.CreateManagementKeyRequest
 */
export declare type CreateManagementKeyRequestValid = Message<"qdrant.cloud.auth.v1.CreateManagementKeyRequest"> & {
  /**
   * The actual management key.
   *
   * @generated from field: qdrant.cloud.auth.v1.ManagementKey management_key = 1;
   */
  managementKey: ManagementKeyValid;
};

/**
 * Describes the message qdrant.cloud.auth.v1.CreateManagementKeyRequest.
 * Use `create(CreateManagementKeyRequestSchema)` to create a new message.
 */
export declare const CreateManagementKeyRequestSchema: GenMessage<CreateManagementKeyRequest, {validType: CreateManagementKeyRequestValid}>;

/**
 * CreateManagementKeyResponse is the response from the CreateManagementKey function
 *
 * @generated from message qdrant.cloud.auth.v1.CreateManagementKeyResponse
 */
export declare type CreateManagementKeyResponse = Message<"qdrant.cloud.auth.v1.CreateManagementKeyResponse"> & {
  /**
   * The actual management key.
   *
   * @generated from field: qdrant.cloud.auth.v1.ManagementKey management_key = 1;
   */
  managementKey?: ManagementKey;
};

/**
 * CreateManagementKeyResponse is the response from the CreateManagementKey function
 *
 * @generated from message qdrant.cloud.auth.v1.CreateManagementKeyResponse
 */
export declare type CreateManagementKeyResponseValid = Message<"qdrant.cloud.auth.v1.CreateManagementKeyResponse"> & {
  /**
   * The actual management key.
   *
   * @generated from field: qdrant.cloud.auth.v1.ManagementKey management_key = 1;
   */
  managementKey: ManagementKeyValid;
};

/**
 * Describes the message qdrant.cloud.auth.v1.CreateManagementKeyResponse.
 * Use `create(CreateManagementKeyResponseSchema)` to create a new message.
 */
export declare const CreateManagementKeyResponseSchema: GenMessage<CreateManagementKeyResponse, {validType: CreateManagementKeyResponseValid}>;

/**
 * DeleteManagementKeyRequest is the request for the DeleteManagementKey function
 *
 * @generated from message qdrant.cloud.auth.v1.DeleteManagementKeyRequest
 */
export declare type DeleteManagementKeyRequest = Message<"qdrant.cloud.auth.v1.DeleteManagementKeyRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the management key (in GUID format).
   * This is a required field.
   *
   * @generated from field: string management_key_id = 2;
   */
  managementKeyId: string;
};

export declare type DeleteManagementKeyRequestValid = DeleteManagementKeyRequest;

/**
 * Describes the message qdrant.cloud.auth.v1.DeleteManagementKeyRequest.
 * Use `create(DeleteManagementKeyRequestSchema)` to create a new message.
 */
export declare const DeleteManagementKeyRequestSchema: GenMessage<DeleteManagementKeyRequest, {validType: DeleteManagementKeyRequestValid}>;

/**
 * DeleteManagementKeyResponse is the response from the DeleteManagementKey function
 *
 * Empty
 *
 * @generated from message qdrant.cloud.auth.v1.DeleteManagementKeyResponse
 */
export declare type DeleteManagementKeyResponse = Message<"qdrant.cloud.auth.v1.DeleteManagementKeyResponse"> & {
};

export declare type DeleteManagementKeyResponseValid = DeleteManagementKeyResponse;

/**
 * Describes the message qdrant.cloud.auth.v1.DeleteManagementKeyResponse.
 * Use `create(DeleteManagementKeyResponseSchema)` to create a new message.
 */
export declare const DeleteManagementKeyResponseSchema: GenMessage<DeleteManagementKeyResponse, {validType: DeleteManagementKeyResponseValid}>;

/**
 * A ManagementKey represents a management key of a Qdrant Cloud account.
 * This management key grants access to the Qdrant Cloud API.
 *
 * @generated from message qdrant.cloud.auth.v1.ManagementKey
 */
export declare type ManagementKey = Message<"qdrant.cloud.auth.v1.ManagementKey"> & {
  /**
   * Unique identifier for the management key (in GUID format).
   * This is a read-only field and will be available after a management key is created.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 2;
   */
  accountId: string;

  /**
   * Timestamp when the management key was created.
   * This is a read-only field and will be available after a management key is created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * Prefix for the management key, this represents the first bytes of the key.
   * This is a read-only field and will be available after a management key is created.
   *
   * @generated from field: string prefix = 4;
   */
  prefix: string;

  /**
   * The value of the key, to be used to authenticate requests to the Qdrant Cloud API.
   * This is a read-only field and will be available only once in the response of CreateManagementKey.
   * You should securely store this key and it should be handled as a secret.
   *
   * @generated from field: string key = 5;
   */
  key: string;
};

export declare type ManagementKeyValid = ManagementKey;

/**
 * Describes the message qdrant.cloud.auth.v1.ManagementKey.
 * Use `create(ManagementKeySchema)` to create a new message.
 */
export declare const ManagementKeySchema: GenMessage<ManagementKey, {validType: ManagementKeyValid}>;

/**
 * AuthService is the API used to manage the authentication settings (like management keys) for Qdrant Cloud.
 *
 * @generated from service qdrant.cloud.auth.v1.AuthService
 */
export declare const AuthService: GenService<{
  /**
   * Lists all management keys in the account identified by the given ID.
   * Required permissions:
   * - read:management_keys
   *
   * @generated from rpc qdrant.cloud.auth.v1.AuthService.ListManagementKeys
   */
  listManagementKeys: {
    methodKind: "unary";
    input: typeof ListManagementKeysRequestSchema;
    output: typeof ListManagementKeysResponseSchema;
  },
  /**
   * Creates a management key in the account identified by the given ID.
   * Required permissions:
   * - write:management_keys
   *
   * @generated from rpc qdrant.cloud.auth.v1.AuthService.CreateManagementKey
   */
  createManagementKey: {
    methodKind: "unary";
    input: typeof CreateManagementKeyRequestSchema;
    output: typeof CreateManagementKeyResponseSchema;
  },
  /**
   * Deletes a management key in the account identified by the given ID.
   * Required permissions:
   * - delete:management_keys
   *
   * @generated from rpc qdrant.cloud.auth.v1.AuthService.DeleteManagementKey
   */
  deleteManagementKey: {
    methodKind: "unary";
    input: typeof DeleteManagementKeyRequestSchema;
    output: typeof DeleteManagementKeyResponseSchema;
  },
}>;

