// @generated by protoc-gen-es v2.10.0 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required,buf_validate=true"
// @generated from file qdrant/cloud/serverless/collection/v1/collection_config.proto (package qdrant.cloud.serverless.collection.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file qdrant/cloud/serverless/collection/v1/collection_config.proto.
 */
export declare const file_qdrant_cloud_serverless_collection_v1_collection_config: GenFile;

/**
 * CollectionConfiguration defines the structure and settings for a collection
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.CollectionConfiguration
 */
export declare type CollectionConfiguration = Message<"qdrant.cloud.serverless.collection.v1.CollectionConfiguration"> & {
  /**
   * Field name used for tenant isolation
   *
   * @generated from field: optional string tenant_key = 1;
   */
  tenantKey?: string;

  /**
   * Map of dense vector configurations with field name as key
   *
   * @generated from field: map<string, qdrant.cloud.serverless.collection.v1.DenseVectorConfiguration> dense_vectors = 2;
   */
  denseVectors: { [key: string]: DenseVectorConfiguration };

  /**
   * Map of sparse vector configurations with field name as key
   *
   * @generated from field: map<string, qdrant.cloud.serverless.collection.v1.SparseVectorConfiguration> sparse_vectors = 3;
   */
  sparseVectors: { [key: string]: SparseVectorConfiguration };

  /**
   * Schema definition for payload fields
   *
   * @generated from field: map<string, qdrant.cloud.serverless.collection.v1.PayloadFieldSchema> payload_schema = 4;
   */
  payloadSchema: { [key: string]: PayloadFieldSchema };
};

/**
 * CollectionConfiguration defines the structure and settings for a collection
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.CollectionConfiguration
 */
export declare type CollectionConfigurationValid = Message<"qdrant.cloud.serverless.collection.v1.CollectionConfiguration"> & {
  /**
   * Field name used for tenant isolation
   *
   * @generated from field: optional string tenant_key = 1;
   */
  tenantKey?: string;

  /**
   * Map of dense vector configurations with field name as key
   *
   * @generated from field: map<string, qdrant.cloud.serverless.collection.v1.DenseVectorConfiguration> dense_vectors = 2;
   */
  denseVectors: { [key: string]: DenseVectorConfigurationValid };

  /**
   * Map of sparse vector configurations with field name as key
   *
   * @generated from field: map<string, qdrant.cloud.serverless.collection.v1.SparseVectorConfiguration> sparse_vectors = 3;
   */
  sparseVectors: { [key: string]: SparseVectorConfigurationValid };

  /**
   * Schema definition for payload fields
   *
   * @generated from field: map<string, qdrant.cloud.serverless.collection.v1.PayloadFieldSchema> payload_schema = 4;
   */
  payloadSchema: { [key: string]: PayloadFieldSchemaValid };
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.CollectionConfiguration.
 * Use `create(CollectionConfigurationSchema)` to create a new message.
 */
export declare const CollectionConfigurationSchema: GenMessage<CollectionConfiguration, {validType: CollectionConfigurationValid}>;

/**
 * DenseVectorConfiguration defines the settings for dense vector fields
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.DenseVectorConfiguration
 */
export declare type DenseVectorConfiguration = Message<"qdrant.cloud.serverless.collection.v1.DenseVectorConfiguration"> & {
  /**
   * The dimensionality of the vector space
   *
   * @generated from field: int32 dimension = 1;
   */
  dimension: number;

  /**
   * The distance metric used for vector similarity calculations
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.DistanceMetric distance = 2;
   */
  distance: DistanceMetric;

  /**
   * Whether to use multi-vector storage for this configuration
   *
   * @generated from field: optional bool multivector = 3;
   */
  multivector?: boolean;

  /**
   * Whether to enable rescoring for search results
   *
   * @generated from field: optional bool rescoring = 4;
   */
  rescoring?: boolean;

  /**
   * The storage performance tier to use.
   *
   * @generated from field: optional qdrant.cloud.serverless.collection.v1.StorageTier storage_tier = 5;
   */
  storageTier?: StorageTier;

  /**
   * The precision level for vector operations.
   *
   * @generated from field: optional qdrant.cloud.serverless.collection.v1.PrecisionTier precision_tier = 6;
   */
  precisionTier?: PrecisionTier;
};

/**
 * DenseVectorConfiguration defines the settings for dense vector fields
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.DenseVectorConfiguration
 */
export declare type DenseVectorConfigurationValid = Message<"qdrant.cloud.serverless.collection.v1.DenseVectorConfiguration"> & {
  /**
   * The dimensionality of the vector space
   *
   * @generated from field: int32 dimension = 1;
   */
  dimension: number;

  /**
   * The distance metric used for vector similarity calculations
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.DistanceMetric distance = 2;
   */
  distance: DistanceMetric;

  /**
   * Whether to use multi-vector storage for this configuration
   *
   * @generated from field: optional bool multivector = 3;
   */
  multivector?: boolean;

  /**
   * Whether to enable rescoring for search results
   *
   * @generated from field: optional bool rescoring = 4;
   */
  rescoring?: boolean;

  /**
   * The storage performance tier to use.
   *
   * @generated from field: optional qdrant.cloud.serverless.collection.v1.StorageTier storage_tier = 5;
   */
  storageTier?: StorageTier;

  /**
   * The precision level for vector operations.
   *
   * @generated from field: optional qdrant.cloud.serverless.collection.v1.PrecisionTier precision_tier = 6;
   */
  precisionTier?: PrecisionTier;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.DenseVectorConfiguration.
 * Use `create(DenseVectorConfigurationSchema)` to create a new message.
 */
export declare const DenseVectorConfigurationSchema: GenMessage<DenseVectorConfiguration, {validType: DenseVectorConfigurationValid}>;

/**
 * SparseVectorConfiguration defines the settings for sparse vector fields
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.SparseVectorConfiguration
 */
export declare type SparseVectorConfiguration = Message<"qdrant.cloud.serverless.collection.v1.SparseVectorConfiguration"> & {
  /**
   * The precision level for vector operations.
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.PrecisionTier precision_tier = 1;
   */
  precisionTier: PrecisionTier;

  /**
   * Vector value modification approach
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.VectorModifier modifier = 2;
   */
  modifier: VectorModifier;
};

/**
 * SparseVectorConfiguration defines the settings for sparse vector fields
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.SparseVectorConfiguration
 */
export declare type SparseVectorConfigurationValid = Message<"qdrant.cloud.serverless.collection.v1.SparseVectorConfiguration"> & {
  /**
   * The precision level for vector operations.
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.PrecisionTier precision_tier = 1;
   */
  precisionTier: PrecisionTier;

  /**
   * Vector value modification approach
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.VectorModifier modifier = 2;
   */
  modifier: VectorModifier;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.SparseVectorConfiguration.
 * Use `create(SparseVectorConfigurationSchema)` to create a new message.
 */
export declare const SparseVectorConfigurationSchema: GenMessage<SparseVectorConfiguration, {validType: SparseVectorConfigurationValid}>;

/**
 * KeywordIndexParams defines parameters for keyword indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.KeywordIndexParams
 */
export declare type KeywordIndexParams = Message<"qdrant.cloud.serverless.collection.v1.KeywordIndexParams"> & {
  /**
   * Whether this field is used as tenant identifier
   *
   * @generated from field: optional bool is_tenant = 1;
   */
  isTenant?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * KeywordIndexParams defines parameters for keyword indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.KeywordIndexParams
 */
export declare type KeywordIndexParamsValid = Message<"qdrant.cloud.serverless.collection.v1.KeywordIndexParams"> & {
  /**
   * Whether this field is used as tenant identifier
   *
   * @generated from field: optional bool is_tenant = 1;
   */
  isTenant?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.KeywordIndexParams.
 * Use `create(KeywordIndexParamsSchema)` to create a new message.
 */
export declare const KeywordIndexParamsSchema: GenMessage<KeywordIndexParams, {validType: KeywordIndexParamsValid}>;

/**
 * IntegerIndexParams defines parameters for integer indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.IntegerIndexParams
 */
export declare type IntegerIndexParams = Message<"qdrant.cloud.serverless.collection.v1.IntegerIndexParams"> & {
  /**
   * Enable lookup operations
   *
   * @generated from field: optional bool lookup = 1;
   */
  lookup?: boolean;

  /**
   * Enable range queries
   *
   * @generated from field: optional bool range = 2;
   */
  range?: boolean;

  /**
   * Whether this is a principal field
   *
   * @generated from field: optional bool is_principal = 3;
   */
  isPrincipal?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 4;
   */
  onDisk?: boolean;
};

/**
 * IntegerIndexParams defines parameters for integer indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.IntegerIndexParams
 */
export declare type IntegerIndexParamsValid = Message<"qdrant.cloud.serverless.collection.v1.IntegerIndexParams"> & {
  /**
   * Enable lookup operations
   *
   * @generated from field: optional bool lookup = 1;
   */
  lookup?: boolean;

  /**
   * Enable range queries
   *
   * @generated from field: optional bool range = 2;
   */
  range?: boolean;

  /**
   * Whether this is a principal field
   *
   * @generated from field: optional bool is_principal = 3;
   */
  isPrincipal?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 4;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.IntegerIndexParams.
 * Use `create(IntegerIndexParamsSchema)` to create a new message.
 */
export declare const IntegerIndexParamsSchema: GenMessage<IntegerIndexParams, {validType: IntegerIndexParamsValid}>;

/**
 * FloatIndexParams defines parameters for float indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.FloatIndexParams
 */
export declare type FloatIndexParams = Message<"qdrant.cloud.serverless.collection.v1.FloatIndexParams"> & {
  /**
   * Whether this is a principal field
   *
   * @generated from field: optional bool is_principal = 1;
   */
  isPrincipal?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * FloatIndexParams defines parameters for float indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.FloatIndexParams
 */
export declare type FloatIndexParamsValid = Message<"qdrant.cloud.serverless.collection.v1.FloatIndexParams"> & {
  /**
   * Whether this is a principal field
   *
   * @generated from field: optional bool is_principal = 1;
   */
  isPrincipal?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.FloatIndexParams.
 * Use `create(FloatIndexParamsSchema)` to create a new message.
 */
export declare const FloatIndexParamsSchema: GenMessage<FloatIndexParams, {validType: FloatIndexParamsValid}>;

/**
 * GeoIndexParams defines parameters for geographical indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.GeoIndexParams
 */
export declare type GeoIndexParams = Message<"qdrant.cloud.serverless.collection.v1.GeoIndexParams"> & {
  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 1;
   */
  onDisk?: boolean;
};

/**
 * GeoIndexParams defines parameters for geographical indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.GeoIndexParams
 */
export declare type GeoIndexParamsValid = Message<"qdrant.cloud.serverless.collection.v1.GeoIndexParams"> & {
  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 1;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.GeoIndexParams.
 * Use `create(GeoIndexParamsSchema)` to create a new message.
 */
export declare const GeoIndexParamsSchema: GenMessage<GeoIndexParams, {validType: GeoIndexParamsValid}>;

/**
 * TextIndexParams defines parameters for text indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.TextIndexParams
 */
export declare type TextIndexParams = Message<"qdrant.cloud.serverless.collection.v1.TextIndexParams"> & {
  /**
   * Tokenization strategy
   *
   * @generated from field: optional qdrant.cloud.serverless.collection.v1.Tokenizer tokenizer = 1;
   */
  tokenizer?: Tokenizer;

  /**
   * Minimum token length to index
   *
   * @generated from field: optional int32 min_token_len = 2;
   */
  minTokenLen?: number;

  /**
   * Maximum token length to index
   *
   * @generated from field: optional int32 max_token_len = 3;
   */
  maxTokenLen?: number;

  /**
   * Whether to lowercase text before indexing
   *
   * @generated from field: optional bool lowercase = 4;
   */
  lowercase?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 5;
   */
  onDisk?: boolean;
};

/**
 * TextIndexParams defines parameters for text indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.TextIndexParams
 */
export declare type TextIndexParamsValid = Message<"qdrant.cloud.serverless.collection.v1.TextIndexParams"> & {
  /**
   * Tokenization strategy
   *
   * @generated from field: optional qdrant.cloud.serverless.collection.v1.Tokenizer tokenizer = 1;
   */
  tokenizer?: Tokenizer;

  /**
   * Minimum token length to index
   *
   * @generated from field: optional int32 min_token_len = 2;
   */
  minTokenLen?: number;

  /**
   * Maximum token length to index
   *
   * @generated from field: optional int32 max_token_len = 3;
   */
  maxTokenLen?: number;

  /**
   * Whether to lowercase text before indexing
   *
   * @generated from field: optional bool lowercase = 4;
   */
  lowercase?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 5;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.TextIndexParams.
 * Use `create(TextIndexParamsSchema)` to create a new message.
 */
export declare const TextIndexParamsSchema: GenMessage<TextIndexParams, {validType: TextIndexParamsValid}>;

/**
 * BoolIndexParams defines parameters for boolean indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.BoolIndexParams
 */
export declare type BoolIndexParams = Message<"qdrant.cloud.serverless.collection.v1.BoolIndexParams"> & {
  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 1;
   */
  onDisk?: boolean;
};

/**
 * BoolIndexParams defines parameters for boolean indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.BoolIndexParams
 */
export declare type BoolIndexParamsValid = Message<"qdrant.cloud.serverless.collection.v1.BoolIndexParams"> & {
  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 1;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.BoolIndexParams.
 * Use `create(BoolIndexParamsSchema)` to create a new message.
 */
export declare const BoolIndexParamsSchema: GenMessage<BoolIndexParams, {validType: BoolIndexParamsValid}>;

/**
 * DatetimeIndexParams defines parameters for datetime indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.DatetimeIndexParams
 */
export declare type DatetimeIndexParams = Message<"qdrant.cloud.serverless.collection.v1.DatetimeIndexParams"> & {
  /**
   * Whether this is a principal field
   *
   * @generated from field: optional bool is_principal = 1;
   */
  isPrincipal?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * DatetimeIndexParams defines parameters for datetime indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.DatetimeIndexParams
 */
export declare type DatetimeIndexParamsValid = Message<"qdrant.cloud.serverless.collection.v1.DatetimeIndexParams"> & {
  /**
   * Whether this is a principal field
   *
   * @generated from field: optional bool is_principal = 1;
   */
  isPrincipal?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.DatetimeIndexParams.
 * Use `create(DatetimeIndexParamsSchema)` to create a new message.
 */
export declare const DatetimeIndexParamsSchema: GenMessage<DatetimeIndexParams, {validType: DatetimeIndexParamsValid}>;

/**
 * UuidIndexParams defines parameters for UUID indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.UuidIndexParams
 */
export declare type UuidIndexParams = Message<"qdrant.cloud.serverless.collection.v1.UuidIndexParams"> & {
  /**
   * Whether this field is used as tenant identifier
   *
   * @generated from field: optional bool is_tenant = 1;
   */
  isTenant?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * UuidIndexParams defines parameters for UUID indexing
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.UuidIndexParams
 */
export declare type UuidIndexParamsValid = Message<"qdrant.cloud.serverless.collection.v1.UuidIndexParams"> & {
  /**
   * Whether this field is used as tenant identifier
   *
   * @generated from field: optional bool is_tenant = 1;
   */
  isTenant?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.UuidIndexParams.
 * Use `create(UuidIndexParamsSchema)` to create a new message.
 */
export declare const UuidIndexParamsSchema: GenMessage<UuidIndexParams, {validType: UuidIndexParamsValid}>;

/**
 * Describes the schema for a payload field
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.PayloadFieldSchema
 */
export declare type PayloadFieldSchema = Message<"qdrant.cloud.serverless.collection.v1.PayloadFieldSchema"> & {
  /**
   * Oneof for index parameters
   *
   * @generated from oneof qdrant.cloud.serverless.collection.v1.PayloadFieldSchema.index_params
   */
  indexParams: {
    /**
     * Keyword index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.KeywordIndexParams keyword = 1;
     */
    value: KeywordIndexParams;
    case: "keyword";
  } | {
    /**
     * Integer index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.IntegerIndexParams integer = 2;
     */
    value: IntegerIndexParams;
    case: "integer";
  } | {
    /**
     * Float index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.FloatIndexParams float = 3;
     */
    value: FloatIndexParams;
    case: "float";
  } | {
    /**
     * Geo Index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.GeoIndexParams geo = 4;
     */
    value: GeoIndexParams;
    case: "geo";
  } | {
    /**
     * Text index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.TextIndexParams text = 5;
     */
    value: TextIndexParams;
    case: "text";
  } | {
    /**
     * Boolean index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.BoolIndexParams bool = 6;
     */
    value: BoolIndexParams;
    case: "bool";
  } | {
    /**
     * Datetime index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.DatetimeIndexParams datetime = 7;
     */
    value: DatetimeIndexParams;
    case: "datetime";
  } | {
    /**
     * UUID index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.UuidIndexParams uuid = 8;
     */
    value: UuidIndexParams;
    case: "uuid";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the schema for a payload field
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.PayloadFieldSchema
 */
export declare type PayloadFieldSchemaValid = Message<"qdrant.cloud.serverless.collection.v1.PayloadFieldSchema"> & {
  /**
   * Oneof for index parameters
   *
   * @generated from oneof qdrant.cloud.serverless.collection.v1.PayloadFieldSchema.index_params
   */
  indexParams: {
    /**
     * Keyword index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.KeywordIndexParams keyword = 1;
     */
    value: KeywordIndexParamsValid;
    case: "keyword";
  } | {
    /**
     * Integer index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.IntegerIndexParams integer = 2;
     */
    value: IntegerIndexParamsValid;
    case: "integer";
  } | {
    /**
     * Float index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.FloatIndexParams float = 3;
     */
    value: FloatIndexParamsValid;
    case: "float";
  } | {
    /**
     * Geo Index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.GeoIndexParams geo = 4;
     */
    value: GeoIndexParamsValid;
    case: "geo";
  } | {
    /**
     * Text index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.TextIndexParams text = 5;
     */
    value: TextIndexParamsValid;
    case: "text";
  } | {
    /**
     * Boolean index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.BoolIndexParams bool = 6;
     */
    value: BoolIndexParamsValid;
    case: "bool";
  } | {
    /**
     * Datetime index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.DatetimeIndexParams datetime = 7;
     */
    value: DatetimeIndexParamsValid;
    case: "datetime";
  } | {
    /**
     * UUID index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collection.v1.UuidIndexParams uuid = 8;
     */
    value: UuidIndexParamsValid;
    case: "uuid";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.PayloadFieldSchema.
 * Use `create(PayloadFieldSchemaSchema)` to create a new message.
 */
export declare const PayloadFieldSchemaSchema: GenMessage<PayloadFieldSchema, {validType: PayloadFieldSchemaValid}>;

/**
 * DistanceMetric defines the possible distance metrics used in DenseVectorConfiguration.
 *
 * @generated from enum qdrant.cloud.serverless.collection.v1.DistanceMetric
 */
export enum DistanceMetric {
  /**
   * Unspecified distance metric.
   *
   * @generated from enum value: DISTANCE_METRIC_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Cosine similarity.
   *
   * @generated from enum value: DISTANCE_METRIC_COSINE = 1;
   */
  COSINE = 1,

  /**
   * Euclidean distance.
   *
   * @generated from enum value: DISTANCE_METRIC_EUCLID = 2;
   */
  EUCLID = 2,

  /**
   * Dot product.
   *
   * @generated from enum value: DISTANCE_METRIC_DOT = 3;
   */
  DOT = 3,

  /**
   * Manhattan distance.
   *
   * @generated from enum value: DISTANCE_METRIC_MANHATTAN = 4;
   */
  MANHATTAN = 4,
}

/**
 * Describes the enum qdrant.cloud.serverless.collection.v1.DistanceMetric.
 */
export declare const DistanceMetricSchema: GenEnum<DistanceMetric>;

/**
 * StorageTier defines the possible storage performance tiers used in DenseVectorConfiguration.
 *
 * @generated from enum qdrant.cloud.serverless.collection.v1.StorageTier
 */
export enum StorageTier {
  /**
   * Unspecified storage tier.
   *
   * @generated from enum value: STORAGE_TIER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Storage tier.
   *
   * @generated from enum value: STORAGE_TIER_STORAGE = 1;
   */
  STORAGE = 1,

  /**
   * Balanced tier.
   *
   * @generated from enum value: STORAGE_TIER_BALANCED = 2;
   */
  BALANCED = 2,

  /**
   * Performance tier.
   *
   * @generated from enum value: STORAGE_TIER_PERFORMANCE = 3;
   */
  PERFORMANCE = 3,
}

/**
 * Describes the enum qdrant.cloud.serverless.collection.v1.StorageTier.
 */
export declare const StorageTierSchema: GenEnum<StorageTier>;

/**
 * PrecisionTier defines the level of precision for vector operations.
 *
 * @generated from enum qdrant.cloud.serverless.collection.v1.PrecisionTier
 */
export enum PrecisionTier {
  /**
   * Unspecified precision level.
   *
   * @generated from enum value: PRECISION_TIER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Low precision.
   *
   * @generated from enum value: PRECISION_TIER_LOW = 1;
   */
  LOW = 1,

  /**
   * Medium precision.
   *
   * @generated from enum value: PRECISION_TIER_MEDIUM = 2;
   */
  MEDIUM = 2,

  /**
   * High precision.
   *
   * @generated from enum value: PRECISION_TIER_HIGH = 3;
   */
  HIGH = 3,
}

/**
 * Describes the enum qdrant.cloud.serverless.collection.v1.PrecisionTier.
 */
export declare const PrecisionTierSchema: GenEnum<PrecisionTier>;

/**
 * VectorModifier defines the transformations to apply to vectors.
 *
 * @generated from enum qdrant.cloud.serverless.collection.v1.VectorModifier
 */
export enum VectorModifier {
  /**
   * Unspecified modifier.
   *
   * @generated from enum value: VECTOR_MODIFIER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * No modifications.
   *
   * @generated from enum value: VECTOR_MODIFIER_NONE = 1;
   */
  NONE = 1,

  /**
   * Inverse Document Frequency (IDF).
   *
   * @generated from enum value: VECTOR_MODIFIER_IDF = 2;
   */
  IDF = 2,
}

/**
 * Describes the enum qdrant.cloud.serverless.collection.v1.VectorModifier.
 */
export declare const VectorModifierSchema: GenEnum<VectorModifier>;

/**
 * Tokenizer defines the strategies for tokenizing text during indexing.
 *
 * @generated from enum qdrant.cloud.serverless.collection.v1.Tokenizer
 */
export enum Tokenizer {
  /**
   * Unspecified tokenizer.
   *
   * @generated from enum value: TOKENIZER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Prefix tokenizer.
   *
   * @generated from enum value: TOKENIZER_PREFIX = 1;
   */
  PREFIX = 1,

  /**
   * Whitespace tokenizer.
   *
   * @generated from enum value: TOKENIZER_WHITESPACE = 2;
   */
  WHITESPACE = 2,

  /**
   * Word tokenizer.
   *
   * @generated from enum value: TOKENIZER_WORD = 3;
   */
  WORD = 3,

  /**
   * Multilingual tokenizer.
   *
   * @generated from enum value: TOKENIZER_MULTILINGUAL = 4;
   */
  MULTILINGUAL = 4,
}

/**
 * Describes the enum qdrant.cloud.serverless.collection.v1.Tokenizer.
 */
export declare const TokenizerSchema: GenEnum<Tokenizer>;

