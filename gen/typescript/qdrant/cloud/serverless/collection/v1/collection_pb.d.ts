// @generated by protoc-gen-es v2.5.2 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/serverless/collection/v1/collection.proto (package qdrant.cloud.serverless.collection.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { CollectionConfiguration } from "./collection_config_pb.js";

/**
 * Describes the file qdrant/cloud/serverless/collection/v1/collection.proto.
 */
export declare const file_qdrant_cloud_serverless_collection_v1_collection: GenFile;

/**
 * ListCollectionsRequest is an empty request to list collections
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.ListCollectionsRequest
 */
export declare type ListCollectionsRequest = Message<"qdrant.cloud.serverless.collection.v1.ListCollectionsRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.ListCollectionsRequest.
 * Use `create(ListCollectionsRequestSchema)` to create a new message.
 */
export declare const ListCollectionsRequestSchema: GenMessage<ListCollectionsRequest>;

/**
 * ListCollectionsResponse contains the list of collections
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.ListCollectionsResponse
 */
export declare type ListCollectionsResponse = Message<"qdrant.cloud.serverless.collection.v1.ListCollectionsResponse"> & {
  /**
   * List of collections with their details
   *
   * @generated from field: repeated qdrant.cloud.serverless.collection.v1.Collection collections = 1;
   */
  collections: Collection[];
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.ListCollectionsResponse.
 * Use `create(ListCollectionsResponseSchema)` to create a new message.
 */
export declare const ListCollectionsResponseSchema: GenMessage<ListCollectionsResponse>;

/**
 * CreateCollectionRequest defines parameters for creating a new collection
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.CreateCollectionRequest
 */
export declare type CreateCollectionRequest = Message<"qdrant.cloud.serverless.collection.v1.CreateCollectionRequest"> & {
  /**
   * Collection represents a vector search collection in the Qdrant serverless environment
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.Collection collection = 1;
   */
  collection?: Collection;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.CreateCollectionRequest.
 * Use `create(CreateCollectionRequestSchema)` to create a new message.
 */
export declare const CreateCollectionRequestSchema: GenMessage<CreateCollectionRequest>;

/**
 * CollectionResponse provides details about a created collection
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.CreateCollectionResponse
 */
export declare type CreateCollectionResponse = Message<"qdrant.cloud.serverless.collection.v1.CreateCollectionResponse"> & {
  /**
   * Collection represents a vector search collection in the Qdrant serverless environment
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.Collection collection = 1;
   */
  collection?: Collection;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.CreateCollectionResponse.
 * Use `create(CreateCollectionResponseSchema)` to create a new message.
 */
export declare const CreateCollectionResponseSchema: GenMessage<CreateCollectionResponse>;

/**
 * Upgrade limits of the specified collection
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.UpgradeCollectionRequest
 */
export declare type UpgradeCollectionRequest = Message<"qdrant.cloud.serverless.collection.v1.UpgradeCollectionRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * ID of the collection to upgrade (in GUID format).
   * This is a required field.
   *
   * @generated from field: string collection_id = 2;
   */
  collectionId: string;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.UpgradeCollectionRequest.
 * Use `create(UpgradeCollectionRequestSchema)` to create a new message.
 */
export declare const UpgradeCollectionRequestSchema: GenMessage<UpgradeCollectionRequest>;

/**
 * Response for upgrading collection
 *
 * Empty
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.UpgradeCollectionResponse
 */
export declare type UpgradeCollectionResponse = Message<"qdrant.cloud.serverless.collection.v1.UpgradeCollectionResponse"> & {
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.UpgradeCollectionResponse.
 * Use `create(UpgradeCollectionResponseSchema)` to create a new message.
 */
export declare const UpgradeCollectionResponseSchema: GenMessage<UpgradeCollectionResponse>;

/**
 * DeleteCollectionRequest identifies the collection to delete
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.DeleteCollectionRequest
 */
export declare type DeleteCollectionRequest = Message<"qdrant.cloud.serverless.collection.v1.DeleteCollectionRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * ID of the collection to delete (in GUID format).
   * This is a required field.
   *
   * @generated from field: string collection_id = 2;
   */
  collectionId: string;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.DeleteCollectionRequest.
 * Use `create(DeleteCollectionRequestSchema)` to create a new message.
 */
export declare const DeleteCollectionRequestSchema: GenMessage<DeleteCollectionRequest>;

/**
 * DeleteCollectionResponse is an empty response for deletion confirmation
 *
 * Empty
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.DeleteCollectionResponse
 */
export declare type DeleteCollectionResponse = Message<"qdrant.cloud.serverless.collection.v1.DeleteCollectionResponse"> & {
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.DeleteCollectionResponse.
 * Use `create(DeleteCollectionResponseSchema)` to create a new message.
 */
export declare const DeleteCollectionResponseSchema: GenMessage<DeleteCollectionResponse>;

/**
 * Collection represents a vector search collection in the Qdrant serverless environment
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.Collection
 */
export declare type Collection = Message<"qdrant.cloud.serverless.collection.v1.Collection"> & {
  /**
   * Unique identifier for the collection (in GUID format).
   * This is a read-only field and will be available after a collection is created.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Timestamp when the collection was created.
   * This is a read-only field and will be available after a collection is created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * Identifier of the account associated with the collection (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 3;
   */
  accountId: string;

  /**
   * Name of the collection.
   * This is a required field.
   * Name can only contain letters, numbers, underscores and dashes
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * Timestamp when the collection was deleted (or is started to be deleting).
   * This is a read-only field and will be set after DeleteCollection is called.
   *
   * @generated from field: google.protobuf.Timestamp deleted_at = 5;
   */
  deletedAt?: Timestamp;

  /**
   * Cloud provider where the collection is hosted.
   * Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviders` method.
   * In this case, `hybrid` isn't supported.
   * After creation, this field cannot be changed.
   *
   * @generated from field: string cloud_provider_id = 10;
   */
  cloudProviderId: string;

  /**
   * Cloud provider region where the collection is hosted.
   * Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions` method.
   * After creation, this field cannot be changed.
   *
   * @generated from field: string cloud_provider_region_id = 11;
   */
  cloudProviderRegionId: string;

  /**
   * Configuration parameters
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.CollectionConfiguration configuration = 20;
   */
  configuration?: CollectionConfiguration;

  /**
   * Status of the collection
   * All fields inside `state` are read-only.
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.CollectionState state = 100;
   */
  state?: CollectionState;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.Collection.
 * Use `create(CollectionSchema)` to create a new message.
 */
export declare const CollectionSchema: GenMessage<Collection>;

/**
 * CollectionState represents the operational state of a collection in the Qdrant serverless environment.
 * It provides status information, error details (if any), and endpoint access information.
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.CollectionState
 */
export declare type CollectionState = Message<"qdrant.cloud.serverless.collection.v1.CollectionState"> & {
  /**
   * The current operational status of the collection.
   *
   * @generated from field: qdrant.cloud.serverless.collection.v1.CollectionStatePhase phase = 1;
   */
  phase: CollectionStatePhase;

  /**
   * Descriptive message explaining any errors or issues with the collection.
   * Empty when the collection is operating normally.
   *
   * @generated from field: string reason = 2;
   */
  reason: string;

  /**
   * The URL endpoint where clients can connect to and interact with the collection.
   * Not set if the collection is not yet ready or is disabled.
   *
   * @generated from field: optional qdrant.cloud.serverless.collection.v1.CollectionEndpoint endpoint = 7;
   */
  endpoint?: CollectionEndpoint;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.CollectionState.
 * Use `create(CollectionStateSchema)` to create a new message.
 */
export declare const CollectionStateSchema: GenMessage<CollectionState>;

/**
 * Endpoint information to access the qdrant collection (aka serverless database).
 * All fields in this message are a read-only field.
 *
 * @generated from message qdrant.cloud.serverless.collection.v1.CollectionEndpoint
 */
export declare type CollectionEndpoint = Message<"qdrant.cloud.serverless.collection.v1.CollectionEndpoint"> & {
  /**
   * URL to access the qdrant collection (aka serverless database) without port
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * The port to use for HTTP REST calls (6333)
   *
   * @generated from field: int32 rest_port = 2;
   */
  restPort: number;

  /**
   * The port to use for gRPC calls (6334)
   *
   * @generated from field: int32 grpc_port = 3;
   */
  grpcPort: number;
};

/**
 * Describes the message qdrant.cloud.serverless.collection.v1.CollectionEndpoint.
 * Use `create(CollectionEndpointSchema)` to create a new message.
 */
export declare const CollectionEndpointSchema: GenMessage<CollectionEndpoint>;

/**
 * CollectionStatePhase defines the operational phases of a Qdrant collection.
 *
 * @generated from enum qdrant.cloud.serverless.collection.v1.CollectionStatePhase
 */
export enum CollectionStatePhase {
  /**
   * Unspecified phase.
   *
   * @generated from enum value: COLLECTION_STATE_PHASE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The Collection is fully operational and available for use.
   *
   * @generated from enum value: COLLECTION_STATE_PHASE_READY = 1;
   */
  READY = 1,

  /**
   * The Collection is being created, updated, or undergoing maintenance.
   *
   * @generated from enum value: COLLECTION_STATE_PHASE_PROCESSING = 2;
   */
  PROCESSING = 2,

  /**
   * The Collection has been temporarily or permanently disabled.
   *
   * @generated from enum value: COLLECTION_STATE_PHASE_DISABLED = 3;
   */
  DISABLED = 3,
}

/**
 * Describes the enum qdrant.cloud.serverless.collection.v1.CollectionStatePhase.
 */
export declare const CollectionStatePhaseSchema: GenEnum<CollectionStatePhase>;

/**
 * CollectionService provides operations for managing collections
 *
 * @generated from service qdrant.cloud.serverless.collection.v1.CollectionService
 */
export declare const CollectionService: GenService<{
  /**
   * ListCollections returns all collections for the authenticated user
   * Required Permissions:
   * - read:serverless
   *
   * @generated from rpc qdrant.cloud.serverless.collection.v1.CollectionService.ListCollections
   */
  listCollections: {
    methodKind: "unary";
    input: typeof ListCollectionsRequestSchema;
    output: typeof ListCollectionsResponseSchema;
  },
  /**
   * CreateCollection creates a new collection with the specified configuration
   * Required Permissions:
   * - write:serverless
   *
   * @generated from rpc qdrant.cloud.serverless.collection.v1.CollectionService.CreateCollection
   */
  createCollection: {
    methodKind: "unary";
    input: typeof CreateCollectionRequestSchema;
    output: typeof CreateCollectionResponseSchema;
  },
  /**
   * Upgrade collection: If current user have paid account, this API will lift the limit of the collection
   * Required Permissions:
   * - write:serverless
   *
   * @generated from rpc qdrant.cloud.serverless.collection.v1.CollectionService.UpgradeCollection
   */
  upgradeCollection: {
    methodKind: "unary";
    input: typeof UpgradeCollectionRequestSchema;
    output: typeof UpgradeCollectionResponseSchema;
  },
  /**
   * DeleteCollection removes a collection by ID
   * Required Permissions:
   * - delete:serverless
   *
   * @generated from rpc qdrant.cloud.serverless.collection.v1.CollectionService.DeleteCollection
   */
  deleteCollection: {
    methodKind: "unary";
    input: typeof DeleteCollectionRequestSchema;
    output: typeof DeleteCollectionResponseSchema;
  },
}>;

