// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file qdrant/cloud/serverless/collections/v1/collection_config.proto (package qdrant.cloud.serverless.collections.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../../buf/validate/validate_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file qdrant/cloud/serverless/collections/v1/collection_config.proto.
 */
export const file_qdrant_cloud_serverless_collections_v1_collection_config: GenFile = /*@__PURE__*/
  fileDesc("Cj5xZHJhbnQvY2xvdWQvc2VydmVybGVzcy9jb2xsZWN0aW9ucy92MS9jb2xsZWN0aW9uX2NvbmZpZy5wcm90bxImcWRyYW50LmNsb3VkLnNlcnZlcmxlc3MuY29sbGVjdGlvbnMudjEi5QUKF0NvbGxlY3Rpb25Db25maWd1cmF0aW9uEhcKCnRlbmFudF9rZXkYASABKAlIAIgBARJoCg1kZW5zZV92ZWN0b3JzGAIgAygLMlEucWRyYW50LmNsb3VkLnNlcnZlcmxlc3MuY29sbGVjdGlvbnMudjEuQ29sbGVjdGlvbkNvbmZpZ3VyYXRpb24uRGVuc2VWZWN0b3JzRW50cnkSagoOc3BhcnNlX3ZlY3RvcnMYAyADKAsyUi5xZHJhbnQuY2xvdWQuc2VydmVybGVzcy5jb2xsZWN0aW9ucy52MS5Db2xsZWN0aW9uQ29uZmlndXJhdGlvbi5TcGFyc2VWZWN0b3JzRW50cnkSagoOcGF5bG9hZF9zY2hlbWEYBCADKAsyUi5xZHJhbnQuY2xvdWQuc2VydmVybGVzcy5jb2xsZWN0aW9ucy52MS5Db2xsZWN0aW9uQ29uZmlndXJhdGlvbi5QYXlsb2FkU2NoZW1hRW50cnkadQoRRGVuc2VWZWN0b3JzRW50cnkSCwoDa2V5GAEgASgJEk8KBXZhbHVlGAIgASgLMkAucWRyYW50LmNsb3VkLnNlcnZlcmxlc3MuY29sbGVjdGlvbnMudjEuRGVuc2VWZWN0b3JDb25maWd1cmF0aW9uOgI4ARp3ChJTcGFyc2VWZWN0b3JzRW50cnkSCwoDa2V5GAEgASgJElAKBXZhbHVlGAIgASgLMkEucWRyYW50LmNsb3VkLnNlcnZlcmxlc3MuY29sbGVjdGlvbnMudjEuU3BhcnNlVmVjdG9yQ29uZmlndXJhdGlvbjoCOAEacAoSUGF5bG9hZFNjaGVtYUVudHJ5EgsKA2tleRgBIAEoCRJJCgV2YWx1ZRgCIAEoCzI6LnFkcmFudC5jbG91ZC5zZXJ2ZXJsZXNzLmNvbGxlY3Rpb25zLnYxLlBheWxvYWRGaWVsZFNjaGVtYToCOAFCDQoLX3RlbmFudF9rZXki0wIKGERlbnNlVmVjdG9yQ29uZmlndXJhdGlvbhIRCglkaW1lbnNpb24YASABKAUSNwoIZGlzdGFuY2UYAiABKAlCJbpIInIgUgZjb3NpbmVSBmV1Y2xpZFIDZG90UgltYW5oYXR0YW4SGAoLbXVsdGl2ZWN0b3IYAyABKAhIAIgBARIWCglyZXNjb3JpbmcYBCABKAhIAYgBARJACgxzdG9yYWdlX3RpZXIYBSABKAlCJbpIInIgUgdzdG9yYWdlUghiYWxhbmNlZFILcGVyZm9ybWFuY2VIAogBARI1Cg5wcmVjaXNpb25fdGllchgGIAEoCUIYukgVchNSA2xvd1IGbWVkaXVtUgRoaWdoSAOIAQFCDgoMX211bHRpdmVjdG9yQgwKCl9yZXNjb3JpbmdCDwoNX3N0b3JhZ2VfdGllckIRCg9fcHJlY2lzaW9uX3RpZXIicQoZU3BhcnNlVmVjdG9yQ29uZmlndXJhdGlvbhIwCg5wcmVjaXNpb25fdGllchgBIAEoCUIYukgVchNSA2xvd1IGbWVkaXVtUgRoaWdoEiIKCG1vZGlmaWVyGAIgASgJQhC6SA1yC1IEbm9uZVIDaWRmIlwKEktleXdvcmRJbmRleFBhcmFtcxIWCglpc190ZW5hbnQYASABKAhIAIgBARIUCgdvbl9kaXNrGAIgASgISAGIAQFCDAoKX2lzX3RlbmFudEIKCghfb25fZGlzayKgAQoSSW50ZWdlckluZGV4UGFyYW1zEhMKBmxvb2t1cBgBIAEoCEgAiAEBEhIKBXJhbmdlGAIgASgISAGIAQESGQoMaXNfcHJpbmNpcGFsGAMgASgISAKIAQESFAoHb25fZGlzaxgEIAEoCEgDiAEBQgkKB19sb29rdXBCCAoGX3JhbmdlQg8KDV9pc19wcmluY2lwYWxCCgoIX29uX2Rpc2siYAoQRmxvYXRJbmRleFBhcmFtcxIZCgxpc19wcmluY2lwYWwYASABKAhIAIgBARIUCgdvbl9kaXNrGAIgASgISAGIAQFCDwoNX2lzX3ByaW5jaXBhbEIKCghfb25fZGlzayIyCg5HZW9JbmRleFBhcmFtcxIUCgdvbl9kaXNrGAEgASgISACIAQFCCgoIX29uX2Rpc2siigIKD1RleHRJbmRleFBhcmFtcxJFCgl0b2tlbml6ZXIYASABKAlCLbpIKnIoUgZwcmVmaXhSCndoaXRlc3BhY2VSBHdvcmRSDG11bHRpbGluZ3VhbEgAiAEBEhoKDW1pbl90b2tlbl9sZW4YAiABKAVIAYgBARIaCg1tYXhfdG9rZW5fbGVuGAMgASgFSAKIAQESFgoJbG93ZXJjYXNlGAQgASgISAOIAQESFAoHb25fZGlzaxgFIAEoCEgEiAEBQgwKCl90b2tlbml6ZXJCEAoOX21pbl90b2tlbl9sZW5CEAoOX21heF90b2tlbl9sZW5CDAoKX2xvd2VyY2FzZUIKCghfb25fZGlzayIzCg9Cb29sSW5kZXhQYXJhbXMSFAoHb25fZGlzaxgBIAEoCEgAiAEBQgoKCF9vbl9kaXNrImMKE0RhdGV0aW1lSW5kZXhQYXJhbXMSGQoMaXNfcHJpbmNpcGFsGAEgASgISACIAQESFAoHb25fZGlzaxgCIAEoCEgBiAEBQg8KDV9pc19wcmluY2lwYWxCCgoIX29uX2Rpc2siWQoPVXVpZEluZGV4UGFyYW1zEhYKCWlzX3RlbmFudBgBIAEoCEgAiAEBEhQKB29uX2Rpc2sYAiABKAhIAYgBAUIMCgpfaXNfdGVuYW50QgoKCF9vbl9kaXNrIoAFChJQYXlsb2FkRmllbGRTY2hlbWESTQoHa2V5d29yZBgBIAEoCzI6LnFkcmFudC5jbG91ZC5zZXJ2ZXJsZXNzLmNvbGxlY3Rpb25zLnYxLktleXdvcmRJbmRleFBhcmFtc0gAEk0KB2ludGVnZXIYAiABKAsyOi5xZHJhbnQuY2xvdWQuc2VydmVybGVzcy5jb2xsZWN0aW9ucy52MS5JbnRlZ2VySW5kZXhQYXJhbXNIABJJCgVmbG9hdBgDIAEoCzI4LnFkcmFudC5jbG91ZC5zZXJ2ZXJsZXNzLmNvbGxlY3Rpb25zLnYxLkZsb2F0SW5kZXhQYXJhbXNIABJFCgNnZW8YBCABKAsyNi5xZHJhbnQuY2xvdWQuc2VydmVybGVzcy5jb2xsZWN0aW9ucy52MS5HZW9JbmRleFBhcmFtc0gAEkcKBHRleHQYBSABKAsyNy5xZHJhbnQuY2xvdWQuc2VydmVybGVzcy5jb2xsZWN0aW9ucy52MS5UZXh0SW5kZXhQYXJhbXNIABJHCgRib29sGAYgASgLMjcucWRyYW50LmNsb3VkLnNlcnZlcmxlc3MuY29sbGVjdGlvbnMudjEuQm9vbEluZGV4UGFyYW1zSAASTwoIZGF0ZXRpbWUYByABKAsyOy5xZHJhbnQuY2xvdWQuc2VydmVybGVzcy5jb2xsZWN0aW9ucy52MS5EYXRldGltZUluZGV4UGFyYW1zSAASRwoEdXVpZBgIIAEoCzI3LnFkcmFudC5jbG91ZC5zZXJ2ZXJsZXNzLmNvbGxlY3Rpb25zLnYxLlV1aWRJbmRleFBhcmFtc0gAQg4KDGluZGV4X3BhcmFtc0LnAgoqY29tLnFkcmFudC5jbG91ZC5zZXJ2ZXJsZXNzLmNvbGxlY3Rpb25zLnYxQhVDb2xsZWN0aW9uQ29uZmlnUHJvdG9QAVplZ2l0aHViLmNvbS9xZHJhbnQvcWRyYW50LWNsb3VkLXB1YmxpYy1hcGkvZ2VuL2dvL3FkcmFudC9jbG91ZC9zZXJ2ZXJsZXNzL2NvbGxlY3Rpb25zL3YxO2NvbGxlY3Rpb25zdjGiAgRRQ1NDqgImUWRyYW50LkNsb3VkLlNlcnZlcmxlc3MuQ29sbGVjdGlvbnMuVjHKAiZRZHJhbnRcQ2xvdWRcU2VydmVybGVzc1xDb2xsZWN0aW9uc1xWMeICMlFkcmFudFxDbG91ZFxTZXJ2ZXJsZXNzXENvbGxlY3Rpb25zXFYxXEdQQk1ldGFkYXRh6gIqUWRyYW50OjpDbG91ZDo6U2VydmVybGVzczo6Q29sbGVjdGlvbnM6OlYxYgZwcm90bzM", [file_buf_validate_validate]);

/**
 * CollectionConfiguration defines the structure and settings for a collection
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.CollectionConfiguration
 */
export type CollectionConfiguration = Message<"qdrant.cloud.serverless.collections.v1.CollectionConfiguration"> & {
  /**
   * Field name used for tenant isolation
   *
   * @generated from field: optional string tenant_key = 1;
   */
  tenantKey?: string;

  /**
   * Map of dense vector configurations with field name as key
   *
   * @generated from field: map<string, qdrant.cloud.serverless.collections.v1.DenseVectorConfiguration> dense_vectors = 2;
   */
  denseVectors: { [key: string]: DenseVectorConfiguration };

  /**
   * Map of sparse vector configurations with field name as key
   *
   * @generated from field: map<string, qdrant.cloud.serverless.collections.v1.SparseVectorConfiguration> sparse_vectors = 3;
   */
  sparseVectors: { [key: string]: SparseVectorConfiguration };

  /**
   * Schema definition for payload fields
   *
   * @generated from field: map<string, qdrant.cloud.serverless.collections.v1.PayloadFieldSchema> payload_schema = 4;
   */
  payloadSchema: { [key: string]: PayloadFieldSchema };
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.CollectionConfiguration.
 * Use `create(CollectionConfigurationSchema)` to create a new message.
 */
export const CollectionConfigurationSchema: GenMessage<CollectionConfiguration> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 0);

/**
 * DenseVectorConfiguration defines the settings for dense vector fields
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.DenseVectorConfiguration
 */
export type DenseVectorConfiguration = Message<"qdrant.cloud.serverless.collections.v1.DenseVectorConfiguration"> & {
  /**
   * The dimensionality of the vector space
   *
   * @generated from field: int32 dimension = 1;
   */
  dimension: number;

  /**
   * The distance metric used for vector similarity calculations
   *
   * @generated from field: string distance = 2;
   */
  distance: string;

  /**
   * Whether to use multi-vector storage for this configuration
   *
   * @generated from field: optional bool multivector = 3;
   */
  multivector?: boolean;

  /**
   * Whether to enable rescoring for search results
   *
   * @generated from field: optional bool rescoring = 4;
   */
  rescoring?: boolean;

  /**
   * The storage performance tier to use (STORAGE, BALANCED, or PERFORMANCE)
   *
   * @generated from field: optional string storage_tier = 5;
   */
  storageTier?: string;

  /**
   * The precision level for vector operations (LOW, MEDIUM, or HIGH)
   *
   * @generated from field: optional string precision_tier = 6;
   */
  precisionTier?: string;
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.DenseVectorConfiguration.
 * Use `create(DenseVectorConfigurationSchema)` to create a new message.
 */
export const DenseVectorConfigurationSchema: GenMessage<DenseVectorConfiguration> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 1);

/**
 * SparseVectorConfiguration defines the settings for sparse vector fields
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.SparseVectorConfiguration
 */
export type SparseVectorConfiguration = Message<"qdrant.cloud.serverless.collections.v1.SparseVectorConfiguration"> & {
  /**
   * Precision tier for vector operations
   *
   * @generated from field: string precision_tier = 1;
   */
  precisionTier: string;

  /**
   * Vector value modification approach
   *
   * @generated from field: string modifier = 2;
   */
  modifier: string;
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.SparseVectorConfiguration.
 * Use `create(SparseVectorConfigurationSchema)` to create a new message.
 */
export const SparseVectorConfigurationSchema: GenMessage<SparseVectorConfiguration> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 2);

/**
 * KeywordIndexParams defines parameters for keyword indexing
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.KeywordIndexParams
 */
export type KeywordIndexParams = Message<"qdrant.cloud.serverless.collections.v1.KeywordIndexParams"> & {
  /**
   * Whether this field is used as tenant identifier
   *
   * @generated from field: optional bool is_tenant = 1;
   */
  isTenant?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.KeywordIndexParams.
 * Use `create(KeywordIndexParamsSchema)` to create a new message.
 */
export const KeywordIndexParamsSchema: GenMessage<KeywordIndexParams> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 3);

/**
 * IntegerIndexParams defines parameters for integer indexing
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.IntegerIndexParams
 */
export type IntegerIndexParams = Message<"qdrant.cloud.serverless.collections.v1.IntegerIndexParams"> & {
  /**
   * Enable lookup operations
   *
   * @generated from field: optional bool lookup = 1;
   */
  lookup?: boolean;

  /**
   * Enable range queries
   *
   * @generated from field: optional bool range = 2;
   */
  range?: boolean;

  /**
   * Whether this is a principal field
   *
   * @generated from field: optional bool is_principal = 3;
   */
  isPrincipal?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 4;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.IntegerIndexParams.
 * Use `create(IntegerIndexParamsSchema)` to create a new message.
 */
export const IntegerIndexParamsSchema: GenMessage<IntegerIndexParams> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 4);

/**
 * FloatIndexParams defines parameters for float indexing
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.FloatIndexParams
 */
export type FloatIndexParams = Message<"qdrant.cloud.serverless.collections.v1.FloatIndexParams"> & {
  /**
   * Whether this is a principal field
   *
   * @generated from field: optional bool is_principal = 1;
   */
  isPrincipal?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.FloatIndexParams.
 * Use `create(FloatIndexParamsSchema)` to create a new message.
 */
export const FloatIndexParamsSchema: GenMessage<FloatIndexParams> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 5);

/**
 * GeoIndexParams defines parameters for geographical indexing
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.GeoIndexParams
 */
export type GeoIndexParams = Message<"qdrant.cloud.serverless.collections.v1.GeoIndexParams"> & {
  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 1;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.GeoIndexParams.
 * Use `create(GeoIndexParamsSchema)` to create a new message.
 */
export const GeoIndexParamsSchema: GenMessage<GeoIndexParams> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 6);

/**
 * TextIndexParams defines parameters for text indexing
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.TextIndexParams
 */
export type TextIndexParams = Message<"qdrant.cloud.serverless.collections.v1.TextIndexParams"> & {
  /**
   * Tokenization strategy
   *
   * @generated from field: optional string tokenizer = 1;
   */
  tokenizer?: string;

  /**
   * Minimum token length to index
   *
   * @generated from field: optional int32 min_token_len = 2;
   */
  minTokenLen?: number;

  /**
   * Maximum token length to index
   *
   * @generated from field: optional int32 max_token_len = 3;
   */
  maxTokenLen?: number;

  /**
   * Whether to lowercase text before indexing
   *
   * @generated from field: optional bool lowercase = 4;
   */
  lowercase?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 5;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.TextIndexParams.
 * Use `create(TextIndexParamsSchema)` to create a new message.
 */
export const TextIndexParamsSchema: GenMessage<TextIndexParams> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 7);

/**
 * BoolIndexParams defines parameters for boolean indexing
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.BoolIndexParams
 */
export type BoolIndexParams = Message<"qdrant.cloud.serverless.collections.v1.BoolIndexParams"> & {
  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 1;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.BoolIndexParams.
 * Use `create(BoolIndexParamsSchema)` to create a new message.
 */
export const BoolIndexParamsSchema: GenMessage<BoolIndexParams> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 8);

/**
 * DatetimeIndexParams defines parameters for datetime indexing
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.DatetimeIndexParams
 */
export type DatetimeIndexParams = Message<"qdrant.cloud.serverless.collections.v1.DatetimeIndexParams"> & {
  /**
   * Whether this is a principal field
   *
   * @generated from field: optional bool is_principal = 1;
   */
  isPrincipal?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.DatetimeIndexParams.
 * Use `create(DatetimeIndexParamsSchema)` to create a new message.
 */
export const DatetimeIndexParamsSchema: GenMessage<DatetimeIndexParams> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 9);

/**
 * UuidIndexParams defines parameters for UUID indexing
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.UuidIndexParams
 */
export type UuidIndexParams = Message<"qdrant.cloud.serverless.collections.v1.UuidIndexParams"> & {
  /**
   * Whether this field is used as tenant identifier
   *
   * @generated from field: optional bool is_tenant = 1;
   */
  isTenant?: boolean;

  /**
   * Whether to store index on disk vs memory
   *
   * @generated from field: optional bool on_disk = 2;
   */
  onDisk?: boolean;
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.UuidIndexParams.
 * Use `create(UuidIndexParamsSchema)` to create a new message.
 */
export const UuidIndexParamsSchema: GenMessage<UuidIndexParams> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 10);

/**
 * Describes the schema for a payload field
 *
 * @generated from message qdrant.cloud.serverless.collections.v1.PayloadFieldSchema
 */
export type PayloadFieldSchema = Message<"qdrant.cloud.serverless.collections.v1.PayloadFieldSchema"> & {
  /**
   * Oneof for index parameters
   *
   * @generated from oneof qdrant.cloud.serverless.collections.v1.PayloadFieldSchema.index_params
   */
  indexParams: {
    /**
     * Keyword index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collections.v1.KeywordIndexParams keyword = 1;
     */
    value: KeywordIndexParams;
    case: "keyword";
  } | {
    /**
     * Integer index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collections.v1.IntegerIndexParams integer = 2;
     */
    value: IntegerIndexParams;
    case: "integer";
  } | {
    /**
     * Float index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collections.v1.FloatIndexParams float = 3;
     */
    value: FloatIndexParams;
    case: "float";
  } | {
    /**
     * Geo Index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collections.v1.GeoIndexParams geo = 4;
     */
    value: GeoIndexParams;
    case: "geo";
  } | {
    /**
     * Text index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collections.v1.TextIndexParams text = 5;
     */
    value: TextIndexParams;
    case: "text";
  } | {
    /**
     * Boolean index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collections.v1.BoolIndexParams bool = 6;
     */
    value: BoolIndexParams;
    case: "bool";
  } | {
    /**
     * Datetime index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collections.v1.DatetimeIndexParams datetime = 7;
     */
    value: DatetimeIndexParams;
    case: "datetime";
  } | {
    /**
     * UUID index parameters
     *
     * @generated from field: qdrant.cloud.serverless.collections.v1.UuidIndexParams uuid = 8;
     */
    value: UuidIndexParams;
    case: "uuid";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message qdrant.cloud.serverless.collections.v1.PayloadFieldSchema.
 * Use `create(PayloadFieldSchemaSchema)` to create a new message.
 */
export const PayloadFieldSchemaSchema: GenMessage<PayloadFieldSchema> = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_serverless_collections_v1_collection_config, 11);

