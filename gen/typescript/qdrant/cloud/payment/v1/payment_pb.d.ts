// @generated by protoc-gen-es v2.10.0 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required,buf_validate=true"
// @generated from file qdrant/cloud/payment/v1/payment.proto (package qdrant.cloud.payment.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file qdrant/cloud/payment/v1/payment.proto.
 */
export declare const file_qdrant_cloud_payment_v1_payment: GenFile;

/**
 * Request to list payment methods for a specific account.
 *
 * @generated from message qdrant.cloud.payment.v1.ListPaymentMethodsRequest
 */
export declare type ListPaymentMethodsRequest = Message<"qdrant.cloud.payment.v1.ListPaymentMethodsRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

/**
 * Request to list payment methods for a specific account.
 *
 * @generated from message qdrant.cloud.payment.v1.ListPaymentMethodsRequest
 */
export declare type ListPaymentMethodsRequestValid = Message<"qdrant.cloud.payment.v1.ListPaymentMethodsRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.ListPaymentMethodsRequest.
 * Use `create(ListPaymentMethodsRequestSchema)` to create a new message.
 */
export declare const ListPaymentMethodsRequestSchema: GenMessage<ListPaymentMethodsRequest, {validType: ListPaymentMethodsRequestValid}>;

/**
 * Response containing a list of payment methods.
 *
 * @generated from message qdrant.cloud.payment.v1.ListPaymentMethodsResponse
 */
export declare type ListPaymentMethodsResponse = Message<"qdrant.cloud.payment.v1.ListPaymentMethodsResponse"> & {
  /**
   * The list of payment methods.
   *
   * @generated from field: repeated qdrant.cloud.payment.v1.PaymentMethod items = 1;
   */
  items: PaymentMethod[];
};

/**
 * Response containing a list of payment methods.
 *
 * @generated from message qdrant.cloud.payment.v1.ListPaymentMethodsResponse
 */
export declare type ListPaymentMethodsResponseValid = Message<"qdrant.cloud.payment.v1.ListPaymentMethodsResponse"> & {
  /**
   * The list of payment methods.
   *
   * @generated from field: repeated qdrant.cloud.payment.v1.PaymentMethod items = 1;
   */
  items: PaymentMethodValid[];
};

/**
 * Describes the message qdrant.cloud.payment.v1.ListPaymentMethodsResponse.
 * Use `create(ListPaymentMethodsResponseSchema)` to create a new message.
 */
export declare const ListPaymentMethodsResponseSchema: GenMessage<ListPaymentMethodsResponse, {validType: ListPaymentMethodsResponseValid}>;

/**
 * Request to get payment method by id.
 *
 * @generated from message qdrant.cloud.payment.v1.GetPaymentMethodRequest
 */
export declare type GetPaymentMethodRequest = Message<"qdrant.cloud.payment.v1.GetPaymentMethodRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the payment method (in GUID format).
   * This is a required field.
   *
   * @generated from field: string payment_method_id = 2;
   */
  paymentMethodId: string;
};

/**
 * Request to get payment method by id.
 *
 * @generated from message qdrant.cloud.payment.v1.GetPaymentMethodRequest
 */
export declare type GetPaymentMethodRequestValid = Message<"qdrant.cloud.payment.v1.GetPaymentMethodRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the payment method (in GUID format).
   * This is a required field.
   *
   * @generated from field: string payment_method_id = 2;
   */
  paymentMethodId: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.GetPaymentMethodRequest.
 * Use `create(GetPaymentMethodRequestSchema)` to create a new message.
 */
export declare const GetPaymentMethodRequestSchema: GenMessage<GetPaymentMethodRequest, {validType: GetPaymentMethodRequestValid}>;

/**
 * Response containing the payment method.
 *
 * @generated from message qdrant.cloud.payment.v1.GetPaymentMethodResponse
 */
export declare type GetPaymentMethodResponse = Message<"qdrant.cloud.payment.v1.GetPaymentMethodResponse"> & {
  /**
   * The actual payment method.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentMethod payment_method = 1;
   */
  paymentMethod?: PaymentMethod;
};

/**
 * Response containing the payment method.
 *
 * @generated from message qdrant.cloud.payment.v1.GetPaymentMethodResponse
 */
export declare type GetPaymentMethodResponseValid = Message<"qdrant.cloud.payment.v1.GetPaymentMethodResponse"> & {
  /**
   * The actual payment method.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentMethod payment_method = 1;
   */
  paymentMethod: PaymentMethodValid;
};

/**
 * Describes the message qdrant.cloud.payment.v1.GetPaymentMethodResponse.
 * Use `create(GetPaymentMethodResponseSchema)` to create a new message.
 */
export declare const GetPaymentMethodResponseSchema: GenMessage<GetPaymentMethodResponse, {validType: GetPaymentMethodResponseValid}>;

/**
 * CreatePaymentMethodRequest is the request for the CreatePaymentMethod function
 *
 * @generated from message qdrant.cloud.payment.v1.CreatePaymentMethodRequest
 */
export declare type CreatePaymentMethodRequest = Message<"qdrant.cloud.payment.v1.CreatePaymentMethodRequest"> & {
  /**
   * The payment method to create.
   * This is a required field.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentMethod payment_method = 1;
   */
  paymentMethod?: Omit<PaymentMethod, 'id' | 'paymentProviderId' | 'createdAt' | 'lastModifiedAt' | 'status'>;
};

/**
 * CreatePaymentMethodRequest is the request for the CreatePaymentMethod function
 *
 * @generated from message qdrant.cloud.payment.v1.CreatePaymentMethodRequest
 */
export declare type CreatePaymentMethodRequestValid = Message<"qdrant.cloud.payment.v1.CreatePaymentMethodRequest"> & {
  /**
   * The payment method to create.
   * This is a required field.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentMethod payment_method = 1;
   */
  paymentMethod: Omit<PaymentMethodValid, 'id' | 'paymentProviderId' | 'createdAt' | 'lastModifiedAt' | 'status'>;
};

/**
 * Describes the message qdrant.cloud.payment.v1.CreatePaymentMethodRequest.
 * Use `create(CreatePaymentMethodRequestSchema)` to create a new message.
 */
export declare const CreatePaymentMethodRequestSchema: GenMessage<CreatePaymentMethodRequest, {validType: CreatePaymentMethodRequestValid}>;

/**
 * CreatePaymentMethodResponse is the response from the CreatePaymentMethod function
 *
 * @generated from message qdrant.cloud.payment.v1.CreatePaymentMethodResponse
 */
export declare type CreatePaymentMethodResponse = Message<"qdrant.cloud.payment.v1.CreatePaymentMethodResponse"> & {
  /**
   * The created payment method.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentMethod payment_method = 1;
   */
  paymentMethod?: PaymentMethod;
};

/**
 * CreatePaymentMethodResponse is the response from the CreatePaymentMethod function
 *
 * @generated from message qdrant.cloud.payment.v1.CreatePaymentMethodResponse
 */
export declare type CreatePaymentMethodResponseValid = Message<"qdrant.cloud.payment.v1.CreatePaymentMethodResponse"> & {
  /**
   * The created payment method.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentMethod payment_method = 1;
   */
  paymentMethod: PaymentMethodValid;
};

/**
 * Describes the message qdrant.cloud.payment.v1.CreatePaymentMethodResponse.
 * Use `create(CreatePaymentMethodResponseSchema)` to create a new message.
 */
export declare const CreatePaymentMethodResponseSchema: GenMessage<CreatePaymentMethodResponse, {validType: CreatePaymentMethodResponseValid}>;

/**
 * UpdatePaymentMethodRequest is the request for the UpdatePaymentMethod function
 *
 * @generated from message qdrant.cloud.payment.v1.UpdatePaymentMethodRequest
 */
export declare type UpdatePaymentMethodRequest = Message<"qdrant.cloud.payment.v1.UpdatePaymentMethodRequest"> & {
  /**
   * The payment method to update.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentMethod payment_method = 2;
   */
  paymentMethod?: PaymentMethod;
};

/**
 * UpdatePaymentMethodRequest is the request for the UpdatePaymentMethod function
 *
 * @generated from message qdrant.cloud.payment.v1.UpdatePaymentMethodRequest
 */
export declare type UpdatePaymentMethodRequestValid = Message<"qdrant.cloud.payment.v1.UpdatePaymentMethodRequest"> & {
  /**
   * The payment method to update.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentMethod payment_method = 2;
   */
  paymentMethod: PaymentMethodValid;
};

/**
 * Describes the message qdrant.cloud.payment.v1.UpdatePaymentMethodRequest.
 * Use `create(UpdatePaymentMethodRequestSchema)` to create a new message.
 */
export declare const UpdatePaymentMethodRequestSchema: GenMessage<UpdatePaymentMethodRequest, {validType: UpdatePaymentMethodRequestValid}>;

/**
 * UpdatePaymentMethodResponse is the response from the UpdatePaymentMethod function
 *
 * @generated from message qdrant.cloud.payment.v1.UpdatePaymentMethodResponse
 */
export declare type UpdatePaymentMethodResponse = Message<"qdrant.cloud.payment.v1.UpdatePaymentMethodResponse"> & {
  /**
   * The updated payment method.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentMethod payment_method = 1;
   */
  paymentMethod?: PaymentMethod;
};

/**
 * UpdatePaymentMethodResponse is the response from the UpdatePaymentMethod function
 *
 * @generated from message qdrant.cloud.payment.v1.UpdatePaymentMethodResponse
 */
export declare type UpdatePaymentMethodResponseValid = Message<"qdrant.cloud.payment.v1.UpdatePaymentMethodResponse"> & {
  /**
   * The updated payment method.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentMethod payment_method = 1;
   */
  paymentMethod: PaymentMethodValid;
};

/**
 * Describes the message qdrant.cloud.payment.v1.UpdatePaymentMethodResponse.
 * Use `create(UpdatePaymentMethodResponseSchema)` to create a new message.
 */
export declare const UpdatePaymentMethodResponseSchema: GenMessage<UpdatePaymentMethodResponse, {validType: UpdatePaymentMethodResponseValid}>;

/**
 * DeletePaymentMethodRequest is the request for the DeletePaymentMethod function
 *
 * @generated from message qdrant.cloud.payment.v1.DeletePaymentMethodRequest
 */
export declare type DeletePaymentMethodRequest = Message<"qdrant.cloud.payment.v1.DeletePaymentMethodRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the payment method (in GUID format).
   * This is a required field.
   *
   * @generated from field: string payment_method_id = 2;
   */
  paymentMethodId: string;
};

/**
 * DeletePaymentMethodRequest is the request for the DeletePaymentMethod function
 *
 * @generated from message qdrant.cloud.payment.v1.DeletePaymentMethodRequest
 */
export declare type DeletePaymentMethodRequestValid = Message<"qdrant.cloud.payment.v1.DeletePaymentMethodRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the payment method (in GUID format).
   * This is a required field.
   *
   * @generated from field: string payment_method_id = 2;
   */
  paymentMethodId: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.DeletePaymentMethodRequest.
 * Use `create(DeletePaymentMethodRequestSchema)` to create a new message.
 */
export declare const DeletePaymentMethodRequestSchema: GenMessage<DeletePaymentMethodRequest, {validType: DeletePaymentMethodRequestValid}>;

/**
 * DeletePaymentMethodResponse is the response from the DeletePaymentMethod function
 *
 * Empty
 *
 * @generated from message qdrant.cloud.payment.v1.DeletePaymentMethodResponse
 */
export declare type DeletePaymentMethodResponse = Message<"qdrant.cloud.payment.v1.DeletePaymentMethodResponse"> & {
};

/**
 * DeletePaymentMethodResponse is the response from the DeletePaymentMethod function
 *
 * Empty
 *
 * @generated from message qdrant.cloud.payment.v1.DeletePaymentMethodResponse
 */
export declare type DeletePaymentMethodResponseValid = Message<"qdrant.cloud.payment.v1.DeletePaymentMethodResponse"> & {
};

/**
 * Describes the message qdrant.cloud.payment.v1.DeletePaymentMethodResponse.
 * Use `create(DeletePaymentMethodResponseSchema)` to create a new message.
 */
export declare const DeletePaymentMethodResponseSchema: GenMessage<DeletePaymentMethodResponse, {validType: DeletePaymentMethodResponseValid}>;

/**
 * GetStripeCheckoutSessionRequest is the request for the GetStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.GetStripeCheckoutSessionRequest
 */
export declare type GetStripeCheckoutSessionRequest = Message<"qdrant.cloud.payment.v1.GetStripeCheckoutSessionRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the Stripe session.
   * This is a required field.
   *
   * @generated from field: string session_id = 2;
   */
  sessionId: string;
};

/**
 * GetStripeCheckoutSessionRequest is the request for the GetStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.GetStripeCheckoutSessionRequest
 */
export declare type GetStripeCheckoutSessionRequestValid = Message<"qdrant.cloud.payment.v1.GetStripeCheckoutSessionRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the Stripe session.
   * This is a required field.
   *
   * @generated from field: string session_id = 2;
   */
  sessionId: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.GetStripeCheckoutSessionRequest.
 * Use `create(GetStripeCheckoutSessionRequestSchema)` to create a new message.
 */
export declare const GetStripeCheckoutSessionRequestSchema: GenMessage<GetStripeCheckoutSessionRequest, {validType: GetStripeCheckoutSessionRequestValid}>;

/**
 * GetStripeCheckoutSessionResponse is the response from the GetStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.GetStripeCheckoutSessionResponse
 */
export declare type GetStripeCheckoutSessionResponse = Message<"qdrant.cloud.payment.v1.GetStripeCheckoutSessionResponse"> & {
  /**
   * The Stripe session for the account.
   *
   * @generated from field: qdrant.cloud.payment.v1.StripeCheckoutSession stripe_session = 1;
   */
  stripeSession?: StripeCheckoutSession;
};

/**
 * GetStripeCheckoutSessionResponse is the response from the GetStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.GetStripeCheckoutSessionResponse
 */
export declare type GetStripeCheckoutSessionResponseValid = Message<"qdrant.cloud.payment.v1.GetStripeCheckoutSessionResponse"> & {
  /**
   * The Stripe session for the account.
   *
   * @generated from field: qdrant.cloud.payment.v1.StripeCheckoutSession stripe_session = 1;
   */
  stripeSession: StripeCheckoutSessionValid;
};

/**
 * Describes the message qdrant.cloud.payment.v1.GetStripeCheckoutSessionResponse.
 * Use `create(GetStripeCheckoutSessionResponseSchema)` to create a new message.
 */
export declare const GetStripeCheckoutSessionResponseSchema: GenMessage<GetStripeCheckoutSessionResponse, {validType: GetStripeCheckoutSessionResponseValid}>;

/**
 * CreateStripeCheckoutSessionRequest is the request for the CreateStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.CreateStripeCheckoutSessionRequest
 */
export declare type CreateStripeCheckoutSessionRequest = Message<"qdrant.cloud.payment.v1.CreateStripeCheckoutSessionRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * Redirect URL to which the user will be redirected after the payment setup is completed.
   *
   * @generated from field: string redirect_url = 2;
   */
  redirectUrl: string;
};

/**
 * CreateStripeCheckoutSessionRequest is the request for the CreateStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.CreateStripeCheckoutSessionRequest
 */
export declare type CreateStripeCheckoutSessionRequestValid = Message<"qdrant.cloud.payment.v1.CreateStripeCheckoutSessionRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * Redirect URL to which the user will be redirected after the payment setup is completed.
   *
   * @generated from field: string redirect_url = 2;
   */
  redirectUrl: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.CreateStripeCheckoutSessionRequest.
 * Use `create(CreateStripeCheckoutSessionRequestSchema)` to create a new message.
 */
export declare const CreateStripeCheckoutSessionRequestSchema: GenMessage<CreateStripeCheckoutSessionRequest, {validType: CreateStripeCheckoutSessionRequestValid}>;

/**
 * CreateStripeCheckoutSessionResponse is the response from the CreateStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.CreateStripeCheckoutSessionResponse
 */
export declare type CreateStripeCheckoutSessionResponse = Message<"qdrant.cloud.payment.v1.CreateStripeCheckoutSessionResponse"> & {
  /**
   * Stripe session created for payment method setup or collection.
   *
   * @generated from field: qdrant.cloud.payment.v1.StripeCheckoutSession stripe_session = 1;
   */
  stripeSession?: StripeCheckoutSession;
};

/**
 * CreateStripeCheckoutSessionResponse is the response from the CreateStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.CreateStripeCheckoutSessionResponse
 */
export declare type CreateStripeCheckoutSessionResponseValid = Message<"qdrant.cloud.payment.v1.CreateStripeCheckoutSessionResponse"> & {
  /**
   * Stripe session created for payment method setup or collection.
   *
   * @generated from field: qdrant.cloud.payment.v1.StripeCheckoutSession stripe_session = 1;
   */
  stripeSession: StripeCheckoutSessionValid;
};

/**
 * Describes the message qdrant.cloud.payment.v1.CreateStripeCheckoutSessionResponse.
 * Use `create(CreateStripeCheckoutSessionResponseSchema)` to create a new message.
 */
export declare const CreateStripeCheckoutSessionResponseSchema: GenMessage<CreateStripeCheckoutSessionResponse, {validType: CreateStripeCheckoutSessionResponseValid}>;

/**
 * Represents a Stripe Session abstraction containing Checkout session and SetupIntent references.
 *
 * @generated from message qdrant.cloud.payment.v1.StripeCheckoutSession
 */
export declare type StripeCheckoutSession = Message<"qdrant.cloud.payment.v1.StripeCheckoutSession"> & {
  /**
   * The unique identifier of the Stripe Checkout session.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The URL to redirect the user to complete the Checkout session.
   * This may be not set in case the session is incomplete or improperly initialized.
   *
   * @generated from field: optional string url = 2;
   */
  url?: string;

  /**
   * The Stripe customer ID associated with this session.
   *
   * @generated from field: string customer = 3;
   */
  customer: string;

  /**
   * The ID of the associated Stripe SetupIntent.
   *
   * @generated from field: string setup_intent_id = 4;
   */
  setupIntentId: string;

  /**
   * The status of the associated Stripe SetupIntent.
   *
   * @generated from field: qdrant.cloud.payment.v1.StripeSetupIntentStatus setup_intent_status = 5;
   */
  setupIntentStatus: StripeSetupIntentStatus;

  /**
   * The payment method attached to the associated SetupIntent.
   *
   * @generated from field: string setup_intent_payment_method = 6;
   */
  setupIntentPaymentMethod: string;
};

/**
 * Represents a Stripe Session abstraction containing Checkout session and SetupIntent references.
 *
 * @generated from message qdrant.cloud.payment.v1.StripeCheckoutSession
 */
export declare type StripeCheckoutSessionValid = Message<"qdrant.cloud.payment.v1.StripeCheckoutSession"> & {
  /**
   * The unique identifier of the Stripe Checkout session.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The URL to redirect the user to complete the Checkout session.
   * This may be not set in case the session is incomplete or improperly initialized.
   *
   * @generated from field: optional string url = 2;
   */
  url?: string;

  /**
   * The Stripe customer ID associated with this session.
   *
   * @generated from field: string customer = 3;
   */
  customer: string;

  /**
   * The ID of the associated Stripe SetupIntent.
   *
   * @generated from field: string setup_intent_id = 4;
   */
  setupIntentId: string;

  /**
   * The status of the associated Stripe SetupIntent.
   *
   * @generated from field: qdrant.cloud.payment.v1.StripeSetupIntentStatus setup_intent_status = 5;
   */
  setupIntentStatus: StripeSetupIntentStatus;

  /**
   * The payment method attached to the associated SetupIntent.
   *
   * @generated from field: string setup_intent_payment_method = 6;
   */
  setupIntentPaymentMethod: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.StripeCheckoutSession.
 * Use `create(StripeCheckoutSessionSchema)` to create a new message.
 */
export declare const StripeCheckoutSessionSchema: GenMessage<StripeCheckoutSession, {validType: StripeCheckoutSessionValid}>;

/**
 * Represents a payment method.
 *
 * @generated from message qdrant.cloud.payment.v1.PaymentMethod
 */
export declare type PaymentMethod = Message<"qdrant.cloud.payment.v1.PaymentMethod"> & {
  /**
   * Unique identifier for the payment method (in GUID format).
   * This is a read-only field and will be available after a payment method is created.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 2;
   */
  accountId: string;

  /**
   * The type of the payment method provider.
   * This is a required field.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentProviderType type = 3;
   */
  type: PaymentProviderType;

  /**
   * The customer account identifier in the payment provider system.
   * This is read-only field.
   *
   * @generated from field: optional string payment_provider_id = 4;
   */
  paymentProviderId?: string;

  /**
   * Represents the payment method details, such as card information.
   * This field is optional and only available for payment provider type Stripe for now.
   *
   * @generated from field: optional qdrant.cloud.payment.v1.PaymentMethodDetails payment_method_details = 5;
   */
  paymentMethodDetails?: PaymentMethodDetails;

  /**
   * The billing address associated with the payment method.
   * This field is optional and only available for payment provider type Stripe.
   *
   * @generated from field: optional qdrant.cloud.payment.v1.BillingAddress billing_address = 6;
   */
  billingAddress?: BillingAddress;

  /**
   * The timestamp when the payment method was created.
   * This is a read-only field and will be available after a payment method is created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * The timestamp when the payment method was last updated.
   * This is a read-only field and will be available after a payment method is created.
   *
   * @generated from field: google.protobuf.Timestamp last_modified_at = 8;
   */
  lastModifiedAt?: Timestamp;

  /**
   * The tax ID associated with the payment method.
   * This is an optional field.
   *
   * @generated from field: optional string tax_id = 9;
   */
  taxId?: string;

  /**
   * The us default flag indicates if this payment method is the default one for the account.
   * Default payment method is used for all charges in the account.
   *
   * @generated from field: bool is_default = 10;
   */
  isDefault: boolean;

  /**
   * Payment method status.
   * This is read-only field.
   *
   * @generated from field: optional qdrant.cloud.payment.v1.PaymentMethodStatus status = 11;
   */
  status?: PaymentMethodStatus;
};

/**
 * Represents a payment method.
 *
 * @generated from message qdrant.cloud.payment.v1.PaymentMethod
 */
export declare type PaymentMethodValid = Message<"qdrant.cloud.payment.v1.PaymentMethod"> & {
  /**
   * Unique identifier for the payment method (in GUID format).
   * This is a read-only field and will be available after a payment method is created.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 2;
   */
  accountId: string;

  /**
   * The type of the payment method provider.
   * This is a required field.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentProviderType type = 3;
   */
  type: PaymentProviderType;

  /**
   * The customer account identifier in the payment provider system.
   * This is read-only field.
   *
   * @generated from field: optional string payment_provider_id = 4;
   */
  paymentProviderId?: string;

  /**
   * Represents the payment method details, such as card information.
   * This field is optional and only available for payment provider type Stripe for now.
   *
   * @generated from field: optional qdrant.cloud.payment.v1.PaymentMethodDetails payment_method_details = 5;
   */
  paymentMethodDetails?: PaymentMethodDetailsValid;

  /**
   * The billing address associated with the payment method.
   * This field is optional and only available for payment provider type Stripe.
   *
   * @generated from field: optional qdrant.cloud.payment.v1.BillingAddress billing_address = 6;
   */
  billingAddress?: BillingAddressValid;

  /**
   * The timestamp when the payment method was created.
   * This is a read-only field and will be available after a payment method is created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * The timestamp when the payment method was last updated.
   * This is a read-only field and will be available after a payment method is created.
   *
   * @generated from field: google.protobuf.Timestamp last_modified_at = 8;
   */
  lastModifiedAt?: Timestamp;

  /**
   * The tax ID associated with the payment method.
   * This is an optional field.
   *
   * @generated from field: optional string tax_id = 9;
   */
  taxId?: string;

  /**
   * The us default flag indicates if this payment method is the default one for the account.
   * Default payment method is used for all charges in the account.
   *
   * @generated from field: bool is_default = 10;
   */
  isDefault: boolean;

  /**
   * Payment method status.
   * This is read-only field.
   *
   * @generated from field: optional qdrant.cloud.payment.v1.PaymentMethodStatus status = 11;
   */
  status?: PaymentMethodStatus;
};

/**
 * Describes the message qdrant.cloud.payment.v1.PaymentMethod.
 * Use `create(PaymentMethodSchema)` to create a new message.
 */
export declare const PaymentMethodSchema: GenMessage<PaymentMethod, {validType: PaymentMethodValid}>;

/**
 * Represents a billing address for a payment method.
 *
 * @generated from message qdrant.cloud.payment.v1.BillingAddress
 */
export declare type BillingAddress = Message<"qdrant.cloud.payment.v1.BillingAddress"> & {
  /**
   * The name of the person or entity associated with the billing address.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The first line of the billing address.
   *
   * @generated from field: string line1 = 2;
   */
  line1: string;

  /**
   * The second line of the billing address.
   * This is an optional field.
   *
   * @generated from field: optional string line2 = 3;
   */
  line2?: string;

  /**
   * The postal code of the billing address.
   * This is an optional field.
   *
   * @generated from field: optional string postal_code = 4;
   */
  postalCode?: string;

  /**
   * The city of the billing address.
   *
   * @generated from field: string city = 5;
   */
  city: string;

  /**
   * The state or province of the billing address.
   *
   * @generated from field: string state = 6;
   */
  state: string;

  /**
   * The country of the billing address.
   *
   * @generated from field: string country = 7;
   */
  country: string;

  /**
   * The formatted country name.
   *
   * @generated from field: string country_formatted = 8;
   */
  countryFormatted: string;

  /**
   * The formatted state or province name.
   *
   * @generated from field: string state_formatted = 9;
   */
  stateFormatted: string;

  /**
   * Indicates if the country supports tax.
   *
   * @generated from field: bool tax_supported_country = 10;
   */
  taxSupportedCountry: boolean;
};

/**
 * Represents a billing address for a payment method.
 *
 * @generated from message qdrant.cloud.payment.v1.BillingAddress
 */
export declare type BillingAddressValid = Message<"qdrant.cloud.payment.v1.BillingAddress"> & {
  /**
   * The name of the person or entity associated with the billing address.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The first line of the billing address.
   *
   * @generated from field: string line1 = 2;
   */
  line1: string;

  /**
   * The second line of the billing address.
   * This is an optional field.
   *
   * @generated from field: optional string line2 = 3;
   */
  line2?: string;

  /**
   * The postal code of the billing address.
   * This is an optional field.
   *
   * @generated from field: optional string postal_code = 4;
   */
  postalCode?: string;

  /**
   * The city of the billing address.
   *
   * @generated from field: string city = 5;
   */
  city: string;

  /**
   * The state or province of the billing address.
   *
   * @generated from field: string state = 6;
   */
  state: string;

  /**
   * The country of the billing address.
   *
   * @generated from field: string country = 7;
   */
  country: string;

  /**
   * The formatted country name.
   *
   * @generated from field: string country_formatted = 8;
   */
  countryFormatted: string;

  /**
   * The formatted state or province name.
   *
   * @generated from field: string state_formatted = 9;
   */
  stateFormatted: string;

  /**
   * Indicates if the country supports tax.
   *
   * @generated from field: bool tax_supported_country = 10;
   */
  taxSupportedCountry: boolean;
};

/**
 * Describes the message qdrant.cloud.payment.v1.BillingAddress.
 * Use `create(BillingAddressSchema)` to create a new message.
 */
export declare const BillingAddressSchema: GenMessage<BillingAddress, {validType: BillingAddressValid}>;

/**
 * Represents payment method
 *
 * @generated from message qdrant.cloud.payment.v1.PaymentMethodDetails
 */
export declare type PaymentMethodDetails = Message<"qdrant.cloud.payment.v1.PaymentMethodDetails"> & {
  /**
   * The identifier of the payment method.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Card details.
   *
   * @generated from field: qdrant.cloud.payment.v1.Card card = 2;
   */
  card?: Card;
};

/**
 * Represents payment method
 *
 * @generated from message qdrant.cloud.payment.v1.PaymentMethodDetails
 */
export declare type PaymentMethodDetailsValid = Message<"qdrant.cloud.payment.v1.PaymentMethodDetails"> & {
  /**
   * The identifier of the payment method.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Card details.
   *
   * @generated from field: qdrant.cloud.payment.v1.Card card = 2;
   */
  card: CardValid;
};

/**
 * Describes the message qdrant.cloud.payment.v1.PaymentMethodDetails.
 * Use `create(PaymentMethodDetailsSchema)` to create a new message.
 */
export declare const PaymentMethodDetailsSchema: GenMessage<PaymentMethodDetails, {validType: PaymentMethodDetailsValid}>;

/**
 * Represents payment method card details
 *
 * @generated from message qdrant.cloud.payment.v1.Card
 */
export declare type Card = Message<"qdrant.cloud.payment.v1.Card"> & {
  /**
   * The brand of the card (e.g., "Visa", "Mastercard").
   *
   * @generated from field: string brand = 1;
   */
  brand: string;

  /**
   * The last 4 digits of the card number.
   *
   * @generated from field: string last4 = 2;
   */
  last4: string;

  /**
   * The expiration month of the card.
   *
   * @generated from field: int32 expiration_month = 3;
   */
  expirationMonth: number;

  /**
   * The expiration year of the card.
   *
   * @generated from field: int32 expiration_year = 4;
   */
  expirationYear: number;
};

/**
 * Represents payment method card details
 *
 * @generated from message qdrant.cloud.payment.v1.Card
 */
export declare type CardValid = Message<"qdrant.cloud.payment.v1.Card"> & {
  /**
   * The brand of the card (e.g., "Visa", "Mastercard").
   *
   * @generated from field: string brand = 1;
   */
  brand: string;

  /**
   * The last 4 digits of the card number.
   *
   * @generated from field: string last4 = 2;
   */
  last4: string;

  /**
   * The expiration month of the card.
   *
   * @generated from field: int32 expiration_month = 3;
   */
  expirationMonth: number;

  /**
   * The expiration year of the card.
   *
   * @generated from field: int32 expiration_year = 4;
   */
  expirationYear: number;
};

/**
 * Describes the message qdrant.cloud.payment.v1.Card.
 * Use `create(CardSchema)` to create a new message.
 */
export declare const CardSchema: GenMessage<Card, {validType: CardValid}>;

/**
 * PaymentProviderType defines the type of payment method.
 *
 * @generated from enum qdrant.cloud.payment.v1.PaymentProviderType
 */
export enum PaymentProviderType {
  /**
   * Unspecified type, should not be used.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Stripe payment method.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_STRIPE = 1;
   */
  STRIPE = 1,

  /**
   * AWS marketplace payment method.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_AWS_MARKETPLACE = 2;
   */
  AWS_MARKETPLACE = 2,

  /**
   * Google Cloud Platform marketplace payment method.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_GCP_MARKETPLACE = 3;
   */
  GCP_MARKETPLACE = 3,

  /**
   * Azure marketplace payment method.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_AZURE_MARKETPLACE = 4;
   */
  AZURE_MARKETPLACE = 4,

  /**
   * Custom payment method. This is used for custom payment methods that do not fit into the predefined categories.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_CUSTOM = 5;
   */
  CUSTOM = 5,
}

/**
 * Describes the enum qdrant.cloud.payment.v1.PaymentProviderType.
 */
export declare const PaymentProviderTypeSchema: GenEnum<PaymentProviderType>;

/**
 * PaymentMethodStatus defines the status of the payment method.
 *
 * @generated from enum qdrant.cloud.payment.v1.PaymentMethodStatus
 */
export enum PaymentMethodStatus {
  /**
   * Unspecified status, should not be used.
   *
   * @generated from enum value: PAYMENT_METHOD_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The payment method is active and can be used for payments.
   *
   * @generated from enum value: PAYMENT_METHOD_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The payment method is inactive and cannot be used for payments.
   *
   * @generated from enum value: PAYMENT_METHOD_STATUS_INACTIVE = 2;
   */
  INACTIVE = 2,

  /**
   * The payment method is pending verification or setup.
   *
   * @generated from enum value: PAYMENT_METHOD_STATUS_PENDING = 3;
   */
  PENDING = 3,
}

/**
 * Describes the enum qdrant.cloud.payment.v1.PaymentMethodStatus.
 */
export declare const PaymentMethodStatusSchema: GenEnum<PaymentMethodStatus>;

/**
 * Represents the status of a SetupIntent in Stripe.
 *
 * @generated from enum qdrant.cloud.payment.v1.StripeSetupIntentStatus
 */
export enum StripeSetupIntentStatus {
  /**
   * Default unspecified value.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * A payment method is required to proceed.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_REQUIRES_PAYMENT_METHOD = 1;
   */
  REQUIRES_PAYMENT_METHOD = 1,

  /**
   * The SetupIntent is ready to be confirmed.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_REQUIRES_CONFIRMATION = 2;
   */
  REQUIRES_CONFIRMATION = 2,

  /**
   * The SetupIntent requires further action (e.g., 3D Secure).
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_REQUIRES_ACTION = 3;
   */
  REQUIRES_ACTION = 3,

  /**
   * The SetupIntent is being processed.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_PROCESSING = 4;
   */
  PROCESSING = 4,

  /**
   * The SetupIntent has been canceled.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_CANCELED = 5;
   */
  CANCELED = 5,

  /**
   * The SetupIntent has succeeded.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_SUCCEEDED = 6;
   */
  SUCCEEDED = 6,
}

/**
 * Describes the enum qdrant.cloud.payment.v1.StripeSetupIntentStatus.
 */
export declare const StripeSetupIntentStatusSchema: GenEnum<StripeSetupIntentStatus>;

/**
 * PaymentService is the API used to manage payment settings.
 *
 * @generated from service qdrant.cloud.payment.v1.PaymentService
 */
export declare const PaymentService: GenService<{
  /**
   * Lists all payment methods known by the system for the provided account.
   * Required permissions:
   * - read:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.ListPaymentMethods
   */
  listPaymentMethods: {
    methodKind: "unary";
    input: typeof ListPaymentMethodsRequestSchema;
    output: typeof ListPaymentMethodsResponseSchema;
  },
  /**
   * Gets the payment method identified by the given ID.
   * Required permissions:
   * - read:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.GetPaymentMethod
   */
  getPaymentMethod: {
    methodKind: "unary";
    input: typeof GetPaymentMethodRequestSchema;
    output: typeof GetPaymentMethodResponseSchema;
  },
  /**
   * Creates a new payment method for the account.
   * This method is used to create a new payment method, which can then be connected to a payment provider (like Stripe).
   * Required permissions:
   * - write:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.CreatePaymentMethod
   */
  createPaymentMethod: {
    methodKind: "unary";
    input: typeof CreatePaymentMethodRequestSchema;
    output: typeof CreatePaymentMethodResponseSchema;
  },
  /**
   * Updates the payment method for the account.
   * This method is used to update the payment method details, such as billing address.
   * Required permissions:
   * - write:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.UpdatePaymentMethod
   */
  updatePaymentMethod: {
    methodKind: "unary";
    input: typeof UpdatePaymentMethodRequestSchema;
    output: typeof UpdatePaymentMethodResponseSchema;
  },
  /**
   * Delete the payment method identified by the given ID.
   * Required permissions:
   * - delete:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.DeletePaymentMethod
   */
  deletePaymentMethod: {
    methodKind: "unary";
    input: typeof DeletePaymentMethodRequestSchema;
    output: typeof DeletePaymentMethodResponseSchema;
  },
  /**
   * Get the Stripe Checkout session by its ID.
   * This method is used to retrieve the session details after it has been created.
   * Required permissions:
   * - write:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.GetStripeCheckoutSession
   */
  getStripeCheckoutSession: {
    methodKind: "unary";
    input: typeof GetStripeCheckoutSessionRequestSchema;
    output: typeof GetStripeCheckoutSessionResponseSchema;
  },
  /**
   * Initiates the creation of a Stripe Checkout session for the specified account.
   * This session can be used by the client (usually via frontend) to interact directly with Stripe's hosted payment page.
   * Required permissions:
   * - write:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.CreateStripeCheckoutSession
   */
  createStripeCheckoutSession: {
    methodKind: "unary";
    input: typeof CreateStripeCheckoutSessionRequestSchema;
    output: typeof CreateStripeCheckoutSessionResponseSchema;
  },
}>;

