// @generated by protoc-gen-es v2.5.2 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/payment/v1/payment.proto (package qdrant.cloud.payment.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file qdrant/cloud/payment/v1/payment.proto.
 */
export declare const file_qdrant_cloud_payment_v1_payment: GenFile;

/**
 * Request to list payment information for a specific account.
 *
 * @generated from message qdrant.cloud.payment.v1.ListPaymentInformationRequest
 */
export declare type ListPaymentInformationRequest = Message<"qdrant.cloud.payment.v1.ListPaymentInformationRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.ListPaymentInformationRequest.
 * Use `create(ListPaymentInformationRequestSchema)` to create a new message.
 */
export declare const ListPaymentInformationRequestSchema: GenMessage<ListPaymentInformationRequest>;

/**
 * Response containing a list of payment information.
 *
 * @generated from message qdrant.cloud.payment.v1.ListPaymentInformationResponse
 */
export declare type ListPaymentInformationResponse = Message<"qdrant.cloud.payment.v1.ListPaymentInformationResponse"> & {
  /**
   * The list of payment information.
   *
   * @generated from field: repeated qdrant.cloud.payment.v1.PaymentInformation items = 1;
   */
  items: PaymentInformation[];
};

/**
 * Describes the message qdrant.cloud.payment.v1.ListPaymentInformationResponse.
 * Use `create(ListPaymentInformationResponseSchema)` to create a new message.
 */
export declare const ListPaymentInformationResponseSchema: GenMessage<ListPaymentInformationResponse>;

/**
 * Request to get payment information by id.
 *
 * @generated from message qdrant.cloud.payment.v1.GetPaymentInformationRequest
 */
export declare type GetPaymentInformationRequest = Message<"qdrant.cloud.payment.v1.GetPaymentInformationRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the payment information (in GUID format).
   * This is a required field.
   *
   * @generated from field: string payment_information_id = 2;
   */
  paymentInformationId: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.GetPaymentInformationRequest.
 * Use `create(GetPaymentInformationRequestSchema)` to create a new message.
 */
export declare const GetPaymentInformationRequestSchema: GenMessage<GetPaymentInformationRequest>;

/**
 * Response containing the payment information.
 *
 * @generated from message qdrant.cloud.payment.v1.GetPaymentInformationResponse
 */
export declare type GetPaymentInformationResponse = Message<"qdrant.cloud.payment.v1.GetPaymentInformationResponse"> & {
  /**
   * The actual payment information.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentInformation payment_information = 1;
   */
  paymentInformation?: PaymentInformation;
};

/**
 * Describes the message qdrant.cloud.payment.v1.GetPaymentInformationResponse.
 * Use `create(GetPaymentInformationResponseSchema)` to create a new message.
 */
export declare const GetPaymentInformationResponseSchema: GenMessage<GetPaymentInformationResponse>;

/**
 * DeletePaymentInformationRequest is the request for the DeletePaymentInformation function
 *
 * @generated from message qdrant.cloud.payment.v1.DeletePaymentInformationRequest
 */
export declare type DeletePaymentInformationRequest = Message<"qdrant.cloud.payment.v1.DeletePaymentInformationRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the payment information (in GUID format).
   * This is a required field.
   *
   * @generated from field: string payment_information_id = 2;
   */
  paymentInformationId: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.DeletePaymentInformationRequest.
 * Use `create(DeletePaymentInformationRequestSchema)` to create a new message.
 */
export declare const DeletePaymentInformationRequestSchema: GenMessage<DeletePaymentInformationRequest>;

/**
 * DeletePaymentInformationResponse is the response from the DeletePaymentInformation function
 *
 * Empty
 *
 * @generated from message qdrant.cloud.payment.v1.DeletePaymentInformationResponse
 */
export declare type DeletePaymentInformationResponse = Message<"qdrant.cloud.payment.v1.DeletePaymentInformationResponse"> & {
};

/**
 * Describes the message qdrant.cloud.payment.v1.DeletePaymentInformationResponse.
 * Use `create(DeletePaymentInformationResponseSchema)` to create a new message.
 */
export declare const DeletePaymentInformationResponseSchema: GenMessage<DeletePaymentInformationResponse>;

/**
 * GetStripeCheckoutSessionRequest is the request for the GetStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.GetStripeCheckoutSessionRequest
 */
export declare type GetStripeCheckoutSessionRequest = Message<"qdrant.cloud.payment.v1.GetStripeCheckoutSessionRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the Stripe session.
   * This is a required field.
   *
   * @generated from field: string session_id = 2;
   */
  sessionId: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.GetStripeCheckoutSessionRequest.
 * Use `create(GetStripeCheckoutSessionRequestSchema)` to create a new message.
 */
export declare const GetStripeCheckoutSessionRequestSchema: GenMessage<GetStripeCheckoutSessionRequest>;

/**
 * GetStripeCheckoutSessionResponse is the response from the GetStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.GetStripeCheckoutSessionResponse
 */
export declare type GetStripeCheckoutSessionResponse = Message<"qdrant.cloud.payment.v1.GetStripeCheckoutSessionResponse"> & {
  /**
   * The Stripe session for the account.
   *
   * @generated from field: qdrant.cloud.payment.v1.StripeCheckoutSession stripe_session = 1;
   */
  stripeSession?: StripeCheckoutSession;
};

/**
 * Describes the message qdrant.cloud.payment.v1.GetStripeCheckoutSessionResponse.
 * Use `create(GetStripeCheckoutSessionResponseSchema)` to create a new message.
 */
export declare const GetStripeCheckoutSessionResponseSchema: GenMessage<GetStripeCheckoutSessionResponse>;

/**
 * CreateStripeCheckoutSessionRequest is the request for the CreateStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.CreateStripeCheckoutSessionRequest
 */
export declare type CreateStripeCheckoutSessionRequest = Message<"qdrant.cloud.payment.v1.CreateStripeCheckoutSessionRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * Redirect URL to which the user will be redirected after the payment setup is completed.
   *
   * @generated from field: string redirect_url = 2;
   */
  redirectUrl: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.CreateStripeCheckoutSessionRequest.
 * Use `create(CreateStripeCheckoutSessionRequestSchema)` to create a new message.
 */
export declare const CreateStripeCheckoutSessionRequestSchema: GenMessage<CreateStripeCheckoutSessionRequest>;

/**
 * CreateStripeCheckoutSessionResponse is the response from the CreateStripeCheckoutSession function
 *
 * @generated from message qdrant.cloud.payment.v1.CreateStripeCheckoutSessionResponse
 */
export declare type CreateStripeCheckoutSessionResponse = Message<"qdrant.cloud.payment.v1.CreateStripeCheckoutSessionResponse"> & {
  /**
   * Stripe session created for payment method setup or collection.
   *
   * @generated from field: qdrant.cloud.payment.v1.StripeCheckoutSession stripe_session = 1;
   */
  stripeSession?: StripeCheckoutSession;
};

/**
 * Describes the message qdrant.cloud.payment.v1.CreateStripeCheckoutSessionResponse.
 * Use `create(CreateStripeCheckoutSessionResponseSchema)` to create a new message.
 */
export declare const CreateStripeCheckoutSessionResponseSchema: GenMessage<CreateStripeCheckoutSessionResponse>;

/**
 * SetDefaultPaymentInformationRequest is the request for the ChangePaymentInformation function
 *
 * @generated from message qdrant.cloud.payment.v1.SetDefaultPaymentInformationRequest
 */
export declare type SetDefaultPaymentInformationRequest = Message<"qdrant.cloud.payment.v1.SetDefaultPaymentInformationRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the new payment information to set.
   *
   * @generated from field: string payment_information_id = 3;
   */
  paymentInformationId: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.SetDefaultPaymentInformationRequest.
 * Use `create(SetDefaultPaymentInformationRequestSchema)` to create a new message.
 */
export declare const SetDefaultPaymentInformationRequestSchema: GenMessage<SetDefaultPaymentInformationRequest>;

/**
 * SetDefaultPaymentInformationResponse is the response returned after a successful update.
 *
 * @generated from message qdrant.cloud.payment.v1.SetDefaultPaymentInformationResponse
 */
export declare type SetDefaultPaymentInformationResponse = Message<"qdrant.cloud.payment.v1.SetDefaultPaymentInformationResponse"> & {
  /**
   * New payment information that has been set for the account.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentInformation payment_information = 1;
   */
  paymentInformation?: PaymentInformation;
};

/**
 * Describes the message qdrant.cloud.payment.v1.SetDefaultPaymentInformationResponse.
 * Use `create(SetDefaultPaymentInformationResponseSchema)` to create a new message.
 */
export declare const SetDefaultPaymentInformationResponseSchema: GenMessage<SetDefaultPaymentInformationResponse>;

/**
 * Represents a Stripe Session abstraction containing Checkout session and SetupIntent references.
 *
 * @generated from message qdrant.cloud.payment.v1.StripeCheckoutSession
 */
export declare type StripeCheckoutSession = Message<"qdrant.cloud.payment.v1.StripeCheckoutSession"> & {
  /**
   * The unique identifier of the Stripe Checkout session.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The URL to redirect the user to complete the Checkout session.
   * This may be null if the session is incomplete or improperly initialized.
   *
   * @generated from field: optional string url = 2;
   */
  url?: string;

  /**
   * The Stripe customer ID associated with this session.
   *
   * @generated from field: string customer = 3;
   */
  customer: string;

  /**
   * The ID of the associated Stripe SetupIntent.
   *
   * @generated from field: string setup_intent_id = 4;
   */
  setupIntentId: string;

  /**
   * The status of the associated Stripe SetupIntent.
   *
   * @generated from field: qdrant.cloud.payment.v1.StripeSetupIntentStatus setup_intent_status = 5;
   */
  setupIntentStatus: StripeSetupIntentStatus;

  /**
   * The payment method attached to the associated SetupIntent.
   *
   * @generated from field: string setup_intent_payment_method = 6;
   */
  setupIntentPaymentMethod: string;
};

/**
 * Describes the message qdrant.cloud.payment.v1.StripeCheckoutSession.
 * Use `create(StripeCheckoutSessionSchema)` to create a new message.
 */
export declare const StripeCheckoutSessionSchema: GenMessage<StripeCheckoutSession>;

/**
 * Represents a payment information.
 * TODO: Is payment method a better name?
 *
 * @generated from message qdrant.cloud.payment.v1.PaymentInformation
 */
export declare type PaymentInformation = Message<"qdrant.cloud.payment.v1.PaymentInformation"> & {
  /**
   * Unique identifier for the payment information (in GUID format).
   * This is a read-only field and will be available after a payment information is created.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 2;
   */
  accountId: string;

  /**
   * The type of the payment information provider.
   * This is a required field.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentProviderType type = 3;
   */
  type: PaymentProviderType;

  /**
   * The customer account identifier in the payment provider system.
   * This is a required field.
   *
   * @generated from field: string payment_provider_id = 4;
   */
  paymentProviderId: string;

  /**
   * Represents the payment method details, such as card information.
   * This field is optional and only available for payment provider type Stripe for now.
   *
   * @generated from field: optional qdrant.cloud.payment.v1.PaymentMethod payment_method = 5;
   */
  paymentMethod?: PaymentMethod;

  /**
   * The billing address associated with the payment information.
   * This field is optional and only available for payment provider type Stripe.
   *
   * @generated from field: optional qdrant.cloud.payment.v1.BillingAddress billing_address = 6;
   */
  billingAddress?: BillingAddress;

  /**
   * The timestamp when the payment information was created.
   * This is a read-only field and will be available after a payment information is created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * The timestamp when the payment information was last updated.
   * This is a read-only field and will be available after a payment information is created.
   *
   * @generated from field: google.protobuf.Timestamp last_modified_at = 8;
   */
  lastModifiedAt?: Timestamp;

  /**
   * The tax ID associated with the payment information.
   * This is an optional field.
   *
   * @generated from field: optional string tax_id = 9;
   */
  taxId?: string;

  /**
   * The us default flag indicates if this payment information is the default one for the account.
   * Default payment information is used for all charges in the account.
   *
   * @generated from field: bool is_default = 10;
   */
  isDefault: boolean;

  /**
   * Payment information status.
   *
   * @generated from field: qdrant.cloud.payment.v1.PaymentInformationStatus status = 11;
   */
  status: PaymentInformationStatus;
};

/**
 * Describes the message qdrant.cloud.payment.v1.PaymentInformation.
 * Use `create(PaymentInformationSchema)` to create a new message.
 */
export declare const PaymentInformationSchema: GenMessage<PaymentInformation>;

/**
 * Represents a billing address for a payment information.
 *
 * @generated from message qdrant.cloud.payment.v1.BillingAddress
 */
export declare type BillingAddress = Message<"qdrant.cloud.payment.v1.BillingAddress"> & {
  /**
   * The name of the person or entity associated with the billing address.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The first line of the billing address.
   *
   * @generated from field: string line1 = 2;
   */
  line1: string;

  /**
   * The second line of the billing address.
   * This is an optional field.
   *
   * @generated from field: optional string line2 = 3;
   */
  line2?: string;

  /**
   * The postal code of the billing address.
   * This is an optional field.
   *
   * @generated from field: optional string postal_code = 4;
   */
  postalCode?: string;

  /**
   * The city of the billing address.
   *
   * @generated from field: string city = 5;
   */
  city: string;

  /**
   * The state or province of the billing address.
   *
   * @generated from field: string state = 6;
   */
  state: string;

  /**
   * The country of the billing address.
   *
   * @generated from field: string country = 7;
   */
  country: string;

  /**
   * The formatted country name.
   *
   * @generated from field: string country_formatted = 8;
   */
  countryFormatted: string;

  /**
   * The formatted state or province name.
   *
   * @generated from field: string state_formatted = 9;
   */
  stateFormatted: string;

  /**
   * Indicates if the country supports tax.
   *
   * @generated from field: bool tax_supported_country = 10;
   */
  taxSupportedCountry: boolean;
};

/**
 * Describes the message qdrant.cloud.payment.v1.BillingAddress.
 * Use `create(BillingAddressSchema)` to create a new message.
 */
export declare const BillingAddressSchema: GenMessage<BillingAddress>;

/**
 * Represents payment method
 *
 * @generated from message qdrant.cloud.payment.v1.PaymentMethod
 */
export declare type PaymentMethod = Message<"qdrant.cloud.payment.v1.PaymentMethod"> & {
  /**
   * The identifier of the payment method.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Card details.
   *
   * @generated from field: qdrant.cloud.payment.v1.Card card = 2;
   */
  card?: Card;
};

/**
 * Describes the message qdrant.cloud.payment.v1.PaymentMethod.
 * Use `create(PaymentMethodSchema)` to create a new message.
 */
export declare const PaymentMethodSchema: GenMessage<PaymentMethod>;

/**
 * Represents payment method card details
 *
 * @generated from message qdrant.cloud.payment.v1.Card
 */
export declare type Card = Message<"qdrant.cloud.payment.v1.Card"> & {
  /**
   * The brand of the card (e.g., "Visa", "Mastercard").
   *
   * @generated from field: string brand = 1;
   */
  brand: string;

  /**
   * The last 4 digits of the card number.
   *
   * @generated from field: string last4 = 2;
   */
  last4: string;

  /**
   * The expiration month of the card.
   *
   * @generated from field: int32 expiration_month = 3;
   */
  expirationMonth: number;

  /**
   * The expiration year of the card.
   *
   * @generated from field: int32 expiration_year = 4;
   */
  expirationYear: number;
};

/**
 * Describes the message qdrant.cloud.payment.v1.Card.
 * Use `create(CardSchema)` to create a new message.
 */
export declare const CardSchema: GenMessage<Card>;

/**
 * PaymentProviderType defines the type of payment information.
 *
 * @generated from enum qdrant.cloud.payment.v1.PaymentProviderType
 */
export enum PaymentProviderType {
  /**
   * Unspecified type, should not be used.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Stripe payment information.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_STRIPE = 1;
   */
  STRIPE = 1,

  /**
   * AWS marketplace payment information.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_AWS_MARKETPLACE = 2;
   */
  AWS_MARKETPLACE = 2,

  /**
   * Google Cloud Platform marketplace payment information.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_GCP_MARKETPLACE = 3;
   */
  GCP_MARKETPLACE = 3,

  /**
   * Azure marketplace payment information.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_AZURE_MARKETPLACE = 4;
   */
  AZURE_MARKETPLACE = 4,

  /**
   * Custom payment information. This is used for custom payment methods that do not fit into the predefined categories.
   *
   * @generated from enum value: PAYMENT_PROVIDER_TYPE_CUSTOM = 5;
   */
  CUSTOM = 5,
}

/**
 * Describes the enum qdrant.cloud.payment.v1.PaymentProviderType.
 */
export declare const PaymentProviderTypeSchema: GenEnum<PaymentProviderType>;

/**
 * PaymentInformationStatus defines the status of the payment information.
 *
 * @generated from enum qdrant.cloud.payment.v1.PaymentInformationStatus
 */
export enum PaymentInformationStatus {
  /**
   * Unspecified status, should not be used.
   *
   * @generated from enum value: PAYMENT_INFORMATION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The payment information is active and can be used for payments.
   *
   * @generated from enum value: PAYMENT_INFORMATION_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The payment information is inactive and cannot be used for payments.
   *
   * @generated from enum value: PAYMENT_INFORMATION_STATUS_INACTIVE = 2;
   */
  INACTIVE = 2,

  /**
   * The payment information is pending verification or setup.
   *
   * @generated from enum value: PAYMENT_INFORMATION_STATUS_PENDING = 3;
   */
  PENDING = 3,
}

/**
 * Describes the enum qdrant.cloud.payment.v1.PaymentInformationStatus.
 */
export declare const PaymentInformationStatusSchema: GenEnum<PaymentInformationStatus>;

/**
 * Represents the status of a SetupIntent in Stripe.
 *
 * @generated from enum qdrant.cloud.payment.v1.StripeSetupIntentStatus
 */
export enum StripeSetupIntentStatus {
  /**
   * Default unspecified value.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * A payment method is required to proceed.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_REQUIRES_PAYMENT_METHOD = 1;
   */
  REQUIRES_PAYMENT_METHOD = 1,

  /**
   * The SetupIntent is ready to be confirmed.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_REQUIRES_CONFIRMATION = 2;
   */
  REQUIRES_CONFIRMATION = 2,

  /**
   * The SetupIntent requires further action (e.g., 3D Secure).
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_REQUIRES_ACTION = 3;
   */
  REQUIRES_ACTION = 3,

  /**
   * The SetupIntent is being processed.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_PROCESSING = 4;
   */
  PROCESSING = 4,

  /**
   * The SetupIntent has been canceled.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_CANCELED = 5;
   */
  CANCELED = 5,

  /**
   * The SetupIntent has succeeded.
   *
   * @generated from enum value: STRIPE_SETUP_INTENT_STATUS_SUCCEEDED = 6;
   */
  SUCCEEDED = 6,
}

/**
 * Describes the enum qdrant.cloud.payment.v1.StripeSetupIntentStatus.
 */
export declare const StripeSetupIntentStatusSchema: GenEnum<StripeSetupIntentStatus>;

/**
 * PaymentService is the API used to manage payment settings.
 *
 * @generated from service qdrant.cloud.payment.v1.PaymentService
 */
export declare const PaymentService: GenService<{
  /**
   * Lists all payment information known by the system for the provided account.
   * Required permissions:
   * - read:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.ListPaymentInformation
   */
  listPaymentInformation: {
    methodKind: "unary";
    input: typeof ListPaymentInformationRequestSchema;
    output: typeof ListPaymentInformationResponseSchema;
  },
  /**
   * Gets the payment information identified by the given ID.
   * Required permissions:
   * - read:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.GetPaymentInformation
   */
  getPaymentInformation: {
    methodKind: "unary";
    input: typeof GetPaymentInformationRequestSchema;
    output: typeof GetPaymentInformationResponseSchema;
  },
  /**
   * Delete the payment information identified by the given ID.
   * Required permissions:
   * - write:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.DeletePaymentInformation
   */
  deletePaymentInformation: {
    methodKind: "unary";
    input: typeof DeletePaymentInformationRequestSchema;
    output: typeof DeletePaymentInformationResponseSchema;
  },
  /**
   * Get the Stripe Checkout session by its ID.
   * This method is used to retrieve the session details after it has been created.
   * Required permissions:
   * - write:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.GetStripeCheckoutSession
   */
  getStripeCheckoutSession: {
    methodKind: "unary";
    input: typeof GetStripeCheckoutSessionRequestSchema;
    output: typeof GetStripeCheckoutSessionResponseSchema;
  },
  /**
   * Initiates the creation of a Stripe Checkout session for the specified account.
   * This session can be used by the client (usually via frontend) to interact directly with Stripe's hosted payment page.
   * Required permissions:
   * - write:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.CreateStripeCheckoutSession
   */
  createStripeCheckoutSession: {
    methodKind: "unary";
    input: typeof CreateStripeCheckoutSessionRequestSchema;
    output: typeof CreateStripeCheckoutSessionResponseSchema;
  },
  /**
   * Updates the current payment information associated with the account.
   * After this change, the new payment information will be used for all future charges.
   * This does not create a new payment information, it simply switches to one already linked to the account.
   * Required permissions:
   * - write:payment_information
   *
   * @generated from rpc qdrant.cloud.payment.v1.PaymentService.SetDefaultPaymentInformation
   */
  setDefaultPaymentInformation: {
    methodKind: "unary";
    input: typeof SetDefaultPaymentInformationRequestSchema;
    output: typeof SetDefaultPaymentInformationResponseSchema;
  },
}>;

