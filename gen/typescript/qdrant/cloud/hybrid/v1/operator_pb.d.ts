// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/hybrid/v1/operator.proto (package qdrant.cloud.hybrid.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { TopologySpreadConstraint } from "../../../../k8s.io/api/core/v1/generated_pb.js";
import type { PodDisruptionBudget } from "../../../../k8s.io/api/policy/v1/generated_pb.js";
import type { DatabaseConfigurationLogLevel } from "../../cluster/v1/cluster_pb.js";
import type { NetworkPolicyEgressRule, NetworkPolicyIngressRule } from "../../../../k8s.io/api/networking/v1/generated_pb.js";

/**
 * Describes the file qdrant/cloud/hybrid/v1/operator.proto.
 */
export declare const file_qdrant_cloud_hybrid_v1_operator: GenFile;

/**
 * OperatorConfiguration represents the operator configuration
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorConfiguration
 */
export declare type OperatorConfiguration = Message<"qdrant.cloud.hybrid.v1.OperatorConfiguration"> & {
  /**
   * Log level
   *
   * @generated from field: optional string log_level = 1;
   */
  logLevel?: string;

  /**
   * Operator features
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorFeatures features = 2;
   */
  features?: OperatorFeatures;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorConfiguration.
 * Use `create(OperatorConfigurationSchema)` to create a new message.
 */
export declare const OperatorConfigurationSchema: GenMessage<OperatorConfiguration>;

/**
 * Operator features
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorFeatures
 */
export declare type OperatorFeatures = Message<"qdrant.cloud.hybrid.v1.OperatorFeatures"> & {
  /**
   * Cluster management feature
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorClusterManagement cluster_management = 1;
   */
  clusterManagement?: OperatorClusterManagement;

  /**
   * Backup management feature
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorBackupManagement backup_management = 2;
   */
  backupManagement?: OperatorBackupManagement;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorFeatures.
 * Use `create(OperatorFeaturesSchema)` to create a new message.
 */
export declare const OperatorFeaturesSchema: GenMessage<OperatorFeatures>;

/**
 * Backup management operator feature
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorBackupManagement
 */
export declare type OperatorBackupManagement = Message<"qdrant.cloud.hybrid.v1.OperatorBackupManagement"> & {
  /**
   * Whether or not the backup features are enabled.
   * Default is true.
   *
   * @generated from field: optional bool enabled = 1;
   */
  enabled?: boolean;

  /**
   * Snapshots configuration
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorSnapshots snapshots = 2;
   */
  snapshots?: OperatorSnapshots;

  /**
   * Scheduled snapshot configuration
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorScheduledSnapshots scheduled_snapshots = 3;
   */
  scheduledSnapshots?: OperatorScheduledSnapshots;

  /**
   * Restores configuration
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorRestores restores = 4;
   */
  restores?: OperatorRestores;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorBackupManagement.
 * Use `create(OperatorBackupManagementSchema)` to create a new message.
 */
export declare const OperatorBackupManagementSchema: GenMessage<OperatorBackupManagement>;

/**
 * Operator snapshots configuration
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorSnapshots
 */
export declare type OperatorSnapshots = Message<"qdrant.cloud.hybrid.v1.OperatorSnapshots"> & {
  /**
   * Set to true when enabled
   *
   * @generated from field: optional bool enabled = 1;
   */
  enabled?: boolean;

  /**
   * The VolumeSnapshotClass used to make VolumeSnapshots.
   * Default is "csi-snapclass".
   *
   * @generated from field: optional string volume_snapshot_class = 2;
   */
  volumeSnapshotClass?: string;

  /**
   * The duration a snapshot is retained when the phase becomes Failed or Skipped
   * Default is 72h (3d).
   *
   * @generated from field: optional string retain_unsuccessful = 3;
   */
  retainUnsuccessful?: string;

  /**
   * the maximum number of concurrent Reconciles which can be run. Defaults to 1.
   *
   * @generated from field: optional uint32 max_concurrent_reconciles = 4;
   */
  maxConcurrentReconciles?: number;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorSnapshots.
 * Use `create(OperatorSnapshotsSchema)` to create a new message.
 */
export declare const OperatorSnapshotsSchema: GenMessage<OperatorSnapshots>;

/**
 * Operator scheduled snapshots configuration
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorScheduledSnapshots
 */
export declare type OperatorScheduledSnapshots = Message<"qdrant.cloud.hybrid.v1.OperatorScheduledSnapshots"> & {
  /**
   * Whether or not the ScheduledSnapshot feature is enabled.
   * Default is true.
   *
   * @generated from field: optional bool enable = 1;
   */
  enable?: boolean;

  /**
   * the maximum number of concurrent Reconciles which can be run. Defaults to 1.
   *
   * @generated from field: optional int32 max_concurrent_reconciles = 3;
   */
  maxConcurrentReconciles?: number;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorScheduledSnapshots.
 * Use `create(OperatorScheduledSnapshotsSchema)` to create a new message.
 */
export declare const OperatorScheduledSnapshotsSchema: GenMessage<OperatorScheduledSnapshots>;

/**
 * Operator restores configuration
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorRestores
 */
export declare type OperatorRestores = Message<"qdrant.cloud.hybrid.v1.OperatorRestores"> & {
  /**
   * Whether or not the Restore feature is enabled.
   * Default is true.
   *
   * @generated from field: optional bool enable = 1;
   */
  enable?: boolean;

  /**
   * the maximum number of concurrent Reconciles which can be run. Defaults to 1.
   *
   * @generated from field: optional int32 max_concurrent_reconciles = 2;
   */
  maxConcurrentReconciles?: number;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorRestores.
 * Use `create(OperatorRestoresSchema)` to create a new message.
 */
export declare const OperatorRestoresSchema: GenMessage<OperatorRestores>;

/**
 * Operator cluster management feature
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorClusterManagement
 */
export declare type OperatorClusterManagement = Message<"qdrant.cloud.hybrid.v1.OperatorClusterManagement"> & {
  /**
   * Whether or not the ClusterManagement feature is enabled.
   * Default is true.
   *
   * @generated from field: optional bool enabled = 1;
   */
  enabled?: boolean;

  /**
   * The StorageClass used to make database and snapshot PVCs.
   * If unset, the default storage class of Kubernetes is used.
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorStorageClass storage_class = 2;
   */
  storageClass?: OperatorStorageClass;

  /**
   * Qdrant config contains settings specific for the database
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorQdrant qdrant = 3;
   */
  qdrant?: OperatorQdrant;

  /**
   * Scheduling config contains the settings specific for scheduling
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorScheduling scheduling = 4;
   */
  scheduling?: OperatorScheduling;

  /**
   * ClusterManager config contains the settings specific for cluster manager
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorClusterManager cluster_manager = 5;
   */
  clusterManager?: OperatorClusterManager;

  /**
   * Ingress config contains the settings specific for ingress
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorIngress ingress = 6;
   */
  ingress?: OperatorIngress;

  /**
   * The duration of a single call to the cluster telemetry endpoint is allowed to take.
   * Default is 3 seconds
   *
   * @generated from field: optional string telemetry_timeout = 7;
   */
  telemetryTimeout?: string;

  /**
   * the maximum number of concurrent Reconciles which can be run. Defaults to 20.
   *
   * @generated from field: optional uint32 max_concurrent_reconciles = 8;
   */
  maxConcurrentReconciles?: number;

  /**
   * VolumeExpansionMode specifies the expansion mode, which can be online or offline (e.g. in case of Azure).
   *
   * @generated from field: optional string volume_expansion_mode = 9;
   */
  volumeExpansionMode?: string;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorClusterManagement.
 * Use `create(OperatorClusterManagementSchema)` to create a new message.
 */
export declare const OperatorClusterManagementSchema: GenMessage<OperatorClusterManagement>;

/**
 * TODO is it worth of exposing this through API?
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorScheduling
 */
export declare type OperatorScheduling = Message<"qdrant.cloud.hybrid.v1.OperatorScheduling"> & {
  /**
   * Topology constraints for Qdrant pod scheduling
   *
   * @generated from field: repeated k8s.io.api.core.v1.TopologySpreadConstraint topology_spread_constraints = 1;
   */
  topologySpreadConstraints: TopologySpreadConstraint[];

  /**
   * Default Qdrant pod disruption budget
   *
   * @generated from field: repeated k8s.io.api.policy.v1.PodDisruptionBudget pod_disruption_budget = 2;
   */
  podDisruptionBudget: PodDisruptionBudget[];
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorScheduling.
 * Use `create(OperatorSchedulingSchema)` to create a new message.
 */
export declare const OperatorSchedulingSchema: GenMessage<OperatorScheduling>;

/**
 * TODO is it worth of exposing this, given that cluster manager is always installed?
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorClusterManager
 */
export declare type OperatorClusterManager = Message<"qdrant.cloud.hybrid.v1.OperatorClusterManager"> & {
  /**
   * TODO
   *
   * @generated from field: optional bool enable = 1;
   */
  enable?: boolean;

  /**
   * TODO
   *
   * @generated from field: optional string endpoint_address = 2;
   */
  endpointAddress?: string;

  /**
   * TODO
   *
   * @generated from field: optional string invocation_interval = 3;
   */
  invocationInterval?: string;

  /**
   * TODO
   *
   * @generated from field: optional string timeout = 4;
   */
  timeout?: string;

  /**
   * TODO
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorClusterManagerOverrides manage_rules_overrides = 5;
   */
  manageRulesOverrides?: OperatorClusterManagerOverrides;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorClusterManager.
 * Use `create(OperatorClusterManagerSchema)` to create a new message.
 */
export declare const OperatorClusterManagerSchema: GenMessage<OperatorClusterManager>;

/**
 * TODO - should not be exposed through API because in hybrid cloud we expose clusters only via clusterIP
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorIngress
 */
export declare type OperatorIngress = Message<"qdrant.cloud.hybrid.v1.OperatorIngress"> & {
  /**
   * TODO
   *
   * @generated from field: optional bool enable = 1;
   */
  enable?: boolean;

  /**
   * TODO
   *
   * @generated from field: optional string provider = 2;
   */
  provider?: string;

  /**
   * TODO
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorKubernetesIngress kubernetes_ingress = 3;
   */
  kubernetesIngress?: OperatorKubernetesIngress;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorIngress.
 * Use `create(OperatorIngressSchema)` to create a new message.
 */
export declare const OperatorIngressSchema: GenMessage<OperatorIngress>;

/**
 * TODO
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorKubernetesIngress
 */
export declare type OperatorKubernetesIngress = Message<"qdrant.cloud.hybrid.v1.OperatorKubernetesIngress"> & {
  /**
   * TODO
   *
   * @generated from field: optional string ingress_class_name = 1;
   */
  ingressClassName?: string;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorKubernetesIngress.
 * Use `create(OperatorKubernetesIngressSchema)` to create a new message.
 */
export declare const OperatorKubernetesIngressSchema: GenMessage<OperatorKubernetesIngress>;

/**
 * TODO
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorClusterManagerOverrides
 */
export declare type OperatorClusterManagerOverrides = Message<"qdrant.cloud.hybrid.v1.OperatorClusterManagerOverrides"> & {
  /**
   * TODO
   *
   * @generated from field: optional bool dry_run = 1;
   */
  dryRun?: boolean;

  /**
   * TODO
   *
   * @generated from field: optional int32 max_transfers = 2;
   */
  maxTransfers?: number;

  /**
   * TODO
   *
   * @generated from field: optional int32 max_transfers_per_collection = 3;
   */
  maxTransfersPerCollection?: number;

  /**
   * TODO
   *
   * @generated from field: optional string rebalance = 4;
   */
  rebalance?: string;

  /**
   * TODO
   *
   * @generated from field: optional string replicate = 5;
   */
  replicate?: string;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorClusterManagerOverrides.
 * Use `create(OperatorClusterManagerOverridesSchema)` to create a new message.
 */
export declare const OperatorClusterManagerOverridesSchema: GenMessage<OperatorClusterManagerOverrides>;

/**
 * Operator storage class
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorStorageClass
 */
export declare type OperatorStorageClass = Message<"qdrant.cloud.hybrid.v1.OperatorStorageClass"> & {
  /**
   * The StorageClass used to make database PVCs.
   * If unset, the default storage class of Kubernetes is used.
   *
   * @generated from field: optional string database = 2;
   */
  database?: string;

  /**
   * The StorageClass used to make snapshot PVCs.
   * If unset, the default storage class of Kubernetes is used.
   *
   * @generated from field: optional string snapshot = 3;
   */
  snapshot?: string;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorStorageClass.
 * Use `create(OperatorStorageClassSchema)` to create a new message.
 */
export declare const OperatorStorageClassSchema: GenMessage<OperatorStorageClass>;

/**
 * Operator Qdrant database config
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorQdrant
 */
export declare type OperatorQdrant = Message<"qdrant.cloud.hybrid.v1.OperatorQdrant"> & {
  /**
   * The config where to find images for Qdrant cluster
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorQdrantImage image = 1;
   */
  image?: OperatorQdrantImage;

  /**
   * storage contains the settings for the storage of the Qdrant cluster
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorQdrantStorage storage = 2;
   */
  storage?: OperatorQdrantStorage;

  /**
   * Qdrant DB log level
   * Default is INFO.
   *
   * @generated from field: optional qdrant.cloud.cluster.v1.DatabaseConfigurationLogLevel log_level = 3;
   */
  logLevel?: DatabaseConfigurationLogLevel;

  /**
   * Default Qdrant security context configuration
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorSecurityContext security_context = 4;
   */
  securityContext?: OperatorSecurityContext;

  /**
   * Network policies configuration for the Qdrant databases
   * TODO, not sure if needs to be exposed.
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorNetworkPolicy network_policies = 5;
   */
  networkPolicies?: OperatorNetworkPolicy;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorQdrant.
 * Use `create(OperatorQdrantSchema)` to create a new message.
 */
export declare const OperatorQdrantSchema: GenMessage<OperatorQdrant>;

/**
 * Network policies configuration for the Qdrant databases
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorNetworkPolicy
 */
export declare type OperatorNetworkPolicy = Message<"qdrant.cloud.hybrid.v1.OperatorNetworkPolicy"> & {
  /**
   * Whether or not NetworkPolicy management is enabled.
   * If set to false, no NetworkPolicies will be created.
   * Default is true.
   *
   * @generated from field: optional bool enabled = 1;
   */
  enabled?: boolean;

  /**
   * Ingress rules
   *
   * @generated from field: repeated k8s.io.api.networking.v1.NetworkPolicyIngressRule ingress = 2;
   */
  ingress: NetworkPolicyIngressRule[];

  /**
   * Egress rules
   *
   * @generated from field: repeated k8s.io.api.networking.v1.NetworkPolicyEgressRule egress = 3;
   */
  egress: NetworkPolicyEgressRule[];
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorNetworkPolicy.
 * Use `create(OperatorNetworkPolicySchema)` to create a new message.
 */
export declare const OperatorNetworkPolicySchema: GenMessage<OperatorNetworkPolicy>;

/**
 * Default Qdrant security context configuration
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorSecurityContext
 */
export declare type OperatorSecurityContext = Message<"qdrant.cloud.hybrid.v1.OperatorSecurityContext"> & {
  /**
   * Enable default security context.
   * Default is false.
   *
   * @generated from field: optional bool enabled = 1;
   */
  enabled?: boolean;

  /**
   * Default user for qdrant container
   *
   * @generated from field: optional string user = 2;
   */
  user?: string;

  /**
   * Default fsGroup for qdrant container
   *
   * @generated from field: optional string fs_group = 3;
   */
  fsGroup?: string;

  /**
   * Default group for qdrant container
   *
   * @generated from field: optional string group = 4;
   */
  group?: string;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorSecurityContext.
 * Use `create(OperatorSecurityContextSchema)` to create a new message.
 */
export declare const OperatorSecurityContextSchema: GenMessage<OperatorSecurityContext>;

/**
 * Storage contains the settings for the storage of the Qdrant cluster
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorQdrantStorage
 */
export declare type OperatorQdrantStorage = Message<"qdrant.cloud.hybrid.v1.OperatorQdrantStorage"> & {
  /**
   * Performance storage settings
   *
   * @generated from field: optional qdrant.cloud.hybrid.v1.OperatorQdrantPerformance performance = 1;
   */
  performance?: OperatorQdrantPerformance;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorQdrantStorage.
 * Use `create(OperatorQdrantStorageSchema)` to create a new message.
 */
export declare const OperatorQdrantStorageSchema: GenMessage<OperatorQdrantStorage>;

/**
 * Storage performance config
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorQdrantPerformance
 */
export declare type OperatorQdrantPerformance = Message<"qdrant.cloud.hybrid.v1.OperatorQdrantPerformance"> & {
  /**
   * CPU budget, how many CPUs (threads) to allocate for an optimization job.
   * If 0 - auto selection, keep 1 or more CPUs unallocated depending on CPU size
   * If negative - subtract this number of CPUs from the available CPUs.
   * If positive - use this exact number of CPUs.
   *
   * @generated from field: optional int32 optimizer_cpu_budget = 1;
   */
  optimizerCpuBudget?: number;

  /**
   * Enable async scorer which uses io_uring when rescoring.
   * Only supported on Linux, must be enabled in your kernel.
   * See: <https://qdrant.tech/articles/io_uring/#and-what-about-qdrant>
   *
   * @generated from field: optional bool async_scorer = 2;
   */
  asyncScorer?: boolean;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorQdrantPerformance.
 * Use `create(OperatorQdrantPerformanceSchema)` to create a new message.
 */
export declare const OperatorQdrantPerformanceSchema: GenMessage<OperatorQdrantPerformance>;

/**
 * config where to find the image for Qqdrant
 *
 * @generated from message qdrant.cloud.hybrid.v1.OperatorQdrantImage
 */
export declare type OperatorQdrantImage = Message<"qdrant.cloud.hybrid.v1.OperatorQdrantImage"> & {
  /**
   * The repository where to find the image for qdrant
   * Default is "qdrant/qdrant"
   *
   * @generated from field: optional string repository = 1;
   */
  repository?: string;

  /**
   * Image pull policy
   *
   * @generated from field: optional string pull_policy = 2;
   */
  pullPolicy?: string;

  /**
   * Image pull secret name
   *
   * @generated from field: optional string pull_secret_name = 3;
   */
  pullSecretName?: string;
};

/**
 * Describes the message qdrant.cloud.hybrid.v1.OperatorQdrantImage.
 * Use `create(OperatorQdrantImageSchema)` to create a new message.
 */
export declare const OperatorQdrantImageSchema: GenMessage<OperatorQdrantImage>;

