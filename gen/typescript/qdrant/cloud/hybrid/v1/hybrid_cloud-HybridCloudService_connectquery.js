// @generated by protoc-gen-connect-query v0.4.1
// @generated from file qdrant/cloud/hybrid/v1/hybrid_cloud.proto (package qdrant.cloud.hybrid.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { MethodKind } from "@bufbuild/protobuf";
import { CreateHybridCloudEnvironmentRequest, CreateHybridCloudEnvironmentResponse, DeleteHybridCloudEnvironmentRequest, DeleteHybridCloudEnvironmentResponse, GetBootstrapCommandsRequest, GetBootstrapCommandsResponse, GetHybridCloudEnvironmentRequest, GetHybridCloudEnvironmentResponse, ListHybridCloudEnvironmentsRequest, ListHybridCloudEnvironmentsResponse, UpdateHybridCloudEnvironmentRequest, UpdateHybridCloudEnvironmentResponse } from "./hybrid_cloud_pb.js";

export const typeName = "qdrant.cloud.hybrid.v1.HybridCloudService";

/**
 * Lists all hybrid cloud environments in the account identified by the given ID.
 * Required permissions (any-of):
 * - read:hybrid_cloud_environments
 * - write:clusters
 *
 * @generated from rpc qdrant.cloud.hybrid.v1.HybridCloudService.ListHybridCloudEnvironments
 */
export const listHybridCloudEnvironments = createQueryService({
  service: {
    methods: {
      listHybridCloudEnvironments: {
        name: "ListHybridCloudEnvironments",
        kind: MethodKind.Unary,
        I: ListHybridCloudEnvironmentsRequest,
        O: ListHybridCloudEnvironmentsResponse,
      },
    },
    typeName: "qdrant.cloud.hybrid.v1.HybridCloudService",
  },
}).listHybridCloudEnvironments;

/**
 * Gets a hybrid cloud environment in the account identified by the given ID.
 * Required permissions (any-of):
 * - read:hybrid_cloud_environments
 * - write:clusters
 *
 * @generated from rpc qdrant.cloud.hybrid.v1.HybridCloudService.GetHybridCloudEnvironment
 */
export const getHybridCloudEnvironment = createQueryService({
  service: {
    methods: {
      getHybridCloudEnvironment: {
        name: "GetHybridCloudEnvironment",
        kind: MethodKind.Unary,
        I: GetHybridCloudEnvironmentRequest,
        O: GetHybridCloudEnvironmentResponse,
      },
    },
    typeName: "qdrant.cloud.hybrid.v1.HybridCloudService",
  },
}).getHybridCloudEnvironment;

/**
 * Creates a hybrid cloud environment in the account identified by the given ID.
 * Required permissions:
 * - write:hybrid_cloud_environments
 *
 * @generated from rpc qdrant.cloud.hybrid.v1.HybridCloudService.CreateHybridCloudEnvironment
 */
export const createHybridCloudEnvironment = createQueryService({
  service: {
    methods: {
      createHybridCloudEnvironment: {
        name: "CreateHybridCloudEnvironment",
        kind: MethodKind.Unary,
        I: CreateHybridCloudEnvironmentRequest,
        O: CreateHybridCloudEnvironmentResponse,
      },
    },
    typeName: "qdrant.cloud.hybrid.v1.HybridCloudService",
  },
}).createHybridCloudEnvironment;

/**
 * Updates a hybrid cloud environment in the account identified by the given ID.
 * Required permissions:
 * - write:hybrid_cloud_environments
 *
 * @generated from rpc qdrant.cloud.hybrid.v1.HybridCloudService.UpdateHybridCloudEnvironment
 */
export const updateHybridCloudEnvironment = createQueryService({
  service: {
    methods: {
      updateHybridCloudEnvironment: {
        name: "UpdateHybridCloudEnvironment",
        kind: MethodKind.Unary,
        I: UpdateHybridCloudEnvironmentRequest,
        O: UpdateHybridCloudEnvironmentResponse,
      },
    },
    typeName: "qdrant.cloud.hybrid.v1.HybridCloudService",
  },
}).updateHybridCloudEnvironment;

/**
 * Deletes a hybrid cloud environment in the account identified by the given ID.
 * Required permissions:
 * - delete:hybrid_cloud_environments
 *
 * @generated from rpc qdrant.cloud.hybrid.v1.HybridCloudService.DeleteHybridCloudEnvironment
 */
export const deleteHybridCloudEnvironment = createQueryService({
  service: {
    methods: {
      deleteHybridCloudEnvironment: {
        name: "DeleteHybridCloudEnvironment",
        kind: MethodKind.Unary,
        I: DeleteHybridCloudEnvironmentRequest,
        O: DeleteHybridCloudEnvironmentResponse,
      },
    },
    typeName: "qdrant.cloud.hybrid.v1.HybridCloudService",
  },
}).deleteHybridCloudEnvironment;

/**
 * Gets the commands that should be executed against a kubernetes cluster to
 * bootstrap it to the hybrid cloud environment. The operation can be invoked multiple times,
 * but be aware that each invocation is going to create new Qdrant cloud access token and the registry credentials.
 * Thus, it make sense to call it only if a kubernetes cluster is not yet registered to the given hybrid environment.
 * Required permission:
 * - write:hybrid_cloud_environments
 *
 * @generated from rpc qdrant.cloud.hybrid.v1.HybridCloudService.GetBootstrapCommands
 */
export const getBootstrapCommands = createQueryService({
  service: {
    methods: {
      getBootstrapCommands: {
        name: "GetBootstrapCommands",
        kind: MethodKind.Unary,
        I: GetBootstrapCommandsRequest,
        O: GetBootstrapCommandsResponse,
      },
    },
    typeName: "qdrant.cloud.hybrid.v1.HybridCloudService",
  },
}).getBootstrapCommands;
