// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/hybrid/v1/hybrid_cloud.proto (package qdrant.cloud.hybrid.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb.js";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb.js";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_qdrant_cloud_cluster_v1_cluster } from "../../cluster/v1/cluster_pb.js";
import { file_qdrant_cloud_common_v1_common } from "../../common/v1/common_pb.js";
import { file_qdrant_cloud_hybrid_v1_operator } from "./operator_pb.js";

/**
 * Describes the file qdrant/cloud/hybrid/v1/hybrid_cloud.proto.
 */
export const file_qdrant_cloud_hybrid_v1_hybrid_cloud = /*@__PURE__*/
  fileDesc("CilxZHJhbnQvY2xvdWQvaHlicmlkL3YxL2h5YnJpZF9jbG91ZC5wcm90bxIWcWRyYW50LmNsb3VkLmh5YnJpZC52MSJzCiRHZXRJbml0aWFsSW5zdGFsbGF0aW9uQ29tbWFuZFJlcXVlc3QSLQobaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkGAEgASgJQgi6SAVyA7ABARIcCgphY2NvdW50X2lkGAIgASgJQgi6SAVyA7ABASI4CiVHZXRJbml0aWFsSW5zdGFsbGF0aW9uQ29tbWFuZFJlc3BvbnNlEg8KB2NvbW1hbmQYASABKAkicgojRGVsZXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlcXVlc3QSLQobaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkGAEgASgJQgi6SAVyA7ABARIcCgphY2NvdW50X2lkGAIgASgJQgi6SAVyA7ABASImCiREZWxldGVIeWJyaWRDbG91ZEVudmlyb25tZW50UmVzcG9uc2UidwojVXBkYXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlcXVlc3QSUAoYaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50GAEgASgLMi4ucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50IngKJFVwZGF0ZUh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXNwb25zZRJQChhoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQYASABKAsyLi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnQidwojQ3JlYXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlcXVlc3QSUAoYaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50GAEgASgLMi4ucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50IngKJENyZWF0ZUh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXNwb25zZRJQChhoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQYASABKAsyLi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnQibwogR2V0SHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlcXVlc3QSLQobaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkGAEgASgJQgi6SAVyA7ABARIcCgphY2NvdW50X2lkGAIgASgJQgi6SAVyA7ABASJ1CiFHZXRIeWJyaWRDbG91ZEVudmlyb25tZW50UmVzcG9uc2USUAoYaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50GAEgASgLMi4ucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50IkIKIkxpc3RIeWJyaWRDbG91ZEVudmlyb25tZW50c1JlcXVlc3QSHAoKYWNjb3VudF9pZBgBIAEoCUIIukgFcgOwAQEiZAojTGlzdEh5YnJpZENsb3VkRW52aXJvbm1lbnRzUmVzcG9uc2USPQoFaXRlbXMYASADKAsyLi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnQi4QQKFkh5YnJpZENsb3VkRW52aXJvbm1lbnQSCgoCaWQYASABKAkSLgoKY3JlYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLwoLbW9kaWZpZWRfYXQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhwKCmFjY291bnRfaWQYBCABKAlCCLpIBXIDsAEBEikKBG5hbWUYBSABKAlCG7pIGHIWEAQYQDIQXlthLXpBLVowLTktX10rJBISCgpjcmVhdGVkX2J5GAcgASgJElcKDWNvbmZpZ3VyYXRpb24YFCABKAsyOy5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnRDb25maWd1cmF0aW9uSACIAQESSQoGc3RhdHVzGBUgASgLMjQucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50U3RhdHVzSAGIAQE6uwG6SLcBGrQBChtoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQuaWQSGnZhbHVlIG11c3QgYmUgYSB2YWxpZCBVVUlEGnl0aGlzLmlkLm1hdGNoZXMoJ15bMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kJykgfHwgIWhhcyh0aGlzLmNyZWF0ZWRfYXQpQhAKDl9jb25maWd1cmF0aW9uQgkKB19zdGF0dXMivAoKI0h5YnJpZENsb3VkRW52aXJvbm1lbnRDb25maWd1cmF0aW9uEi4KCmNyZWF0ZWRfYXQYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg8KB3ZlcnNpb24YAiABKA0SSwoPb3BlcmF0b3JfY29uZmlnGAMgASgLMi0ucWRyYW50LmNsb3VkLmh5YnJpZC52MS5PcGVyYXRvckNvbmZpZ3VyYXRpb25IAIgBARIuCgluYW1lc3BhY2UYBCABKAlCG7pIGHIWEAEY/QEyD15bYS16QS1aMC05LV0rJBIbCg5odHRwX3Byb3h5X3VybBgFIAEoCUgBiAEBEhwKD2h0dHBzX3Byb3h5X3VybBgGIAEoCUgCiAEBEiEKD25vX3Byb3h5X2NvbmZpZxgHIAMoCUIIukgFkgECCAASIwoWY29udGFpbmVyX3JlZ2lzdHJ5X3VybBgIIAEoCUgDiAEBEiEKFGNoYXJ0X3JlcG9zaXRvcnlfdXJsGAkgASgJSASIAQESIQoUcmVnaXN0cnlfc2VjcmV0X25hbWUYCiABKAlIBYgBARIcCg9jYV9jZXJ0aWZpY2F0ZXMYCyABKAlIBogBARIqCh1xZHJhbnRfa3ViZXJuZXRlc19hcGlfdmVyc2lvbhgMIAEoCUgHiAEBEhUKDWFnZW50X3ZlcnNpb24YDSABKAkSHQoQb3BlcmF0b3JfdmVyc2lvbhgOIAEoCUgIiAEBEh8KEnByb21ldGhldXNfdmVyc2lvbhgPIAEoCUgJiAEBEi4KIWt1YmVybmV0ZXNfZXZlbnRfZXhwb3J0ZXJfdmVyc2lvbhgQIAEoCUgKiAEBEikKHHFkcmFudF9ub2RlX2V4cG9ydGVyX3ZlcnNpb24YESABKAlIC4gBARIsCh9xZHJhbnRfY2x1c3Rlcl9leHBvcnRlcl92ZXJzaW9uGBIgASgJSAyIAQESKwoecWRyYW50X2NsdXN0ZXJfbWFuYWdlcl92ZXJzaW9uGBMgASgJSA2IAQESEgoKY3JlYXRlZF9ieRgUIAEoCRIWCglsb2dfbGV2ZWwYFSABKAlIDogBARJCCgt0b2xlcmF0aW9ucxgWIAMoCzIjLnFkcmFudC5jbG91ZC5jbHVzdGVyLnYxLlRvbGVyYXRpb25CCLpIBZIBAggAEkEKDW5vZGVfc2VsZWN0b3IYFyADKAsyIC5xZHJhbnQuY2xvdWQuY29tbW9uLnYxLktleVZhbHVlQgi6SAWSAQIQCkISChBfb3BlcmF0b3JfY29uZmlnQhEKD19odHRwX3Byb3h5X3VybEISChBfaHR0cHNfcHJveHlfdXJsQhkKF19jb250YWluZXJfcmVnaXN0cnlfdXJsQhcKFV9jaGFydF9yZXBvc2l0b3J5X3VybEIXChVfcmVnaXN0cnlfc2VjcmV0X25hbWVCEgoQX2NhX2NlcnRpZmljYXRlc0IgCh5fcWRyYW50X2t1YmVybmV0ZXNfYXBpX3ZlcnNpb25CEwoRX29wZXJhdG9yX3ZlcnNpb25CFQoTX3Byb21ldGhldXNfdmVyc2lvbkIkCiJfa3ViZXJuZXRlc19ldmVudF9leHBvcnRlcl92ZXJzaW9uQh8KHV9xZHJhbnRfbm9kZV9leHBvcnRlcl92ZXJzaW9uQiIKIF9xZHJhbnRfY2x1c3Rlcl9leHBvcnRlcl92ZXJzaW9uQiEKH19xZHJhbnRfY2x1c3Rlcl9tYW5hZ2VyX3ZlcnNpb25CDAoKX2xvZ19sZXZlbCLJBwocSHlicmlkQ2xvdWRFbnZpcm9ubWVudFN0YXR1cxI0Cgttb2RpZmllZF9hdBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAIgBARIWCg5zY2hlbWFfdmVyc2lvbhgCIAEoCRJICgVwaGFzZRgDIAEoDjI5LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuSHlicmlkQ2xvdWRFbnZpcm9ubWVudFN0YXR1c1BoYXNlEhMKC2s4c192ZXJzaW9uGAQgASgJEhcKD251bWJlcl9vZl9ub2RlcxgFIAEoDRJQCgxjYXBhYmlsaXRpZXMYBiABKAsyOi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnRDYXBhYmlsaXRpZXMSWAoRaGVsbV9yZXBvc2l0b3JpZXMYByADKAsyPS5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnRDb21wb25lbnRTdGF0dXMSVAoNaGVsbV9yZWxlYXNlcxgIIAMoCzI9LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuSHlicmlkQ2xvdWRFbnZpcm9ubWVudENvbXBvbmVudFN0YXR1cxInChpyZWFkeV9mb3JfY2x1c3Rlcl9jcmVhdGlvbhgJIAEoCEgBiAEBEk0KEGs4c19kaXN0cmlidXRpb24YCiABKA4yLi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkt1YmVybmV0ZXNEaXN0cmlidXRpb25IAogBARIUCgdtZXNzYWdlGAsgASgJSAOIAQESUwoPc3RvcmFnZV9jbGFzc2VzGAwgAygLMjoucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50U3RvcmFnZUNsYXNzEmIKF3ZvbHVtZV9zbmFwc2hvdF9jbGFzc2VzGA0gAygLMkEucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50Vm9sdW1lU25hcHNob3RDbGFzcxJKCgpub2RlX2luZm9zGA4gAygLMjYucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50Tm9kZUluZm9CDgoMX21vZGlmaWVkX2F0Qh0KG19yZWFkeV9mb3JfY2x1c3Rlcl9jcmVhdGlvbkITChFfazhzX2Rpc3RyaWJ1dGlvbkIKCghfbWVzc2FnZSJXCiJIeWJyaWRDbG91ZEVudmlyb25tZW50Q2FwYWJpbGl0aWVzEhcKD3ZvbHVtZV9zbmFwc2hvdBgBIAEoCBIYChB2b2x1bWVfZXhwYW5zaW9uGAIgASgIIt8BCiVIeWJyaWRDbG91ZEVudmlyb25tZW50Q29tcG9uZW50U3RhdHVzEgwKBG5hbWUYASABKAkSEQoJbmFtZXNwYWNlGAIgASgJEhQKB3ZlcnNpb24YAyABKAlIAIgBARJRCgVwaGFzZRgEIAEoDjJCLnFkcmFudC5jbG91ZC5oeWJyaWQudjEuSHlicmlkQ2xvdWRFbnZpcm9ubWVudENvbXBvbmVudFN0YXR1c1BoYXNlEhQKB21lc3NhZ2UYBSABKAlIAYgBAUIKCghfdmVyc2lvbkIKCghfbWVzc2FnZSLGAQoiSHlicmlkQ2xvdWRFbnZpcm9ubWVudFN0b3JhZ2VDbGFzcxIMCgRuYW1lGAEgASgJEg8KB2RlZmF1bHQYAiABKAgSEwoLcHJvdmlzaW9uZXIYAyABKAkSHgoWYWxsb3dfdm9sdW1lX2V4cGFuc2lvbhgEIAEoCBIWCg5yZWNsYWltX3BvbGljeRgFIAEoCRI0CgpwYXJhbWV0ZXJzGAYgAygLMiAucWRyYW50LmNsb3VkLmNvbW1vbi52MS5LZXlWYWx1ZSJJCilIeWJyaWRDbG91ZEVudmlyb25tZW50Vm9sdW1lU25hcHNob3RDbGFzcxIMCgRuYW1lGAEgASgJEg4KBmRyaXZlchgCIAEoCSLbAgoeSHlicmlkQ2xvdWRFbnZpcm9ubWVudE5vZGVJbmZvEgwKBG5hbWUYASABKAkSEwoGcmVnaW9uGAIgASgJSACIAQESEQoEem9uZRgDIAEoCUgBiAEBEhoKDWluc3RhbmNlX3R5cGUYBCABKAlIAogBARIRCgRhcmNoGAUgASgJSAOIAQESUAoIY2FwYWNpdHkYBiABKAsyPi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnROb2RlUmVzb3VyY2VJbmZvElMKC2FsbG9jYXRhYmxlGAcgASgLMj4ucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50Tm9kZVJlc291cmNlSW5mb0IJCgdfcmVnaW9uQgcKBV96b25lQhAKDl9pbnN0YW5jZV90eXBlQgcKBV9hcmNoIm4KJkh5YnJpZENsb3VkRW52aXJvbm1lbnROb2RlUmVzb3VyY2VJbmZvEgsKA2NwdRgBIAEoCRIOCgZtZW1vcnkYAiABKAkSDAoEcG9kcxgDIAEoCRIZChFlcGhlbWVyYWxfc3RvcmFnZRgEIAEoCSr6AQohSHlicmlkQ2xvdWRFbnZpcm9ubWVudFN0YXR1c1BoYXNlEjUKMUhZQlJJRF9DTE9VRF9FTlZJUk9OTUVOVF9TVEFUVVNfUEhBU0VfVU5TUEVDSUZJRUQQABIvCitIWUJSSURfQ0xPVURfRU5WSVJPTk1FTlRfU1RBVFVTX1BIQVNFX1JFQURZEAESMwovSFlCUklEX0NMT1VEX0VOVklST05NRU5UX1NUQVRVU19QSEFTRV9OT1RfUkVBRFkQAhI4CjRIWUJSSURfQ0xPVURfRU5WSVJPTk1FTlRfU1RBVFVTX1BIQVNFX0ZBSUxFRF9UT19TWU5DEAMqpgIKKkh5YnJpZENsb3VkRW52aXJvbm1lbnRDb21wb25lbnRTdGF0dXNQaGFzZRI/CjtIWUJSSURfQ0xPVURfRU5WSVJPTk1FTlRfQ09NUE9ORU5UX1NUQVRVU19QSEFTRV9VTlNQRUNJRklFRBAAEjkKNUhZQlJJRF9DTE9VRF9FTlZJUk9OTUVOVF9DT01QT05FTlRfU1RBVFVTX1BIQVNFX1JFQURZEAESPQo5SFlCUklEX0NMT1VEX0VOVklST05NRU5UX0NPTVBPTkVOVF9TVEFUVVNfUEhBU0VfTk9UX1JFQURZEAISPQo5SFlCUklEX0NMT1VEX0VOVklST05NRU5UX0NPTVBPTkVOVF9TVEFUVVNfUEhBU0VfTk9UX0ZPVU5EEAMqiQQKFkt1YmVybmV0ZXNEaXN0cmlidXRpb24SJwojS1VCRVJORVRFU19ESVNUUklCVVRJT05fVU5TUEVDSUZJRUQQABIfChtLVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9BV1MQARIfChtLVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9HQ1AQAhIhCh1LVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9BWlVSRRADEh4KGktVQkVSTkVURVNfRElTVFJJQlVUSU9OX0RPEAQSJAogS1VCRVJORVRFU19ESVNUUklCVVRJT05fU0NBTEVXQVkQBRIlCiFLVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9PUEVOU0hJRlQQBhIiCh5LVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9MSU5PREUQBxIgChxLVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9DSVZPEAgSHwobS1VCRVJORVRFU19ESVNUUklCVVRJT05fT0NJEAkSJAogS1VCRVJORVRFU19ESVNUUklCVVRJT05fT1ZIQ0xPVUQQChIjCh9LVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9TVEFDS0lUEAsSIQodS1VCRVJORVRFU19ESVNUUklCVVRJT05fVlVMVFIQDBIfChtLVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9LM1MQDTLWDgoSSHlicmlkQ2xvdWRTZXJ2aWNlEoACChtMaXN0SHlicmlkQ2xvdWRFbnZpcm9ubWVudHMSOi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkxpc3RIeWJyaWRDbG91ZEVudmlyb25tZW50c1JlcXVlc3QaOy5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkxpc3RIeWJyaWRDbG91ZEVudmlyb25tZW50c1Jlc3BvbnNlImiKtRgecmVhZDpoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnRzgtPkkwJAEj4vYXBpL2h5YnJpZC92MS9hY2NvdW50cy97YWNjb3VudF9pZH0vaHlicmlkLWNsb3VkLWVudmlyb25tZW50cxKZAgoZR2V0SHlicmlkQ2xvdWRFbnZpcm9ubWVudBI4LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuR2V0SHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlcXVlc3QaOS5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkdldEh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXNwb25zZSKGAYq1GB5yZWFkOmh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudHOC0+STAl4SXC9hcGkvaHlicmlkL3YxL2FjY291bnRzL3thY2NvdW50X2lkfS9oeWJyaWQtY2xvdWQtZW52aXJvbm1lbnRzL3toeWJyaWRfY2xvdWRfZW52aXJvbm1lbnRfaWR9EsgCChxDcmVhdGVIeWJyaWRDbG91ZEVudmlyb25tZW50EjsucWRyYW50LmNsb3VkLmh5YnJpZC52MS5DcmVhdGVIeWJyaWRDbG91ZEVudmlyb25tZW50UmVxdWVzdBo8LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuQ3JlYXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlc3BvbnNlIqwBirUYH3dyaXRlOmh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudHOStRgjaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmFjY291bnRfaWSC0+STAlw6ASoiVy9hcGkvaHlicmlkL3YxL2FjY291bnRzL3toeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQuYWNjb3VudF9pZH0vaHlicmlkLWNsb3VkLWVudmlyb25tZW50cxLmAgocVXBkYXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudBI7LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuVXBkYXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlcXVlc3QaPC5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLlVwZGF0ZUh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXNwb25zZSLKAYq1GB93cml0ZTpoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnRzkrUYI2h5YnJpZF9jbG91ZF9lbnZpcm9ubWVudC5hY2NvdW50X2lkgtPkkwJ6OgEqGnUvYXBpL2h5YnJpZC92MS9hY2NvdW50cy97aHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmFjY291bnRfaWR9L2h5YnJpZC1jbG91ZC1lbnZpcm9ubWVudHMve2h5YnJpZF9jbG91ZF9lbnZpcm9ubWVudC5pZH0SkgIKHERlbGV0ZUh5YnJpZENsb3VkRW52aXJvbm1lbnQSOy5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkRlbGV0ZUh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXF1ZXN0GjwucWRyYW50LmNsb3VkLmh5YnJpZC52MS5EZWxldGVIeWJyaWRDbG91ZEVudmlyb25tZW50UmVzcG9uc2Uid4q1GCBkZWxldGU6aHlicmlkX2Nsb3VkX2Vudmlyb25tZW50c4LT5JMCTSpLL2FwaS9oeWJyaWQvdjEvYWNjb3VudHMve2FjY291bnRfaWR9L2NsdXN0ZXJzL3toeWJyaWRfY2xvdWRfZW52aXJvbm1lbnRfaWR9EtcCCh1HZXRJbml0aWFsSW5zdGFsbGF0aW9uQ29tbWFuZBI8LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuR2V0SW5pdGlhbEluc3RhbGxhdGlvbkNvbW1hbmRSZXF1ZXN0Gj0ucWRyYW50LmNsb3VkLmh5YnJpZC52MS5HZXRJbml0aWFsSW5zdGFsbGF0aW9uQ29tbWFuZFJlc3BvbnNlIrgBirUYH3dyaXRlOmh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudHOC0+STAo4BEosBL2FwaS9oeWJyaWQtY2xvdWQtZW52aXJvbm1lbnQvdjEvYWNjb3VudHMve2FjY291bnRfaWR9L2h5YnJpZC1jbG91ZC1lbnZpcm9ubWVudHMve2h5YnJpZF9jbG91ZF9lbnZpcm9ubWVudF9pZH0vaW5pdGlhbC1pbnN0YWxsYXRpb24tY29tbWFuZEL7AQoaY29tLnFkcmFudC5jbG91ZC5oeWJyaWQudjFCEEh5YnJpZENsb3VkUHJvdG9QAVpQZ2l0aHViLmNvbS9xZHJhbnQvcWRyYW50LWNsb3VkLXB1YmxpYy1hcGkvZ2VuL2dvL3FkcmFudC9jbG91ZC9oeWJyaWQvdjE7aHlicmlkdjGiAgNRQ0iqAhZRZHJhbnQuQ2xvdWQuSHlicmlkLlYxygIWUWRyYW50XENsb3VkXEh5YnJpZFxWMeICIlFkcmFudFxDbG91ZFxIeWJyaWRcVjFcR1BCTWV0YWRhdGHqAhlRZHJhbnQ6OkNsb3VkOjpIeWJyaWQ6OlYxYgZwcm90bzM", [file_buf_validate_validate, file_google_api_annotations, file_google_protobuf_timestamp, file_qdrant_cloud_cluster_v1_cluster, file_qdrant_cloud_common_v1_common, file_qdrant_cloud_hybrid_v1_operator]);

/**
 * Describes the message qdrant.cloud.hybrid.v1.GetInitialInstallationCommandRequest.
 * Use `create(GetInitialInstallationCommandRequestSchema)` to create a new message.
 */
export const GetInitialInstallationCommandRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 0);

/**
 * Describes the message qdrant.cloud.hybrid.v1.GetInitialInstallationCommandResponse.
 * Use `create(GetInitialInstallationCommandResponseSchema)` to create a new message.
 */
export const GetInitialInstallationCommandResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 1);

/**
 * Describes the message qdrant.cloud.hybrid.v1.DeleteHybridCloudEnvironmentRequest.
 * Use `create(DeleteHybridCloudEnvironmentRequestSchema)` to create a new message.
 */
export const DeleteHybridCloudEnvironmentRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 2);

/**
 * Describes the message qdrant.cloud.hybrid.v1.DeleteHybridCloudEnvironmentResponse.
 * Use `create(DeleteHybridCloudEnvironmentResponseSchema)` to create a new message.
 */
export const DeleteHybridCloudEnvironmentResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 3);

/**
 * Describes the message qdrant.cloud.hybrid.v1.UpdateHybridCloudEnvironmentRequest.
 * Use `create(UpdateHybridCloudEnvironmentRequestSchema)` to create a new message.
 */
export const UpdateHybridCloudEnvironmentRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 4);

/**
 * Describes the message qdrant.cloud.hybrid.v1.UpdateHybridCloudEnvironmentResponse.
 * Use `create(UpdateHybridCloudEnvironmentResponseSchema)` to create a new message.
 */
export const UpdateHybridCloudEnvironmentResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 5);

/**
 * Describes the message qdrant.cloud.hybrid.v1.CreateHybridCloudEnvironmentRequest.
 * Use `create(CreateHybridCloudEnvironmentRequestSchema)` to create a new message.
 */
export const CreateHybridCloudEnvironmentRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 6);

/**
 * Describes the message qdrant.cloud.hybrid.v1.CreateHybridCloudEnvironmentResponse.
 * Use `create(CreateHybridCloudEnvironmentResponseSchema)` to create a new message.
 */
export const CreateHybridCloudEnvironmentResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 7);

/**
 * Describes the message qdrant.cloud.hybrid.v1.GetHybridCloudEnvironmentRequest.
 * Use `create(GetHybridCloudEnvironmentRequestSchema)` to create a new message.
 */
export const GetHybridCloudEnvironmentRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 8);

/**
 * Describes the message qdrant.cloud.hybrid.v1.GetHybridCloudEnvironmentResponse.
 * Use `create(GetHybridCloudEnvironmentResponseSchema)` to create a new message.
 */
export const GetHybridCloudEnvironmentResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 9);

/**
 * Describes the message qdrant.cloud.hybrid.v1.ListHybridCloudEnvironmentsRequest.
 * Use `create(ListHybridCloudEnvironmentsRequestSchema)` to create a new message.
 */
export const ListHybridCloudEnvironmentsRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 10);

/**
 * Describes the message qdrant.cloud.hybrid.v1.ListHybridCloudEnvironmentsResponse.
 * Use `create(ListHybridCloudEnvironmentsResponseSchema)` to create a new message.
 */
export const ListHybridCloudEnvironmentsResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 11);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironment.
 * Use `create(HybridCloudEnvironmentSchema)` to create a new message.
 */
export const HybridCloudEnvironmentSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 12);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.
 * Use `create(HybridCloudEnvironmentConfigurationSchema)` to create a new message.
 */
export const HybridCloudEnvironmentConfigurationSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 13);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.
 * Use `create(HybridCloudEnvironmentStatusSchema)` to create a new message.
 */
export const HybridCloudEnvironmentStatusSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 14);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentCapabilities.
 * Use `create(HybridCloudEnvironmentCapabilitiesSchema)` to create a new message.
 */
export const HybridCloudEnvironmentCapabilitiesSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 15);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatus.
 * Use `create(HybridCloudEnvironmentComponentStatusSchema)` to create a new message.
 */
export const HybridCloudEnvironmentComponentStatusSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 16);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStorageClass.
 * Use `create(HybridCloudEnvironmentStorageClassSchema)` to create a new message.
 */
export const HybridCloudEnvironmentStorageClassSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 17);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentVolumeSnapshotClass.
 * Use `create(HybridCloudEnvironmentVolumeSnapshotClassSchema)` to create a new message.
 */
export const HybridCloudEnvironmentVolumeSnapshotClassSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 18);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeInfo.
 * Use `create(HybridCloudEnvironmentNodeInfoSchema)` to create a new message.
 */
export const HybridCloudEnvironmentNodeInfoSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 19);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeResourceInfo.
 * Use `create(HybridCloudEnvironmentNodeResourceInfoSchema)` to create a new message.
 */
export const HybridCloudEnvironmentNodeResourceInfoSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 20);

/**
 * Describes the enum qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatusPhase.
 */
export const HybridCloudEnvironmentStatusPhaseSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 0);

/**
 * Status phase of hybrid cloud environment
 *
 * @generated from enum qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatusPhase
 */
export const HybridCloudEnvironmentStatusPhase = /*@__PURE__*/
  tsEnum(HybridCloudEnvironmentStatusPhaseSchema);

/**
 * Describes the enum qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatusPhase.
 */
export const HybridCloudEnvironmentComponentStatusPhaseSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 1);

/**
 * Component status phase
 *
 * @generated from enum qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatusPhase
 */
export const HybridCloudEnvironmentComponentStatusPhase = /*@__PURE__*/
  tsEnum(HybridCloudEnvironmentComponentStatusPhaseSchema);

/**
 * Describes the enum qdrant.cloud.hybrid.v1.KubernetesDistribution.
 */
export const KubernetesDistributionSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 2);

/**
 * Kubernetes distributions
 *
 * @generated from enum qdrant.cloud.hybrid.v1.KubernetesDistribution
 */
export const KubernetesDistribution = /*@__PURE__*/
  tsEnum(KubernetesDistributionSchema);

/**
 * HybridCloudService is the API used for configuring hybrid cloud environments.
 *
 * @generated from service qdrant.cloud.hybrid.v1.HybridCloudService
 */
export const HybridCloudService = /*@__PURE__*/
  serviceDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 0);

