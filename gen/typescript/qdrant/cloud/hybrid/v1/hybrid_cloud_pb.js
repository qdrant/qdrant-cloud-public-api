// @generated by protoc-gen-es v2.7.0 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required"
// @generated from file qdrant/cloud/hybrid/v1/hybrid_cloud.proto (package qdrant.cloud.hybrid.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb.js";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb.js";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_k8s_io_api_networking_v1_generated } from "../../../../k8s.io/api/networking/v1/generated_pb.js";
import { file_qdrant_cloud_cluster_v1_cluster } from "../../cluster/v1/cluster_pb.js";
import { file_qdrant_cloud_common_v1_common } from "../../common/v1/common_pb.js";
import { file_qdrant_cloud_event_v1_events } from "../../event/v1/events_pb.js";

/**
 * Describes the file qdrant/cloud/hybrid/v1/hybrid_cloud.proto.
 */
export const file_qdrant_cloud_hybrid_v1_hybrid_cloud = /*@__PURE__*/
  fileDesc("CilxZHJhbnQvY2xvdWQvaHlicmlkL3YxL2h5YnJpZF9jbG91ZC5wcm90bxIWcWRyYW50LmNsb3VkLmh5YnJpZC52MSJvCiBHZW5lcmF0ZUJvb3RzdHJhcENvbW1hbmRzUmVxdWVzdBIcCgphY2NvdW50X2lkGAEgASgJQgi6SAVyA7ABARItChtoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnRfaWQYAiABKAlCCLpIBXIDsAEBIjUKIUdlbmVyYXRlQm9vdHN0cmFwQ29tbWFuZHNSZXNwb25zZRIQCghjb21tYW5kcxgBIAMoCSJyCiNEZWxldGVIeWJyaWRDbG91ZEVudmlyb25tZW50UmVxdWVzdBIcCgphY2NvdW50X2lkGAEgASgJQgi6SAVyA7ABARItChtoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnRfaWQYAiABKAlCCLpIBXIDsAEBIiYKJERlbGV0ZUh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXNwb25zZSKUAgojVXBkYXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlcXVlc3QSWAoYaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50GAEgASgLMi4ucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50Qga6SAPIAQE6kgG6SI4BGosBCip1cGRhdGVfaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmlkX3ByZXNlbnQSNWh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudC5pZCBpcyByZXF1aXJlZCBmb3IgYW4gdXBkYXRlGiZ0aGlzLmh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudC5pZCAhPSAnJyKAAQokVXBkYXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlc3BvbnNlElgKGGh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudBgBIAEoCzIuLnFkcmFudC5jbG91ZC5oeWJyaWQudjEuSHlicmlkQ2xvdWRFbnZpcm9ubWVudEIGukgDyAEBItYDCiNDcmVhdGVIeWJyaWRDbG91ZEVudmlyb25tZW50UmVxdWVzdBJYChhoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQYASABKAsyLi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnRCBrpIA8gBATrUArpI0AIazQIKM2NyZWF0ZV9oeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQubm9fcmVhZF9vbmx5X2ZpZWxkcxJVcmVhZC1vbmx5IGZpZWxkcyAoaWQsIGNyZWF0ZWRfYXQsIGxhc3RfbW9kaWZpZWRfYXQsIHN0YXR1cykgbXVzdCBub3QgYmUgc2V0IG9uIGNyZWF0ZRq+AXRoaXMuaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmlkID09ICcnICYmICFoYXModGhpcy5oeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQuY3JlYXRlZF9hdCkgJiYgIWhhcyh0aGlzLmh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudC5sYXN0X21vZGlmaWVkX2F0KSAmJiAhaGFzKHRoaXMuaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LnN0YXR1cykigAEKJENyZWF0ZUh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXNwb25zZRJYChhoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQYASABKAsyLi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnRCBrpIA8gBASJvCiBHZXRIeWJyaWRDbG91ZEVudmlyb25tZW50UmVxdWVzdBIcCgphY2NvdW50X2lkGAEgASgJQgi6SAVyA7ABARItChtoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnRfaWQYAiABKAlCCLpIBXIDsAEBIn0KIUdldEh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXNwb25zZRJYChhoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQYASABKAsyLi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnRCBrpIA8gBASJCCiJMaXN0SHlicmlkQ2xvdWRFbnZpcm9ubWVudHNSZXF1ZXN0EhwKCmFjY291bnRfaWQYASABKAlCCLpIBXIDsAEBImQKI0xpc3RIeWJyaWRDbG91ZEVudmlyb25tZW50c1Jlc3BvbnNlEj0KBWl0ZW1zGAEgAygLMi4ucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50IsELChZIeWJyaWRDbG91ZEVudmlyb25tZW50EhwKCmFjY291bnRfaWQYASABKAlCCLpIBXIDsAEBEgoKAmlkGAIgASgJEi4KCmNyZWF0ZWRfYXQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjQKEGxhc3RfbW9kaWZpZWRfYXQYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEikKBG5hbWUYBSABKAlCG7pIGHIWEAQYQDIQXlthLXpBLVowLTktX10rJBJXCg1jb25maWd1cmF0aW9uGBQgASgLMjsucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50Q29uZmlndXJhdGlvbkgAiAEBEkkKBnN0YXR1cxgVIAEoCzI0LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuSHlicmlkQ2xvdWRFbnZpcm9ubWVudFN0YXR1c0gBiAEBOqoIukimCBq0AQobaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmlkEhp2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgVVVJRBp5dGhpcy5pZC5tYXRjaGVzKCdeWzAtOWEtZkEtRl17OH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17MTJ9JCcpIHx8ICFoYXModGhpcy5jcmVhdGVkX2F0KRrqAQopaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50Lmxhc3RfbW9kaWZpZWRfYXQSWmxhc3RfbW9kaWZpZWRfYXQgbXVzdCBiZSBzZXQgaWYgY3JlYXRlZF9hdCBpcyBzZXQgYW5kIG11c3QgYmUgYWZ0ZXIgb3IgZXF1YWwgdG8gY3JlYXRlZF9hdBphIWhhcyh0aGlzLmNyZWF0ZWRfYXQpIHx8IChoYXModGhpcy5sYXN0X21vZGlmaWVkX2F0KSAmJiB0aGlzLmxhc3RfbW9kaWZpZWRfYXQgPj0gdGhpcy5jcmVhdGVkX2F0KRrTAgo3aHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmNvbmZpZ3VyYXRpb24ubGFzdF9tb2RpZmllZF9hdBJ8Y29uZmlndXJhdGlvbi5sYXN0X21vZGlmaWVkX2F0IG11c3QgYmUgc2V0IGlmIGNvbmZpZ3VyYXRpb24gYW5kIGNyZWF0ZWRfYXQgYXJlIHNldCwgYW5kIG11c3QgYmUgYWZ0ZXIgb3IgZXF1YWwgdG8gY3JlYXRlZF9hdBqZASFoYXModGhpcy5jb25maWd1cmF0aW9uKSB8fCAhaGFzKHRoaXMuY3JlYXRlZF9hdCkgfHwgKGhhcyh0aGlzLmNvbmZpZ3VyYXRpb24ubGFzdF9tb2RpZmllZF9hdCkgJiYgdGhpcy5jb25maWd1cmF0aW9uLmxhc3RfbW9kaWZpZWRfYXQgPj0gdGhpcy5jcmVhdGVkX2F0KRqpAgowaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LnN0YXR1cy5sYXN0X21vZGlmaWVkX2F0Em5zdGF0dXMubGFzdF9tb2RpZmllZF9hdCBtdXN0IGJlIHNldCBpZiBzdGF0dXMgYW5kIGNyZWF0ZWRfYXQgYXJlIHNldCwgYW5kIG11c3QgYmUgYWZ0ZXIgb3IgZXF1YWwgdG8gY3JlYXRlZF9hdBqEASFoYXModGhpcy5zdGF0dXMpIHx8ICFoYXModGhpcy5jcmVhdGVkX2F0KSB8fCAoaGFzKHRoaXMuc3RhdHVzLmxhc3RfbW9kaWZpZWRfYXQpICYmIHRoaXMuc3RhdHVzLmxhc3RfbW9kaWZpZWRfYXQgPj0gdGhpcy5jcmVhdGVkX2F0KUIQCg5fY29uZmlndXJhdGlvbkIJCgdfc3RhdHVzIv4ICiNIeWJyaWRDbG91ZEVudmlyb25tZW50Q29uZmlndXJhdGlvbhI0ChBsYXN0X21vZGlmaWVkX2F0GAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgluYW1lc3BhY2UYBCABKAlCG7pIGHIWEAEY/QEyD15bYS16QS1aMC05LV0rJBIlCg5odHRwX3Byb3h5X3VybBgFIAEoCUIIukgFcgOIAQFIAIgBARImCg9odHRwc19wcm94eV91cmwYBiABKAlCCLpIBXIDiAEBSAGIAQESGAoQbm9fcHJveHlfY29uZmlncxgHIAMoCRItChZjb250YWluZXJfcmVnaXN0cnlfdXJsGAggASgJQgi6SAVyA4gBAUgCiAEBEisKFGNoYXJ0X3JlcG9zaXRvcnlfdXJsGAkgASgJQgi6SAVyA4gBAUgDiAEBEiEKFHJlZ2lzdHJ5X3NlY3JldF9uYW1lGAogASgJSASIAQESHAoPY2FfY2VydGlmaWNhdGVzGAsgASgJSAWIAQESLAoWZGF0YWJhc2Vfc3RvcmFnZV9jbGFzcxgMIAEoCUIHukgEcgIQAUgGiAEBEiwKFnNuYXBzaG90X3N0b3JhZ2VfY2xhc3MYDSABKAlCB7pIBHICEAFIB4gBARIzCh12b2x1bWVfc25hcHNob3Rfc3RvcmFnZV9jbGFzcxgOIAEoCUIHukgEcgIQAUgIiAEBEkMKB2luZ3Jlc3MYDyADKAsyMi5rOHMuaW8uYXBpLm5ldHdvcmtpbmcudjEuTmV0d29ya1BvbGljeUluZ3Jlc3NSdWxlEkEKBmVncmVzcxgQIAMoCzIxLms4cy5pby5hcGkubmV0d29ya2luZy52MS5OZXR3b3JrUG9saWN5RWdyZXNzUnVsZRJnCglsb2dfbGV2ZWwYFSABKA4yQy5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnRDb25maWd1cmF0aW9uTG9nTGV2ZWxCCrpIB4IBBBABIABICYgBARI4Cgt0b2xlcmF0aW9ucxgWIAMoCzIjLnFkcmFudC5jbG91ZC5jbHVzdGVyLnYxLlRvbGVyYXRpb24SQQoNbm9kZV9zZWxlY3RvchgXIAMoCzIgLnFkcmFudC5jbG91ZC5jb21tb24udjEuS2V5VmFsdWVCCLpIBZIBAhAKQhEKD19odHRwX3Byb3h5X3VybEISChBfaHR0cHNfcHJveHlfdXJsQhkKF19jb250YWluZXJfcmVnaXN0cnlfdXJsQhcKFV9jaGFydF9yZXBvc2l0b3J5X3VybEIXChVfcmVnaXN0cnlfc2VjcmV0X25hbWVCEgoQX2NhX2NlcnRpZmljYXRlc0IZChdfZGF0YWJhc2Vfc3RvcmFnZV9jbGFzc0IZChdfc25hcHNob3Rfc3RvcmFnZV9jbGFzc0IgCh5fdm9sdW1lX3NuYXBzaG90X3N0b3JhZ2VfY2xhc3NCDAoKX2xvZ19sZXZlbCLXBgocSHlicmlkQ2xvdWRFbnZpcm9ubWVudFN0YXR1cxI8ChBsYXN0X21vZGlmaWVkX2F0GAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIGukgDyAEBElIKBXBoYXNlGAMgASgOMjkucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50U3RhdHVzUGhhc2VCCLpIBYIBAhABEiMKEmt1YmVybmV0ZXNfdmVyc2lvbhgEIAEoCUIHukgEcgIQARJgChdrdWJlcm5ldGVzX2Rpc3RyaWJ1dGlvbhgKIAEoDjIuLnFkcmFudC5jbG91ZC5oeWJyaWQudjEuS3ViZXJuZXRlc0Rpc3RyaWJ1dGlvbkIKukgHggEEEAEgAEgAiAEBEhcKD251bWJlcl9vZl9ub2RlcxgFIAEoDRJQCgxjYXBhYmlsaXRpZXMYBiABKAsyOi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnRDYXBhYmlsaXRpZXMSWQoSY29tcG9uZW50X3N0YXR1c2VzGAcgAygLMj0ucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50Q29tcG9uZW50U3RhdHVzEmEKGmNsdXN0ZXJfY3JlYXRpb25fcmVhZGluZXNzGAkgASgOMjMucWRyYW50LmNsb3VkLmh5YnJpZC52MS5RZHJhbnRDbHVzdGVyQ3JlYXRpb25TdGF0dXNCCLpIBYIBAhABEhQKB21lc3NhZ2UYCyABKAlIAYgBARJTCg9zdG9yYWdlX2NsYXNzZXMYDCADKAsyOi5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnRTdG9yYWdlQ2xhc3MSYgoXdm9sdW1lX3NuYXBzaG90X2NsYXNzZXMYDSADKAsyQS5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkh5YnJpZENsb3VkRW52aXJvbm1lbnRWb2x1bWVTbmFwc2hvdENsYXNzQhoKGF9rdWJlcm5ldGVzX2Rpc3RyaWJ1dGlvbkIKCghfbWVzc2FnZSJXCiJIeWJyaWRDbG91ZEVudmlyb25tZW50Q2FwYWJpbGl0aWVzEhcKD3ZvbHVtZV9zbmFwc2hvdBgBIAEoCBIYChB2b2x1bWVfZXhwYW5zaW9uGAIgASgIIvsBCiVIeWJyaWRDbG91ZEVudmlyb25tZW50Q29tcG9uZW50U3RhdHVzEhUKBG5hbWUYASABKAlCB7pIBHICEAESGgoJbmFtZXNwYWNlGAIgASgJQge6SARyAhABEhQKB3ZlcnNpb24YAyABKAlIAIgBARJbCgVwaGFzZRgEIAEoDjJCLnFkcmFudC5jbG91ZC5oeWJyaWQudjEuSHlicmlkQ2xvdWRFbnZpcm9ubWVudENvbXBvbmVudFN0YXR1c1BoYXNlQgi6SAWCAQIQARIUCgdtZXNzYWdlGAUgASgJSAGIAQFCCgoIX3ZlcnNpb25CCgoIX21lc3NhZ2Ui2AEKIkh5YnJpZENsb3VkRW52aXJvbm1lbnRTdG9yYWdlQ2xhc3MSFQoEbmFtZRgBIAEoCUIHukgEcgIQARIPCgdkZWZhdWx0GAIgASgIEhwKC3Byb3Zpc2lvbmVyGAMgASgJQge6SARyAhABEh4KFmFsbG93X3ZvbHVtZV9leHBhbnNpb24YBCABKAgSFgoOcmVjbGFpbV9wb2xpY3kYBSABKAkSNAoKcGFyYW1ldGVycxgGIAMoCzIgLnFkcmFudC5jbG91ZC5jb21tb24udjEuS2V5VmFsdWUiWwopSHlicmlkQ2xvdWRFbnZpcm9ubWVudFZvbHVtZVNuYXBzaG90Q2xhc3MSFQoEbmFtZRgBIAEoCUIHukgEcgIQARIXCgZkcml2ZXIYAiABKAlCB7pIBHICEAEi2wIKHkh5YnJpZENsb3VkRW52aXJvbm1lbnROb2RlSW5mbxIMCgRuYW1lGAEgASgJEhMKBnJlZ2lvbhgCIAEoCUgAiAEBEhEKBHpvbmUYAyABKAlIAYgBARIaCg1pbnN0YW5jZV90eXBlGAQgASgJSAKIAQESEQoEYXJjaBgFIAEoCUgDiAEBElAKCGNhcGFjaXR5GAYgASgLMj4ucWRyYW50LmNsb3VkLmh5YnJpZC52MS5IeWJyaWRDbG91ZEVudmlyb25tZW50Tm9kZVJlc291cmNlSW5mbxJTCgthbGxvY2F0YWJsZRgHIAEoCzI+LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuSHlicmlkQ2xvdWRFbnZpcm9ubWVudE5vZGVSZXNvdXJjZUluZm9CCQoHX3JlZ2lvbkIHCgVfem9uZUIQCg5faW5zdGFuY2VfdHlwZUIHCgVfYXJjaCJuCiZIeWJyaWRDbG91ZEVudmlyb25tZW50Tm9kZVJlc291cmNlSW5mbxILCgNjcHUYASABKAkSDgoGbWVtb3J5GAIgASgJEgwKBHBvZHMYAyABKAkSGQoRZXBoZW1lcmFsX3N0b3JhZ2UYBCABKAkq3QIKK0h5YnJpZENsb3VkRW52aXJvbm1lbnRDb25maWd1cmF0aW9uTG9nTGV2ZWwSQAo8SFlCUklEX0NMT1VEX0VOVklST05NRU5UX0NPTkZJR1VSQVRJT05fTE9HX0xFVkVMX1VOU1BFQ0lGSUVEEAASOgo2SFlCUklEX0NMT1VEX0VOVklST05NRU5UX0NPTkZJR1VSQVRJT05fTE9HX0xFVkVMX0RFQlVHEAESOQo1SFlCUklEX0NMT1VEX0VOVklST05NRU5UX0NPTkZJR1VSQVRJT05fTE9HX0xFVkVMX0lORk8QAhI5CjVIWUJSSURfQ0xPVURfRU5WSVJPTk1FTlRfQ09ORklHVVJBVElPTl9MT0dfTEVWRUxfV0FSThADEjoKNkhZQlJJRF9DTE9VRF9FTlZJUk9OTUVOVF9DT05GSUdVUkFUSU9OX0xPR19MRVZFTF9FUlJPUhAEKqUBChtRZHJhbnRDbHVzdGVyQ3JlYXRpb25TdGF0dXMSLgoqUURSQU5UX0NMVVNURVJfQ1JFQVRJT05fU1RBVFVTX1VOU1BFQ0lGSUVEEAASKAokUURSQU5UX0NMVVNURVJfQ1JFQVRJT05fU1RBVFVTX1JFQURZEAESLAooUURSQU5UX0NMVVNURVJfQ1JFQVRJT05fU1RBVFVTX05PVF9SRUFEWRACKvoBCiFIeWJyaWRDbG91ZEVudmlyb25tZW50U3RhdHVzUGhhc2USNQoxSFlCUklEX0NMT1VEX0VOVklST05NRU5UX1NUQVRVU19QSEFTRV9VTlNQRUNJRklFRBAAEi8KK0hZQlJJRF9DTE9VRF9FTlZJUk9OTUVOVF9TVEFUVVNfUEhBU0VfUkVBRFkQARIzCi9IWUJSSURfQ0xPVURfRU5WSVJPTk1FTlRfU1RBVFVTX1BIQVNFX05PVF9SRUFEWRACEjgKNEhZQlJJRF9DTE9VRF9FTlZJUk9OTUVOVF9TVEFUVVNfUEhBU0VfRkFJTEVEX1RPX1NZTkMQAyqmAgoqSHlicmlkQ2xvdWRFbnZpcm9ubWVudENvbXBvbmVudFN0YXR1c1BoYXNlEj8KO0hZQlJJRF9DTE9VRF9FTlZJUk9OTUVOVF9DT01QT05FTlRfU1RBVFVTX1BIQVNFX1VOU1BFQ0lGSUVEEAASOQo1SFlCUklEX0NMT1VEX0VOVklST05NRU5UX0NPTVBPTkVOVF9TVEFUVVNfUEhBU0VfUkVBRFkQARI9CjlIWUJSSURfQ0xPVURfRU5WSVJPTk1FTlRfQ09NUE9ORU5UX1NUQVRVU19QSEFTRV9OT1RfUkVBRFkQAhI9CjlIWUJSSURfQ0xPVURfRU5WSVJPTk1FTlRfQ09NUE9ORU5UX1NUQVRVU19QSEFTRV9OT1RfRk9VTkQQAyqJBAoWS3ViZXJuZXRlc0Rpc3RyaWJ1dGlvbhInCiNLVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9VTlNQRUNJRklFRBAAEh8KG0tVQkVSTkVURVNfRElTVFJJQlVUSU9OX0FXUxABEh8KG0tVQkVSTkVURVNfRElTVFJJQlVUSU9OX0dDUBACEiEKHUtVQkVSTkVURVNfRElTVFJJQlVUSU9OX0FaVVJFEAMSHgoaS1VCRVJORVRFU19ESVNUUklCVVRJT05fRE8QBBIkCiBLVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9TQ0FMRVdBWRAFEiUKIUtVQkVSTkVURVNfRElTVFJJQlVUSU9OX09QRU5TSElGVBAGEiIKHktVQkVSTkVURVNfRElTVFJJQlVUSU9OX0xJTk9ERRAHEiAKHEtVQkVSTkVURVNfRElTVFJJQlVUSU9OX0NJVk8QCBIfChtLVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9PQ0kQCRIkCiBLVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9PVkhDTE9VRBAKEiMKH0tVQkVSTkVURVNfRElTVFJJQlVUSU9OX1NUQUNLSVQQCxIhCh1LVUJFUk5FVEVTX0RJU1RSSUJVVElPTl9WVUxUUhAMEh8KG0tVQkVSTkVURVNfRElTVFJJQlVUSU9OX0szUxANMuAWChJIeWJyaWRDbG91ZFNlcnZpY2USlgIKG0xpc3RIeWJyaWRDbG91ZEVudmlyb25tZW50cxI6LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuTGlzdEh5YnJpZENsb3VkRW52aXJvbm1lbnRzUmVxdWVzdBo7LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuTGlzdEh5YnJpZENsb3VkRW52aXJvbm1lbnRzUmVzcG9uc2Uifoq1GB5yZWFkOmh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudHOKtRgOd3JpdGU6Y2x1c3RlcnOotRgAgtPkkwJAEj4vYXBpL2h5YnJpZC92MS9hY2NvdW50cy97YWNjb3VudF9pZH0vaHlicmlkLWNsb3VkLWVudmlyb25tZW50cxLtAgoZR2V0SHlicmlkQ2xvdWRFbnZpcm9ubWVudBI4LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuR2V0SHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlcXVlc3QaOS5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkdldEh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXNwb25zZSLaAYq1GB5yZWFkOmh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudHOKtRgOd3JpdGU6Y2x1c3RlcnOotRgAurUYOgobaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkEhtoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnRfaWSC0+STAl4SXC9hcGkvaHlicmlkL3YxL2FjY291bnRzL3thY2NvdW50X2lkfS9oeWJyaWQtY2xvdWQtZW52aXJvbm1lbnRzL3toeWJyaWRfY2xvdWRfZW52aXJvbm1lbnRfaWR9Er8EChxDcmVhdGVIeWJyaWRDbG91ZEVudmlyb25tZW50EjsucWRyYW50LmNsb3VkLmh5YnJpZC52MS5DcmVhdGVIeWJyaWRDbG91ZEVudmlyb25tZW50UmVxdWVzdBo8LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuQ3JlYXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlc3BvbnNlIqMDirUYH3dyaXRlOmh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudHOStRgjaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmFjY291bnRfaWS6tRg+Ch1oeWJyaWRfY2xvdWRfZW52aXJvbm1lbnRfbmFtZRIdaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50Lm5hbWXK8xiwAQgBEhhoeWJyaWQtY2xvdWQtZW52aXJvbm1lbnQiIHJlc3AuaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmlkKnAvYWNjb3VudHMve3JlcS5oeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQuYWNjb3VudF9pZH0vaHlicmlkLWNsb3VkLWVudmlyb25tZW50cy97cmVzcC5oeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQuaWR9gtPkkwJcOgEqIlcvYXBpL2h5YnJpZC92MS9hY2NvdW50cy97aHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmFjY291bnRfaWR9L2h5YnJpZC1jbG91ZC1lbnZpcm9ubWVudHMS1wQKHFVwZGF0ZUh5YnJpZENsb3VkRW52aXJvbm1lbnQSOy5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLlVwZGF0ZUh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXF1ZXN0GjwucWRyYW50LmNsb3VkLmh5YnJpZC52MS5VcGRhdGVIeWJyaWRDbG91ZEVudmlyb25tZW50UmVzcG9uc2UiuwOKtRgfd3JpdGU6aHlicmlkX2Nsb3VkX2Vudmlyb25tZW50c5K1GCNoeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQuYWNjb3VudF9pZLq1GDoKG2h5YnJpZF9jbG91ZF9lbnZpcm9ubWVudF9pZBIbaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmlkyvMYrgEIAhIYaHlicmlkLWNsb3VkLWVudmlyb25tZW50Ih9yZXEuaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmlkKm8vYWNjb3VudHMve3JlcS5oeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQuYWNjb3VudF9pZH0vaHlicmlkLWNsb3VkLWVudmlyb25tZW50cy97cmVxLmh5YnJpZF9jbG91ZF9lbnZpcm9ubWVudC5pZH2C0+STAno6ASoadS9hcGkvaHlicmlkL3YxL2FjY291bnRzL3toeWJyaWRfY2xvdWRfZW52aXJvbm1lbnQuYWNjb3VudF9pZH0vaHlicmlkLWNsb3VkLWVudmlyb25tZW50cy97aHlicmlkX2Nsb3VkX2Vudmlyb25tZW50LmlkfRL8AwocRGVsZXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudBI7LnFkcmFudC5jbG91ZC5oeWJyaWQudjEuRGVsZXRlSHlicmlkQ2xvdWRFbnZpcm9ubWVudFJlcXVlc3QaPC5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkRlbGV0ZUh5YnJpZENsb3VkRW52aXJvbm1lbnRSZXNwb25zZSLgAoq1GCBkZWxldGU6aHlicmlkX2Nsb3VkX2Vudmlyb25tZW50c7q1GDoKG2h5YnJpZF9jbG91ZF9lbnZpcm9ubWVudF9pZBIbaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkyvMYlQEIAxIYaHlicmlkLWNsb3VkLWVudmlyb25tZW50Ih9yZXEuaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkKlYvYWNjb3VudHMve3JlcS5hY2NvdW50X2lkfS9oeWJyaWQtY2xvdWQtZW52aXJvbm1lbnRzL3tyZXEuaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkfYLT5JMCXipcL2FwaS9oeWJyaWQvdjEvYWNjb3VudHMve2FjY291bnRfaWR9L2h5YnJpZC1jbG91ZC1lbnZpcm9ubWVudHMve2h5YnJpZF9jbG91ZF9lbnZpcm9ubWVudF9pZH0SpQQKGUdlbmVyYXRlQm9vdHN0cmFwQ29tbWFuZHMSOC5xZHJhbnQuY2xvdWQuaHlicmlkLnYxLkdlbmVyYXRlQm9vdHN0cmFwQ29tbWFuZHNSZXF1ZXN0GjkucWRyYW50LmNsb3VkLmh5YnJpZC52MS5HZW5lcmF0ZUJvb3RzdHJhcENvbW1hbmRzUmVzcG9uc2UikgOKtRgfd3JpdGU6aHlicmlkX2Nsb3VkX2Vudmlyb25tZW50c7q1GDoKG2h5YnJpZF9jbG91ZF9lbnZpcm9ubWVudF9pZBIbaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkyvMYsgEIBBIYaHlicmlkLWNsb3VkLWVudmlyb25tZW50Ih9yZXEuaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkKlYvYWNjb3VudHMve3JlcS5hY2NvdW50X2lkfS9oeWJyaWQtY2xvdWQtZW52aXJvbm1lbnRzL3tyZXEuaHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkfTIbZ2VuZXJhdGUtYm9vdHN0cmFwLWNvbW1hbmRzgtPkkwJ0OgEqIm8vYXBpL2h5YnJpZC92MS9hY2NvdW50cy97YWNjb3VudF9pZH0vaHlicmlkLWNsb3VkLWVudmlyb25tZW50cy97aHlicmlkX2Nsb3VkX2Vudmlyb25tZW50X2lkfS9ib290c3RyYXAtY29tbWFuZHNC+wEKGmNvbS5xZHJhbnQuY2xvdWQuaHlicmlkLnYxQhBIeWJyaWRDbG91ZFByb3RvUAFaUGdpdGh1Yi5jb20vcWRyYW50L3FkcmFudC1jbG91ZC1wdWJsaWMtYXBpL2dlbi9nby9xZHJhbnQvY2xvdWQvaHlicmlkL3YxO2h5YnJpZHYxogIDUUNIqgIWUWRyYW50LkNsb3VkLkh5YnJpZC5WMcoCFlFkcmFudFxDbG91ZFxIeWJyaWRcVjHiAiJRZHJhbnRcQ2xvdWRcSHlicmlkXFYxXEdQQk1ldGFkYXRh6gIZUWRyYW50OjpDbG91ZDo6SHlicmlkOjpWMWIGcHJvdG8z", [file_buf_validate_validate, file_google_api_annotations, file_google_protobuf_timestamp, file_k8s_io_api_networking_v1_generated, file_qdrant_cloud_cluster_v1_cluster, file_qdrant_cloud_common_v1_common, file_qdrant_cloud_event_v1_events]);

/**
 * Describes the message qdrant.cloud.hybrid.v1.GenerateBootstrapCommandsRequest.
 * Use `create(GenerateBootstrapCommandsRequestSchema)` to create a new message.
 */
export const GenerateBootstrapCommandsRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 0);

/**
 * Describes the message qdrant.cloud.hybrid.v1.GenerateBootstrapCommandsResponse.
 * Use `create(GenerateBootstrapCommandsResponseSchema)` to create a new message.
 */
export const GenerateBootstrapCommandsResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 1);

/**
 * Describes the message qdrant.cloud.hybrid.v1.DeleteHybridCloudEnvironmentRequest.
 * Use `create(DeleteHybridCloudEnvironmentRequestSchema)` to create a new message.
 */
export const DeleteHybridCloudEnvironmentRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 2);

/**
 * Describes the message qdrant.cloud.hybrid.v1.DeleteHybridCloudEnvironmentResponse.
 * Use `create(DeleteHybridCloudEnvironmentResponseSchema)` to create a new message.
 */
export const DeleteHybridCloudEnvironmentResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 3);

/**
 * Describes the message qdrant.cloud.hybrid.v1.UpdateHybridCloudEnvironmentRequest.
 * Use `create(UpdateHybridCloudEnvironmentRequestSchema)` to create a new message.
 */
export const UpdateHybridCloudEnvironmentRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 4);

/**
 * Describes the message qdrant.cloud.hybrid.v1.UpdateHybridCloudEnvironmentResponse.
 * Use `create(UpdateHybridCloudEnvironmentResponseSchema)` to create a new message.
 */
export const UpdateHybridCloudEnvironmentResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 5);

/**
 * Describes the message qdrant.cloud.hybrid.v1.CreateHybridCloudEnvironmentRequest.
 * Use `create(CreateHybridCloudEnvironmentRequestSchema)` to create a new message.
 */
export const CreateHybridCloudEnvironmentRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 6);

/**
 * Describes the message qdrant.cloud.hybrid.v1.CreateHybridCloudEnvironmentResponse.
 * Use `create(CreateHybridCloudEnvironmentResponseSchema)` to create a new message.
 */
export const CreateHybridCloudEnvironmentResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 7);

/**
 * Describes the message qdrant.cloud.hybrid.v1.GetHybridCloudEnvironmentRequest.
 * Use `create(GetHybridCloudEnvironmentRequestSchema)` to create a new message.
 */
export const GetHybridCloudEnvironmentRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 8);

/**
 * Describes the message qdrant.cloud.hybrid.v1.GetHybridCloudEnvironmentResponse.
 * Use `create(GetHybridCloudEnvironmentResponseSchema)` to create a new message.
 */
export const GetHybridCloudEnvironmentResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 9);

/**
 * Describes the message qdrant.cloud.hybrid.v1.ListHybridCloudEnvironmentsRequest.
 * Use `create(ListHybridCloudEnvironmentsRequestSchema)` to create a new message.
 */
export const ListHybridCloudEnvironmentsRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 10);

/**
 * Describes the message qdrant.cloud.hybrid.v1.ListHybridCloudEnvironmentsResponse.
 * Use `create(ListHybridCloudEnvironmentsResponseSchema)` to create a new message.
 */
export const ListHybridCloudEnvironmentsResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 11);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironment.
 * Use `create(HybridCloudEnvironmentSchema)` to create a new message.
 */
export const HybridCloudEnvironmentSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 12);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfiguration.
 * Use `create(HybridCloudEnvironmentConfigurationSchema)` to create a new message.
 */
export const HybridCloudEnvironmentConfigurationSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 13);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatus.
 * Use `create(HybridCloudEnvironmentStatusSchema)` to create a new message.
 */
export const HybridCloudEnvironmentStatusSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 14);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentCapabilities.
 * Use `create(HybridCloudEnvironmentCapabilitiesSchema)` to create a new message.
 */
export const HybridCloudEnvironmentCapabilitiesSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 15);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatus.
 * Use `create(HybridCloudEnvironmentComponentStatusSchema)` to create a new message.
 */
export const HybridCloudEnvironmentComponentStatusSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 16);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStorageClass.
 * Use `create(HybridCloudEnvironmentStorageClassSchema)` to create a new message.
 */
export const HybridCloudEnvironmentStorageClassSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 17);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentVolumeSnapshotClass.
 * Use `create(HybridCloudEnvironmentVolumeSnapshotClassSchema)` to create a new message.
 */
export const HybridCloudEnvironmentVolumeSnapshotClassSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 18);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeInfo.
 * Use `create(HybridCloudEnvironmentNodeInfoSchema)` to create a new message.
 */
export const HybridCloudEnvironmentNodeInfoSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 19);

/**
 * Describes the message qdrant.cloud.hybrid.v1.HybridCloudEnvironmentNodeResourceInfo.
 * Use `create(HybridCloudEnvironmentNodeResourceInfoSchema)` to create a new message.
 */
export const HybridCloudEnvironmentNodeResourceInfoSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 20);

/**
 * Describes the enum qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfigurationLogLevel.
 */
export const HybridCloudEnvironmentConfigurationLogLevelSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 0);

/**
 * HybridCloudEnvironmentConfigurationLogLevel represents the log level applied to the hybrid cloud environment components
 *
 * @generated from enum qdrant.cloud.hybrid.v1.HybridCloudEnvironmentConfigurationLogLevel
 */
export const HybridCloudEnvironmentConfigurationLogLevel = /*@__PURE__*/
  tsEnum(HybridCloudEnvironmentConfigurationLogLevelSchema);

/**
 * Describes the enum qdrant.cloud.hybrid.v1.QdrantClusterCreationStatus.
 */
export const QdrantClusterCreationStatusSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 1);

/**
 * QdrantClusterCreationStatus indicates if Qdrant clusters can be created in the environment
 *
 * @generated from enum qdrant.cloud.hybrid.v1.QdrantClusterCreationStatus
 */
export const QdrantClusterCreationStatus = /*@__PURE__*/
  tsEnum(QdrantClusterCreationStatusSchema);

/**
 * Describes the enum qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatusPhase.
 */
export const HybridCloudEnvironmentStatusPhaseSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 2);

/**
 * Status phase of hybrid cloud environment
 *
 * @generated from enum qdrant.cloud.hybrid.v1.HybridCloudEnvironmentStatusPhase
 */
export const HybridCloudEnvironmentStatusPhase = /*@__PURE__*/
  tsEnum(HybridCloudEnvironmentStatusPhaseSchema);

/**
 * Describes the enum qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatusPhase.
 */
export const HybridCloudEnvironmentComponentStatusPhaseSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 3);

/**
 * Component status phase
 *
 * @generated from enum qdrant.cloud.hybrid.v1.HybridCloudEnvironmentComponentStatusPhase
 */
export const HybridCloudEnvironmentComponentStatusPhase = /*@__PURE__*/
  tsEnum(HybridCloudEnvironmentComponentStatusPhaseSchema);

/**
 * Describes the enum qdrant.cloud.hybrid.v1.KubernetesDistribution.
 */
export const KubernetesDistributionSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 4);

/**
 * Kubernetes distributions
 *
 * @generated from enum qdrant.cloud.hybrid.v1.KubernetesDistribution
 */
export const KubernetesDistribution = /*@__PURE__*/
  tsEnum(KubernetesDistributionSchema);

/**
 * HybridCloudService is the API used for configuring hybrid cloud environments.
 *
 * @generated from service qdrant.cloud.hybrid.v1.HybridCloudService
 */
export const HybridCloudService = /*@__PURE__*/
  serviceDesc(file_qdrant_cloud_hybrid_v1_hybrid_cloud, 0);

