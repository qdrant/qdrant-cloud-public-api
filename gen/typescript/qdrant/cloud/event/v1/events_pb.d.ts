// @generated by protoc-gen-es v2.7.0 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required"
// @generated from file qdrant/cloud/event/v1/events.proto (package qdrant.cloud.event.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenExtension, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { MethodOptions, Timestamp } from "@bufbuild/protobuf/wkt";
import type { ActorType } from "../../common/v1/common_pb.js";

/**
 * Describes the file qdrant/cloud/event/v1/events.proto.
 */
export declare const file_qdrant_cloud_event_v1_events: GenFile;

/**
 * EventOptions is a custom method option to indicate that an event should be
 * generated when this RPC is successfully called.
 * The fields should start with 'req.' or 'resp.' to indicate whether the info needs to be
 * extracted from the request or the response. Or 'req-md.' or 'resp-md.' to extract the info
 * from the metadata.
 *
 * @generated from message qdrant.cloud.event.v1.EventOptions
 */
export declare type EventOptions = Message<"qdrant.cloud.event.v1.EventOptions"> & {
  /**
   * The type of the event that should be generated.
   *
   * @generated from field: qdrant.cloud.event.v1.EventType event_type = 1;
   */
  eventType: EventType;

  /**
   * The type of the resource that this event is about (e.g., "cluster", "backup").
   *
   * @generated from field: string resource_type = 2;
   */
  resourceType: string;

  /**
   * Whether or not this event should be marked as a status only event.
   * TODO: Alternative we can make EVENT_TYPE_UPDATED_SPEC and EVENT_TYPE_UPDATED_STATUS, in my opinion this bool makes more sense.
   *
   * @generated from field: bool status_only = 3;
   */
  statusOnly: boolean;

  /**
   * The unique identifier field of the resource.
   * This should be a resolvable (nested) field.
   * E.g. 'resp.cluster_id'
   *
   * @generated from field: string resource_id_field = 4;
   */
  resourceIdField: string;

  /**
   * The URL for the resource.
   * This URL can be used to filter if subscribing to events.
   * Like '/Accounts/123/Clusters/*'
   * This should be a resolvable (nested) field template.
   * E.g. '/Accounts/{resp.account_id}/Clusters/{resp.cluster_id}/Backups/{resp.backup_id}'
   *
   * @generated from field: string resource_url_template = 5;
   */
  resourceUrlTemplate: string;

  /**
   * The action type.
   * This field is set when the event_type is EVENT_TYPE_ACTION.
   * E.g. 'restore' in case of a backup restore.
   *
   * @generated from field: optional string action_type = 6;
   */
  actionType?: string;

  /**
   * The additional context field.
   * Key will be copied as-is, the value should be a resolvable (nested) field.
   * E.g. {'cluster_id': 'resp.cluster_id', 'backup_id': 'resp.backup_id'}
   *
   * @generated from field: map<string, string> additional_context_fields = 10;
   */
  additionalContextFields: { [key: string]: string };
};

export declare type EventOptionsValid = EventOptions;

/**
 * Describes the message qdrant.cloud.event.v1.EventOptions.
 * Use `create(EventOptionsSchema)` to create a new message.
 */
export declare const EventOptionsSchema: GenMessage<EventOptions, {validType: EventOptionsValid}>;

/**
 * Event represents a significant occurrence in the system, like a resource
 * being created, updated, or deleted.
 *
 * @generated from message qdrant.cloud.event.v1.Event
 */
export declare type Event = Message<"qdrant.cloud.event.v1.Event"> & {
  /**
   * A unique identifier for the event, in the form of a UUID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The time at which the event occurred.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * The unique identifier of the authenticated actor.
   *
   * @generated from field: string actor_id = 3;
   */
  actorId: string;

  /**
   * The type of the authenticated actor.
   *
   * @generated from field: qdrant.cloud.common.v1.ActorType actor_type = 4;
   */
  actorType: ActorType;

  /**
   * The account ID associated with this event (if applicable, UUID).
   * This field will be set if the event is bound to a specific account.
   *
   * @generated from field: optional string account_id = 5;
   */
  accountId?: string;

  /**
   * The fullname of the RPC which was invoked.
   * E.g 'qdrant.cloud.cluster.v1.ClusterService/CreateClusterFromBackup'
   *
   * @generated from field: string source_rpc = 6;
   */
  sourceRpc: string;

  /**
   * The type of the event.
   *
   * @generated from field: qdrant.cloud.event.v1.EventType event_type = 10;
   */
  eventType: EventType;

  /**
   * The type of the resource that this event is about (e.g., "cluster", "backup").
   *
   * @generated from field: string resource_type = 11;
   */
  resourceType: string;

  /**
   * Whether or not this event is a status only event.
   * Applicable when event_type is EVENT_TYPE_UPDATED.
   * For example, this can be used to distinguish between a spec update and a status update.
   *
   * @generated from field: bool status_only = 12;
   */
  statusOnly: boolean;

  /**
   * The unique identifier of the resource.
   * This field will be set if the event is bound to a specific resource.
   * In most cases this is in the form of a UUID.
   *
   * @generated from field: optional string resource_id = 13;
   */
  resourceId?: string;

  /**
   * The URL associated with the resource for this event.
   *
   * @generated from field: string resource_url = 14;
   */
  resourceUrl: string;

  /**
   * The action type.
   * This field is set when the event_type is EVENT_TYPE_ACTION.
   * E.g. 'restore' in case of a backup restore.
   *
   * @generated from field: optional string action_type = 15;
   */
  actionType?: string;

  /**
   * Additional key-value context about the event.
   * For example, for a backup event, this could include the "cluster_id".
   *
   * @generated from field: map<string, string> additional_context = 20;
   */
  additionalContext: { [key: string]: string };
};

export declare type EventValid = Event;

/**
 * Describes the message qdrant.cloud.event.v1.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export declare const EventSchema: GenMessage<Event, {validType: EventValid}>;

/**
 * EventType defines the type of the event that occurred to the resource.
 *
 * @generated from enum qdrant.cloud.event.v1.EventType
 */
export enum EventType {
  /**
   * Unspecified event type.
   *
   * @generated from enum value: EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The resource was created.
   *
   * @generated from enum value: EVENT_TYPE_CREATED = 1;
   */
  CREATED = 1,

  /**
   * The resource was updated.
   *
   * @generated from enum value: EVENT_TYPE_UPDATED = 2;
   */
  UPDATED = 2,

  /**
   * The resource was deleted.
   *
   * @generated from enum value: EVENT_TYPE_DELETED = 3;
   */
  DELETED = 3,

  /**
   * The resource has executed an action.
   *
   * @generated from enum value: EVENT_TYPE_ACTION = 4;
   */
  ACTION = 4,
}

/**
 * Describes the enum qdrant.cloud.event.v1.EventType.
 */
export declare const EventTypeSchema: GenEnum<EventType>;

/**
 * The actual event options.
 *
 * @generated from extension: qdrant.cloud.event.v1.EventOptions event_options = 51001;
 */
export declare const event_options: GenExtension<MethodOptions, EventOptions>;

