// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/featureflag/v1/featureflag.proto (package qdrant.cloud.featureflag.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file qdrant/cloud/featureflag/v1/featureflag.proto.
 */
export declare const file_qdrant_cloud_featureflag_v1_featureflag: GenFile;

/**
 * Request to list all feature flags.
 *
 * @generated from message qdrant.cloud.featureflag.v1.ListFeatureFlagsRequest
 */
export declare type ListFeatureFlagsRequest = Message<"qdrant.cloud.featureflag.v1.ListFeatureFlagsRequest"> & {
};

/**
 * Describes the message qdrant.cloud.featureflag.v1.ListFeatureFlagsRequest.
 * Use `create(ListFeatureFlagsRequestSchema)` to create a new message.
 */
export declare const ListFeatureFlagsRequestSchema: GenMessage<ListFeatureFlagsRequest>;

/**
 * Response containing a list of feature flags.
 *
 * @generated from message qdrant.cloud.featureflag.v1.ListFeatureFlagsResponse
 */
export declare type ListFeatureFlagsResponse = Message<"qdrant.cloud.featureflag.v1.ListFeatureFlagsResponse"> & {
  /**
   * The actual feature flags in this list.
   *
   * @generated from field: repeated qdrant.cloud.featureflag.v1.FeatureFlag items = 1;
   */
  items: FeatureFlag[];
};

/**
 * Describes the message qdrant.cloud.featureflag.v1.ListFeatureFlagsResponse.
 * Use `create(ListFeatureFlagsResponseSchema)` to create a new message.
 */
export declare const ListFeatureFlagsResponseSchema: GenMessage<ListFeatureFlagsResponse>;

/**
 * A single feature flag definition.
 *
 * @generated from message qdrant.cloud.featureflag.v1.FeatureFlag
 */
export declare type FeatureFlag = Message<"qdrant.cloud.featureflag.v1.FeatureFlag"> & {
  /**
   * The unique identifier of the feature flag.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Is it enabled or not
   *
   * @generated from field: qdrant.cloud.featureflag.v1.FeatureFlagStatus status = 4;
   */
  status: FeatureFlagStatus;
};

/**
 * Describes the message qdrant.cloud.featureflag.v1.FeatureFlag.
 * Use `create(FeatureFlagSchema)` to create a new message.
 */
export declare const FeatureFlagSchema: GenMessage<FeatureFlag>;

/**
 * FeatureFlagStatus defines the activation state of a flag.
 *
 * @generated from enum qdrant.cloud.featureflag.v1.FeatureFlagStatus
 */
export enum FeatureFlagStatus {
  /**
   * Unspecified feature flag status.
   *
   * @generated from enum value: FEATURE_FLAG_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The feature flag is enabled.
   *
   * @generated from enum value: FEATURE_FLAG_STATUS_ENABLED = 1;
   */
  ENABLED = 1,

  /**
   * The feature flag is disabled.
   *
   * @generated from enum value: FEATURE_FLAG_STATUS_DISABLED = 2;
   */
  DISABLED = 2,
}

/**
 * Describes the enum qdrant.cloud.featureflag.v1.FeatureFlagStatus.
 */
export declare const FeatureFlagStatusSchema: GenEnum<FeatureFlagStatus>;

/**
 * FeatureFlagService provides APIs to list feature flags.
 *
 * @generated from service qdrant.cloud.featureflag.v1.FeatureFlagService
 */
export declare const FeatureFlagService: GenService<{
  /**
   * List all feature flags.
   *
   * @generated from rpc qdrant.cloud.featureflag.v1.FeatureFlagService.ListFeatureFlags
   */
  listFeatureFlags: {
    methodKind: "unary";
    input: typeof ListFeatureFlagsRequestSchema;
    output: typeof ListFeatureFlagsResponseSchema;
  },
}>;

