// @generated by protoc-gen-es v2.7.0 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required"
// @generated from file qdrant/cloud/quota/v1/quota.proto (package qdrant.cloud.quota.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file qdrant/cloud/quota/v1/quota.proto.
 */
export declare const file_qdrant_cloud_quota_v1_quota: GenFile;

/**
 * GetAuthenticatedUserQuotasRequest is the request for the GetAuthenticatedUserQuotas function
 *
 * Empty
 *
 * @generated from message qdrant.cloud.quota.v1.GetAuthenticatedUserQuotasRequest
 */
export declare type GetAuthenticatedUserQuotasRequest = Message<"qdrant.cloud.quota.v1.GetAuthenticatedUserQuotasRequest"> & {
};

export declare type GetAuthenticatedUserQuotasRequestValid = GetAuthenticatedUserQuotasRequest;

/**
 * Describes the message qdrant.cloud.quota.v1.GetAuthenticatedUserQuotasRequest.
 * Use `create(GetAuthenticatedUserQuotasRequestSchema)` to create a new message.
 */
export declare const GetAuthenticatedUserQuotasRequestSchema: GenMessage<GetAuthenticatedUserQuotasRequest, {validType: GetAuthenticatedUserQuotasRequestValid}>;

/**
 * GetAuthenticatedUserQuotasResponse is the response from the GetAuthenticatedUserQuotas function
 *
 * @generated from message qdrant.cloud.quota.v1.GetAuthenticatedUserQuotasResponse
 */
export declare type GetAuthenticatedUserQuotasResponse = Message<"qdrant.cloud.quota.v1.GetAuthenticatedUserQuotasResponse"> & {
  /**
   * Maximum number of accounts this user can be the owner of (at least 1).
   * To get the actual list invoke: `qdrant.cloud.account.v1.AccountService.ListAccounts`
   *
   * @generated from field: uint32 max_owned_accounts = 1;
   */
  maxOwnedAccounts: number;
};

export declare type GetAuthenticatedUserQuotasResponseValid = GetAuthenticatedUserQuotasResponse;

/**
 * Describes the message qdrant.cloud.quota.v1.GetAuthenticatedUserQuotasResponse.
 * Use `create(GetAuthenticatedUserQuotasResponseSchema)` to create a new message.
 */
export declare const GetAuthenticatedUserQuotasResponseSchema: GenMessage<GetAuthenticatedUserQuotasResponse, {validType: GetAuthenticatedUserQuotasResponseValid}>;

/**
 * GetAccountQuotasRequest is the request for the GetAccountQuotas function.
 *
 * @generated from message qdrant.cloud.quota.v1.GetAccountQuotasRequest
 */
export declare type GetAccountQuotasRequest = Message<"qdrant.cloud.quota.v1.GetAccountQuotasRequest"> & {
  /**
   * The identifier of the account (in GUID format) to list quotas for.
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

export declare type GetAccountQuotasRequestValid = GetAccountQuotasRequest;

/**
 * Describes the message qdrant.cloud.quota.v1.GetAccountQuotasRequest.
 * Use `create(GetAccountQuotasRequestSchema)` to create a new message.
 */
export declare const GetAccountQuotasRequestSchema: GenMessage<GetAccountQuotasRequest, {validType: GetAccountQuotasRequestValid}>;

/**
 * GetAccountQuotasResponse is the response from the GetAccountQuotas function.
 *
 * @generated from message qdrant.cloud.quota.v1.GetAccountQuotasResponse
 */
export declare type GetAccountQuotasResponse = Message<"qdrant.cloud.quota.v1.GetAccountQuotasResponse"> & {
  /**
   * ID of the account this quota applies to
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * Maximum number of clusters this account is allowed to create (at least 1).
   * To get the actual list invoke: `qdrant.cloud.cluster.v1.ClusterService.ListClusters`.
   *
   * @generated from field: uint32 max_clusters = 2;
   */
  maxClusters: number;

  /**
   * Maximum number of nodes clusters can be scaled to (at least 1).
   * To get the actual field: `qdrant.cloud.cluster.v1.Cluster.configuration.number_of_nodes`.
   *
   * @generated from field: uint32 max_cluster_nodes = 3;
   */
  maxClusterNodes: number;

  /**
   * Maximum number of Database API keys this account can create (for each cluster)(at least 1).
   * To get the actual list invoke: `qdrant.cloud.cluster.auth.v2.DatabaseApiKeyService.ListDatabaseApiKeys`.
   *
   * @generated from field: uint32 max_cluster_database_api_keys = 4;
   */
  maxClusterDatabaseApiKeys: number;

  /**
   * Maximum number of free-tier clusters this account can create (at least 1).
   *
   * @generated from field: uint32 max_free_tier_clusters = 5;
   */
  maxFreeTierClusters: number;
};

export declare type GetAccountQuotasResponseValid = GetAccountQuotasResponse;

/**
 * Describes the message qdrant.cloud.quota.v1.GetAccountQuotasResponse.
 * Use `create(GetAccountQuotasResponseSchema)` to create a new message.
 */
export declare const GetAccountQuotasResponseSchema: GenMessage<GetAccountQuotasResponse, {validType: GetAccountQuotasResponseValid}>;

/**
 * QuotaService is the API used to configure Quotas.
 *
 * @generated from service qdrant.cloud.quota.v1.QuotaService
 */
export declare const QuotaService: GenService<{
  /**
   * Get quotas for the authenticated user.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.quota.v1.QuotaService.GetAuthenticatedUserQuotas
   */
  getAuthenticatedUserQuotas: {
    methodKind: "unary";
    input: typeof GetAuthenticatedUserQuotasRequestSchema;
    output: typeof GetAuthenticatedUserQuotasResponseSchema;
  },
  /**
   * Get quotas for the account identified by the given account ID.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.quota.v1.QuotaService.GetAccountQuotas
   */
  getAccountQuotas: {
    methodKind: "unary";
    input: typeof GetAccountQuotasRequestSchema;
    output: typeof GetAccountQuotasResponseSchema;
  },
}>;

