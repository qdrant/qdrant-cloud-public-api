// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/booking/v1/booking.proto (package qdrant.cloud.booking.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file qdrant/cloud/booking/v1/booking.proto.
 */
export declare const file_qdrant_cloud_booking_v1_booking: GenFile;

/**
 * ListPackagesRequest is the request for the ListPackages function
 *
 * @generated from message qdrant.cloud.booking.v1.ListPackagesRequest
 */
export declare type ListPackagesRequest = Message<"qdrant.cloud.booking.v1.ListPackagesRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * Optional filter specifying the cloud provider where the cluster will be hosted.
   * Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviders` method.
   * If omitted, all packages for the specified account are returned.
   *
   * @generated from field: optional string cloud_provider_id = 2;
   */
  cloudProviderId?: string;

  /**
   * Optional filter specifying the cloud region where the cluster will be hosted.
   * Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions` method.
   * If omitted, all packages for the specified account are returned.
   * This field is ignored when the `cloud_provider_id` is set to 'hybrid'.
   *
   * @generated from field: optional string cloud_provider_region_id = 3;
   */
  cloudProviderRegionId?: string;

  /**
   * The status of the packages to filter.
   * This is an optional field. If value is not set, all packages are returned.
   *
   * @generated from field: repeated qdrant.cloud.booking.v1.PackageStatus statuses = 4;
   */
  statuses: PackageStatus[];
};

/**
 * Describes the message qdrant.cloud.booking.v1.ListPackagesRequest.
 * Use `create(ListPackagesRequestSchema)` to create a new message.
 */
export declare const ListPackagesRequestSchema: GenMessage<ListPackagesRequest>;

/**
 * ListPackagesResponse is the response from the ListPackages function
 *
 * @generated from message qdrant.cloud.booking.v1.ListPackagesResponse
 */
export declare type ListPackagesResponse = Message<"qdrant.cloud.booking.v1.ListPackagesResponse"> & {
  /**
   * The actual packages in this list
   *
   * @generated from field: repeated qdrant.cloud.booking.v1.Package items = 1;
   */
  items: Package[];
};

/**
 * Describes the message qdrant.cloud.booking.v1.ListPackagesResponse.
 * Use `create(ListPackagesResponseSchema)` to create a new message.
 */
export declare const ListPackagesResponseSchema: GenMessage<ListPackagesResponse>;

/**
 * ListGlobalPackagesRequest is the request for the ListGlobalPackages function
 *
 * @generated from message qdrant.cloud.booking.v1.ListGlobalPackagesRequest
 */
export declare type ListGlobalPackagesRequest = Message<"qdrant.cloud.booking.v1.ListGlobalPackagesRequest"> & {
  /**
   * Mandatory filter specifying the cloud provider where the cluster will be hosted.
   * Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviders` method.
   *
   * @generated from field: string cloud_provider_id = 1;
   */
  cloudProviderId: string;

  /**
   * Filter specifying the cloud region where the cluster will be hosted.
   * Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviderRegions` method.
   * Field can be empty, if cloud_provider_id is `hybrid`
   *
   * @generated from field: optional string cloud_provider_region_id = 2;
   */
  cloudProviderRegionId?: string;
};

/**
 * Describes the message qdrant.cloud.booking.v1.ListGlobalPackagesRequest.
 * Use `create(ListGlobalPackagesRequestSchema)` to create a new message.
 */
export declare const ListGlobalPackagesRequestSchema: GenMessage<ListGlobalPackagesRequest>;

/**
 * ListPackagesResponse is the response from the ListPackages function
 *
 * @generated from message qdrant.cloud.booking.v1.ListGlobalPackagesResponse
 */
export declare type ListGlobalPackagesResponse = Message<"qdrant.cloud.booking.v1.ListGlobalPackagesResponse"> & {
  /**
   * The actual packages in this list
   *
   * @generated from field: repeated qdrant.cloud.booking.v1.Package items = 1;
   */
  items: Package[];
};

/**
 * Describes the message qdrant.cloud.booking.v1.ListGlobalPackagesResponse.
 * Use `create(ListGlobalPackagesResponseSchema)` to create a new message.
 */
export declare const ListGlobalPackagesResponseSchema: GenMessage<ListGlobalPackagesResponse>;

/**
 * ListGlobalResourceOptionsRequest is the request for the ListGlobalResourceOptions function
 *
 * @generated from message qdrant.cloud.booking.v1.ListGlobalResourceOptionsRequest
 */
export declare type ListGlobalResourceOptionsRequest = Message<"qdrant.cloud.booking.v1.ListGlobalResourceOptionsRequest"> & {
  /**
   * Mandatory filter specifying the cloud provider where the cluster will be hosted.
   * Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviders` method.
   *
   * @generated from field: string cloud_provider_id = 1;
   */
  cloudProviderId: string;

  /**
   * Filter specifying the cloud region where the cluster will be hosted.
   * Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviderRegions` method.
   * Field can be empty, if cloud_provider_id is `hybrid`
   *
   * @generated from field: optional string cloud_provider_region_id = 2;
   */
  cloudProviderRegionId?: string;

  /**
   * Optional filter specifying the type of resources to return.
   * If not set, all resource options are returned.
   *
   * @generated from field: qdrant.cloud.booking.v1.ResourceType resource_type = 3;
   */
  resourceType: ResourceType;
};

/**
 * Describes the message qdrant.cloud.booking.v1.ListGlobalResourceOptionsRequest.
 * Use `create(ListGlobalResourceOptionsRequestSchema)` to create a new message.
 */
export declare const ListGlobalResourceOptionsRequestSchema: GenMessage<ListGlobalResourceOptionsRequest>;

/**
 * ListGlobalResourceOptionsResponse is the response from the ListGlobalResourceOptions function
 *
 * @generated from message qdrant.cloud.booking.v1.ListGlobalResourceOptionsResponse
 */
export declare type ListGlobalResourceOptionsResponse = Message<"qdrant.cloud.booking.v1.ListGlobalResourceOptionsResponse"> & {
  /**
   * The actual resource options in this list
   *
   * @generated from field: repeated qdrant.cloud.booking.v1.ResourceOption items = 1;
   */
  items: ResourceOption[];
};

/**
 * Describes the message qdrant.cloud.booking.v1.ListGlobalResourceOptionsResponse.
 * Use `create(ListGlobalResourceOptionsResponseSchema)` to create a new message.
 */
export declare const ListGlobalResourceOptionsResponseSchema: GenMessage<ListGlobalResourceOptionsResponse>;

/**
 * GetPackageRequest is the request for the GetPackage function
 *
 * @generated from message qdrant.cloud.booking.v1.GetPackageRequest
 */
export declare type GetPackageRequest = Message<"qdrant.cloud.booking.v1.GetPackageRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The unique identifier of the package.
   * A unique string ID assigned to each package.
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message qdrant.cloud.booking.v1.GetPackageRequest.
 * Use `create(GetPackageRequestSchema)` to create a new message.
 */
export declare const GetPackageRequestSchema: GenMessage<GetPackageRequest>;

/**
 * GetPackageResponse is the response from the GetPackage function
 *
 * @generated from message qdrant.cloud.booking.v1.GetPackageResponse
 */
export declare type GetPackageResponse = Message<"qdrant.cloud.booking.v1.GetPackageResponse"> & {
  /**
   * The actual package
   *
   * @generated from field: qdrant.cloud.booking.v1.Package package = 1;
   */
  package?: Package;
};

/**
 * Describes the message qdrant.cloud.booking.v1.GetPackageResponse.
 * Use `create(GetPackageResponseSchema)` to create a new message.
 */
export declare const GetPackageResponseSchema: GenMessage<GetPackageResponse>;

/**
 * Package represents a single package.
 * A package is a configuration (CPU/Memory/Disk size) for a cluster with a price.
 *
 * @generated from message qdrant.cloud.booking.v1.Package
 */
export declare type Package = Message<"qdrant.cloud.booking.v1.Package"> & {
  /**
   * The unique identifier of the package.
   * A unique string ID assigned to each package.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The name of the package.
   * A human-readable identifier for the package.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Specifies if this is a free or paid package.
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * The resource configuration associated with the package
   *
   * @generated from field: qdrant.cloud.booking.v1.ResourceConfiguration resource_configuration = 4;
   */
  resourceConfiguration?: ResourceConfiguration;

  /**
   * The currency of the prices.
   * Specifies the currency in which the prices are denominated.
   *
   * @generated from field: string currency = 5;
   */
  currency: string;

  /**
   * The unit price per hour in millicents, in integer format.
   * Represents the cost per hour for a single unit of the resource.
   * You will be billed hourly for the resources you use. Partial hours are rounded up and billed as full hours.
   *
   * @generated from field: int32 unit_int_price_per_hour = 6;
   */
  unitIntPricePerHour: number;

  /**
   * The status of the package.
   * Indicates the current status of the package.
   *
   * @generated from field: qdrant.cloud.booking.v1.PackageStatus status = 7;
   */
  status: PackageStatus;
};

/**
 * Describes the message qdrant.cloud.booking.v1.Package.
 * Use `create(PackageSchema)` to create a new message.
 */
export declare const PackageSchema: GenMessage<Package>;

/**
 * ResourceConfiguration defines the resource configuration for a package.
 *
 * @generated from message qdrant.cloud.booking.v1.ResourceConfiguration
 */
export declare type ResourceConfiguration = Message<"qdrant.cloud.booking.v1.ResourceConfiguration"> & {
  /**
   * The amount of RAM (e.g., "1GiB")
   *
   * @generated from field: string ram = 1;
   */
  ram: string;

  /**
   * The amount of CPU (e.g., "1000m" (1 vCPU))
   *
   * @generated from field: string cpu = 2;
   */
  cpu: string;

  /**
   * The amount of disk (e.g., "100GiB")
   *
   * @generated from field: string disk = 3;
   */
  disk: string;
};

/**
 * Describes the message qdrant.cloud.booking.v1.ResourceConfiguration.
 * Use `create(ResourceConfigurationSchema)` to create a new message.
 */
export declare const ResourceConfigurationSchema: GenMessage<ResourceConfiguration>;

/**
 * ResourceOption represents a single resource option.
 *
 * @generated from message qdrant.cloud.booking.v1.ResourceOption
 */
export declare type ResourceOption = Message<"qdrant.cloud.booking.v1.ResourceOption"> & {
  /**
   * The unique identifier of the resource option.
   * A unique string ID assigned to each resource option.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The name of the resource option.
   * A human-readable name for the resource option.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The type of the resource option.
   *
   * @generated from field: qdrant.cloud.booking.v1.ResourceType type = 3;
   */
  type: ResourceType;

  /**
   * The status of the resource option.
   * Indicates the current status of the resource option.
   *
   * @generated from field: qdrant.cloud.booking.v1.PackageStatus status = 4;
   */
  status: PackageStatus;

  /**
   * The unit of the resource option.
   * Specifies the unit in which the resource option is measured.
   *
   * @generated from field: qdrant.cloud.booking.v1.ResourceUnit unit = 5;
   */
  unit: ResourceUnit;

  /**
   * The currency of the prices.
   * Specifies the currency in which prices are denominated.
   *
   * @generated from field: string currency = 6;
   */
  currency: string;

  /**
   * The unit price per hour, in millicents, as an integer.
   * Represents the cost per hour for a single unit of the resource.
   * You will be billed hourly for the resources you use; partial hours are rounded up and billed as full hours.
   *
   * @generated from field: int32 unit_int_price_per_hour = 7;
   */
  unitIntPricePerHour: number;
};

/**
 * Describes the message qdrant.cloud.booking.v1.ResourceOption.
 * Use `create(ResourceOptionSchema)` to create a new message.
 */
export declare const ResourceOptionSchema: GenMessage<ResourceOption>;

/**
 * ResourceUnit defines the units of the available resources options.
 *
 * @generated from enum qdrant.cloud.booking.v1.ResourceUnit
 */
export enum ResourceUnit {
  /**
   * Unspecified resource unit.
   *
   * @generated from enum value: RESOURCE_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The resource is measured in GiB (Gibibytes).
   *
   * @generated from enum value: RESOURCE_UNIT_GIB = 1;
   */
  GIB = 1,

  /**
   * The resource is measured in millicore units.
   *
   * @generated from enum value: RESOURCE_UNIT_MILLICORE = 2;
   */
  MILLICORE = 2,
}

/**
 * Describes the enum qdrant.cloud.booking.v1.ResourceUnit.
 */
export declare const ResourceUnitSchema: GenEnum<ResourceUnit>;

/**
 * ResourceType defines the types of the available resources options.
 *
 * @generated from enum qdrant.cloud.booking.v1.ResourceType
 */
export enum ResourceType {
  /**
   * Unspecified resource type.
   *
   * @generated from enum value: RESOURCE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * CPU resource type.
   *
   * @generated from enum value: RESOURCE_TYPE_CPU = 1;
   */
  CPU = 1,

  /**
   * RAM resource type.
   *
   * @generated from enum value: RESOURCE_TYPE_RAM = 2;
   */
  RAM = 2,

  /**
   * Disk resource type.
   *
   * @generated from enum value: RESOURCE_TYPE_DISK = 3;
   */
  DISK = 3,
}

/**
 * Describes the enum qdrant.cloud.booking.v1.ResourceType.
 */
export declare const ResourceTypeSchema: GenEnum<ResourceType>;

/**
 * PackageStatus defines the valid states a package can be in.
 *
 * @generated from enum qdrant.cloud.booking.v1.PackageStatus
 */
export enum PackageStatus {
  /**
   * Unspecified package status.
   *
   * @generated from enum value: PACKAGE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The package is active and available for use.
   *
   * @generated from enum value: PACKAGE_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The package is deactivated.
   *
   * @generated from enum value: PACKAGE_STATUS_DEACTIVATED = 2;
   */
  DEACTIVATED = 2,
}

/**
 * Describes the enum qdrant.cloud.booking.v1.PackageStatus.
 */
export declare const PackageStatusSchema: GenEnum<PackageStatus>;

/**
 * BookingService is the API used to configure the booking settings (like packages objects).
 *
 * @generated from service qdrant.cloud.booking.v1.BookingService
 */
export declare const BookingService: GenService<{
  /**
   * Fetch all packages known by the system, optional filtered.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.booking.v1.BookingService.ListPackages
   */
  listPackages: {
    methodKind: "unary";
    input: typeof ListPackagesRequestSchema;
    output: typeof ListPackagesResponseSchema;
  },
  /**
   * Get the package identified by the request identifier
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.booking.v1.BookingService.GetPackage
   */
  getPackage: {
    methodKind: "unary";
    input: typeof GetPackageRequestSchema;
    output: typeof GetPackageResponseSchema;
  },
  /**
   * Fetch all public packages
   * Required permissions:
   * - None (public endpoint)
   *
   * @generated from rpc qdrant.cloud.booking.v1.BookingService.ListGlobalPackages
   */
  listGlobalPackages: {
    methodKind: "unary";
    input: typeof ListGlobalPackagesRequestSchema;
    output: typeof ListGlobalPackagesResponseSchema;
  },
  /**
   * Fetch all public resource options
   * Required permissions:
   * - None (public endpoint)
   *
   * @generated from rpc qdrant.cloud.booking.v1.BookingService.ListGlobalResourceOptions
   */
  listGlobalResourceOptions: {
    methodKind: "unary";
    input: typeof ListGlobalResourceOptionsRequestSchema;
    output: typeof ListGlobalResourceOptionsResponseSchema;
  },
}>;

