// @generated by protoc-gen-es v2.5.2 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required"
// @generated from file qdrant/cloud/booking/v1/booking.proto (package qdrant.cloud.booking.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file qdrant/cloud/booking/v1/booking.proto.
 */
export declare const file_qdrant_cloud_booking_v1_booking: GenFile;

/**
 * ListPackagesRequest is the request for the ListPackages function
 *
 * @generated from message qdrant.cloud.booking.v1.ListPackagesRequest
 */
export declare type ListPackagesRequest = Message<"qdrant.cloud.booking.v1.ListPackagesRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * Required field specifying the cloud provider where the cluster will be hosted.
   * Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviders` method.
   *
   * @generated from field: string cloud_provider_id = 2;
   */
  cloudProviderId: string;

  /**
   * Filter specifying the cloud region where the cluster will be hosted.
   * Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions` method.
   * This field can be omitted if `cloud_provider_id` is set to `hybrid`.
   *
   * @generated from field: optional string cloud_provider_region_id = 3;
   */
  cloudProviderRegionId?: string;

  /**
   * The status of the packages to filter.
   * This is an optional field. If value is not set, only active packages are returned.
   *
   * @generated from field: repeated qdrant.cloud.booking.v1.PackageStatus statuses = 4;
   */
  statuses: PackageStatus[];
};

export declare type ListPackagesRequestValid = ListPackagesRequest;

/**
 * Describes the message qdrant.cloud.booking.v1.ListPackagesRequest.
 * Use `create(ListPackagesRequestSchema)` to create a new message.
 */
export declare const ListPackagesRequestSchema: GenMessage<ListPackagesRequest, {validType: ListPackagesRequestValid}>;

/**
 * ListPackagesResponse is the response from the ListPackages function
 *
 * @generated from message qdrant.cloud.booking.v1.ListPackagesResponse
 */
export declare type ListPackagesResponse = Message<"qdrant.cloud.booking.v1.ListPackagesResponse"> & {
  /**
   * The actual packages in this list
   *
   * @generated from field: repeated qdrant.cloud.booking.v1.Package items = 1;
   */
  items: Package[];
};

export declare type ListPackagesResponseValid = ListPackagesResponse;

/**
 * Describes the message qdrant.cloud.booking.v1.ListPackagesResponse.
 * Use `create(ListPackagesResponseSchema)` to create a new message.
 */
export declare const ListPackagesResponseSchema: GenMessage<ListPackagesResponse, {validType: ListPackagesResponseValid}>;

/**
 * ListGlobalPackagesRequest is the request for the ListGlobalPackages function
 *
 * @generated from message qdrant.cloud.booking.v1.ListGlobalPackagesRequest
 */
export declare type ListGlobalPackagesRequest = Message<"qdrant.cloud.booking.v1.ListGlobalPackagesRequest"> & {
  /**
   * Mandatory filter specifying the cloud provider where the cluster will be hosted.
   * Must match one of the provider IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviders` method.
   *
   * @generated from field: string cloud_provider_id = 1;
   */
  cloudProviderId: string;

  /**
   * Filter specifying the cloud region where the cluster will be hosted.
   * Must match one of the region IDs returned by the `qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviderRegions` method.
   * Field can be omitted, if cloud_provider_id is `hybrid`
   *
   * @generated from field: optional string cloud_provider_region_id = 2;
   */
  cloudProviderRegionId?: string;
};

export declare type ListGlobalPackagesRequestValid = ListGlobalPackagesRequest;

/**
 * Describes the message qdrant.cloud.booking.v1.ListGlobalPackagesRequest.
 * Use `create(ListGlobalPackagesRequestSchema)` to create a new message.
 */
export declare const ListGlobalPackagesRequestSchema: GenMessage<ListGlobalPackagesRequest, {validType: ListGlobalPackagesRequestValid}>;

/**
 * ListPackagesResponse is the response from the ListPackages function
 *
 * @generated from message qdrant.cloud.booking.v1.ListGlobalPackagesResponse
 */
export declare type ListGlobalPackagesResponse = Message<"qdrant.cloud.booking.v1.ListGlobalPackagesResponse"> & {
  /**
   * The actual packages in this list
   *
   * @generated from field: repeated qdrant.cloud.booking.v1.Package items = 1;
   */
  items: Package[];
};

export declare type ListGlobalPackagesResponseValid = ListGlobalPackagesResponse;

/**
 * Describes the message qdrant.cloud.booking.v1.ListGlobalPackagesResponse.
 * Use `create(ListGlobalPackagesResponseSchema)` to create a new message.
 */
export declare const ListGlobalPackagesResponseSchema: GenMessage<ListGlobalPackagesResponse, {validType: ListGlobalPackagesResponseValid}>;

/**
 * GetPackageRequest is the request for the GetPackage function
 *
 * @generated from message qdrant.cloud.booking.v1.GetPackageRequest
 */
export declare type GetPackageRequest = Message<"qdrant.cloud.booking.v1.GetPackageRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The unique identifier of the package.
   * A unique string ID assigned to each package.
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

export declare type GetPackageRequestValid = GetPackageRequest;

/**
 * Describes the message qdrant.cloud.booking.v1.GetPackageRequest.
 * Use `create(GetPackageRequestSchema)` to create a new message.
 */
export declare const GetPackageRequestSchema: GenMessage<GetPackageRequest, {validType: GetPackageRequestValid}>;

/**
 * GetPackageResponse is the response from the GetPackage function
 *
 * @generated from message qdrant.cloud.booking.v1.GetPackageResponse
 */
export declare type GetPackageResponse = Message<"qdrant.cloud.booking.v1.GetPackageResponse"> & {
  /**
   * The actual package
   *
   * @generated from field: qdrant.cloud.booking.v1.Package package = 1;
   */
  package?: Package;
};

/**
 * GetPackageResponse is the response from the GetPackage function
 *
 * @generated from message qdrant.cloud.booking.v1.GetPackageResponse
 */
export declare type GetPackageResponseValid = Message<"qdrant.cloud.booking.v1.GetPackageResponse"> & {
  /**
   * The actual package
   *
   * @generated from field: qdrant.cloud.booking.v1.Package package = 1;
   */
  package: PackageValid;
};

/**
 * Describes the message qdrant.cloud.booking.v1.GetPackageResponse.
 * Use `create(GetPackageResponseSchema)` to create a new message.
 */
export declare const GetPackageResponseSchema: GenMessage<GetPackageResponse, {validType: GetPackageResponseValid}>;

/**
 * Package represents a single package.
 * A package is a configuration (CPU/Memory/Disk size) for a cluster with a price.
 *
 * @generated from message qdrant.cloud.booking.v1.Package
 */
export declare type Package = Message<"qdrant.cloud.booking.v1.Package"> & {
  /**
   * The unique identifier of the package.
   * A unique string ID assigned to each package.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The name of the package.
   * A human-readable identifier for the package.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Specifies if this is a free or paid package.
   * Must be either "free" or "paid".
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * The resource configuration associated with the package
   *
   * @generated from field: qdrant.cloud.booking.v1.ResourceConfiguration resource_configuration = 4;
   */
  resourceConfiguration?: ResourceConfiguration;

  /**
   * The currency of the prices.
   * Specifies the currency in which the prices are denominated.
   * Must be a 3-letter ISO 4217 currency code (e.g., "USD").
   *
   * @generated from field: string currency = 5;
   */
  currency: string;

  /**
   * The unit price per hour in millicents, in integer format.
   * Represents the cost per hour for a single unit of the resource.
   * You will be billed hourly for the resources you use. Partial hours are rounded up and billed as full hours.
   *
   * @generated from field: int32 unit_int_price_per_hour = 6;
   */
  unitIntPricePerHour: number;

  /**
   * The status of the package.
   * Indicates the current status of the package.
   *
   * @generated from field: qdrant.cloud.booking.v1.PackageStatus status = 7;
   */
  status: PackageStatus;

  /**
   * The tier of the package.
   *
   * @generated from field: qdrant.cloud.booking.v1.PackageTier tier = 9;
   */
  tier: PackageTier;

  /**
   * Optional additional resources that can be added to the cluster.
   * if not set, additional resources are not available for this package.
   * Currently, only `DISK` is supported.
   *
   * @generated from field: optional qdrant.cloud.booking.v1.AvailableAdditionalResources available_additional_resources = 8;
   */
  availableAdditionalResources?: AvailableAdditionalResources;
};

export declare type PackageValid = Package;

/**
 * Describes the message qdrant.cloud.booking.v1.Package.
 * Use `create(PackageSchema)` to create a new message.
 */
export declare const PackageSchema: GenMessage<Package, {validType: PackageValid}>;

/**
 * AvailableAdditionalResources represents additional resources that can be added to the cluster.
 *
 * @generated from message qdrant.cloud.booking.v1.AvailableAdditionalResources
 */
export declare type AvailableAdditionalResources = Message<"qdrant.cloud.booking.v1.AvailableAdditionalResources"> & {
  /**
   * The unit price per hour in millicents, in integer format.
   * Represents the cost per hour for a single unit(GiB) of the resource.
   * You will be billed hourly for the resources you use. Partial hours are rounded up and billed as full hours.
   *
   * @generated from field: uint32 disk_price_per_hour = 1;
   */
  diskPricePerHour: number;
};

export declare type AvailableAdditionalResourcesValid = AvailableAdditionalResources;

/**
 * Describes the message qdrant.cloud.booking.v1.AvailableAdditionalResources.
 * Use `create(AvailableAdditionalResourcesSchema)` to create a new message.
 */
export declare const AvailableAdditionalResourcesSchema: GenMessage<AvailableAdditionalResources, {validType: AvailableAdditionalResourcesValid}>;

/**
 * ResourceConfiguration defines the resource configuration for a package.
 *
 * @generated from message qdrant.cloud.booking.v1.ResourceConfiguration
 */
export declare type ResourceConfiguration = Message<"qdrant.cloud.booking.v1.ResourceConfiguration"> & {
  /**
   * The amount of RAM (e.g., "1GiB")
   *
   * @generated from field: string ram = 1;
   */
  ram: string;

  /**
   * The amount of CPU (e.g., "1000m" (1 vCPU))
   *
   * @generated from field: string cpu = 2;
   */
  cpu: string;

  /**
   * The amount of disk (e.g., "100GiB")
   *
   * @generated from field: string disk = 3;
   */
  disk: string;
};

export declare type ResourceConfigurationValid = ResourceConfiguration;

/**
 * Describes the message qdrant.cloud.booking.v1.ResourceConfiguration.
 * Use `create(ResourceConfigurationSchema)` to create a new message.
 */
export declare const ResourceConfigurationSchema: GenMessage<ResourceConfiguration, {validType: ResourceConfigurationValid}>;

/**
 * PackageStatus defines the valid states a package can be in.
 *
 * @generated from enum qdrant.cloud.booking.v1.PackageStatus
 */
export enum PackageStatus {
  /**
   * Unspecified package status.
   *
   * @generated from enum value: PACKAGE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The package is active and available for use.
   *
   * @generated from enum value: PACKAGE_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The package is deactivated.
   *
   * @generated from enum value: PACKAGE_STATUS_DEACTIVATED = 2;
   */
  DEACTIVATED = 2,
}

/**
 * Describes the enum qdrant.cloud.booking.v1.PackageStatus.
 */
export declare const PackageStatusSchema: GenEnum<PackageStatus>;

/**
 * PackageTier defines the valid tiers a package can be in.
 *
 * @generated from enum qdrant.cloud.booking.v1.PackageTier
 */
export enum PackageTier {
  /**
   * Unspecified package tier.
   *
   * @generated from enum value: PACKAGE_TIER_STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * Standard tier.
   *
   * @generated from enum value: PACKAGE_TIER_STANDARD = 1;
   */
  STANDARD = 1,

  /**
   * Premium tier.
   *
   * @generated from enum value: PACKAGE_TIER_PREMIUM = 2;
   */
  PREMIUM = 2,
}

/**
 * Describes the enum qdrant.cloud.booking.v1.PackageTier.
 */
export declare const PackageTierSchema: GenEnum<PackageTier>;

/**
 * BookingService is the API used to configure the booking settings (like packages objects).
 *
 * @generated from service qdrant.cloud.booking.v1.BookingService
 */
export declare const BookingService: GenService<{
  /**
   * Lists all packages known by the system, optional filtered.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.booking.v1.BookingService.ListPackages
   */
  listPackages: {
    methodKind: "unary";
    input: typeof ListPackagesRequestSchema;
    output: typeof ListPackagesResponseSchema;
  },
  /**
   * Gets the package identified by the given ID.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.booking.v1.BookingService.GetPackage
   */
  getPackage: {
    methodKind: "unary";
    input: typeof GetPackageRequestSchema;
    output: typeof GetPackageResponseSchema;
  },
  /**
   * Lists all public packages.
   * Authentication not required
   *
   * @generated from rpc qdrant.cloud.booking.v1.BookingService.ListGlobalPackages
   */
  listGlobalPackages: {
    methodKind: "unary";
    input: typeof ListGlobalPackagesRequestSchema;
    output: typeof ListGlobalPackagesResponseSchema;
  },
}>;

