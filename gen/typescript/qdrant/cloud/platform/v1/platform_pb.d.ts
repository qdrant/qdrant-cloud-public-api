// @generated by protoc-gen-es v2.5.2 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required"
// @generated from file qdrant/cloud/platform/v1/platform.proto (package qdrant.cloud.platform.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file qdrant/cloud/platform/v1/platform.proto.
 */
export declare const file_qdrant_cloud_platform_v1_platform: GenFile;

/**
 * ListCloudProvidersRequest is the request for the ListCloudProviders function.
 *
 * @generated from message qdrant.cloud.platform.v1.ListCloudProvidersRequest
 */
export declare type ListCloudProvidersRequest = Message<"qdrant.cloud.platform.v1.ListCloudProvidersRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

export declare type ListCloudProvidersRequestValid = ListCloudProvidersRequest;

/**
 * Describes the message qdrant.cloud.platform.v1.ListCloudProvidersRequest.
 * Use `create(ListCloudProvidersRequestSchema)` to create a new message.
 */
export declare const ListCloudProvidersRequestSchema: GenMessage<ListCloudProvidersRequest, {validType: ListCloudProvidersRequestValid}>;

/**
 * ListCloudProvidersResponse is the response from the ListCloudProviders function.
 *
 * @generated from message qdrant.cloud.platform.v1.ListCloudProvidersResponse
 */
export declare type ListCloudProvidersResponse = Message<"qdrant.cloud.platform.v1.ListCloudProvidersResponse"> & {
  /**
   * The cloud providers
   *
   * @generated from field: repeated qdrant.cloud.platform.v1.CloudProvider items = 1;
   */
  items: CloudProvider[];
};

export declare type ListCloudProvidersResponseValid = ListCloudProvidersResponse;

/**
 * Describes the message qdrant.cloud.platform.v1.ListCloudProvidersResponse.
 * Use `create(ListCloudProvidersResponseSchema)` to create a new message.
 */
export declare const ListCloudProvidersResponseSchema: GenMessage<ListCloudProvidersResponse, {validType: ListCloudProvidersResponseValid}>;

/**
 * ListGlobalCloudProvidersRequest is the request from the ListGlobalCloudProviders function.
 *
 * @generated from message qdrant.cloud.platform.v1.ListGlobalCloudProvidersRequest
 */
export declare type ListGlobalCloudProvidersRequest = Message<"qdrant.cloud.platform.v1.ListGlobalCloudProvidersRequest"> & {
};

export declare type ListGlobalCloudProvidersRequestValid = ListGlobalCloudProvidersRequest;

/**
 * Describes the message qdrant.cloud.platform.v1.ListGlobalCloudProvidersRequest.
 * Use `create(ListGlobalCloudProvidersRequestSchema)` to create a new message.
 */
export declare const ListGlobalCloudProvidersRequestSchema: GenMessage<ListGlobalCloudProvidersRequest, {validType: ListGlobalCloudProvidersRequestValid}>;

/**
 * ListGlobalCloudProvidersResponse is the response from the ListGlobalCloudProviders function.
 *
 * @generated from message qdrant.cloud.platform.v1.ListGlobalCloudProvidersResponse
 */
export declare type ListGlobalCloudProvidersResponse = Message<"qdrant.cloud.platform.v1.ListGlobalCloudProvidersResponse"> & {
  /**
   * The cloud providers
   *
   * @generated from field: repeated qdrant.cloud.platform.v1.CloudProvider items = 1;
   */
  items: CloudProvider[];
};

export declare type ListGlobalCloudProvidersResponseValid = ListGlobalCloudProvidersResponse;

/**
 * Describes the message qdrant.cloud.platform.v1.ListGlobalCloudProvidersResponse.
 * Use `create(ListGlobalCloudProvidersResponseSchema)` to create a new message.
 */
export declare const ListGlobalCloudProvidersResponseSchema: GenMessage<ListGlobalCloudProvidersResponse, {validType: ListGlobalCloudProvidersResponseValid}>;

/**
 * ListGlobalCloudProviderRegionsRequest is the request for the ListGlobalCloudProviderRegions function.
 *
 * @generated from message qdrant.cloud.platform.v1.ListGlobalCloudProviderRegionsRequest
 */
export declare type ListGlobalCloudProviderRegionsRequest = Message<"qdrant.cloud.platform.v1.ListGlobalCloudProviderRegionsRequest"> & {
  /**
   * The identifier for the cloud provider. One of the providers from response of the ListCloudProviders function.
   * This is a required field.
   *
   * @generated from field: string cloud_provider_id = 1;
   */
  cloudProviderId: string;
};

export declare type ListGlobalCloudProviderRegionsRequestValid = ListGlobalCloudProviderRegionsRequest;

/**
 * Describes the message qdrant.cloud.platform.v1.ListGlobalCloudProviderRegionsRequest.
 * Use `create(ListGlobalCloudProviderRegionsRequestSchema)` to create a new message.
 */
export declare const ListGlobalCloudProviderRegionsRequestSchema: GenMessage<ListGlobalCloudProviderRegionsRequest, {validType: ListGlobalCloudProviderRegionsRequestValid}>;

/**
 * ListGlobalCloudProviderRegionsResponse is the response from the ListGlobalCloudProviderRegions function.
 *
 * @generated from message qdrant.cloud.platform.v1.ListGlobalCloudProviderRegionsResponse
 */
export declare type ListGlobalCloudProviderRegionsResponse = Message<"qdrant.cloud.platform.v1.ListGlobalCloudProviderRegionsResponse"> & {
  /**
   * The cloud provider regions.
   *
   * @generated from field: repeated qdrant.cloud.platform.v1.CloudProviderRegion items = 1;
   */
  items: CloudProviderRegion[];
};

export declare type ListGlobalCloudProviderRegionsResponseValid = ListGlobalCloudProviderRegionsResponse;

/**
 * Describes the message qdrant.cloud.platform.v1.ListGlobalCloudProviderRegionsResponse.
 * Use `create(ListGlobalCloudProviderRegionsResponseSchema)` to create a new message.
 */
export declare const ListGlobalCloudProviderRegionsResponseSchema: GenMessage<ListGlobalCloudProviderRegionsResponse, {validType: ListGlobalCloudProviderRegionsResponseValid}>;

/**
 * ListCloudProviderRegionsRequest is the request for the ListCloudProviderRegions function.
 *
 * @generated from message qdrant.cloud.platform.v1.ListCloudProviderRegionsRequest
 */
export declare type ListCloudProviderRegionsRequest = Message<"qdrant.cloud.platform.v1.ListCloudProviderRegionsRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier for the cloud provider. One of the providers from response of the ListCloudProviders function.
   * This is a required field.
   *
   * @generated from field: string cloud_provider_id = 2;
   */
  cloudProviderId: string;
};

export declare type ListCloudProviderRegionsRequestValid = ListCloudProviderRegionsRequest;

/**
 * Describes the message qdrant.cloud.platform.v1.ListCloudProviderRegionsRequest.
 * Use `create(ListCloudProviderRegionsRequestSchema)` to create a new message.
 */
export declare const ListCloudProviderRegionsRequestSchema: GenMessage<ListCloudProviderRegionsRequest, {validType: ListCloudProviderRegionsRequestValid}>;

/**
 * ListCloudProviderRegionsResponse is the response from the ListCloudProviderRegions function.
 *
 * @generated from message qdrant.cloud.platform.v1.ListCloudProviderRegionsResponse
 */
export declare type ListCloudProviderRegionsResponse = Message<"qdrant.cloud.platform.v1.ListCloudProviderRegionsResponse"> & {
  /**
   * The cloud provider regions.
   *
   * @generated from field: repeated qdrant.cloud.platform.v1.CloudProviderRegion items = 1;
   */
  items: CloudProviderRegion[];
};

export declare type ListCloudProviderRegionsResponseValid = ListCloudProviderRegionsResponse;

/**
 * Describes the message qdrant.cloud.platform.v1.ListCloudProviderRegionsResponse.
 * Use `create(ListCloudProviderRegionsResponseSchema)` to create a new message.
 */
export declare const ListCloudProviderRegionsResponseSchema: GenMessage<ListCloudProviderRegionsResponse, {validType: ListCloudProviderRegionsResponseValid}>;

/**
 * CloudProvider represents a cloud provider identifier and name.
 *
 * @generated from message qdrant.cloud.platform.v1.CloudProvider
 */
export declare type CloudProvider = Message<"qdrant.cloud.platform.v1.CloudProvider"> & {
  /**
   * The identifier for the cloud provider.
   * e.g. "aws", "gcp", "azure", "hybrid".
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The human-readable name of the cloud provider.
   * e.g. "Amazon Web Services", "Google Cloud", "Microsoft Azure", "Hybrid Cloud".
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Whether the cloud provider is part of the free-tier offering.
   *
   * @generated from field: bool free_tier = 3;
   */
  freeTier: boolean;

  /**
   * Indicates whether the cloud provider is available for the use case.
   *
   * @generated from field: bool available = 4;
   */
  available: boolean;
};

export declare type CloudProviderValid = CloudProvider;

/**
 * Describes the message qdrant.cloud.platform.v1.CloudProvider.
 * Use `create(CloudProviderSchema)` to create a new message.
 */
export declare const CloudProviderSchema: GenMessage<CloudProvider, {validType: CloudProviderValid}>;

/**
 * CloudProviderRegion represents a cloud provider region.
 *
 * @generated from message qdrant.cloud.platform.v1.CloudProviderRegion
 */
export declare type CloudProviderRegion = Message<"qdrant.cloud.platform.v1.CloudProviderRegion"> & {
  /**
   * The identifier for the cloud provider region.
   * e.g. "us-west-1", "europe-west1", "eastus", "{UUID in case of hybrid cloud}".
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The human-readable name of the cloud provider region.
   * e.g. "Frankfurt", "Tokyo", etc.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Whether the cloud region is part of the free-tier offering.
   *
   * @generated from field: bool free_tier = 3;
   */
  freeTier: boolean;

  /**
   * Indicates whether the cloud region is available or the hybrid cloud region is ready for clusters.
   *
   * @generated from field: bool available = 4;
   */
  available: boolean;

  /**
   * The identifier for the cloud provider.
   * e.g. "aws", "gcp", "azure", "openshift", "linode", "unknown".
   *
   * @generated from field: string provider = 5;
   */
  provider: string;

  /**
   * ISO 3166-1 alpha-2 country codes for different countries to display for each region.
   *
   * @generated from field: optional string country_iso_code = 6;
   */
  countryIsoCode?: string;

  /**
   * Geographic location grouping of the region.
   * e.g. "Europe", "Asia", "North America", etc.
   *
   * @generated from field: optional string geographical_sub_region = 7;
   */
  geographicalSubRegion?: string;
};

export declare type CloudProviderRegionValid = CloudProviderRegion;

/**
 * Describes the message qdrant.cloud.platform.v1.CloudProviderRegion.
 * Use `create(CloudProviderRegionSchema)` to create a new message.
 */
export declare const CloudProviderRegionSchema: GenMessage<CloudProviderRegion, {validType: CloudProviderRegionValid}>;

/**
 * PlatformService is the API used to query for cloud provider & regional information.
 *
 * @generated from service qdrant.cloud.platform.v1.PlatformService
 */
export declare const PlatformService: GenService<{
  /**
   * Lists all available cloud providers globally (not account-specific).
   * Authentication is not required.
   *
   * @generated from rpc qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviders
   */
  listGlobalCloudProviders: {
    methodKind: "unary";
    input: typeof ListGlobalCloudProvidersRequestSchema;
    output: typeof ListGlobalCloudProvidersResponseSchema;
  },
  /**
   * Lists all cloud providers in the account identified by the given ID.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.platform.v1.PlatformService.ListCloudProviders
   */
  listCloudProviders: {
    methodKind: "unary";
    input: typeof ListCloudProvidersRequestSchema;
    output: typeof ListCloudProvidersResponseSchema;
  },
  /**
   * Lists all cloud provider regions (not account-specific) identified by cloud provider ID.
   * Authentication is not required.
   *
   * @generated from rpc qdrant.cloud.platform.v1.PlatformService.ListGlobalCloudProviderRegions
   */
  listGlobalCloudProviderRegions: {
    methodKind: "unary";
    input: typeof ListGlobalCloudProviderRegionsRequestSchema;
    output: typeof ListGlobalCloudProviderRegionsResponseSchema;
  },
  /**
   * Lists all cloud provider regions in the account identified by the given ID and cloud provider.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.platform.v1.PlatformService.ListCloudProviderRegions
   */
  listCloudProviderRegions: {
    methodKind: "unary";
    input: typeof ListCloudProviderRegionsRequestSchema;
    output: typeof ListCloudProviderRegionsResponseSchema;
  },
}>;

