// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/iam/v1/iam.proto (package qdrant.cloud.iam.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file qdrant/cloud/iam/v1/iam.proto.
 */
export declare const file_qdrant_cloud_iam_v1_iam: GenFile;

/**
 * GetAuthenticatedUserRequest is the request for the GetAuthenticatedUser function
 *
 * Empty
 *
 * @generated from message qdrant.cloud.iam.v1.GetAuthenticatedUserRequest
 */
export declare type GetAuthenticatedUserRequest = Message<"qdrant.cloud.iam.v1.GetAuthenticatedUserRequest"> & {
};

/**
 * Describes the message qdrant.cloud.iam.v1.GetAuthenticatedUserRequest.
 * Use `create(GetAuthenticatedUserRequestSchema)` to create a new message.
 */
export declare const GetAuthenticatedUserRequestSchema: GenMessage<GetAuthenticatedUserRequest>;

/**
 * GetAuthenticatedUserResponse is the response from the GetAuthenticatedUser function
 *
 * @generated from message qdrant.cloud.iam.v1.GetAuthenticatedUserResponse
 */
export declare type GetAuthenticatedUserResponse = Message<"qdrant.cloud.iam.v1.GetAuthenticatedUserResponse"> & {
  /**
   * The actual user.
   *
   * @generated from field: qdrant.cloud.iam.v1.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message qdrant.cloud.iam.v1.GetAuthenticatedUserResponse.
 * Use `create(GetAuthenticatedUserResponseSchema)` to create a new message.
 */
export declare const GetAuthenticatedUserResponseSchema: GenMessage<GetAuthenticatedUserResponse>;

/**
 * UpdateUserRequest is the request for the UpdateUser function.
 *
 * @generated from message qdrant.cloud.iam.v1.UpdateUserRequest
 */
export declare type UpdateUserRequest = Message<"qdrant.cloud.iam.v1.UpdateUserRequest"> & {
  /**
   * The actual user.
   *
   * @generated from field: qdrant.cloud.iam.v1.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message qdrant.cloud.iam.v1.UpdateUserRequest.
 * Use `create(UpdateUserRequestSchema)` to create a new message.
 */
export declare const UpdateUserRequestSchema: GenMessage<UpdateUserRequest>;

/**
 * UpdateUserResponse is the response from the UpdateUser function.
 *
 * @generated from message qdrant.cloud.iam.v1.UpdateUserResponse
 */
export declare type UpdateUserResponse = Message<"qdrant.cloud.iam.v1.UpdateUserResponse"> & {
  /**
   * The actual user.
   *
   * @generated from field: qdrant.cloud.iam.v1.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message qdrant.cloud.iam.v1.UpdateUserResponse.
 * Use `create(UpdateUserResponseSchema)` to create a new message.
 */
export declare const UpdateUserResponseSchema: GenMessage<UpdateUserResponse>;

/**
 * GetUserConsentRequest is the request for the GetUserConsent function.
 *
 * @generated from message qdrant.cloud.iam.v1.GetUserConsentRequest
 */
export declare type GetUserConsentRequest = Message<"qdrant.cloud.iam.v1.GetUserConsentRequest"> & {
  /**
   * The type of the legal document.
   * This is a required field and cannot be UNSPECIFIED.
   *
   * @generated from field: qdrant.cloud.iam.v1.LegalDocumentType document_type = 1;
   */
  documentType: LegalDocumentType;
};

/**
 * Describes the message qdrant.cloud.iam.v1.GetUserConsentRequest.
 * Use `create(GetUserConsentRequestSchema)` to create a new message.
 */
export declare const GetUserConsentRequestSchema: GenMessage<GetUserConsentRequest>;

/**
 * GetUserConsentResponse is the response from the GetUserConsent function.
 *
 * @generated from message qdrant.cloud.iam.v1.GetUserConsentResponse
 */
export declare type GetUserConsentResponse = Message<"qdrant.cloud.iam.v1.GetUserConsentResponse"> & {
  /**
   * The type of the legal document for which consent status is reported.
   *
   * @generated from field: qdrant.cloud.iam.v1.LegalDocumentType document_type = 1;
   */
  documentType: LegalDocumentType;

  /**
   * The latest consent status recorded from the user for this document type.
   * Will be USER_CONSENT_STATUS_UNSPECIFIED if no status update has been recorded.
   *
   * @generated from field: qdrant.cloud.iam.v1.UserConsentStatus status = 2;
   */
  status: UserConsentStatus;

  /**
   * Timestamp of the most recent status update.
   * Unset if no status update has been recorded.
   *
   * @generated from field: optional google.protobuf.Timestamp last_modified_at = 3;
   */
  lastModifiedAt?: Timestamp;

  /**
   * A convenience field indicating if the current status is an acceptance.
   * True if status is USER_CONSENT_STATUS_ACCEPTED, false otherwise.
   *
   * @generated from field: bool is_accepted = 4;
   */
  isAccepted: boolean;
};

/**
 * Describes the message qdrant.cloud.iam.v1.GetUserConsentResponse.
 * Use `create(GetUserConsentResponseSchema)` to create a new message.
 */
export declare const GetUserConsentResponseSchema: GenMessage<GetUserConsentResponse>;

/**
 * RecordUserConsentRequest is the request for the RecordUserConsent function.
 *
 * @generated from message qdrant.cloud.iam.v1.RecordUserConsentRequest
 */
export declare type RecordUserConsentRequest = Message<"qdrant.cloud.iam.v1.RecordUserConsentRequest"> & {
  /**
   * The type of the legal document.
   * This is a required field and cannot be UNSPECIFIED.
   *
   * @generated from field: qdrant.cloud.iam.v1.LegalDocumentType document_type = 1;
   */
  documentType: LegalDocumentType;

  /**
   * The status update initiated by the user.
   * This is a required field and cannot be UNSPECIFIED or PENDING.
   *
   * @generated from field: qdrant.cloud.iam.v1.UserConsentStatus status_update = 2;
   */
  statusUpdate: UserConsentStatus;
};

/**
 * Describes the message qdrant.cloud.iam.v1.RecordUserConsentRequest.
 * Use `create(RecordUserConsentRequestSchema)` to create a new message.
 */
export declare const RecordUserConsentRequestSchema: GenMessage<RecordUserConsentRequest>;

/**
 * RecordUserConsentResponse is the response from the RecordUserConsent function.
 *
 * Empty
 *
 * @generated from message qdrant.cloud.iam.v1.RecordUserConsentResponse
 */
export declare type RecordUserConsentResponse = Message<"qdrant.cloud.iam.v1.RecordUserConsentResponse"> & {
};

/**
 * Describes the message qdrant.cloud.iam.v1.RecordUserConsentResponse.
 * Use `create(RecordUserConsentResponseSchema)` to create a new message.
 */
export declare const RecordUserConsentResponseSchema: GenMessage<RecordUserConsentResponse>;

/**
 * ListPermissionsRequest is the request for the ListPermissions function
 *
 * @generated from message qdrant.cloud.iam.v1.ListPermissionsRequest
 */
export declare type ListPermissionsRequest = Message<"qdrant.cloud.iam.v1.ListPermissionsRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

/**
 * Describes the message qdrant.cloud.iam.v1.ListPermissionsRequest.
 * Use `create(ListPermissionsRequestSchema)` to create a new message.
 */
export declare const ListPermissionsRequestSchema: GenMessage<ListPermissionsRequest>;

/**
 * ListPermissionsResponse is the response from the ListPermissions function
 *
 * @generated from message qdrant.cloud.iam.v1.ListPermissionsResponse
 */
export declare type ListPermissionsResponse = Message<"qdrant.cloud.iam.v1.ListPermissionsResponse"> & {
  /**
   * The permissions know by the system.
   *
   * @generated from field: repeated string permissions = 1;
   */
  permissions: string[];
};

/**
 * Describes the message qdrant.cloud.iam.v1.ListPermissionsResponse.
 * Use `create(ListPermissionsResponseSchema)` to create a new message.
 */
export declare const ListPermissionsResponseSchema: GenMessage<ListPermissionsResponse>;

/**
 * ListRolesRequest is the request for the ListRoles function
 *
 * @generated from message qdrant.cloud.iam.v1.ListRolesRequest
 */
export declare type ListRolesRequest = Message<"qdrant.cloud.iam.v1.ListRolesRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

/**
 * Describes the message qdrant.cloud.iam.v1.ListRolesRequest.
 * Use `create(ListRolesRequestSchema)` to create a new message.
 */
export declare const ListRolesRequestSchema: GenMessage<ListRolesRequest>;

/**
 * ListRolesResponse is the response from the ListRoles function
 *
 * @generated from message qdrant.cloud.iam.v1.ListRolesResponse
 */
export declare type ListRolesResponse = Message<"qdrant.cloud.iam.v1.ListRolesResponse"> & {
  /**
   * The actual roles in this list.
   *
   * @generated from field: repeated qdrant.cloud.iam.v1.Role items = 1;
   */
  items: Role[];
};

/**
 * Describes the message qdrant.cloud.iam.v1.ListRolesResponse.
 * Use `create(ListRolesResponseSchema)` to create a new message.
 */
export declare const ListRolesResponseSchema: GenMessage<ListRolesResponse>;

/**
 * GetRoleRequest is the request for the GetRole function
 *
 * @generated from message qdrant.cloud.iam.v1.GetRoleRequest
 */
export declare type GetRoleRequest = Message<"qdrant.cloud.iam.v1.GetRoleRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the role (in GUID format).
   * This is a required field.
   *
   * @generated from field: string role_id = 2;
   */
  roleId: string;
};

/**
 * Describes the message qdrant.cloud.iam.v1.GetRoleRequest.
 * Use `create(GetRoleRequestSchema)` to create a new message.
 */
export declare const GetRoleRequestSchema: GenMessage<GetRoleRequest>;

/**
 * GetRoleResponse is the response from the GetRole function
 *
 * @generated from message qdrant.cloud.iam.v1.GetRoleResponse
 */
export declare type GetRoleResponse = Message<"qdrant.cloud.iam.v1.GetRoleResponse"> & {
  /**
   * The actual role.
   *
   * @generated from field: qdrant.cloud.iam.v1.Role role = 1;
   */
  role?: Role;
};

/**
 * Describes the message qdrant.cloud.iam.v1.GetRoleResponse.
 * Use `create(GetRoleResponseSchema)` to create a new message.
 */
export declare const GetRoleResponseSchema: GenMessage<GetRoleResponse>;

/**
 * CreateRoleRequest is the request for the CreateRole function.
 *
 * @generated from message qdrant.cloud.iam.v1.CreateRoleRequest
 */
export declare type CreateRoleRequest = Message<"qdrant.cloud.iam.v1.CreateRoleRequest"> & {
  /**
   * The actual role.
   *
   * @generated from field: qdrant.cloud.iam.v1.Role role = 1;
   */
  role?: Role;
};

/**
 * Describes the message qdrant.cloud.iam.v1.CreateRoleRequest.
 * Use `create(CreateRoleRequestSchema)` to create a new message.
 */
export declare const CreateRoleRequestSchema: GenMessage<CreateRoleRequest>;

/**
 * CreateRoleResponse is the response from the CreateRole function.
 *
 * @generated from message qdrant.cloud.iam.v1.CreateRoleResponse
 */
export declare type CreateRoleResponse = Message<"qdrant.cloud.iam.v1.CreateRoleResponse"> & {
  /**
   * The actual role.
   *
   * @generated from field: qdrant.cloud.iam.v1.Role role = 1;
   */
  role?: Role;
};

/**
 * Describes the message qdrant.cloud.iam.v1.CreateRoleResponse.
 * Use `create(CreateRoleResponseSchema)` to create a new message.
 */
export declare const CreateRoleResponseSchema: GenMessage<CreateRoleResponse>;

/**
 * UpdateRoleRequest is the request for the UpdateRole function.
 *
 * @generated from message qdrant.cloud.iam.v1.UpdateRoleRequest
 */
export declare type UpdateRoleRequest = Message<"qdrant.cloud.iam.v1.UpdateRoleRequest"> & {
  /**
   * The actual role.
   *
   * @generated from field: qdrant.cloud.iam.v1.Role role = 1;
   */
  role?: Role;
};

/**
 * Describes the message qdrant.cloud.iam.v1.UpdateRoleRequest.
 * Use `create(UpdateRoleRequestSchema)` to create a new message.
 */
export declare const UpdateRoleRequestSchema: GenMessage<UpdateRoleRequest>;

/**
 * UpdateRoleResponse is the response from the UpdateRole function.
 *
 * @generated from message qdrant.cloud.iam.v1.UpdateRoleResponse
 */
export declare type UpdateRoleResponse = Message<"qdrant.cloud.iam.v1.UpdateRoleResponse"> & {
  /**
   * The actual role.
   *
   * @generated from field: qdrant.cloud.iam.v1.Role role = 1;
   */
  role?: Role;
};

/**
 * Describes the message qdrant.cloud.iam.v1.UpdateRoleResponse.
 * Use `create(UpdateRoleResponseSchema)` to create a new message.
 */
export declare const UpdateRoleResponseSchema: GenMessage<UpdateRoleResponse>;

/**
 * DeleteRoleRequest is the request for the DeleteRole function.
 *
 * @generated from message qdrant.cloud.iam.v1.DeleteRoleRequest
 */
export declare type DeleteRoleRequest = Message<"qdrant.cloud.iam.v1.DeleteRoleRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the role (in GUID format).
   * This is a required field.
   *
   * @generated from field: string role_id = 2;
   */
  roleId: string;
};

/**
 * Describes the message qdrant.cloud.iam.v1.DeleteRoleRequest.
 * Use `create(DeleteRoleRequestSchema)` to create a new message.
 */
export declare const DeleteRoleRequestSchema: GenMessage<DeleteRoleRequest>;

/**
 * DeleteRoleResponse is the response from the DeleteRole function.
 *
 * Empty
 *
 * @generated from message qdrant.cloud.iam.v1.DeleteRoleResponse
 */
export declare type DeleteRoleResponse = Message<"qdrant.cloud.iam.v1.DeleteRoleResponse"> & {
};

/**
 * Describes the message qdrant.cloud.iam.v1.DeleteRoleResponse.
 * Use `create(DeleteRoleResponseSchema)` to create a new message.
 */
export declare const DeleteRoleResponseSchema: GenMessage<DeleteRoleResponse>;

/**
 * ListEffectivePermissionsRequest is the request for the ListEffectivePermissions function
 *
 * @generated from message qdrant.cloud.iam.v1.ListEffectivePermissionsRequest
 */
export declare type ListEffectivePermissionsRequest = Message<"qdrant.cloud.iam.v1.ListEffectivePermissionsRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

/**
 * Describes the message qdrant.cloud.iam.v1.ListEffectivePermissionsRequest.
 * Use `create(ListEffectivePermissionsRequestSchema)` to create a new message.
 */
export declare const ListEffectivePermissionsRequestSchema: GenMessage<ListEffectivePermissionsRequest>;

/**
 * ListEffectivePermissionsResponse is the response from the ListEffectivePermissions function
 *
 * @generated from message qdrant.cloud.iam.v1.ListEffectivePermissionsResponse
 */
export declare type ListEffectivePermissionsResponse = Message<"qdrant.cloud.iam.v1.ListEffectivePermissionsResponse"> & {
  /**
   * The effective permissions.
   *
   * @generated from field: repeated string permissions = 1;
   */
  permissions: string[];
};

/**
 * Describes the message qdrant.cloud.iam.v1.ListEffectivePermissionsResponse.
 * Use `create(ListEffectivePermissionsResponseSchema)` to create a new message.
 */
export declare const ListEffectivePermissionsResponseSchema: GenMessage<ListEffectivePermissionsResponse>;

/**
 * AssignUserRolesRequest is the request for the AssignUserRoles function
 *
 * @generated from message qdrant.cloud.iam.v1.AssignUserRolesRequest
 */
export declare type AssignUserRolesRequest = Message<"qdrant.cloud.iam.v1.AssignUserRolesRequest"> & {
  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;

  /**
   * The identifier of the user (in GUID format).
   * This user should be part of the provided account.
   * This is a required field.
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * The roles to add to the provided user.
   * If a role was already part of the user or the same role is provided multiple times, the role will be added exactly one time.
   *
   * @generated from field: repeated string role_ids_to_add = 3;
   */
  roleIdsToAdd: string[];

  /**
   * The roles to be deleted from the provided user.
   * If a role is part of the role_ids_to_add this field takes precedence.
   *
   * @generated from field: repeated string role_ids_to_delete = 4;
   */
  roleIdsToDelete: string[];
};

/**
 * Describes the message qdrant.cloud.iam.v1.AssignUserRolesRequest.
 * Use `create(AssignUserRolesRequestSchema)` to create a new message.
 */
export declare const AssignUserRolesRequestSchema: GenMessage<AssignUserRolesRequest>;

/**
 * AssignUserRolesResponse is the response from the AssignUserRoles function
 *
 * Empty
 *
 * @generated from message qdrant.cloud.iam.v1.AssignUserRolesResponse
 */
export declare type AssignUserRolesResponse = Message<"qdrant.cloud.iam.v1.AssignUserRolesResponse"> & {
};

/**
 * Describes the message qdrant.cloud.iam.v1.AssignUserRolesResponse.
 * Use `create(AssignUserRolesResponseSchema)` to create a new message.
 */
export declare const AssignUserRolesResponseSchema: GenMessage<AssignUserRolesResponse>;

/**
 * A User represents a user in the Qdrant cloud.
 *
 * @generated from message qdrant.cloud.iam.v1.User
 */
export declare type User = Message<"qdrant.cloud.iam.v1.User"> & {
  /**
   * Unique identifier for the user (in GUID format).
   * This is a read-only field and will be available after the user is created.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The timestamp when the user was created.
   * This is a read-only field and will be available after the user is created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * The timestamp when the user was last updated.
   * This is a read-only field and will be available after the user is created.
   *
   * @generated from field: google.protobuf.Timestamp last_modified_at = 3;
   */
  lastModifiedAt?: Timestamp;

  /**
   * The email address of the user.
   *
   * @generated from field: string email = 4;
   */
  email: string;

  /**
   * The status of the user.
   * This is a read-only field.
   *
   * @generated from field: qdrant.cloud.iam.v1.UserStatus status = 5;
   */
  status: UserStatus;

  /**
   * The default account ID of the user (in GUID format).
   * You should be member of the account when updating.
   *
   * @generated from field: string default_account_id = 6;
   */
  defaultAccountId: string;

  /**
   * The notification preferences of the user.
   *
   * @generated from field: qdrant.cloud.iam.v1.NotificationPreferences notification_preferences = 7;
   */
  notificationPreferences?: NotificationPreferences;
};

/**
 * Describes the message qdrant.cloud.iam.v1.User.
 * Use `create(UserSchema)` to create a new message.
 */
export declare const UserSchema: GenMessage<User>;

/**
 * NotificationPreferences defines the notification preferences of a user.
 *
 * @generated from message qdrant.cloud.iam.v1.NotificationPreferences
 */
export declare type NotificationPreferences = Message<"qdrant.cloud.iam.v1.NotificationPreferences"> & {
  /**
   * Whether the user wants to receive newsletters by email.
   *
   * @generated from field: bool email_newsletter_enabled = 1;
   */
  emailNewsletterEnabled: boolean;
};

/**
 * Describes the message qdrant.cloud.iam.v1.NotificationPreferences.
 * Use `create(NotificationPreferencesSchema)` to create a new message.
 */
export declare const NotificationPreferencesSchema: GenMessage<NotificationPreferences>;

/**
 * A Role represents a role in the Qdrant cloud.
 *
 * @generated from message qdrant.cloud.iam.v1.Role
 */
export declare type Role = Message<"qdrant.cloud.iam.v1.Role"> & {
  /**
   * Unique identifier for the role (in GUID format).
   * This is a read-only field and will be available after a role is created.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The timestamp when the role was created.
   * This is a read-only field and will be available after a role is created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * The timestamp when the role was last updated.
   * This is a read-only field and will be available after a role is created.
   *
   * @generated from field: google.protobuf.Timestamp last_modified_at = 3;
   */
  lastModifiedAt?: Timestamp;

  /**
   * The identifier of the account (in GUID format).
   * This is a required field.
   *
   * @generated from field: string account_id = 4;
   */
  accountId: string;

  /**
   * The name of the role.
   * Name can only contain letters, numbers, underscores and dashes
   *
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * The human readable description of this role.
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * The role type.
   *
   * @generated from field: qdrant.cloud.iam.v1.RoleType role_type = 7;
   */
  roleType: RoleType;

  /**
   * The permissions associated with this role.
   * Must contain at least one permission.
   *
   * @generated from field: repeated string permissions = 8;
   */
  permissions: string[];
};

/**
 * Describes the message qdrant.cloud.iam.v1.Role.
 * Use `create(RoleSchema)` to create a new message.
 */
export declare const RoleSchema: GenMessage<Role>;

/**
 * UserStatus defines the possible statuses of a user.
 *
 * @generated from enum qdrant.cloud.iam.v1.UserStatus
 */
export enum UserStatus {
  /**
   * Default, unspecified status.
   *
   * @generated from enum value: USER_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The user account is active and can be used.
   *
   * @generated from enum value: USER_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The user account is blocked and cannot be used.
   *
   * @generated from enum value: USER_STATUS_BLOCKED = 2;
   */
  BLOCKED = 2,

  /**
   * The user account has been marked for deletion or is deleted.
   *
   * @generated from enum value: USER_STATUS_DELETED = 3;
   */
  DELETED = 3,
}

/**
 * Describes the enum qdrant.cloud.iam.v1.UserStatus.
 */
export declare const UserStatusSchema: GenEnum<UserStatus>;

/**
 * LegalDocumentType specifies the type of a legal document.
 *
 * @generated from enum qdrant.cloud.iam.v1.LegalDocumentType
 */
export enum LegalDocumentType {
  /**
   * Unspecified document type.
   *
   * @generated from enum value: LEGAL_DOCUMENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Terms of Service document.
   *
   * @generated from enum value: LEGAL_DOCUMENT_TYPE_TERMS_OF_SERVICE = 1;
   */
  TERMS_OF_SERVICE = 1,

  /**
   * Privacy Policy document.
   *
   * @generated from enum value: LEGAL_DOCUMENT_TYPE_PRIVACY_POLICY = 2;
   */
  PRIVACY_POLICY = 2,

  /**
   * Service Level Agreement document.
   *
   * @generated from enum value: LEGAL_DOCUMENT_TYPE_SLA = 3;
   */
  SLA = 3,
}

/**
 * Describes the enum qdrant.cloud.iam.v1.LegalDocumentType.
 */
export declare const LegalDocumentTypeSchema: GenEnum<LegalDocumentType>;

/**
 * UserConsentStatus specifies the status from an user for a consent.
 *
 * @generated from enum qdrant.cloud.iam.v1.UserConsentStatus
 */
export enum UserConsentStatus {
  /**
   * Unspecified consent status.
   *
   * @generated from enum value: USER_CONSENT_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The user accepted the consent.
   *
   * @generated from enum value: USER_CONSENT_STATUS_ACCEPTED = 1;
   */
  ACCEPTED = 1,

  /**
   * The user revoked the consent.
   *
   * @generated from enum value: USER_CONSENT_STATUS_REVOKED = 2;
   */
  REVOKED = 2,

  /**
   * The consent is pending action from the user.
   * Pending consent means that the user got notified about the new version of the document. After a certain
   * period of time, we auto accept pending consents depending on the document type.
   *
   * @generated from enum value: USER_CONSENT_STATUS_PENDING = 3;
   */
  PENDING = 3,
}

/**
 * Describes the enum qdrant.cloud.iam.v1.UserConsentStatus.
 */
export declare const UserConsentStatusSchema: GenEnum<UserConsentStatus>;

/**
 * RoleType specified the type of the role
 *
 * @generated from enum qdrant.cloud.iam.v1.RoleType
 */
export enum RoleType {
  /**
   * The role type is unspecified.
   *
   * @generated from enum value: ROLE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The role type is system.
   * Note: system roles cannot be changed (create/update/delete).
   *
   * @generated from enum value: ROLE_TYPE_SYSTEM = 1;
   */
  SYSTEM = 1,

  /**
   * The role type is custom defined.
   *
   * @generated from enum value: ROLE_TYPE_CUSTOM = 2;
   */
  CUSTOM = 2,
}

/**
 * Describes the enum qdrant.cloud.iam.v1.RoleType.
 */
export declare const RoleTypeSchema: GenEnum<RoleType>;

/**
 * IAMService is the API used to configure IAM (identity and access management) objects.
 *
 * @generated from service qdrant.cloud.iam.v1.IAMService
 */
export declare const IAMService: GenService<{
  /**
   * Gets the authenticated user.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetAuthenticatedUser
   */
  getAuthenticatedUser: {
    methodKind: "unary";
    input: typeof GetAuthenticatedUserRequestSchema;
    output: typeof GetAuthenticatedUserResponseSchema;
  },
  /**
   * Updates the user identified by the given ID.
   * Required permissions:
   * - write:user
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.UpdateUser
   */
  updateUser: {
    methodKind: "unary";
    input: typeof UpdateUserRequestSchema;
    output: typeof UpdateUserResponseSchema;
  },
  /**
   * Gets the authenticated user's consent status for a specific legal document.
   * Required permissions:
   * - None (authenticated only)
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetUserConsent
   */
  getUserConsent: {
    methodKind: "unary";
    input: typeof GetUserConsentRequestSchema;
    output: typeof GetUserConsentResponseSchema;
  },
  /**
   * Records the authenticated user's consent for a legal document.
   * Required permissions:
   * - write:user
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.RecordUserConsent
   */
  recordUserConsent: {
    methodKind: "unary";
    input: typeof RecordUserConsentRequestSchema;
    output: typeof RecordUserConsentResponseSchema;
  },
  /**
   * Lists all permissions known in the system for the provided account.
   * Note: If you want to get a list of permissions available for you, please use GetEffectivePermissions instead.
   * Required permissions:
   * - read:roles
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListPermissions
   */
  listPermissions: {
    methodKind: "unary";
    input: typeof ListPermissionsRequestSchema;
    output: typeof ListPermissionsResponseSchema;
  },
  /**
   * Lists all roles in the account identified by the given ID.
   * Required permissions:
   * - read:roles
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListRoles
   */
  listRoles: {
    methodKind: "unary";
    input: typeof ListRolesRequestSchema;
    output: typeof ListRolesResponseSchema;
  },
  /**
   * Gets a role for the account identified by the given ID.
   * Required permissions:
   * - read:roles
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetRole
   */
  getRole: {
    methodKind: "unary";
    input: typeof GetRoleRequestSchema;
    output: typeof GetRoleResponseSchema;
  },
  /**
   * Creates a role for the account identified by the given ID.
   * Note: The role_type must be ROLE_TYPE_CUSTOM.
   * Required permissions:
   * - write:roles
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.CreateRole
   */
  createRole: {
    methodKind: "unary";
    input: typeof CreateRoleRequestSchema;
    output: typeof CreateRoleResponseSchema;
  },
  /**
   * Updates a role in the account identified by the given ID.
   * Note: The role_type must be ROLE_TYPE_CUSTOM.
   * Required permissions:
   * - write:roles
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.UpdateRole
   */
  updateRole: {
    methodKind: "unary";
    input: typeof UpdateRoleRequestSchema;
    output: typeof UpdateRoleResponseSchema;
  },
  /**
   * Deletes a role in the account identified by the given ID.
   * Note: The role_type must be ROLE_TYPE_CUSTOM.
   * Required permissions:
   * - delete:roles
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.DeleteRole
   */
  deleteRole: {
    methodKind: "unary";
    input: typeof DeleteRoleRequestSchema;
    output: typeof DeleteRoleResponseSchema;
  },
  /**
   * Lists the effective permissions for the user in the account identified by the given ID.
   * Required permissions:
   * - read:roles
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListEffectivePermissions
   */
  listEffectivePermissions: {
    methodKind: "unary";
    input: typeof ListEffectivePermissionsRequestSchema;
    output: typeof ListEffectivePermissionsResponseSchema;
  },
  /**
   * Assigns the provided roles to the user in the account identified by the given ID.
   * Required permissions:
   * - write:roles
   *
   * @generated from rpc qdrant.cloud.iam.v1.IAMService.AssignUserRoles
   */
  assignUserRoles: {
    methodKind: "unary";
    input: typeof AssignUserRolesRequestSchema;
    output: typeof AssignUserRolesResponseSchema;
  },
}>;

