// @generated by protoc-gen-connect-query v2.1.0 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/iam/v1/iam.proto (package qdrant.cloud.iam.v1, syntax proto3)
/* eslint-disable */

import { IAMService } from "./iam_pb.js";

/**
 * Gets the authenticated user.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetAuthenticatedUser
 */
export const getAuthenticatedUser = IAMService.method.getAuthenticatedUser;

/**
 * Lists all quotas for the authenticated user.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListAuthenticatedUserQuotas
 */
export const listAuthenticatedUserQuotas = IAMService.method.listAuthenticatedUserQuotas;

/**
 * Updates the user identified by the given ID.
 * Required permissions:
 * - write:user
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.UpdateUser
 */
export const updateUser = IAMService.method.updateUser;

/**
 * Gets the authenticated user's consent status for a specific legal document.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetUserConsent
 */
export const getUserConsent = IAMService.method.getUserConsent;

/**
 * Records the authenticated user's consent for a legal document.
 * Required permissions:
 * - write:user
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.RecordUserConsent
 */
export const recordUserConsent = IAMService.method.recordUserConsent;

/**
 * Lists all permissions known in the system for the provided account.
 * Note: If you want to get a list of permissions available for you, please use GetEffectivePermissions instead.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListPermissions
 */
export const listPermissions = IAMService.method.listPermissions;

/**
 * Lists all roles in the account identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListRoles
 */
export const listRoles = IAMService.method.listRoles;

/**
 * Gets a role for the account identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetRole
 */
export const getRole = IAMService.method.getRole;

/**
 * Creates a role for the account identified by the given ID.
 * Note: The role_type must be ROLE_TYPE_CUSTOM.
 * Required permissions:
 * - write:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.CreateRole
 */
export const createRole = IAMService.method.createRole;

/**
 * Updates a role in the account identified by the given ID.
 * Note: The role_type must be ROLE_TYPE_CUSTOM.
 * Required permissions:
 * - write:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.UpdateRole
 */
export const updateRole = IAMService.method.updateRole;

/**
 * Deletes a role in the account identified by the given ID.
 * Note: The role_type must be ROLE_TYPE_CUSTOM.
 * Required permissions:
 * - delete:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.DeleteRole
 */
export const deleteRole = IAMService.method.deleteRole;

/**
 * Lists the effective permissions for the user in the account identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListEffectivePermissions
 */
export const listEffectivePermissions = IAMService.method.listEffectivePermissions;

/**
 * List roles of the user identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListUserRoles
 */
export const listUserRoles = IAMService.method.listUserRoles;

/**
 * Assigns the provided roles to the user in the account identified by the given ID.
 * Required permissions:
 * - write:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.AssignUserRoles
 */
export const assignUserRoles = IAMService.method.assignUserRoles;
