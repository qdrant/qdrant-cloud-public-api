// @generated by protoc-gen-connect-query v0.4.1
// @generated from file qdrant/cloud/iam/v1/iam.proto (package qdrant.cloud.iam.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { MethodKind } from "@bufbuild/protobuf";
import { AssignUserRolesRequest, AssignUserRolesResponse, CreateRoleRequest, CreateRoleResponse, DeleteRoleRequest, DeleteRoleResponse, GetAuthenticatedUserRequest, GetAuthenticatedUserResponse, GetRoleRequest, GetRoleResponse, GetUserConsentRequest, GetUserConsentResponse, ListEffectivePermissionsRequest, ListEffectivePermissionsResponse, ListPermissionsRequest, ListPermissionsResponse, ListRolesRequest, ListRolesResponse, ListUserRolesRequest, ListUserRolesResponse, RecordUserConsentRequest, RecordUserConsentResponse, UpdateRoleRequest, UpdateRoleResponse, UpdateUserRequest, UpdateUserResponse } from "./iam_pb.js";

export const typeName = "qdrant.cloud.iam.v1.IAMService";

/**
 * Gets the authenticated user.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetAuthenticatedUser
 */
export const getAuthenticatedUser = createQueryService({
  service: {
    methods: {
      getAuthenticatedUser: {
        name: "GetAuthenticatedUser",
        kind: MethodKind.Unary,
        I: GetAuthenticatedUserRequest,
        O: GetAuthenticatedUserResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).getAuthenticatedUser;

/**
 * Updates the user identified by the given ID.
 * Required permissions:
 * - write:user
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.UpdateUser
 */
export const updateUser = createQueryService({
  service: {
    methods: {
      updateUser: {
        name: "UpdateUser",
        kind: MethodKind.Unary,
        I: UpdateUserRequest,
        O: UpdateUserResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).updateUser;

/**
 * Gets the authenticated user's consent status for a specific legal document.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetUserConsent
 */
export const getUserConsent = createQueryService({
  service: {
    methods: {
      getUserConsent: {
        name: "GetUserConsent",
        kind: MethodKind.Unary,
        I: GetUserConsentRequest,
        O: GetUserConsentResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).getUserConsent;

/**
 * Records the authenticated user's consent for a legal document.
 * Required permissions:
 * - write:user
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.RecordUserConsent
 */
export const recordUserConsent = createQueryService({
  service: {
    methods: {
      recordUserConsent: {
        name: "RecordUserConsent",
        kind: MethodKind.Unary,
        I: RecordUserConsentRequest,
        O: RecordUserConsentResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).recordUserConsent;

/**
 * Lists all permissions known in the system for the provided account.
 * Note: If you want to get a list of permissions available for you, please use GetEffectivePermissions instead.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListPermissions
 */
export const listPermissions = createQueryService({
  service: {
    methods: {
      listPermissions: {
        name: "ListPermissions",
        kind: MethodKind.Unary,
        I: ListPermissionsRequest,
        O: ListPermissionsResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).listPermissions;

/**
 * Lists all roles in the account identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListRoles
 */
export const listRoles = createQueryService({
  service: {
    methods: {
      listRoles: {
        name: "ListRoles",
        kind: MethodKind.Unary,
        I: ListRolesRequest,
        O: ListRolesResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).listRoles;

/**
 * Gets a role for the account identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetRole
 */
export const getRole = createQueryService({
  service: {
    methods: {
      getRole: {
        name: "GetRole",
        kind: MethodKind.Unary,
        I: GetRoleRequest,
        O: GetRoleResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).getRole;

/**
 * Creates a role for the account identified by the given ID.
 * Note: The role_type must be ROLE_TYPE_CUSTOM.
 * Required permissions:
 * - write:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.CreateRole
 */
export const createRole = createQueryService({
  service: {
    methods: {
      createRole: {
        name: "CreateRole",
        kind: MethodKind.Unary,
        I: CreateRoleRequest,
        O: CreateRoleResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).createRole;

/**
 * Updates a role in the account identified by the given ID.
 * Note: The role_type must be ROLE_TYPE_CUSTOM.
 * Required permissions:
 * - write:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.UpdateRole
 */
export const updateRole = createQueryService({
  service: {
    methods: {
      updateRole: {
        name: "UpdateRole",
        kind: MethodKind.Unary,
        I: UpdateRoleRequest,
        O: UpdateRoleResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).updateRole;

/**
 * Deletes a role in the account identified by the given ID.
 * Note: The role_type must be ROLE_TYPE_CUSTOM.
 * Required permissions:
 * - delete:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.DeleteRole
 */
export const deleteRole = createQueryService({
  service: {
    methods: {
      deleteRole: {
        name: "DeleteRole",
        kind: MethodKind.Unary,
        I: DeleteRoleRequest,
        O: DeleteRoleResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).deleteRole;

/**
 * Lists the effective permissions for the user in the account identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListEffectivePermissions
 */
export const listEffectivePermissions = createQueryService({
  service: {
    methods: {
      listEffectivePermissions: {
        name: "ListEffectivePermissions",
        kind: MethodKind.Unary,
        I: ListEffectivePermissionsRequest,
        O: ListEffectivePermissionsResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).listEffectivePermissions;

/**
 * List roles of the user identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListUserRoles
 */
export const listUserRoles = createQueryService({
  service: {
    methods: {
      listUserRoles: {
        name: "ListUserRoles",
        kind: MethodKind.Unary,
        I: ListUserRolesRequest,
        O: ListUserRolesResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).listUserRoles;

/**
 * Assigns the provided roles to the user in the account identified by the given ID.
 * Required permissions:
 * - write:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.AssignUserRoles
 */
export const assignUserRoles = createQueryService({
  service: {
    methods: {
      assignUserRoles: {
        name: "AssignUserRoles",
        kind: MethodKind.Unary,
        I: AssignUserRolesRequest,
        O: AssignUserRolesResponse,
      },
    },
    typeName: "qdrant.cloud.iam.v1.IAMService",
  },
}).assignUserRoles;
