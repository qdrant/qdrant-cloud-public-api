// @generated by protoc-gen-connect-query v2.2.0 with parameter "target=js+dts,import_extension=js"
// @generated from file qdrant/cloud/iam/v1/iam.proto (package qdrant.cloud.iam.v1, syntax proto3)
/* eslint-disable */

import { IAMService } from "./iam_pb.js";

/**
 * Gets the authenticated user.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetAuthenticatedUser
 */
export const getAuthenticatedUser: typeof IAMService["method"]["getAuthenticatedUser"];
/**
 * List users in the account identified by the given ID.
 * Required permissions:
 * - read:users
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListUsers
 */
export const listUsers: typeof IAMService["method"]["listUsers"];
/**
 * Updates the user identified by the given ID.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.UpdateUser
 */
export const updateUser: typeof IAMService["method"]["updateUser"];
/**
 * Gets the authenticated user's consent status for a specific legal document.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetUserConsent
 */
export const getUserConsent: typeof IAMService["method"]["getUserConsent"];
/**
 * Records the authenticated user's consent for a legal document.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.RecordUserConsent
 */
export const recordUserConsent: typeof IAMService["method"]["recordUserConsent"];
/**
 * Lists all permissions known in the system for the provided account.
 * Note: If you want to get a list of permissions available for you, please use GetEffectivePermissions instead.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListPermissions
 */
export const listPermissions: typeof IAMService["method"]["listPermissions"];
/**
 * Lists all roles in the account identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListRoles
 */
export const listRoles: typeof IAMService["method"]["listRoles"];
/**
 * Gets a role for the account identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.GetRole
 */
export const getRole: typeof IAMService["method"]["getRole"];
/**
 * Creates a role for the account identified by the given ID.
 * Note: The role_type must be ROLE_TYPE_CUSTOM.
 * Required permissions:
 * - write:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.CreateRole
 */
export const createRole: typeof IAMService["method"]["createRole"];
/**
 * Updates a role in the account identified by the given ID.
 * Note: The role_type must be ROLE_TYPE_CUSTOM.
 * Required permissions:
 * - write:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.UpdateRole
 */
export const updateRole: typeof IAMService["method"]["updateRole"];
/**
 * Deletes a role in the account identified by the given ID.
 * Note: The role_type must be ROLE_TYPE_CUSTOM.
 * Required permissions:
 * - delete:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.DeleteRole
 */
export const deleteRole: typeof IAMService["method"]["deleteRole"];
/**
 * Lists the effective permissions for the user in the account identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListEffectivePermissions
 */
export const listEffectivePermissions: typeof IAMService["method"]["listEffectivePermissions"];
/**
 * List roles of the user identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListUserRoles
 */
export const listUserRoles: typeof IAMService["method"]["listUserRoles"];
/**
 * List users for the role identified by the given ID.
 * Required permissions:
 * - read:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.ListRoleUsers
 */
export const listRoleUsers: typeof IAMService["method"]["listRoleUsers"];
/**
 * Assigns the provided roles to the user in the account identified by the given ID.
 * Required permissions:
 * - write:roles
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.AssignUserRoles
 */
export const assignUserRoles: typeof IAMService["method"]["assignUserRoles"];
/**
 * Logs out the authenticated user.
 * Required permissions:
 * - None (authenticated only)
 *
 * @generated from rpc qdrant.cloud.iam.v1.IAMService.LogoutUser
 */
export const logoutUser: typeof IAMService["method"]["logoutUser"];
