// @generated by protoc-gen-es v2.5.2 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required"
// @generated from file qdrant/cloud/iam/v1/iam.proto (package qdrant.cloud.iam.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb.js";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb.js";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_qdrant_cloud_common_v1_common } from "../../common/v1/common_pb.js";

/**
 * Describes the file qdrant/cloud/iam/v1/iam.proto.
 */
export const file_qdrant_cloud_iam_v1_iam = /*@__PURE__*/
  fileDesc("", [file_buf_validate_validate, file_google_api_annotations, file_google_protobuf_timestamp, file_qdrant_cloud_common_v1_common]);

/**
 * Describes the message qdrant.cloud.iam.v1.GetAuthenticatedUserRequest.
 * Use `create(GetAuthenticatedUserRequestSchema)` to create a new message.
 */
export const GetAuthenticatedUserRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 0);

/**
 * Describes the message qdrant.cloud.iam.v1.GetAuthenticatedUserResponse.
 * Use `create(GetAuthenticatedUserResponseSchema)` to create a new message.
 */
export const GetAuthenticatedUserResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 1);

/**
 * Describes the message qdrant.cloud.iam.v1.UpdateUserRequest.
 * Use `create(UpdateUserRequestSchema)` to create a new message.
 */
export const UpdateUserRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 2);

/**
 * Describes the message qdrant.cloud.iam.v1.UpdateUserResponse.
 * Use `create(UpdateUserResponseSchema)` to create a new message.
 */
export const UpdateUserResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 3);

/**
 * Describes the message qdrant.cloud.iam.v1.GetUserConsentRequest.
 * Use `create(GetUserConsentRequestSchema)` to create a new message.
 */
export const GetUserConsentRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 4);

/**
 * Describes the message qdrant.cloud.iam.v1.GetUserConsentResponse.
 * Use `create(GetUserConsentResponseSchema)` to create a new message.
 */
export const GetUserConsentResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 5);

/**
 * Describes the message qdrant.cloud.iam.v1.RecordUserConsentRequest.
 * Use `create(RecordUserConsentRequestSchema)` to create a new message.
 */
export const RecordUserConsentRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 6);

/**
 * Describes the message qdrant.cloud.iam.v1.RecordUserConsentResponse.
 * Use `create(RecordUserConsentResponseSchema)` to create a new message.
 */
export const RecordUserConsentResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 7);

/**
 * Describes the message qdrant.cloud.iam.v1.ListPermissionsRequest.
 * Use `create(ListPermissionsRequestSchema)` to create a new message.
 */
export const ListPermissionsRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 8);

/**
 * Describes the message qdrant.cloud.iam.v1.ListPermissionsResponse.
 * Use `create(ListPermissionsResponseSchema)` to create a new message.
 */
export const ListPermissionsResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 9);

/**
 * Describes the message qdrant.cloud.iam.v1.ListRolesRequest.
 * Use `create(ListRolesRequestSchema)` to create a new message.
 */
export const ListRolesRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 10);

/**
 * Describes the message qdrant.cloud.iam.v1.ListRolesResponse.
 * Use `create(ListRolesResponseSchema)` to create a new message.
 */
export const ListRolesResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 11);

/**
 * Describes the message qdrant.cloud.iam.v1.GetRoleRequest.
 * Use `create(GetRoleRequestSchema)` to create a new message.
 */
export const GetRoleRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 12);

/**
 * Describes the message qdrant.cloud.iam.v1.GetRoleResponse.
 * Use `create(GetRoleResponseSchema)` to create a new message.
 */
export const GetRoleResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 13);

/**
 * Describes the message qdrant.cloud.iam.v1.CreateRoleRequest.
 * Use `create(CreateRoleRequestSchema)` to create a new message.
 */
export const CreateRoleRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 14);

/**
 * Describes the message qdrant.cloud.iam.v1.CreateRoleResponse.
 * Use `create(CreateRoleResponseSchema)` to create a new message.
 */
export const CreateRoleResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 15);

/**
 * Describes the message qdrant.cloud.iam.v1.UpdateRoleRequest.
 * Use `create(UpdateRoleRequestSchema)` to create a new message.
 */
export const UpdateRoleRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 16);

/**
 * Describes the message qdrant.cloud.iam.v1.UpdateRoleResponse.
 * Use `create(UpdateRoleResponseSchema)` to create a new message.
 */
export const UpdateRoleResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 17);

/**
 * Describes the message qdrant.cloud.iam.v1.DeleteRoleRequest.
 * Use `create(DeleteRoleRequestSchema)` to create a new message.
 */
export const DeleteRoleRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 18);

/**
 * Describes the message qdrant.cloud.iam.v1.DeleteRoleResponse.
 * Use `create(DeleteRoleResponseSchema)` to create a new message.
 */
export const DeleteRoleResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 19);

/**
 * Describes the message qdrant.cloud.iam.v1.ListEffectivePermissionsRequest.
 * Use `create(ListEffectivePermissionsRequestSchema)` to create a new message.
 */
export const ListEffectivePermissionsRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 20);

/**
 * Describes the message qdrant.cloud.iam.v1.ListEffectivePermissionsResponse.
 * Use `create(ListEffectivePermissionsResponseSchema)` to create a new message.
 */
export const ListEffectivePermissionsResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 21);

/**
 * Describes the message qdrant.cloud.iam.v1.ListUserRolesRequest.
 * Use `create(ListUserRolesRequestSchema)` to create a new message.
 */
export const ListUserRolesRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 22);

/**
 * Describes the message qdrant.cloud.iam.v1.ListUserRolesResponse.
 * Use `create(ListUserRolesResponseSchema)` to create a new message.
 */
export const ListUserRolesResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 23);

/**
 * Describes the message qdrant.cloud.iam.v1.AssignUserRolesRequest.
 * Use `create(AssignUserRolesRequestSchema)` to create a new message.
 */
export const AssignUserRolesRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 24);

/**
 * Describes the message qdrant.cloud.iam.v1.AssignUserRolesResponse.
 * Use `create(AssignUserRolesResponseSchema)` to create a new message.
 */
export const AssignUserRolesResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 25);

/**
 * Describes the message qdrant.cloud.iam.v1.User.
 * Use `create(UserSchema)` to create a new message.
 */
export const UserSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 26);

/**
 * Describes the message qdrant.cloud.iam.v1.Role.
 * Use `create(RoleSchema)` to create a new message.
 */
export const RoleSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 27);

/**
 * Describes the message qdrant.cloud.iam.v1.LogoutUserRequest.
 * Use `create(LogoutUserRequestSchema)` to create a new message.
 */
export const LogoutUserRequestSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 28);

/**
 * Describes the message qdrant.cloud.iam.v1.LogoutUserResponse.
 * Use `create(LogoutUserResponseSchema)` to create a new message.
 */
export const LogoutUserResponseSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 29);

/**
 * Describes the message qdrant.cloud.iam.v1.UserConsent.
 * Use `create(UserConsentSchema)` to create a new message.
 */
export const UserConsentSchema = /*@__PURE__*/
  messageDesc(file_qdrant_cloud_iam_v1_iam, 30);

/**
 * Describes the enum qdrant.cloud.iam.v1.UserStatus.
 */
export const UserStatusSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_iam_v1_iam, 0);

/**
 * UserStatus defines the possible statuses of a user.
 *
 * @generated from enum qdrant.cloud.iam.v1.UserStatus
 */
export const UserStatus = /*@__PURE__*/
  tsEnum(UserStatusSchema);

/**
 * Describes the enum qdrant.cloud.iam.v1.RoleType.
 */
export const RoleTypeSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_iam_v1_iam, 1);

/**
 * RoleType specified the type of the role
 *
 * @generated from enum qdrant.cloud.iam.v1.RoleType
 */
export const RoleType = /*@__PURE__*/
  tsEnum(RoleTypeSchema);

/**
 * Describes the enum qdrant.cloud.iam.v1.LegalDocumentType.
 */
export const LegalDocumentTypeSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_iam_v1_iam, 2);

/**
 * LegalDocumentType specifies the type of a legal document.
 *
 * @generated from enum qdrant.cloud.iam.v1.LegalDocumentType
 */
export const LegalDocumentType = /*@__PURE__*/
  tsEnum(LegalDocumentTypeSchema);

/**
 * Describes the enum qdrant.cloud.iam.v1.UserConsentStatus.
 */
export const UserConsentStatusSchema = /*@__PURE__*/
  enumDesc(file_qdrant_cloud_iam_v1_iam, 3);

/**
 * UserConsentStatus specifies the status from an user for a consent.
 *
 * @generated from enum qdrant.cloud.iam.v1.UserConsentStatus
 */
export const UserConsentStatus = /*@__PURE__*/
  tsEnum(UserConsentStatusSchema);

/**
 * IAMService is the API used to configure IAM (identity and access management) objects.
 *
 * @generated from service qdrant.cloud.iam.v1.IAMService
 */
export const IAMService = /*@__PURE__*/
  serviceDesc(file_qdrant_cloud_iam_v1_iam, 0);

