{
  "swagger": "2.0",
  "info": {
    "title": "qdrant/cloud/serverless/collections/v1/collection_keys.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "CollectionKeysService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/serverless/v1/accounts/{accountId}/collections/{collectionId}/keys": {
      "get": {
        "summary": "ListCollectionKeys returns all API keys for a collection\nRequired Permissions:\n- read:serverless_api_keys",
        "operationId": "CollectionKeysService_ListCollectionKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCollectionKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "description": "The identifier of the account (in Guid format).\nThis is a required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "description": "Collection the keys belong to",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CollectionKeysService"
        ]
      },
      "post": {
        "summary": "CreateCollectionKey creates a new API key for a collection\nRequired Permissions:\n- write:serverless_api_keys",
        "operationId": "CollectionKeysService_CreateCollectionKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateCollectionKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "description": "The identifier of the account (in Guid format).\nThis is a required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "description": "Collection the key will access",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CollectionKeysServiceCreateCollectionKeyBody"
            }
          }
        ],
        "tags": [
          "CollectionKeysService"
        ]
      }
    },
    "/api/serverless/v1/accounts/{accountId}/collections/{collectionId}/keys/{keyId}": {
      "delete": {
        "summary": "DeleteCollectionKey removes an API key from a collection\nRequired Permissions:\n- write:serverless_api_keys",
        "operationId": "CollectionKeysService_DeleteCollectionKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteCollectionKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "description": "The identifier of the account (in Guid format).\nThis is a required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "description": "Collection the key belongs to",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyId",
            "description": "ID of the key to delete",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CollectionKeysService"
        ]
      }
    }
  },
  "definitions": {
    "CollectionKeysServiceCreateCollectionKeyBody": {
      "type": "object",
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/v1ApiKey",
          "title": "The API key to create"
        }
      },
      "title": "CreateCollectionKeyRequest defines parameters for creating a new API key"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ApiKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the API key"
        },
        "name": {
          "type": "string",
          "title": "Human-readable name for the API key"
        },
        "key": {
          "type": "string",
          "description": "The api key itself.\nThis is a read-only field and will be available only once in the return of CreateCollectionKey.\nYou should securely store this token, and it should be handled as a secret."
        },
        "postfix": {
          "type": "string",
          "description": "Postfix for the collection api key, this represents the last bytes of the key.\nThis is a read-only field and will be available after a collection api key is created."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the collection api key was created.\nThis is a read-only field and will be available after a collection api key is created."
        },
        "createdByEmail": {
          "type": "string",
          "description": "The email of the user who created the collection api key.\nThis is a read-only field and will be available after a collection api key is created."
        },
        "access": {
          "type": "string",
          "description": "A general access level claim, either \"r\" (read) or \"w\" (write)."
        },
        "exp": {
          "type": "string",
          "format": "int64",
          "description": "The expiration time of the collection api key in seconds since the Unix epoch."
        },
        "accountId": {
          "type": "string",
          "description": "The identifier of the account (in Guid format).\nThis is a required field."
        },
        "collectionId": {
          "type": "string",
          "description": "The identifier of the collection (in Guid format).\nThis is a required field."
        }
      },
      "description": "An ApiKey represents a JWT token to access a Qdrant cloud serverless collection."
    },
    "v1CreateCollectionKeyResponse": {
      "type": "object",
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/v1ApiKey",
          "title": "The newly created API key value"
        }
      },
      "title": "CollectionKeyResponse provides the API key after creation"
    },
    "v1DeleteCollectionKeyResponse": {
      "type": "object",
      "description": "Empty",
      "title": "DeleteCollectionKeyResponse is an empty response for deletion confirmation"
    },
    "v1ListCollectionKeysResponse": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ApiKey"
          },
          "title": "List of API keys for the collection"
        }
      },
      "title": "Response containing all api-keys associated with a collection"
    }
  }
}
