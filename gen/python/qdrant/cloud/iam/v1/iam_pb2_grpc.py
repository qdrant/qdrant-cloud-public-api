# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qdrant.cloud.iam.v1 import iam_pb2 as qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2


class IAMServiceStub(object):
    """IAMService is the API used to configure IAM (identity and access management) objects..
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListPermissions = channel.unary_unary(
                '/qdrant.cloud.iam.v1.IAMService/ListPermissions',
                request_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListPermissionsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListPermissionsResponse.FromString,
                _registered_method=True)
        self.ListRoles = channel.unary_unary(
                '/qdrant.cloud.iam.v1.IAMService/ListRoles',
                request_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListRolesRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListRolesResponse.FromString,
                _registered_method=True)
        self.GetRole = channel.unary_unary(
                '/qdrant.cloud.iam.v1.IAMService/GetRole',
                request_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetRoleRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetRoleResponse.FromString,
                _registered_method=True)
        self.CreateRole = channel.unary_unary(
                '/qdrant.cloud.iam.v1.IAMService/CreateRole',
                request_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.CreateRoleRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.CreateRoleResponse.FromString,
                _registered_method=True)
        self.UpdateRole = channel.unary_unary(
                '/qdrant.cloud.iam.v1.IAMService/UpdateRole',
                request_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.UpdateRoleRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.UpdateRoleResponse.FromString,
                _registered_method=True)
        self.DeleteRole = channel.unary_unary(
                '/qdrant.cloud.iam.v1.IAMService/DeleteRole',
                request_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.DeleteRoleRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.DeleteRoleResponse.FromString,
                _registered_method=True)
        self.GetEffectivePermissions = channel.unary_unary(
                '/qdrant.cloud.iam.v1.IAMService/GetEffectivePermissions',
                request_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetEffectivePermissionsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetEffectivePermissionsResponse.FromString,
                _registered_method=True)
        self.AssignUserRoles = channel.unary_unary(
                '/qdrant.cloud.iam.v1.IAMService/AssignUserRoles',
                request_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.AssignUserRolesRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.AssignUserRolesResponse.FromString,
                _registered_method=True)


class IAMServiceServicer(object):
    """IAMService is the API used to configure IAM (identity and access management) objects..
    """

    def ListPermissions(self, request, context):
        """Fetch all permissions known in the system for the provided account.
        Note: If you want to get a list of permissions available for you, please use GetEffectivePermissions instead.
        Required permissions:
        - read:roles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoles(self, request, context):
        """Fetch all roles in the account identified by the given ID.
        Required permissions:
        - read:roles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRole(self, request, context):
        """Get a role for the account identified by the given ID.
        Required permissions:
        - read:roles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRole(self, request, context):
        """Creates a role for the account identified by the given ID.
        Note: The role_type must be ROLE_TYPE_CUSTOM.
        Required permissions:
        - write:roles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRole(self, request, context):
        """Update a role in the account identified by the given ID.
        Note: The role_type must be ROLE_TYPE_CUSTOM.
        Required permissions:
        - write:roles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRole(self, request, context):
        """Deletes a role in the account identified by the given ID.
        Note: The role_type must be ROLE_TYPE_CUSTOM.
        Required permissions:
        - delete:roles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEffectivePermissions(self, request, context):
        """Get the effective permissions for the user in the account identified by the given ID.
        Required permissions:
        - read:roles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignUserRoles(self, request, context):
        """Assign the provided roles to the user in the account identified by the given ID.
        Required permissions:
        - write:roles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPermissions,
                    request_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListPermissionsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListPermissionsResponse.SerializeToString,
            ),
            'ListRoles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoles,
                    request_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListRolesRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListRolesResponse.SerializeToString,
            ),
            'GetRole': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRole,
                    request_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetRoleRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetRoleResponse.SerializeToString,
            ),
            'CreateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRole,
                    request_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.CreateRoleRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.CreateRoleResponse.SerializeToString,
            ),
            'UpdateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRole,
                    request_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.UpdateRoleRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.UpdateRoleResponse.SerializeToString,
            ),
            'DeleteRole': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRole,
                    request_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.DeleteRoleRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.DeleteRoleResponse.SerializeToString,
            ),
            'GetEffectivePermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEffectivePermissions,
                    request_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetEffectivePermissionsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetEffectivePermissionsResponse.SerializeToString,
            ),
            'AssignUserRoles': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignUserRoles,
                    request_deserializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.AssignUserRolesRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.AssignUserRolesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.cloud.iam.v1.IAMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.cloud.iam.v1.IAMService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IAMService(object):
    """IAMService is the API used to configure IAM (identity and access management) objects..
    """

    @staticmethod
    def ListPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.iam.v1.IAMService/ListPermissions',
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListPermissionsRequest.SerializeToString,
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListPermissionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRoles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.iam.v1.IAMService/ListRoles',
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListRolesRequest.SerializeToString,
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.ListRolesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.iam.v1.IAMService/GetRole',
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetRoleRequest.SerializeToString,
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetRoleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.iam.v1.IAMService/CreateRole',
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.CreateRoleRequest.SerializeToString,
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.CreateRoleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.iam.v1.IAMService/UpdateRole',
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.UpdateRoleRequest.SerializeToString,
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.UpdateRoleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.iam.v1.IAMService/DeleteRole',
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.DeleteRoleRequest.SerializeToString,
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.DeleteRoleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEffectivePermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.iam.v1.IAMService/GetEffectivePermissions',
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetEffectivePermissionsRequest.SerializeToString,
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.GetEffectivePermissionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignUserRoles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.iam.v1.IAMService/AssignUserRoles',
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.AssignUserRolesRequest.SerializeToString,
            qdrant_dot_cloud_dot_iam_dot_v1_dot_iam__pb2.AssignUserRolesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
