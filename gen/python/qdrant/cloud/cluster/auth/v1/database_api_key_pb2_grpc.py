# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qdrant.cloud.cluster.auth.v1 import database_api_key_pb2 as qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2


class DatabaseApiKeyServiceStub(object):
    """DatabaseApiKeyService is the API used to manage keys that give access to a cluster database.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListDatabaseApiKeys = channel.unary_unary(
                '/qdrant.cloud.cluster.auth.v1.DatabaseApiKeyService/ListDatabaseApiKeys',
                request_serializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.ListDatabaseApiKeysRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.ListDatabaseApiKeysResponse.FromString,
                _registered_method=True)
        self.CreateDatabaseApiKey = channel.unary_unary(
                '/qdrant.cloud.cluster.auth.v1.DatabaseApiKeyService/CreateDatabaseApiKey',
                request_serializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.CreateDatabaseApiKeyRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.CreateDatabaseApiKeyResponse.FromString,
                _registered_method=True)
        self.DeleteDatabaseApiKey = channel.unary_unary(
                '/qdrant.cloud.cluster.auth.v1.DatabaseApiKeyService/DeleteDatabaseApiKey',
                request_serializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.DeleteDatabaseApiKeyRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.DeleteDatabaseApiKeyResponse.FromString,
                _registered_method=True)


class DatabaseApiKeyServiceServicer(object):
    """DatabaseApiKeyService is the API used to manage keys that give access to a cluster database.
    """

    def ListDatabaseApiKeys(self, request, context):
        """Lists all database api keys in the account identified by the given ID.
        Required permissions:
        - read:api_keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDatabaseApiKey(self, request, context):
        """Creates a database api key in the account identified by the given ID.
        Required permissions:
        - write:api_keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDatabaseApiKey(self, request, context):
        """Deletes a database api key in the account identified by the given ID.
        Required permissions:
        - delete:api_keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseApiKeyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListDatabaseApiKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatabaseApiKeys,
                    request_deserializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.ListDatabaseApiKeysRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.ListDatabaseApiKeysResponse.SerializeToString,
            ),
            'CreateDatabaseApiKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDatabaseApiKey,
                    request_deserializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.CreateDatabaseApiKeyRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.CreateDatabaseApiKeyResponse.SerializeToString,
            ),
            'DeleteDatabaseApiKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDatabaseApiKey,
                    request_deserializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.DeleteDatabaseApiKeyRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.DeleteDatabaseApiKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.cloud.cluster.auth.v1.DatabaseApiKeyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.cloud.cluster.auth.v1.DatabaseApiKeyService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatabaseApiKeyService(object):
    """DatabaseApiKeyService is the API used to manage keys that give access to a cluster database.
    """

    @staticmethod
    def ListDatabaseApiKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.cluster.auth.v1.DatabaseApiKeyService/ListDatabaseApiKeys',
            qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.ListDatabaseApiKeysRequest.SerializeToString,
            qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.ListDatabaseApiKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDatabaseApiKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.cluster.auth.v1.DatabaseApiKeyService/CreateDatabaseApiKey',
            qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.CreateDatabaseApiKeyRequest.SerializeToString,
            qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.CreateDatabaseApiKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDatabaseApiKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.cluster.auth.v1.DatabaseApiKeyService/DeleteDatabaseApiKey',
            qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.DeleteDatabaseApiKeyRequest.SerializeToString,
            qdrant_dot_cloud_dot_cluster_dot_auth_dot_v1_dot_database__api__key__pb2.DeleteDatabaseApiKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
