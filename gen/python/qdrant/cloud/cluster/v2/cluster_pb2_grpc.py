# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qdrant.cloud.cluster.v2 import cluster_pb2 as qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2


class ClusterServiceStub(object):
    """ClusterService is the API used to configure cluster objects.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/qdrant.cloud.cluster.v2.ClusterService/GetAPIVersion',
                request_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetAPIVersionRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetAPIVersionResponse.FromString,
                _registered_method=True)
        self.ListClusters = channel.unary_unary(
                '/qdrant.cloud.cluster.v2.ClusterService/ListClusters',
                request_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListClustersRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListClustersResponse.FromString,
                _registered_method=True)
        self.GetCluster = channel.unary_unary(
                '/qdrant.cloud.cluster.v2.ClusterService/GetCluster',
                request_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetClusterRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetClusterResponse.FromString,
                _registered_method=True)
        self.CreateCluster = channel.unary_unary(
                '/qdrant.cloud.cluster.v2.ClusterService/CreateCluster',
                request_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.CreateClusterRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.CreateClusterResponse.FromString,
                _registered_method=True)
        self.UpdateCluster = channel.unary_unary(
                '/qdrant.cloud.cluster.v2.ClusterService/UpdateCluster',
                request_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.UpdateClusterRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.UpdateClusterResponse.FromString,
                _registered_method=True)
        self.DeleteCluster = channel.unary_unary(
                '/qdrant.cloud.cluster.v2.ClusterService/DeleteCluster',
                request_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.DeleteClusterRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.DeleteClusterResponse.FromString,
                _registered_method=True)
        self.ListQdrantReleases = channel.unary_unary(
                '/qdrant.cloud.cluster.v2.ClusterService/ListQdrantReleases',
                request_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListQdrantReleasesRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListQdrantReleasesResponse.FromString,
                _registered_method=True)


class ClusterServiceServicer(object):
    """ClusterService is the API used to configure cluster objects.
    """

    def GetAPIVersion(self, request, context):
        """TODO: Remove in first iteration?
        Get the current API version of this service.
        Required permissions:
        - None (authenticated only)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListClusters(self, request, context):
        """Fetch all clusters in the account identified by the given ID.
        Required permissions:
        - read:clusters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCluster(self, request, context):
        """Fetch a cluster in the account identified by the given IDs.
        Required permissions:
        - read:clusters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCluster(self, request, context):
        """Creates a cluster in the account identified by the given ID.
        Required permissions:
        - write:clusters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCluster(self, request, context):
        """Update a cluster in the account identified by the given ID.
        Required permissions:
        - write:clusters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCluster(self, request, context):
        """Deletes a cluster in the account identified by the given ID.
        Required permissions:
        - delete:clusters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListQdrantReleases(self, request, context):
        """TODO: RestartCluster

        Fetch all qdrant releases in the account identified by the given ID.
        Optional a cluster ID can be provided, the list will return the options to update to only.
        Required permissions:
        - read:clusters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetAPIVersionRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetAPIVersionResponse.SerializeToString,
            ),
            'ListClusters': grpc.unary_unary_rpc_method_handler(
                    servicer.ListClusters,
                    request_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListClustersRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListClustersResponse.SerializeToString,
            ),
            'GetCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCluster,
                    request_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetClusterRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetClusterResponse.SerializeToString,
            ),
            'CreateCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCluster,
                    request_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.CreateClusterRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.CreateClusterResponse.SerializeToString,
            ),
            'UpdateCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCluster,
                    request_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.UpdateClusterRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.UpdateClusterResponse.SerializeToString,
            ),
            'DeleteCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCluster,
                    request_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.DeleteClusterRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.DeleteClusterResponse.SerializeToString,
            ),
            'ListQdrantReleases': grpc.unary_unary_rpc_method_handler(
                    servicer.ListQdrantReleases,
                    request_deserializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListQdrantReleasesRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListQdrantReleasesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.cloud.cluster.v2.ClusterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.cloud.cluster.v2.ClusterService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClusterService(object):
    """ClusterService is the API used to configure cluster objects.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.cluster.v2.ClusterService/GetAPIVersion',
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetAPIVersionRequest.SerializeToString,
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetAPIVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListClusters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.cluster.v2.ClusterService/ListClusters',
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListClustersRequest.SerializeToString,
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListClustersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.cluster.v2.ClusterService/GetCluster',
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetClusterRequest.SerializeToString,
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.GetClusterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.cluster.v2.ClusterService/CreateCluster',
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.CreateClusterRequest.SerializeToString,
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.CreateClusterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.cluster.v2.ClusterService/UpdateCluster',
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.UpdateClusterRequest.SerializeToString,
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.UpdateClusterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.cluster.v2.ClusterService/DeleteCluster',
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.DeleteClusterRequest.SerializeToString,
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.DeleteClusterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListQdrantReleases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.cluster.v2.ClusterService/ListQdrantReleases',
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListQdrantReleasesRequest.SerializeToString,
            qdrant_dot_cloud_dot_cluster_dot_v2_dot_cluster__pb2.ListQdrantReleasesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
