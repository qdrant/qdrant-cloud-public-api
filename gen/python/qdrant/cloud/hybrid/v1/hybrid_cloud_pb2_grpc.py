# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qdrant.cloud.hybrid.v1 import hybrid_cloud_pb2 as qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2


class HybridCloudServiceStub(object):
    """HybridCloudService is the API used for configuring hybrid cloud environments.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListHybridCloudEnvironments = channel.unary_unary(
                '/qdrant.cloud.hybrid.v1.HybridCloudService/ListHybridCloudEnvironments',
                request_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.ListHybridCloudEnvironmentsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.ListHybridCloudEnvironmentsResponse.FromString,
                _registered_method=True)
        self.GetHybridCloudEnvironment = channel.unary_unary(
                '/qdrant.cloud.hybrid.v1.HybridCloudService/GetHybridCloudEnvironment',
                request_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetHybridCloudEnvironmentRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetHybridCloudEnvironmentResponse.FromString,
                _registered_method=True)
        self.CreateHybridCloudEnvironment = channel.unary_unary(
                '/qdrant.cloud.hybrid.v1.HybridCloudService/CreateHybridCloudEnvironment',
                request_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.CreateHybridCloudEnvironmentRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.CreateHybridCloudEnvironmentResponse.FromString,
                _registered_method=True)
        self.UpdateHybridCloudEnvironment = channel.unary_unary(
                '/qdrant.cloud.hybrid.v1.HybridCloudService/UpdateHybridCloudEnvironment',
                request_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.UpdateHybridCloudEnvironmentRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.UpdateHybridCloudEnvironmentResponse.FromString,
                _registered_method=True)
        self.DeleteHybridCloudEnvironment = channel.unary_unary(
                '/qdrant.cloud.hybrid.v1.HybridCloudService/DeleteHybridCloudEnvironment',
                request_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.DeleteHybridCloudEnvironmentRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.DeleteHybridCloudEnvironmentResponse.FromString,
                _registered_method=True)
        self.GetBootstrapCommands = channel.unary_unary(
                '/qdrant.cloud.hybrid.v1.HybridCloudService/GetBootstrapCommands',
                request_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetBootstrapCommandsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetBootstrapCommandsResponse.FromString,
                _registered_method=True)


class HybridCloudServiceServicer(object):
    """HybridCloudService is the API used for configuring hybrid cloud environments.
    """

    def ListHybridCloudEnvironments(self, request, context):
        """Fetch all hybrid cloud environments in the account identified by the given ID.
        Required permissions:
        - read:hybrid_cloud_environments
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHybridCloudEnvironment(self, request, context):
        """Fetch a hybrid cloud environment in the account identified by the given ID.
        Required permissions:
        - read:hybrid_cloud_environments
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateHybridCloudEnvironment(self, request, context):
        """Creates a hybrid cloud environment in the account identified by the given ID.
        Required permissions:
        - write:hybrid_cloud_environments
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateHybridCloudEnvironment(self, request, context):
        """Updates a hybrid cloud environment in the account identified by the given ID.
        Required permissions:
        - write:hybrid_cloud_environments
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteHybridCloudEnvironment(self, request, context):
        """Deletes a hybrid cloud environment in the account identified by the given ID.
        Required permissions:
        - delete:hybrid_cloud_environments
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBootstrapCommands(self, request, context):
        """Fetch the commands that should be executed against a kubernetes cluster to
        bootstrap it to the hybrid cloud environment. The operation can be invoked multiple times,
        but be aware that each invocation is going to create new Qdrant cloud access token and the registry credentials.
        Thus, it make sense to call it only if a kubernetes cluster is not yet registered to the given hybrid environment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HybridCloudServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListHybridCloudEnvironments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListHybridCloudEnvironments,
                    request_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.ListHybridCloudEnvironmentsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.ListHybridCloudEnvironmentsResponse.SerializeToString,
            ),
            'GetHybridCloudEnvironment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHybridCloudEnvironment,
                    request_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetHybridCloudEnvironmentRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetHybridCloudEnvironmentResponse.SerializeToString,
            ),
            'CreateHybridCloudEnvironment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateHybridCloudEnvironment,
                    request_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.CreateHybridCloudEnvironmentRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.CreateHybridCloudEnvironmentResponse.SerializeToString,
            ),
            'UpdateHybridCloudEnvironment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateHybridCloudEnvironment,
                    request_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.UpdateHybridCloudEnvironmentRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.UpdateHybridCloudEnvironmentResponse.SerializeToString,
            ),
            'DeleteHybridCloudEnvironment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteHybridCloudEnvironment,
                    request_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.DeleteHybridCloudEnvironmentRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.DeleteHybridCloudEnvironmentResponse.SerializeToString,
            ),
            'GetBootstrapCommands': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBootstrapCommands,
                    request_deserializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetBootstrapCommandsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetBootstrapCommandsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.cloud.hybrid.v1.HybridCloudService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.cloud.hybrid.v1.HybridCloudService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HybridCloudService(object):
    """HybridCloudService is the API used for configuring hybrid cloud environments.
    """

    @staticmethod
    def ListHybridCloudEnvironments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.hybrid.v1.HybridCloudService/ListHybridCloudEnvironments',
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.ListHybridCloudEnvironmentsRequest.SerializeToString,
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.ListHybridCloudEnvironmentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHybridCloudEnvironment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.hybrid.v1.HybridCloudService/GetHybridCloudEnvironment',
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetHybridCloudEnvironmentRequest.SerializeToString,
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetHybridCloudEnvironmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateHybridCloudEnvironment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.hybrid.v1.HybridCloudService/CreateHybridCloudEnvironment',
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.CreateHybridCloudEnvironmentRequest.SerializeToString,
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.CreateHybridCloudEnvironmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateHybridCloudEnvironment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.hybrid.v1.HybridCloudService/UpdateHybridCloudEnvironment',
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.UpdateHybridCloudEnvironmentRequest.SerializeToString,
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.UpdateHybridCloudEnvironmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteHybridCloudEnvironment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.hybrid.v1.HybridCloudService/DeleteHybridCloudEnvironment',
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.DeleteHybridCloudEnvironmentRequest.SerializeToString,
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.DeleteHybridCloudEnvironmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBootstrapCommands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.hybrid.v1.HybridCloudService/GetBootstrapCommands',
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetBootstrapCommandsRequest.SerializeToString,
            qdrant_dot_cloud_dot_hybrid_dot_v1_dot_hybrid__cloud__pb2.GetBootstrapCommandsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
