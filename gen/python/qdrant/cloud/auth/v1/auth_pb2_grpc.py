# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qdrant.cloud.auth.v1 import auth_pb2 as qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2


class AuthServiceStub(object):
    """AuthService is the API used to manage the authentication settings (like management keys) for Qdrant Cloud.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListManagementKeys = channel.unary_unary(
                '/qdrant.cloud.auth.v1.AuthService/ListManagementKeys',
                request_serializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.ListManagementKeysRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.ListManagementKeysResponse.FromString,
                _registered_method=True)
        self.CreateManagementKey = channel.unary_unary(
                '/qdrant.cloud.auth.v1.AuthService/CreateManagementKey',
                request_serializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.CreateManagementKeyRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.CreateManagementKeyResponse.FromString,
                _registered_method=True)
        self.DeleteManagementKey = channel.unary_unary(
                '/qdrant.cloud.auth.v1.AuthService/DeleteManagementKey',
                request_serializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.DeleteManagementKeyRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.DeleteManagementKeyResponse.FromString,
                _registered_method=True)


class AuthServiceServicer(object):
    """AuthService is the API used to manage the authentication settings (like management keys) for Qdrant Cloud.
    """

    def ListManagementKeys(self, request, context):
        """Fetch all management keys in the account identified by the given ID.
        Required permissions:
        - read:management_keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateManagementKey(self, request, context):
        """Creates a management key in the account identified by the given ID.
        Required permissions:
        - write:management_keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteManagementKey(self, request, context):
        """Deletes a management key in the account identified by the given ID.
        Required permissions:
        - delete:management_keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListManagementKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ListManagementKeys,
                    request_deserializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.ListManagementKeysRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.ListManagementKeysResponse.SerializeToString,
            ),
            'CreateManagementKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateManagementKey,
                    request_deserializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.CreateManagementKeyRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.CreateManagementKeyResponse.SerializeToString,
            ),
            'DeleteManagementKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteManagementKey,
                    request_deserializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.DeleteManagementKeyRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.DeleteManagementKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.cloud.auth.v1.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.cloud.auth.v1.AuthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """AuthService is the API used to manage the authentication settings (like management keys) for Qdrant Cloud.
    """

    @staticmethod
    def ListManagementKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.auth.v1.AuthService/ListManagementKeys',
            qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.ListManagementKeysRequest.SerializeToString,
            qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.ListManagementKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateManagementKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.auth.v1.AuthService/CreateManagementKey',
            qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.CreateManagementKeyRequest.SerializeToString,
            qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.CreateManagementKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteManagementKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.auth.v1.AuthService/DeleteManagementKey',
            qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.DeleteManagementKeyRequest.SerializeToString,
            qdrant_dot_cloud_dot_auth_dot_v1_dot_auth__pb2.DeleteManagementKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
