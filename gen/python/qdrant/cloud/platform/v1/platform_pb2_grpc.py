# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qdrant.cloud.platform.v1 import platform_pb2 as qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2


class PlatformServiceStub(object):
    """PlatformService is the API used to query for cloud provider & regional information.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListGlobalCloudProviders = channel.unary_unary(
                '/qdrant.cloud.platform.v1.PlatformService/ListGlobalCloudProviders',
                request_serializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListGlobalCloudProvidersRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListGlobalCloudProvidersResponse.FromString,
                _registered_method=True)
        self.ListCloudProviders = channel.unary_unary(
                '/qdrant.cloud.platform.v1.PlatformService/ListCloudProviders',
                request_serializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProvidersRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProvidersResponse.FromString,
                _registered_method=True)
        self.ListCloudProviderRegions = channel.unary_unary(
                '/qdrant.cloud.platform.v1.PlatformService/ListCloudProviderRegions',
                request_serializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProviderRegionsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProviderRegionsResponse.FromString,
                _registered_method=True)


class PlatformServiceServicer(object):
    """PlatformService is the API used to query for cloud provider & regional information.
    """

    def ListGlobalCloudProviders(self, request, context):
        """Fetch all available cloud providers globally (not account-specific).
        Required permissions:
        - None (authenticated only)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCloudProviders(self, request, context):
        """Fetch all cloud providers in the account identified by the given ID.
        Required permissions:
        - None (authenticated only)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCloudProviderRegions(self, request, context):
        """Fetch all cloud provider regions in the account identified by the given ID and cloud provider.
        Required permissions:
        - None (authenticated only)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PlatformServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListGlobalCloudProviders': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGlobalCloudProviders,
                    request_deserializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListGlobalCloudProvidersRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListGlobalCloudProvidersResponse.SerializeToString,
            ),
            'ListCloudProviders': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCloudProviders,
                    request_deserializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProvidersRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProvidersResponse.SerializeToString,
            ),
            'ListCloudProviderRegions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCloudProviderRegions,
                    request_deserializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProviderRegionsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProviderRegionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.cloud.platform.v1.PlatformService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.cloud.platform.v1.PlatformService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PlatformService(object):
    """PlatformService is the API used to query for cloud provider & regional information.
    """

    @staticmethod
    def ListGlobalCloudProviders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.platform.v1.PlatformService/ListGlobalCloudProviders',
            qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListGlobalCloudProvidersRequest.SerializeToString,
            qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListGlobalCloudProvidersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCloudProviders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.platform.v1.PlatformService/ListCloudProviders',
            qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProvidersRequest.SerializeToString,
            qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProvidersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCloudProviderRegions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.platform.v1.PlatformService/ListCloudProviderRegions',
            qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProviderRegionsRequest.SerializeToString,
            qdrant_dot_cloud_dot_platform_dot_v1_dot_platform__pb2.ListCloudProviderRegionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
