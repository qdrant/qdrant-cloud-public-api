# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qdrant.cloud.featureflag.v1 import featureflag_pb2 as qdrant_dot_cloud_dot_featureflag_dot_v1_dot_featureflag__pb2


class FeatureFlagServiceStub(object):
    """FeatureFlagService provides APIs to list feature flags.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListFeatureFlags = channel.unary_unary(
                '/qdrant.cloud.featureflag.v1.FeatureFlagService/ListFeatureFlags',
                request_serializer=qdrant_dot_cloud_dot_featureflag_dot_v1_dot_featureflag__pb2.ListFeatureFlagsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_featureflag_dot_v1_dot_featureflag__pb2.ListFeatureFlagsResponse.FromString,
                _registered_method=True)


class FeatureFlagServiceServicer(object):
    """FeatureFlagService provides APIs to list feature flags.
    """

    def ListFeatureFlags(self, request, context):
        """List all feature flags.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FeatureFlagServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListFeatureFlags': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFeatureFlags,
                    request_deserializer=qdrant_dot_cloud_dot_featureflag_dot_v1_dot_featureflag__pb2.ListFeatureFlagsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_featureflag_dot_v1_dot_featureflag__pb2.ListFeatureFlagsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.cloud.featureflag.v1.FeatureFlagService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.cloud.featureflag.v1.FeatureFlagService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FeatureFlagService(object):
    """FeatureFlagService provides APIs to list feature flags.
    """

    @staticmethod
    def ListFeatureFlags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.featureflag.v1.FeatureFlagService/ListFeatureFlags',
            qdrant_dot_cloud_dot_featureflag_dot_v1_dot_featureflag__pb2.ListFeatureFlagsRequest.SerializeToString,
            qdrant_dot_cloud_dot_featureflag_dot_v1_dot_featureflag__pb2.ListFeatureFlagsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
