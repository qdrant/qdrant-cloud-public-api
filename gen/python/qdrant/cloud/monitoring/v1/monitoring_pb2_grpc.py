# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qdrant.cloud.monitoring.v1 import monitoring_pb2 as qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2


class MonitoringServiceStub(object):
    """MonitoringService provides access to monitoring data such as cluster metrics, logs, and events.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetClusterSummaryMetrics = channel.unary_unary(
                '/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterSummaryMetrics',
                request_serializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterSummaryMetricsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterSummaryMetricsResponse.FromString,
                _registered_method=True)
        self.GetClusterUsageMetrics = channel.unary_unary(
                '/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterUsageMetrics',
                request_serializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterUsageMetricsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterUsageMetricsResponse.FromString,
                _registered_method=True)
        self.GetClusterLogs = channel.unary_unary(
                '/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterLogs',
                request_serializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterLogsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterLogsResponse.FromString,
                _registered_method=True)
        self.GetClusterEvents = channel.unary_unary(
                '/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterEvents',
                request_serializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterEventsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterEventsResponse.FromString,
                _registered_method=True)


class MonitoringServiceServicer(object):
    """MonitoringService provides access to monitoring data such as cluster metrics, logs, and events.
    """

    def GetClusterSummaryMetrics(self, request, context):
        """Get summary metrics of a cluster in the account identified by the given ID.
        Required permissions:
        - read:clusters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterUsageMetrics(self, request, context):
        """Get detailed usage metrics (as timeseries) of a cluster in the account identified by the given ID.
        Required permissions:
        - read:clusters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterLogs(self, request, context):
        """Get the logs of a cluster in the account identified by the given ID.
        Required permissions:
        - read:clusters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterEvents(self, request, context):
        """Get the events of a cluster in the account identified by the given ID.
        This method is currently available only for clusters running in hybrid cloud environments.
        Required permissions:
        - read:clusters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitoringServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetClusterSummaryMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterSummaryMetrics,
                    request_deserializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterSummaryMetricsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterSummaryMetricsResponse.SerializeToString,
            ),
            'GetClusterUsageMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterUsageMetrics,
                    request_deserializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterUsageMetricsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterUsageMetricsResponse.SerializeToString,
            ),
            'GetClusterLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterLogs,
                    request_deserializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterLogsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterLogsResponse.SerializeToString,
            ),
            'GetClusterEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterEvents,
                    request_deserializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterEventsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterEventsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.cloud.monitoring.v1.MonitoringService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.cloud.monitoring.v1.MonitoringService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MonitoringService(object):
    """MonitoringService provides access to monitoring data such as cluster metrics, logs, and events.
    """

    @staticmethod
    def GetClusterSummaryMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterSummaryMetrics',
            qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterSummaryMetricsRequest.SerializeToString,
            qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterSummaryMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClusterUsageMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterUsageMetrics',
            qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterUsageMetricsRequest.SerializeToString,
            qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterUsageMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClusterLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterLogs',
            qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterLogsRequest.SerializeToString,
            qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClusterEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.monitoring.v1.MonitoringService/GetClusterEvents',
            qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterEventsRequest.SerializeToString,
            qdrant_dot_cloud_dot_monitoring_dot_v1_dot_monitoring__pb2.GetClusterEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
