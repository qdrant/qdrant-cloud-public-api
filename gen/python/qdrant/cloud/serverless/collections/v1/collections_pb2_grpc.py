# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qdrant.cloud.serverless.collections.v1 import collections_pb2 as qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2


class CollectionServiceStub(object):
    """CollectionService provides operations for managing collections
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListCollections = channel.unary_unary(
                '/qdrant.cloud.serverless.collections.v1.CollectionService/ListCollections',
                request_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.ListCollectionsRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.ListCollectionsResponse.FromString,
                _registered_method=True)
        self.CreateCollection = channel.unary_unary(
                '/qdrant.cloud.serverless.collections.v1.CollectionService/CreateCollection',
                request_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.CreateCollectionResponse.FromString,
                _registered_method=True)
        self.UpgradeCollection = channel.unary_unary(
                '/qdrant.cloud.serverless.collections.v1.CollectionService/UpgradeCollection',
                request_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.UpgradeCollectionRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.UpgradeCollectionResponse.FromString,
                _registered_method=True)
        self.DeleteCollection = channel.unary_unary(
                '/qdrant.cloud.serverless.collections.v1.CollectionService/DeleteCollection',
                request_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.DeleteCollectionRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.DeleteCollectionResponse.FromString,
                _registered_method=True)


class CollectionServiceServicer(object):
    """CollectionService provides operations for managing collections
    """

    def ListCollections(self, request, context):
        """ListCollections returns all collections for the authenticated user
        Required Permissions:
        - write:serverless
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCollection(self, request, context):
        """CreateCollection creates a new collection with the specified configuration
        Required Permissions:
        - write:serverless
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpgradeCollection(self, request, context):
        """Upgrade collection: If current user have paid account, this API will lift the limit of the collection
        Required Permissions:
        - write:serverless
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollection(self, request, context):
        """DeleteCollection removes a collection by ID
        Required Permissions:
        - write:serverless
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCollections,
                    request_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.ListCollectionsRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.ListCollectionsResponse.SerializeToString,
            ),
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.CreateCollectionRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.CreateCollectionResponse.SerializeToString,
            ),
            'UpgradeCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.UpgradeCollection,
                    request_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.UpgradeCollectionRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.UpgradeCollectionResponse.SerializeToString,
            ),
            'DeleteCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollection,
                    request_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.DeleteCollectionRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.DeleteCollectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.cloud.serverless.collections.v1.CollectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.cloud.serverless.collections.v1.CollectionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollectionService(object):
    """CollectionService provides operations for managing collections
    """

    @staticmethod
    def ListCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.serverless.collections.v1.CollectionService/ListCollections',
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.ListCollectionsRequest.SerializeToString,
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.ListCollectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.serverless.collections.v1.CollectionService/CreateCollection',
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.CreateCollectionRequest.SerializeToString,
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.CreateCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpgradeCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.serverless.collections.v1.CollectionService/UpgradeCollection',
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.UpgradeCollectionRequest.SerializeToString,
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.UpgradeCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.serverless.collections.v1.CollectionService/DeleteCollection',
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.DeleteCollectionRequest.SerializeToString,
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collections__pb2.DeleteCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
