# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qdrant.cloud.serverless.collections.v1 import collection_keys_pb2 as qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2


class CollectionKeysServiceStub(object):
    """Service for managing API keys for a serverless collection
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListCollectionKeys = channel.unary_unary(
                '/qdrant.cloud.serverless.collections.v1.CollectionKeysService/ListCollectionKeys',
                request_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.ListCollectionKeysRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.ListCollectionKeysResponse.FromString,
                _registered_method=True)
        self.CreateCollectionKey = channel.unary_unary(
                '/qdrant.cloud.serverless.collections.v1.CollectionKeysService/CreateCollectionKey',
                request_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.CreateCollectionKeyRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.CreateCollectionKeyResponse.FromString,
                _registered_method=True)
        self.DeleteCollectionKey = channel.unary_unary(
                '/qdrant.cloud.serverless.collections.v1.CollectionKeysService/DeleteCollectionKey',
                request_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.DeleteCollectionKeyRequest.SerializeToString,
                response_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.DeleteCollectionKeyResponse.FromString,
                _registered_method=True)


class CollectionKeysServiceServicer(object):
    """Service for managing API keys for a serverless collection
    """

    def ListCollectionKeys(self, request, context):
        """ListCollectionKeys returns all API keys for a collection
        Required Permissions:
        - read:serverless_api_keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCollectionKey(self, request, context):
        """CreateCollectionKey creates a new API key for a collection
        Required Permissions:
        - write:serverless_api_keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollectionKey(self, request, context):
        """DeleteCollectionKey removes an API key from a collection
        Required Permissions:
        - write:serverless_api_keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectionKeysServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListCollectionKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCollectionKeys,
                    request_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.ListCollectionKeysRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.ListCollectionKeysResponse.SerializeToString,
            ),
            'CreateCollectionKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollectionKey,
                    request_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.CreateCollectionKeyRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.CreateCollectionKeyResponse.SerializeToString,
            ),
            'DeleteCollectionKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollectionKey,
                    request_deserializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.DeleteCollectionKeyRequest.FromString,
                    response_serializer=qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.DeleteCollectionKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.cloud.serverless.collections.v1.CollectionKeysService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.cloud.serverless.collections.v1.CollectionKeysService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollectionKeysService(object):
    """Service for managing API keys for a serverless collection
    """

    @staticmethod
    def ListCollectionKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.serverless.collections.v1.CollectionKeysService/ListCollectionKeys',
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.ListCollectionKeysRequest.SerializeToString,
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.ListCollectionKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCollectionKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.serverless.collections.v1.CollectionKeysService/CreateCollectionKey',
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.CreateCollectionKeyRequest.SerializeToString,
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.CreateCollectionKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollectionKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.cloud.serverless.collections.v1.CollectionKeysService/DeleteCollectionKey',
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.DeleteCollectionKeyRequest.SerializeToString,
            qdrant_dot_cloud_dot_serverless_dot_collections_dot_v1_dot_collection__keys__pb2.DeleteCollectionKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
